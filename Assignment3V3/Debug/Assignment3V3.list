
Assignment3V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006318  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080064a8  080064a8  000164a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800659c  0800659c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800659c  0800659c  0001659c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065a4  080065a4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065a4  080065a4  000165a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065a8  080065a8  000165a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080065ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000070  0800661c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  0800661c  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165c3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a1f  00000000  00000000  00036663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  00039088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  0003a3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f43  00000000  00000000  0003b650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fe7  00000000  00000000  0005f593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd518  00000000  00000000  0007357a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150a92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a60  00000000  00000000  00150ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006490 	.word	0x08006490

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006490 	.word	0x08006490

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fc9b 	bl	8000ea6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f826 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f9e0 	bl	8000938 <MX_GPIO_Init>
  MX_DMA_Init();
 8000578:	f000 f9c0 	bl	80008fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f98e 	bl	800089c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000580:	f000 f8b2 	bl	80006e8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000584:	f000 f916 	bl	80007b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000588:	4809      	ldr	r0, [pc, #36]	; (80005b0 <main+0x48>)
 800058a:	f003 fd05 	bl	8003f98 <HAL_TIM_Base_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800058e:	217f      	movs	r1, #127	; 0x7f
 8000590:	4808      	ldr	r0, [pc, #32]	; (80005b4 <main+0x4c>)
 8000592:	f001 fe2d 	bl	80021f0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, &myVar, 1);
 8000596:	2201      	movs	r2, #1
 8000598:	4907      	ldr	r1, [pc, #28]	; (80005b8 <main+0x50>)
 800059a:	4806      	ldr	r0, [pc, #24]	; (80005b4 <main+0x4c>)
 800059c:	f001 f82e 	bl	80015fc <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("ADC Value: %d \n\r", myVar);
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <main+0x50>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	4619      	mov	r1, r3
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <main+0x54>)
 80005aa:	f005 f81b 	bl	80055e4 <iprintf>
 80005ae:	e7f7      	b.n	80005a0 <main+0x38>
 80005b0:	20000148 	.word	0x20000148
 80005b4:	2000009c 	.word	0x2000009c
 80005b8:	2000008c 	.word	0x2000008c
 80005bc:	080064a8 	.word	0x080064a8

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b0ac      	sub	sp, #176	; 0xb0
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005ca:	2244      	movs	r2, #68	; 0x44
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f005 f800 	bl	80055d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2254      	movs	r2, #84	; 0x54
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f004 fff2 	bl	80055d4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f0:	f002 faea 	bl	8002bc8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005f4:	4b3b      	ldr	r3, [pc, #236]	; (80006e4 <SystemClock_Config+0x124>)
 80005f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005fa:	4a3a      	ldr	r2, [pc, #232]	; (80006e4 <SystemClock_Config+0x124>)
 80005fc:	f023 0318 	bic.w	r3, r3, #24
 8000600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000604:	2314      	movs	r3, #20
 8000606:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000618:	2360      	movs	r3, #96	; 0x60
 800061a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000624:	2301      	movs	r3, #1
 8000626:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800062a:	2301      	movs	r3, #1
 800062c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000630:	2310      	movs	r3, #16
 8000632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000636:	2307      	movs	r3, #7
 8000638:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fb2f 	bl	8002cb0 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000658:	f000 f9e2 	bl	8000a20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2303      	movs	r3, #3
 8000662:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000670:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000674:	2101      	movs	r1, #1
 8000676:	4618      	mov	r0, r3
 8000678:	f002 ff3a 	bl	80034f0 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000682:	f000 f9cd 	bl	8000a20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000686:	f244 0302 	movw	r3, #16386	; 0x4002
 800068a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800068c:	2300      	movs	r3, #0
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000690:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000694:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000696:	2301      	movs	r3, #1
 8000698:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800069a:	2301      	movs	r3, #1
 800069c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800069e:	2310      	movs	r3, #16
 80006a0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006a2:	2307      	movs	r3, #7
 80006a4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006b2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 f920 	bl	80038fc <HAL_RCCEx_PeriphCLKConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x106>
  {
    Error_Handler();
 80006c2:	f000 f9ad 	bl	8000a20 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ca:	f002 fa9b 	bl	8002c04 <HAL_PWREx_ControlVoltageScaling>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x118>
  {
    Error_Handler();
 80006d4:	f000 f9a4 	bl	8000a20 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006d8:	f003 fb04 	bl	8003ce4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006dc:	bf00      	nop
 80006de:	37b0      	adds	r7, #176	; 0xb0
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000

080006e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
 80006fc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006fe:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <MX_ADC1_Init+0xc0>)
 8000700:	4a2a      	ldr	r2, [pc, #168]	; (80007ac <MX_ADC1_Init+0xc4>)
 8000702:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000704:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <MX_ADC1_Init+0xc0>)
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800070a:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <MX_ADC1_Init+0xc0>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000710:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <MX_ADC1_Init+0xc0>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000716:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <MX_ADC1_Init+0xc0>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <MX_ADC1_Init+0xc0>)
 800071e:	2204      	movs	r2, #4
 8000720:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_ADC1_Init+0xc0>)
 8000724:	2200      	movs	r2, #0
 8000726:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_ADC1_Init+0xc0>)
 800072a:	2200      	movs	r2, #0
 800072c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800072e:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <MX_ADC1_Init+0xc0>)
 8000730:	2201      	movs	r2, #1
 8000732:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000734:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_ADC1_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_ADC1_Init+0xc0>)
 800073e:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8000742:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_ADC1_Init+0xc0>)
 8000746:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_ADC1_Init+0xc0>)
 800074e:	2201      	movs	r2, #1
 8000750:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_ADC1_Init+0xc0>)
 8000756:	2200      	movs	r2, #0
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_ADC1_Init+0xc0>)
 800075c:	2200      	movs	r2, #0
 800075e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000762:	4811      	ldr	r0, [pc, #68]	; (80007a8 <MX_ADC1_Init+0xc0>)
 8000764:	f000 fe02 	bl	800136c <HAL_ADC_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800076e:	f000 f957 	bl	8000a20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_ADC1_Init+0xc8>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000776:	2306      	movs	r3, #6
 8000778:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800077e:	237f      	movs	r3, #127	; 0x7f
 8000780:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000782:	2304      	movs	r3, #4
 8000784:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078a:	463b      	mov	r3, r7
 800078c:	4619      	mov	r1, r3
 800078e:	4806      	ldr	r0, [pc, #24]	; (80007a8 <MX_ADC1_Init+0xc0>)
 8000790:	f000 ffcc 	bl	800172c <HAL_ADC_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800079a:	f000 f941 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000009c 	.word	0x2000009c
 80007ac:	50040000 	.word	0x50040000
 80007b0:	2e300800 	.word	0x2e300800

080007b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08e      	sub	sp, #56	; 0x38
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d4:	463b      	mov	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
 80007e2:	615a      	str	r2, [r3, #20]
 80007e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e6:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <MX_TIM2_Init+0xe4>)
 80007e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320;
 80007ee:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <MX_TIM2_Init+0xe4>)
 80007f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b28      	ldr	r3, [pc, #160]	; (8000898 <MX_TIM2_Init+0xe4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80007fc:	4b26      	ldr	r3, [pc, #152]	; (8000898 <MX_TIM2_Init+0xe4>)
 80007fe:	2264      	movs	r2, #100	; 0x64
 8000800:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000802:	4b25      	ldr	r3, [pc, #148]	; (8000898 <MX_TIM2_Init+0xe4>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000808:	4b23      	ldr	r3, [pc, #140]	; (8000898 <MX_TIM2_Init+0xe4>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800080e:	4822      	ldr	r0, [pc, #136]	; (8000898 <MX_TIM2_Init+0xe4>)
 8000810:	f003 fb6a 	bl	8003ee8 <HAL_TIM_Base_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800081a:	f000 f901 	bl	8000a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000824:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000828:	4619      	mov	r1, r3
 800082a:	481b      	ldr	r0, [pc, #108]	; (8000898 <MX_TIM2_Init+0xe4>)
 800082c:	f003 fcd8 	bl	80041e0 <HAL_TIM_ConfigClockSource>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000836:	f000 f8f3 	bl	8000a20 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800083a:	4817      	ldr	r0, [pc, #92]	; (8000898 <MX_TIM2_Init+0xe4>)
 800083c:	f003 fbf8 	bl	8004030 <HAL_TIM_OC_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000846:	f000 f8eb 	bl	8000a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800084a:	2320      	movs	r3, #32
 800084c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	480f      	ldr	r0, [pc, #60]	; (8000898 <MX_TIM2_Init+0xe4>)
 800085a:	f004 f903 	bl	8004a64 <HAL_TIMEx_MasterConfigSynchronization>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000864:	f000 f8dc 	bl	8000a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000868:	2300      	movs	r3, #0
 800086a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	2204      	movs	r2, #4
 800087c:	4619      	mov	r1, r3
 800087e:	4806      	ldr	r0, [pc, #24]	; (8000898 <MX_TIM2_Init+0xe4>)
 8000880:	f003 fc38 	bl	80040f4 <HAL_TIM_OC_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800088a:	f000 f8c9 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	3738      	adds	r7, #56	; 0x38
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000148 	.word	0x20000148

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008a2:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <MX_USART2_UART_Init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008e0:	f004 f926 	bl	8004b30 <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ea:	f000 f899 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000194 	.word	0x20000194
 80008f8:	40004400 	.word	0x40004400

080008fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_DMA_Init+0x38>)
 8000904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000906:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <MX_DMA_Init+0x38>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6493      	str	r3, [r2, #72]	; 0x48
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_DMA_Init+0x38>)
 8000910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	200b      	movs	r0, #11
 8000920:	f001 fda1 	bl	8002466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000924:	200b      	movs	r0, #11
 8000926:	f001 fdba 	bl	800249e <HAL_NVIC_EnableIRQ>

}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <MX_GPIO_Init+0xb8>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a27      	ldr	r2, [pc, #156]	; (80009f0 <MX_GPIO_Init+0xb8>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <MX_GPIO_Init+0xb8>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_GPIO_Init+0xb8>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a21      	ldr	r2, [pc, #132]	; (80009f0 <MX_GPIO_Init+0xb8>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_GPIO_Init+0xb8>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_GPIO_Init+0xb8>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <MX_GPIO_Init+0xb8>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_GPIO_Init+0xb8>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2120      	movs	r1, #32
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f002 f8fb 	bl	8002b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2108      	movs	r1, #8
 80009a6:	4813      	ldr	r0, [pc, #76]	; (80009f4 <MX_GPIO_Init+0xbc>)
 80009a8:	f002 f8f6 	bl	8002b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009ac:	2320      	movs	r3, #32
 80009ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c6:	f001 ff7d 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80009ca:	2308      	movs	r3, #8
 80009cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4619      	mov	r1, r3
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_GPIO_Init+0xbc>)
 80009e2:	f001 ff6f 	bl	80028c4 <HAL_GPIO_Init>

}
 80009e6:	bf00      	nop
 80009e8:	3720      	adds	r7, #32
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000
 80009f4:	48000400 	.word	0x48000400

080009f8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	// Small pulse each time
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2120      	movs	r1, #32
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a08:	f002 f8c6 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2120      	movs	r1, #32
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a14:	f002 f8c0 	bl	8002b98 <HAL_GPIO_WritePin>
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <Error_Handler+0x8>
	...

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <HAL_MspInit+0x44>)
 8000a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a36:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <HAL_MspInit+0x44>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <HAL_MspInit+0x44>)
 8000a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_MspInit+0x44>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <HAL_MspInit+0x44>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6593      	str	r3, [r2, #88]	; 0x58
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_MspInit+0x44>)
 8000a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000

08000a74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a2b      	ldr	r2, [pc, #172]	; (8000b40 <HAL_ADC_MspInit+0xcc>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d14f      	bne.n	8000b36 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a96:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <HAL_ADC_MspInit+0xd0>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	4a2a      	ldr	r2, [pc, #168]	; (8000b44 <HAL_ADC_MspInit+0xd0>)
 8000a9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <HAL_ADC_MspInit+0xd0>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <HAL_ADC_MspInit+0xd0>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	4a24      	ldr	r2, [pc, #144]	; (8000b44 <HAL_ADC_MspInit+0xd0>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aba:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <HAL_ADC_MspInit+0xd0>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ac6:	2340      	movs	r3, #64	; 0x40
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000aca:	230b      	movs	r3, #11
 8000acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000adc:	f001 fef2 	bl	80028c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000ae2:	4a1a      	ldr	r2, [pc, #104]	; (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000ae4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000b10:	2220      	movs	r2, #32
 8000b12:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b1a:	480b      	ldr	r0, [pc, #44]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000b1c:	f001 fcda 	bl	80024d4 <HAL_DMA_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000b26:	f7ff ff7b 	bl	8000a20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000b2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b30:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	50040000 	.word	0x50040000
 8000b44:	40021000 	.word	0x40021000
 8000b48:	20000100 	.word	0x20000100
 8000b4c:	40020008 	.word	0x40020008

08000b50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b60:	d10b      	bne.n	8000b7a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_TIM_Base_MspInit+0x38>)
 8000b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b66:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <HAL_TIM_Base_MspInit+0x38>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_TIM_Base_MspInit+0x38>)
 8000b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000

08000b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a20      	ldr	r2, [pc, #128]	; (8000c2c <HAL_UART_MspInit+0xa0>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d13a      	bne.n	8000c24 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <HAL_UART_MspInit+0xa4>)
 8000bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb2:	4a1f      	ldr	r2, [pc, #124]	; (8000c30 <HAL_UART_MspInit+0xa4>)
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bba:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <HAL_UART_MspInit+0xa4>)
 8000bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <HAL_UART_MspInit+0xa4>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <HAL_UART_MspInit+0xa4>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_UART_MspInit+0xa4>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000bde:	2304      	movs	r3, #4
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f001 fe62 	bl	80028c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000c12:	2303      	movs	r3, #3
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c20:	f001 fe50 	bl	80028c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40004400 	.word	0x40004400
 8000c30:	40021000 	.word	0x40021000

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <NMI_Handler+0x4>

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c80:	f000 f966 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <DMA1_Channel1_IRQHandler+0x10>)
 8000c8e:	f001 fd39 	bl	8002704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000100 	.word	0x20000100

08000c9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8000ca8:	2301      	movs	r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <_read+0x38>)
 8000cb8:	f004 f81c 	bl	8004cf4 <HAL_UART_Receive>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	607b      	str	r3, [r7, #4]

	return len;
 8000cc8:	687b      	ldr	r3, [r7, #4]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000194 	.word	0x20000194

08000cd8 <_write>:

int _write(int file, char *ptr, int len)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	4809      	ldr	r0, [pc, #36]	; (8000d18 <_write+0x40>)
 8000cf4:	f003 ff6a 	bl	8004bcc <HAL_UART_Transmit>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d002      	beq.n	8000d08 <_write+0x30>
 8000d02:	7dfb      	ldrb	r3, [r7, #23]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d101      	bne.n	8000d0c <_write+0x34>
	{
		Error_Handler();
 8000d08:	f7ff fe8a 	bl	8000a20 <Error_Handler>
	}

	return len;
 8000d0c:	687b      	ldr	r3, [r7, #4]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000194 	.word	0x20000194

08000d1c <_close>:



int _close(int file)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	return -1;
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d44:	605a      	str	r2, [r3, #4]
	return 0;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <_isatty>:

int _isatty(int file)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	return 1;
 8000d5c:	2301      	movs	r3, #1
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
	return 0;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <_sbrk+0x5c>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <_sbrk+0x60>)
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <_sbrk+0x64>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <_sbrk+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d207      	bcs.n	8000dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db4:	f004 fbe4 	bl	8005580 <__errno>
 8000db8:	4603      	mov	r3, r0
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <_sbrk+0x64>)
 8000dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20010000 	.word	0x20010000
 8000de4:	00000400 	.word	0x00000400
 8000de8:	20000090 	.word	0x20000090
 8000dec:	20000230 	.word	0x20000230

08000df0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000df4:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <SystemInit+0x5c>)
 8000df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfa:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <SystemInit+0x5c>)
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <SystemInit+0x60>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a11      	ldr	r2, [pc, #68]	; (8000e50 <SystemInit+0x60>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <SystemInit+0x60>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <SystemInit+0x60>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <SystemInit+0x60>)
 8000e1c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e20:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e24:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <SystemInit+0x60>)
 8000e28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e2c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <SystemInit+0x60>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <SystemInit+0x60>)
 8000e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SystemInit+0x60>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00
 8000e50:	40021000 	.word	0x40021000

08000e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e58:	f7ff ffca 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e5e:	e003      	b.n	8000e68 <LoopCopyDataInit>

08000e60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e66:	3104      	adds	r1, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e68:	480a      	ldr	r0, [pc, #40]	; (8000e94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e70:	d3f6      	bcc.n	8000e60 <CopyDataInit>
	ldr	r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e74:	e002      	b.n	8000e7c <LoopFillZerobss>

08000e76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e78:	f842 3b04 	str.w	r3, [r2], #4

08000e7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <LoopForever+0x16>)
	cmp	r2, r3
 8000e7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e80:	d3f9      	bcc.n	8000e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f004 fb83 	bl	800558c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e86:	f7ff fb6f 	bl	8000568 <main>

08000e8a <LoopForever>:

LoopForever:
    b LoopForever
 8000e8a:	e7fe      	b.n	8000e8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e8c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000e90:	080065ac 	.word	0x080065ac
	ldr	r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e98:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000e9c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000ea0:	2000022c 	.word	0x2000022c

08000ea4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC1_IRQHandler>

08000ea6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f001 facd 	bl	8002450 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f80e 	bl	8000ed8 <HAL_InitTick>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d002      	beq.n	8000ec8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	71fb      	strb	r3, [r7, #7]
 8000ec6:	e001      	b.n	8000ecc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ec8:	f7ff fdb0 	bl	8000a2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_InitTick+0x6c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d023      	beq.n	8000f34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <HAL_InitTick+0x70>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <HAL_InitTick+0x6c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 fad9 	bl	80024ba <HAL_SYSTICK_Config>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10f      	bne.n	8000f2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d809      	bhi.n	8000f28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f001 faa3 	bl	8002466 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_InitTick+0x74>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e007      	b.n	8000f38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e004      	b.n	8000f38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	e001      	b.n	8000f38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	20000004 	.word	0x20000004

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000218 	.word	0x20000218

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000218 	.word	0x20000218

08000f90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	609a      	str	r2, [r3, #8]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3360      	adds	r3, #96	; 0x60
 800100a:	461a      	mov	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <LL_ADC_SetOffset+0x44>)
 800101a:	4013      	ands	r3, r2
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	4313      	orrs	r3, r2
 8001028:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001030:	bf00      	nop
 8001032:	371c      	adds	r7, #28
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	03fff000 	.word	0x03fff000

08001040 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3360      	adds	r3, #96	; 0x60
 800104e:	461a      	mov	r2, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3360      	adds	r3, #96	; 0x60
 800107c:	461a      	mov	r2, r3
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	431a      	orrs	r2, r3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001096:	bf00      	nop
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	3330      	adds	r3, #48	; 0x30
 80010d8:	461a      	mov	r2, r3
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	4413      	add	r3, r2
 80010e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f003 031f 	and.w	r3, r3, #31
 80010f2:	211f      	movs	r1, #31
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	401a      	ands	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	0e9b      	lsrs	r3, r3, #26
 8001100:	f003 011f 	and.w	r1, r3, #31
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	f003 031f 	and.w	r3, r3, #31
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	431a      	orrs	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001114:	bf00      	nop
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3314      	adds	r3, #20
 8001130:	461a      	mov	r2, r3
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	0e5b      	lsrs	r3, r3, #25
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	4413      	add	r3, r2
 800113e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	0d1b      	lsrs	r3, r3, #20
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	2107      	movs	r1, #7
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	401a      	ands	r2, r3
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	0d1b      	lsrs	r3, r3, #20
 800115a:	f003 031f 	and.w	r3, r3, #31
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	431a      	orrs	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800116a:	bf00      	nop
 800116c:	371c      	adds	r7, #28
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001190:	43db      	mvns	r3, r3
 8001192:	401a      	ands	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0318 	and.w	r3, r3, #24
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800119c:	40d9      	lsrs	r1, r3
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	400b      	ands	r3, r1
 80011a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011a6:	431a      	orrs	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	0007ffff 	.word	0x0007ffff

080011c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	6093      	str	r3, [r2, #8]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011f8:	d101      	bne.n	80011fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800121c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001220:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001244:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001248:	d101      	bne.n	800124e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800126c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001270:	f043 0201 	orr.w	r2, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001294:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001298:	f043 0202 	orr.w	r2, r3, #2
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d101      	bne.n	80012c4 <LL_ADC_IsEnabled+0x18>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <LL_ADC_IsEnabled+0x1a>
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d101      	bne.n	80012ea <LL_ADC_IsDisableOngoing+0x18>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <LL_ADC_IsDisableOngoing+0x1a>
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001308:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800130c:	f043 0204 	orr.w	r2, r3, #4
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b04      	cmp	r3, #4
 8001332:	d101      	bne.n	8001338 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b08      	cmp	r3, #8
 8001358:	d101      	bne.n	800135e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e12c      	b.n	80015e0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001390:	2b00      	cmp	r3, #0
 8001392:	d109      	bne.n	80013a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff fb6d 	bl	8000a74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff19 	bl	80011e4 <LL_ADC_IsDeepPowerDownEnabled>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d004      	beq.n	80013c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff feff 	bl	80011c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff34 	bl	8001234 <LL_ADC_IsInternalRegulatorEnabled>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d115      	bne.n	80013fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff18 	bl	800120c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013dc:	4b82      	ldr	r3, [pc, #520]	; (80015e8 <HAL_ADC_Init+0x27c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	099b      	lsrs	r3, r3, #6
 80013e2:	4a82      	ldr	r2, [pc, #520]	; (80015ec <HAL_ADC_Init+0x280>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	099b      	lsrs	r3, r3, #6
 80013ea:	3301      	adds	r3, #1
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013f0:	e002      	b.n	80013f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f9      	bne.n	80013f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff16 	bl	8001234 <LL_ADC_IsInternalRegulatorEnabled>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10d      	bne.n	800142a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001412:	f043 0210 	orr.w	r2, r3, #16
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141e:	f043 0201 	orr.w	r2, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff76 	bl	8001320 <LL_ADC_REG_IsConversionOngoing>
 8001434:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	2b00      	cmp	r3, #0
 8001440:	f040 80c5 	bne.w	80015ce <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f040 80c1 	bne.w	80015ce <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001450:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001454:	f043 0202 	orr.w	r2, r3, #2
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff23 	bl	80012ac <LL_ADC_IsEnabled>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10b      	bne.n	8001484 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800146c:	4860      	ldr	r0, [pc, #384]	; (80015f0 <HAL_ADC_Init+0x284>)
 800146e:	f7ff ff1d 	bl	80012ac <LL_ADC_IsEnabled>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d105      	bne.n	8001484 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4619      	mov	r1, r3
 800147e:	485d      	ldr	r0, [pc, #372]	; (80015f4 <HAL_ADC_Init+0x288>)
 8001480:	f7ff fd86 	bl	8000f90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7e5b      	ldrb	r3, [r3, #25]
 8001488:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800148e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001494:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800149a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d106      	bne.n	80014c0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	3b01      	subs	r3, #1
 80014b8:	045b      	lsls	r3, r3, #17
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d009      	beq.n	80014dc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014cc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	4b45      	ldr	r3, [pc, #276]	; (80015f8 <HAL_ADC_Init+0x28c>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	69b9      	ldr	r1, [r7, #24]
 80014ec:	430b      	orrs	r3, r1
 80014ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff13 	bl	8001320 <LL_ADC_REG_IsConversionOngoing>
 80014fa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff20 	bl	8001346 <LL_ADC_INJ_IsConversionOngoing>
 8001506:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d13d      	bne.n	800158a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d13a      	bne.n	800158a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001518:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001520:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001530:	f023 0302 	bic.w	r3, r3, #2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	69b9      	ldr	r1, [r7, #24]
 800153a:	430b      	orrs	r3, r1
 800153c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001544:	2b01      	cmp	r3, #1
 8001546:	d118      	bne.n	800157a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001552:	f023 0304 	bic.w	r3, r3, #4
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800155e:	4311      	orrs	r1, r2
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001564:	4311      	orrs	r1, r2
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800156a:	430a      	orrs	r2, r1
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0201 	orr.w	r2, r2, #1
 8001576:	611a      	str	r2, [r3, #16]
 8001578:	e007      	b.n	800158a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0201 	bic.w	r2, r2, #1
 8001588:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d10c      	bne.n	80015ac <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	f023 010f 	bic.w	r1, r3, #15
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	1e5a      	subs	r2, r3, #1
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	631a      	str	r2, [r3, #48]	; 0x30
 80015aa:	e007      	b.n	80015bc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 020f 	bic.w	r2, r2, #15
 80015ba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c0:	f023 0303 	bic.w	r3, r3, #3
 80015c4:	f043 0201 	orr.w	r2, r3, #1
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	655a      	str	r2, [r3, #84]	; 0x54
 80015cc:	e007      	b.n	80015de <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d2:	f043 0210 	orr.w	r2, r3, #16
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015de:	7ffb      	ldrb	r3, [r7, #31]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000000 	.word	0x20000000
 80015ec:	053e2d63 	.word	0x053e2d63
 80015f0:	50040000 	.word	0x50040000
 80015f4:	50040300 	.word	0x50040300
 80015f8:	fff0c007 	.word	0xfff0c007

080015fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fe87 	bl	8001320 <LL_ADC_REG_IsConversionOngoing>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d167      	bne.n	80016e8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800161e:	2b01      	cmp	r3, #1
 8001620:	d101      	bne.n	8001626 <HAL_ADC_Start_DMA+0x2a>
 8001622:	2302      	movs	r3, #2
 8001624:	e063      	b.n	80016ee <HAL_ADC_Start_DMA+0xf2>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 fc5c 	bl	8001eec <ADC_Enable>
 8001634:	4603      	mov	r3, r0
 8001636:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d14f      	bne.n	80016de <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001642:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001646:	f023 0301 	bic.w	r3, r3, #1
 800164a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001656:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d006      	beq.n	800166c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001662:	f023 0206 	bic.w	r2, r3, #6
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	659a      	str	r2, [r3, #88]	; 0x58
 800166a:	e002      	b.n	8001672 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	4a20      	ldr	r2, [pc, #128]	; (80016f8 <HAL_ADC_Start_DMA+0xfc>)
 8001678:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	4a1f      	ldr	r2, [pc, #124]	; (80016fc <HAL_ADC_Start_DMA+0x100>)
 8001680:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	4a1e      	ldr	r2, [pc, #120]	; (8001700 <HAL_ADC_Start_DMA+0x104>)
 8001688:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	221c      	movs	r2, #28
 8001690:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0210 	orr.w	r2, r2, #16
 80016a8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f042 0201 	orr.w	r2, r2, #1
 80016b8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3340      	adds	r3, #64	; 0x40
 80016c4:	4619      	mov	r1, r3
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f000 ffbb 	bl	8002644 <HAL_DMA_Start_IT>
 80016ce:	4603      	mov	r3, r0
 80016d0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fe0e 	bl	80012f8 <LL_ADC_REG_StartConversion>
 80016dc:	e006      	b.n	80016ec <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80016e6:	e001      	b.n	80016ec <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016e8:	2302      	movs	r3, #2
 80016ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	0800206f 	.word	0x0800206f
 80016fc:	08002147 	.word	0x08002147
 8001700:	08002163 	.word	0x08002163

08001704 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b0b6      	sub	sp, #216	; 0xd8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_ADC_ConfigChannel+0x22>
 800174a:	2302      	movs	r3, #2
 800174c:	e3b9      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x796>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fde0 	bl	8001320 <LL_ADC_REG_IsConversionOngoing>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	f040 839e 	bne.w	8001ea4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d824      	bhi.n	80017ba <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	3b02      	subs	r3, #2
 8001776:	2b03      	cmp	r3, #3
 8001778:	d81b      	bhi.n	80017b2 <HAL_ADC_ConfigChannel+0x86>
 800177a:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <HAL_ADC_ConfigChannel+0x54>)
 800177c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001780:	08001791 	.word	0x08001791
 8001784:	08001799 	.word	0x08001799
 8001788:	080017a1 	.word	0x080017a1
 800178c:	080017a9 	.word	0x080017a9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	220c      	movs	r2, #12
 8001794:	605a      	str	r2, [r3, #4]
          break;
 8001796:	e011      	b.n	80017bc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2212      	movs	r2, #18
 800179c:	605a      	str	r2, [r3, #4]
          break;
 800179e:	e00d      	b.n	80017bc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	2218      	movs	r2, #24
 80017a4:	605a      	str	r2, [r3, #4]
          break;
 80017a6:	e009      	b.n	80017bc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ae:	605a      	str	r2, [r3, #4]
          break;
 80017b0:	e004      	b.n	80017bc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2206      	movs	r2, #6
 80017b6:	605a      	str	r2, [r3, #4]
          break;
 80017b8:	e000      	b.n	80017bc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80017ba:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	6859      	ldr	r1, [r3, #4]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	f7ff fc7d 	bl	80010c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fda4 	bl	8001320 <LL_ADC_REG_IsConversionOngoing>
 80017d8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fdb0 	bl	8001346 <LL_ADC_INJ_IsConversionOngoing>
 80017e6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f040 81a6 	bne.w	8001b40 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f040 81a1 	bne.w	8001b40 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	6819      	ldr	r1, [r3, #0]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	461a      	mov	r2, r3
 800180c:	f7ff fc88 	bl	8001120 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	08db      	lsrs	r3, r3, #3
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	2b04      	cmp	r3, #4
 8001830:	d00a      	beq.n	8001848 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	6919      	ldr	r1, [r3, #16]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001842:	f7ff fbd9 	bl	8000ff8 <LL_ADC_SetOffset>
 8001846:	e17b      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fbf6 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001854:	4603      	mov	r3, r0
 8001856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10a      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x148>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fbeb 	bl	8001040 <LL_ADC_GetOffsetChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	0e9b      	lsrs	r3, r3, #26
 800186e:	f003 021f 	and.w	r2, r3, #31
 8001872:	e01e      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x186>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fbe0 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001880:	4603      	mov	r3, r0
 8001882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001892:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001896:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800189a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80018a2:	2320      	movs	r3, #32
 80018a4:	e004      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80018a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018aa:	fab3 f383 	clz	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d105      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x19e>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	0e9b      	lsrs	r3, r3, #26
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	e018      	b.n	80018fc <HAL_ADC_ConfigChannel+0x1d0>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018d6:	fa93 f3a3 	rbit	r3, r3
 80018da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80018de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80018e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80018ee:	2320      	movs	r3, #32
 80018f0:	e004      	b.n	80018fc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80018f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d106      	bne.n	800190e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2200      	movs	r2, #0
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fbaf 	bl	800106c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2101      	movs	r1, #1
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fb93 	bl	8001040 <LL_ADC_GetOffsetChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10a      	bne.n	800193a <HAL_ADC_ConfigChannel+0x20e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2101      	movs	r1, #1
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fb88 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001930:	4603      	mov	r3, r0
 8001932:	0e9b      	lsrs	r3, r3, #26
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	e01e      	b.n	8001978 <HAL_ADC_ConfigChannel+0x24c>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2101      	movs	r1, #1
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fb7d 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001946:	4603      	mov	r3, r0
 8001948:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001958:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800195c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001960:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001968:	2320      	movs	r3, #32
 800196a:	e004      	b.n	8001976 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800196c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x264>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	0e9b      	lsrs	r3, r3, #26
 800198a:	f003 031f 	and.w	r3, r3, #31
 800198e:	e018      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x296>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800199c:	fa93 f3a3 	rbit	r3, r3
 80019a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80019a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80019ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80019b4:	2320      	movs	r3, #32
 80019b6:	e004      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80019b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d106      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2200      	movs	r2, #0
 80019cc:	2101      	movs	r1, #1
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fb4c 	bl	800106c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2102      	movs	r1, #2
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fb30 	bl	8001040 <LL_ADC_GetOffsetChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10a      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x2d4>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2102      	movs	r1, #2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fb25 	bl	8001040 <LL_ADC_GetOffsetChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	0e9b      	lsrs	r3, r3, #26
 80019fa:	f003 021f 	and.w	r2, r3, #31
 80019fe:	e01e      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x312>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2102      	movs	r1, #2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fb1a 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001a2e:	2320      	movs	r3, #32
 8001a30:	e004      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001a32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a36:	fab3 f383 	clz	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d105      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x32a>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	0e9b      	lsrs	r3, r3, #26
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	e016      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x358>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a62:	fa93 f3a3 	rbit	r3, r3
 8001a66:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001a68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001a6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001a76:	2320      	movs	r3, #32
 8001a78:	e004      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001a7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d106      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2102      	movs	r1, #2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff faeb 	bl	800106c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2103      	movs	r1, #3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff facf 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10a      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x396>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2103      	movs	r1, #3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fac4 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	0e9b      	lsrs	r3, r3, #26
 8001abc:	f003 021f 	and.w	r2, r3, #31
 8001ac0:	e017      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x3c6>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2103      	movs	r1, #3
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fab9 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ad4:	fa93 f3a3 	rbit	r3, r3
 8001ad8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001adc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ade:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001ae4:	2320      	movs	r3, #32
 8001ae6:	e003      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d105      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x3de>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	0e9b      	lsrs	r3, r3, #26
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	e011      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x402>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001b22:	2320      	movs	r3, #32
 8001b24:	e003      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b28:	fab3 f383 	clz	r3, r3
 8001b2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d106      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2200      	movs	r2, #0
 8001b38:	2103      	movs	r1, #3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fa96 	bl	800106c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fbb1 	bl	80012ac <LL_ADC_IsEnabled>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f040 813f 	bne.w	8001dd0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6819      	ldr	r1, [r3, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f7ff fb0a 	bl	8001178 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4a8e      	ldr	r2, [pc, #568]	; (8001da4 <HAL_ADC_ConfigChannel+0x678>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	f040 8130 	bne.w	8001dd0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10b      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x46c>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0e9b      	lsrs	r3, r3, #26
 8001b86:	3301      	adds	r3, #1
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	2b09      	cmp	r3, #9
 8001b8e:	bf94      	ite	ls
 8001b90:	2301      	movls	r3, #1
 8001b92:	2300      	movhi	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	e019      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x4a0>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ba0:	fa93 f3a3 	rbit	r3, r3
 8001ba4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ba8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001bb0:	2320      	movs	r3, #32
 8001bb2:	e003      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001bb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bb6:	fab3 f383 	clz	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	2b09      	cmp	r3, #9
 8001bc4:	bf94      	ite	ls
 8001bc6:	2301      	movls	r3, #1
 8001bc8:	2300      	movhi	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d079      	beq.n	8001cc4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d107      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x4c0>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	0e9b      	lsrs	r3, r3, #26
 8001be2:	3301      	adds	r3, #1
 8001be4:	069b      	lsls	r3, r3, #26
 8001be6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bea:	e015      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x4ec>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bfc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001c04:	2320      	movs	r3, #32
 8001c06:	e003      	b.n	8001c10 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	3301      	adds	r3, #1
 8001c12:	069b      	lsls	r3, r3, #26
 8001c14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x50c>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	0e9b      	lsrs	r3, r3, #26
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	2101      	movs	r1, #1
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	e017      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x53c>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001c50:	2320      	movs	r3, #32
 8001c52:	e003      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f003 031f 	and.w	r3, r3, #31
 8001c62:	2101      	movs	r1, #1
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	ea42 0103 	orr.w	r1, r2, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10a      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x562>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	0e9b      	lsrs	r3, r3, #26
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f003 021f 	and.w	r2, r3, #31
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	051b      	lsls	r3, r3, #20
 8001c8c:	e018      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x594>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	e003      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	e080      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d107      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x5b4>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0e9b      	lsrs	r3, r3, #26
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	069b      	lsls	r3, r3, #26
 8001cda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cde:	e015      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x5e0>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce8:	fa93 f3a3 	rbit	r3, r3
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001cf8:	2320      	movs	r3, #32
 8001cfa:	e003      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfe:	fab3 f383 	clz	r3, r3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	3301      	adds	r3, #1
 8001d06:	069b      	lsls	r3, r3, #26
 8001d08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d109      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x600>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	0e9b      	lsrs	r3, r3, #26
 8001d1e:	3301      	adds	r3, #1
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	2101      	movs	r1, #1
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	e017      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x630>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	61fb      	str	r3, [r7, #28]
  return result;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001d44:	2320      	movs	r3, #32
 8001d46:	e003      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	3301      	adds	r3, #1
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	2101      	movs	r1, #1
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	ea42 0103 	orr.w	r1, r2, r3
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10d      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x65c>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	0e9b      	lsrs	r3, r3, #26
 8001d72:	3301      	adds	r3, #1
 8001d74:	f003 021f 	and.w	r2, r3, #31
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3b1e      	subs	r3, #30
 8001d80:	051b      	lsls	r3, r3, #20
 8001d82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d86:	e01d      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x698>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	fa93 f3a3 	rbit	r3, r3
 8001d94:	613b      	str	r3, [r7, #16]
  return result;
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d103      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001da0:	2320      	movs	r3, #32
 8001da2:	e005      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x684>
 8001da4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	3301      	adds	r3, #1
 8001db2:	f003 021f 	and.w	r2, r3, #31
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	3b1e      	subs	r3, #30
 8001dbe:	051b      	lsls	r3, r3, #20
 8001dc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dc4:	430b      	orrs	r3, r1
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	6892      	ldr	r2, [r2, #8]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f7ff f9a8 	bl	8001120 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <HAL_ADC_ConfigChannel+0x7a0>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d06c      	beq.n	8001eb6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ddc:	483c      	ldr	r0, [pc, #240]	; (8001ed0 <HAL_ADC_ConfigChannel+0x7a4>)
 8001dde:	f7ff f8fd 	bl	8000fdc <LL_ADC_GetCommonPathInternalCh>
 8001de2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a3a      	ldr	r2, [pc, #232]	; (8001ed4 <HAL_ADC_ConfigChannel+0x7a8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d127      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001df0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d121      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a35      	ldr	r2, [pc, #212]	; (8001ed8 <HAL_ADC_ConfigChannel+0x7ac>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d157      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e0e:	4619      	mov	r1, r3
 8001e10:	482f      	ldr	r0, [pc, #188]	; (8001ed0 <HAL_ADC_ConfigChannel+0x7a4>)
 8001e12:	f7ff f8d0 	bl	8000fb6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e16:	4b31      	ldr	r3, [pc, #196]	; (8001edc <HAL_ADC_ConfigChannel+0x7b0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	099b      	lsrs	r3, r3, #6
 8001e1c:	4a30      	ldr	r2, [pc, #192]	; (8001ee0 <HAL_ADC_ConfigChannel+0x7b4>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e30:	e002      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f9      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e3e:	e03a      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a27      	ldr	r2, [pc, #156]	; (8001ee4 <HAL_ADC_ConfigChannel+0x7b8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d113      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x746>
 8001e4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10d      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <HAL_ADC_ConfigChannel+0x7ac>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d12a      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4819      	ldr	r0, [pc, #100]	; (8001ed0 <HAL_ADC_ConfigChannel+0x7a4>)
 8001e6c:	f7ff f8a3 	bl	8000fb6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e70:	e021      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d11c      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d116      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <HAL_ADC_ConfigChannel+0x7ac>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d111      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480c      	ldr	r0, [pc, #48]	; (8001ed0 <HAL_ADC_ConfigChannel+0x7a4>)
 8001e9e:	f7ff f88a 	bl	8000fb6 <LL_ADC_SetCommonPathInternalCh>
 8001ea2:	e008      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea8:	f043 0220 	orr.w	r2, r3, #32
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ebe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	37d8      	adds	r7, #216	; 0xd8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	80080000 	.word	0x80080000
 8001ed0:	50040300 	.word	0x50040300
 8001ed4:	c7520000 	.word	0xc7520000
 8001ed8:	50040000 	.word	0x50040000
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	053e2d63 	.word	0x053e2d63
 8001ee4:	cb840000 	.word	0xcb840000
 8001ee8:	80000001 	.word	0x80000001

08001eec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff f9d7 	bl	80012ac <LL_ADC_IsEnabled>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d14d      	bne.n	8001fa0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	4b28      	ldr	r3, [pc, #160]	; (8001fac <ADC_Enable+0xc0>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00d      	beq.n	8001f2e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f16:	f043 0210 	orr.w	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	f043 0201 	orr.w	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e039      	b.n	8001fa2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff f992 	bl	800125c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f38:	f7ff f81e 	bl	8000f78 <HAL_GetTick>
 8001f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f3e:	e028      	b.n	8001f92 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff f9b1 	bl	80012ac <LL_ADC_IsEnabled>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d104      	bne.n	8001f5a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff f981 	bl	800125c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f5a:	f7ff f80d 	bl	8000f78 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d914      	bls.n	8001f92 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d00d      	beq.n	8001f92 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7a:	f043 0210 	orr.w	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	f043 0201 	orr.w	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e007      	b.n	8001fa2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d1cf      	bne.n	8001f40 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	8000003f 	.word	0x8000003f

08001fb0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff f988 	bl	80012d2 <LL_ADC_IsDisableOngoing>
 8001fc2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff f96f 	bl	80012ac <LL_ADC_IsEnabled>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d047      	beq.n	8002064 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d144      	bne.n	8002064 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 030d 	and.w	r3, r3, #13
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d10c      	bne.n	8002002 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff f949 	bl	8001284 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ffa:	f7fe ffbd 	bl	8000f78 <HAL_GetTick>
 8001ffe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002000:	e029      	b.n	8002056 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f043 0210 	orr.w	r2, r3, #16
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e023      	b.n	8002066 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800201e:	f7fe ffab 	bl	8000f78 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d914      	bls.n	8002056 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00d      	beq.n	8002056 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203e:	f043 0210 	orr.w	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204a:	f043 0201 	orr.w	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e007      	b.n	8002066 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1dc      	bne.n	800201e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002084:	2b00      	cmp	r3, #0
 8002086:	d14b      	bne.n	8002120 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d021      	beq.n	80020e6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fffb 	bl	80010a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d032      	beq.n	8002118 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d12b      	bne.n	8002118 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d11f      	bne.n	8002118 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020dc:	f043 0201 	orr.w	r2, r3, #1
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	655a      	str	r2, [r3, #84]	; 0x54
 80020e4:	e018      	b.n	8002118 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d111      	bne.n	8002118 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d105      	bne.n	8002118 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002110:	f043 0201 	orr.w	r2, r3, #1
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f7fe fc6d 	bl	80009f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800211e:	e00e      	b.n	800213e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f7ff faf3 	bl	8001718 <HAL_ADC_ErrorCallback>
}
 8002132:	e004      	b.n	800213e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	4798      	blx	r3
}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f7ff fad5 	bl	8001704 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	f043 0204 	orr.w	r2, r3, #4
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f7ff fac5 	bl	8001718 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <LL_ADC_StartCalibration>:
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80021a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	609a      	str	r2, [r3, #8]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_IsCalibrationOnGoing>:
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021dc:	d101      	bne.n	80021e2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_ADCEx_Calibration_Start+0x1c>
 8002208:	2302      	movs	r3, #2
 800220a:	e04d      	b.n	80022a8 <HAL_ADCEx_Calibration_Start+0xb8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff fecb 	bl	8001fb0 <ADC_Disable>
 800221a:	4603      	mov	r3, r0
 800221c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d136      	bne.n	8002292 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002228:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800222c:	f023 0302 	bic.w	r3, r3, #2
 8002230:	f043 0202 	orr.w	r2, r3, #2
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6839      	ldr	r1, [r7, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ffa9 	bl	8002196 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002244:	e014      	b.n	8002270 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	3301      	adds	r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002252:	d30d      	bcc.n	8002270 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f023 0312 	bic.w	r3, r3, #18
 800225c:	f043 0210 	orr.w	r2, r3, #16
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e01b      	b.n	80022a8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ffa7 	bl	80021c8 <LL_ADC_IsCalibrationOnGoing>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1e2      	bne.n	8002246 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002284:	f023 0303 	bic.w	r3, r3, #3
 8002288:	f043 0201 	orr.w	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	655a      	str	r2, [r3, #84]	; 0x54
 8002290:	e005      	b.n	800229e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002296:	f043 0210 	orr.w	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e2:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60d3      	str	r3, [r2, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <__NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db0b      	blt.n	800233e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4907      	ldr	r1, [pc, #28]	; (800234c <__NVIC_EnableIRQ+0x38>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2001      	movs	r0, #1
 8002336:	fa00 f202 	lsl.w	r2, r0, r2
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000e100 	.word	0xe000e100

08002350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0a      	blt.n	800237a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	490c      	ldr	r1, [pc, #48]	; (800239c <__NVIC_SetPriority+0x4c>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	440b      	add	r3, r1
 8002374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002378:	e00a      	b.n	8002390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4908      	ldr	r1, [pc, #32]	; (80023a0 <__NVIC_SetPriority+0x50>)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3b04      	subs	r3, #4
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	440b      	add	r3, r1
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000e100 	.word	0xe000e100
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f1c3 0307 	rsb	r3, r3, #7
 80023be:	2b04      	cmp	r3, #4
 80023c0:	bf28      	it	cs
 80023c2:	2304      	movcs	r3, #4
 80023c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d902      	bls.n	80023d4 <NVIC_EncodePriority+0x30>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3b03      	subs	r3, #3
 80023d2:	e000      	b.n	80023d6 <NVIC_EncodePriority+0x32>
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	401a      	ands	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	43d9      	mvns	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	4313      	orrs	r3, r2
         );
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	; 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800241c:	d301      	bcc.n	8002422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800241e:	2301      	movs	r3, #1
 8002420:	e00f      	b.n	8002442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002422:	4a0a      	ldr	r2, [pc, #40]	; (800244c <SysTick_Config+0x40>)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800242a:	210f      	movs	r1, #15
 800242c:	f04f 30ff 	mov.w	r0, #4294967295
 8002430:	f7ff ff8e 	bl	8002350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <SysTick_Config+0x40>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243a:	4b04      	ldr	r3, [pc, #16]	; (800244c <SysTick_Config+0x40>)
 800243c:	2207      	movs	r2, #7
 800243e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	e000e010 	.word	0xe000e010

08002450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff29 	bl	80022b0 <__NVIC_SetPriorityGrouping>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002478:	f7ff ff3e 	bl	80022f8 <__NVIC_GetPriorityGrouping>
 800247c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	6978      	ldr	r0, [r7, #20]
 8002484:	f7ff ff8e 	bl	80023a4 <NVIC_EncodePriority>
 8002488:	4602      	mov	r2, r0
 800248a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff5d 	bl	8002350 <__NVIC_SetPriority>
}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff31 	bl	8002314 <__NVIC_EnableIRQ>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ffa2 	bl	800240c <SysTick_Config>
 80024c8:	4603      	mov	r3, r0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e098      	b.n	8002618 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b4d      	ldr	r3, [pc, #308]	; (8002624 <HAL_DMA_Init+0x150>)
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d80f      	bhi.n	8002512 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <HAL_DMA_Init+0x154>)
 80024fa:	4413      	add	r3, r2
 80024fc:	4a4b      	ldr	r2, [pc, #300]	; (800262c <HAL_DMA_Init+0x158>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	009a      	lsls	r2, r3, #2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a48      	ldr	r2, [pc, #288]	; (8002630 <HAL_DMA_Init+0x15c>)
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
 8002510:	e00e      	b.n	8002530 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	4b46      	ldr	r3, [pc, #280]	; (8002634 <HAL_DMA_Init+0x160>)
 800251a:	4413      	add	r3, r2
 800251c:	4a43      	ldr	r2, [pc, #268]	; (800262c <HAL_DMA_Init+0x158>)
 800251e:	fba2 2303 	umull	r2, r3, r2, r3
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	009a      	lsls	r2, r3, #2
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a42      	ldr	r2, [pc, #264]	; (8002638 <HAL_DMA_Init+0x164>)
 800252e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002554:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002560:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800258a:	d039      	beq.n	8002600 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	4a27      	ldr	r2, [pc, #156]	; (8002630 <HAL_DMA_Init+0x15c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d11a      	bne.n	80025cc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002596:	4b29      	ldr	r3, [pc, #164]	; (800263c <HAL_DMA_Init+0x168>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f003 031c 	and.w	r3, r3, #28
 80025a2:	210f      	movs	r1, #15
 80025a4:	fa01 f303 	lsl.w	r3, r1, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	4924      	ldr	r1, [pc, #144]	; (800263c <HAL_DMA_Init+0x168>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025b0:	4b22      	ldr	r3, [pc, #136]	; (800263c <HAL_DMA_Init+0x168>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	f003 031c 	and.w	r3, r3, #28
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	491d      	ldr	r1, [pc, #116]	; (800263c <HAL_DMA_Init+0x168>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
 80025ca:	e019      	b.n	8002600 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025cc:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <HAL_DMA_Init+0x16c>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	f003 031c 	and.w	r3, r3, #28
 80025d8:	210f      	movs	r1, #15
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	4917      	ldr	r1, [pc, #92]	; (8002640 <HAL_DMA_Init+0x16c>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <HAL_DMA_Init+0x16c>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6859      	ldr	r1, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f003 031c 	and.w	r3, r3, #28
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	4911      	ldr	r1, [pc, #68]	; (8002640 <HAL_DMA_Init+0x16c>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	40020407 	.word	0x40020407
 8002628:	bffdfff8 	.word	0xbffdfff8
 800262c:	cccccccd 	.word	0xcccccccd
 8002630:	40020000 	.word	0x40020000
 8002634:	bffdfbf8 	.word	0xbffdfbf8
 8002638:	40020400 	.word	0x40020400
 800263c:	400200a8 	.word	0x400200a8
 8002640:	400204a8 	.word	0x400204a8

08002644 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_DMA_Start_IT+0x20>
 8002660:	2302      	movs	r3, #2
 8002662:	e04b      	b.n	80026fc <HAL_DMA_Start_IT+0xb8>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b01      	cmp	r3, #1
 8002676:	d13a      	bne.n	80026ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0201 	bic.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f8e0 	bl	8002862 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 020e 	orr.w	r2, r2, #14
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e00f      	b.n	80026dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0204 	bic.w	r2, r2, #4
 80026ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 020a 	orr.w	r2, r2, #10
 80026da:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e005      	b.n	80026fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80026f6:	2302      	movs	r3, #2
 80026f8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002720:	f003 031c 	and.w	r3, r3, #28
 8002724:	2204      	movs	r2, #4
 8002726:	409a      	lsls	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d026      	beq.n	800277e <HAL_DMA_IRQHandler+0x7a>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	d021      	beq.n	800277e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	2b00      	cmp	r3, #0
 8002746:	d107      	bne.n	8002758 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0204 	bic.w	r2, r2, #4
 8002756:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275c:	f003 021c 	and.w	r2, r3, #28
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	2104      	movs	r1, #4
 8002766:	fa01 f202 	lsl.w	r2, r1, r2
 800276a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	2b00      	cmp	r3, #0
 8002772:	d071      	beq.n	8002858 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800277c:	e06c      	b.n	8002858 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f003 031c 	and.w	r3, r3, #28
 8002786:	2202      	movs	r2, #2
 8002788:	409a      	lsls	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d02e      	beq.n	80027f0 <HAL_DMA_IRQHandler+0xec>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d029      	beq.n	80027f0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10b      	bne.n	80027c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 020a 	bic.w	r2, r2, #10
 80027b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	f003 021c 	and.w	r2, r3, #28
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2102      	movs	r1, #2
 80027d0:	fa01 f202 	lsl.w	r2, r1, r2
 80027d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d038      	beq.n	8002858 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027ee:	e033      	b.n	8002858 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f4:	f003 031c 	and.w	r3, r3, #28
 80027f8:	2208      	movs	r2, #8
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d02a      	beq.n	800285a <HAL_DMA_IRQHandler+0x156>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d025      	beq.n	800285a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 020e 	bic.w	r2, r2, #14
 800281c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f003 021c 	and.w	r2, r3, #28
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	2101      	movs	r1, #1
 800282c:	fa01 f202 	lsl.w	r2, r1, r2
 8002830:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284c:	2b00      	cmp	r3, #0
 800284e:	d004      	beq.n	800285a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002858:	bf00      	nop
 800285a:	bf00      	nop
}
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	f003 021c 	and.w	r2, r3, #28
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	2101      	movs	r1, #1
 800287e:	fa01 f202 	lsl.w	r2, r1, r2
 8002882:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b10      	cmp	r3, #16
 8002892:	d108      	bne.n	80028a6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028a4:	e007      	b.n	80028b6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	60da      	str	r2, [r3, #12]
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d2:	e148      	b.n	8002b66 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2101      	movs	r1, #1
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	4013      	ands	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 813a 	beq.w	8002b60 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d00b      	beq.n	800290c <HAL_GPIO_Init+0x48>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d007      	beq.n	800290c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002900:	2b11      	cmp	r3, #17
 8002902:	d003      	beq.n	800290c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b12      	cmp	r3, #18
 800290a:	d130      	bne.n	800296e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002942:	2201      	movs	r2, #1
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4013      	ands	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	f003 0201 	and.w	r2, r3, #1
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	2203      	movs	r2, #3
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0xea>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b12      	cmp	r3, #18
 80029ac:	d123      	bne.n	80029f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	08da      	lsrs	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3208      	adds	r2, #8
 80029b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	220f      	movs	r2, #15
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	08da      	lsrs	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3208      	adds	r2, #8
 80029f0:	6939      	ldr	r1, [r7, #16]
 80029f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	2203      	movs	r2, #3
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0203 	and.w	r2, r3, #3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8094 	beq.w	8002b60 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a38:	4b52      	ldr	r3, [pc, #328]	; (8002b84 <HAL_GPIO_Init+0x2c0>)
 8002a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3c:	4a51      	ldr	r2, [pc, #324]	; (8002b84 <HAL_GPIO_Init+0x2c0>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6613      	str	r3, [r2, #96]	; 0x60
 8002a44:	4b4f      	ldr	r3, [pc, #316]	; (8002b84 <HAL_GPIO_Init+0x2c0>)
 8002a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a50:	4a4d      	ldr	r2, [pc, #308]	; (8002b88 <HAL_GPIO_Init+0x2c4>)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	089b      	lsrs	r3, r3, #2
 8002a56:	3302      	adds	r3, #2
 8002a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	220f      	movs	r2, #15
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a7a:	d00d      	beq.n	8002a98 <HAL_GPIO_Init+0x1d4>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a43      	ldr	r2, [pc, #268]	; (8002b8c <HAL_GPIO_Init+0x2c8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d007      	beq.n	8002a94 <HAL_GPIO_Init+0x1d0>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a42      	ldr	r2, [pc, #264]	; (8002b90 <HAL_GPIO_Init+0x2cc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d101      	bne.n	8002a90 <HAL_GPIO_Init+0x1cc>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e004      	b.n	8002a9a <HAL_GPIO_Init+0x1d6>
 8002a90:	2307      	movs	r3, #7
 8002a92:	e002      	b.n	8002a9a <HAL_GPIO_Init+0x1d6>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <HAL_GPIO_Init+0x1d6>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	f002 0203 	and.w	r2, r2, #3
 8002aa0:	0092      	lsls	r2, r2, #2
 8002aa2:	4093      	lsls	r3, r2
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002aaa:	4937      	ldr	r1, [pc, #220]	; (8002b88 <HAL_GPIO_Init+0x2c4>)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	089b      	lsrs	r3, r3, #2
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ab8:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002adc:	4a2d      	ldr	r2, [pc, #180]	; (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002ae2:	4b2c      	ldr	r3, [pc, #176]	; (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b06:	4a23      	ldr	r2, [pc, #140]	; (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b0c:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b30:	4a18      	ldr	r2, [pc, #96]	; (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b36:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4013      	ands	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b5a:	4a0e      	ldr	r2, [pc, #56]	; (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	3301      	adds	r3, #1
 8002b64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f47f aeaf 	bne.w	80028d4 <HAL_GPIO_Init+0x10>
  }
}
 8002b76:	bf00      	nop
 8002b78:	bf00      	nop
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40010000 	.word	0x40010000
 8002b8c:	48000400 	.word	0x48000400
 8002b90:	48000800 	.word	0x48000800
 8002b94:	40010400 	.word	0x40010400

08002b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ba8:	787b      	ldrb	r3, [r7, #1]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bae:	887a      	ldrh	r2, [r7, #2]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bb4:	e002      	b.n	8002bbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bb6:	887a      	ldrh	r2, [r7, #2]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a04      	ldr	r2, [pc, #16]	; (8002be4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd6:	6013      	str	r3, [r2, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40007000 	.word	0x40007000

08002be8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bec:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40007000 	.word	0x40007000

08002c04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c12:	d130      	bne.n	8002c76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c14:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c20:	d038      	beq.n	8002c94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c22:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c32:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2232      	movs	r2, #50	; 0x32
 8002c38:	fb02 f303 	mul.w	r3, r2, r3
 8002c3c:	4a1b      	ldr	r2, [pc, #108]	; (8002cac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	0c9b      	lsrs	r3, r3, #18
 8002c44:	3301      	adds	r3, #1
 8002c46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c48:	e002      	b.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c50:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5c:	d102      	bne.n	8002c64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f2      	bne.n	8002c4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c70:	d110      	bne.n	8002c94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e00f      	b.n	8002c96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c82:	d007      	beq.n	8002c94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c84:	4b07      	ldr	r3, [pc, #28]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c8c:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40007000 	.word	0x40007000
 8002ca8:	20000000 	.word	0x20000000
 8002cac:	431bde83 	.word	0x431bde83

08002cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f000 bc11 	b.w	80034e6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc4:	4ba0      	ldr	r3, [pc, #640]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cce:	4b9e      	ldr	r3, [pc, #632]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80e4 	beq.w	8002eae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d007      	beq.n	8002cfc <HAL_RCC_OscConfig+0x4c>
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b0c      	cmp	r3, #12
 8002cf0:	f040 808b 	bne.w	8002e0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	f040 8087 	bne.w	8002e0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cfc:	4b92      	ldr	r3, [pc, #584]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_RCC_OscConfig+0x64>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e3e8      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a1a      	ldr	r2, [r3, #32]
 8002d18:	4b8b      	ldr	r3, [pc, #556]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d004      	beq.n	8002d2e <HAL_RCC_OscConfig+0x7e>
 8002d24:	4b88      	ldr	r3, [pc, #544]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d2c:	e005      	b.n	8002d3a <HAL_RCC_OscConfig+0x8a>
 8002d2e:	4b86      	ldr	r3, [pc, #536]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d223      	bcs.n	8002d86 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fd7a 	bl	800383c <RCC_SetFlashLatencyFromMSIRange>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e3c9      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d52:	4b7d      	ldr	r3, [pc, #500]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a7c      	ldr	r2, [pc, #496]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002d58:	f043 0308 	orr.w	r3, r3, #8
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b7a      	ldr	r3, [pc, #488]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	4977      	ldr	r1, [pc, #476]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d70:	4b75      	ldr	r3, [pc, #468]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	021b      	lsls	r3, r3, #8
 8002d7e:	4972      	ldr	r1, [pc, #456]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]
 8002d84:	e025      	b.n	8002dd2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d86:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6f      	ldr	r2, [pc, #444]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002d8c:	f043 0308 	orr.w	r3, r3, #8
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b6d      	ldr	r3, [pc, #436]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	496a      	ldr	r1, [pc, #424]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002da4:	4b68      	ldr	r3, [pc, #416]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	021b      	lsls	r3, r3, #8
 8002db2:	4965      	ldr	r1, [pc, #404]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fd3a 	bl	800383c <RCC_SetFlashLatencyFromMSIRange>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e389      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dd2:	f000 fc6f 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	4b5b      	ldr	r3, [pc, #364]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	495a      	ldr	r1, [pc, #360]	; (8002f4c <HAL_RCC_OscConfig+0x29c>)
 8002de4:	5ccb      	ldrb	r3, [r1, r3]
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	fa22 f303 	lsr.w	r3, r2, r3
 8002dee:	4a58      	ldr	r2, [pc, #352]	; (8002f50 <HAL_RCC_OscConfig+0x2a0>)
 8002df0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002df2:	4b58      	ldr	r3, [pc, #352]	; (8002f54 <HAL_RCC_OscConfig+0x2a4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe f86e 	bl	8000ed8 <HAL_InitTick>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d052      	beq.n	8002eac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	e36d      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d032      	beq.n	8002e78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e12:	4b4d      	ldr	r3, [pc, #308]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a4c      	ldr	r2, [pc, #304]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e1e:	f7fe f8ab 	bl	8000f78 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e26:	f7fe f8a7 	bl	8000f78 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e356      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e38:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e44:	4b40      	ldr	r3, [pc, #256]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a3f      	ldr	r2, [pc, #252]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002e4a:	f043 0308 	orr.w	r3, r3, #8
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b3d      	ldr	r3, [pc, #244]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	493a      	ldr	r1, [pc, #232]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e62:	4b39      	ldr	r3, [pc, #228]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	4935      	ldr	r1, [pc, #212]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]
 8002e76:	e01a      	b.n	8002eae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e78:	4b33      	ldr	r3, [pc, #204]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a32      	ldr	r2, [pc, #200]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e84:	f7fe f878 	bl	8000f78 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e8c:	f7fe f874 	bl	8000f78 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e323      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x1dc>
 8002eaa:	e000      	b.n	8002eae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d073      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_OscConfig+0x21c>
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b0c      	cmp	r3, #12
 8002ec4:	d10e      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d10b      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ecc:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d063      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x2f0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d15f      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e300      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eec:	d106      	bne.n	8002efc <HAL_RCC_OscConfig+0x24c>
 8002eee:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	e01d      	b.n	8002f38 <HAL_RCC_OscConfig+0x288>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x270>
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a0f      	ldr	r2, [pc, #60]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a0c      	ldr	r2, [pc, #48]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e00b      	b.n	8002f38 <HAL_RCC_OscConfig+0x288>
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a08      	ldr	r2, [pc, #32]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a05      	ldr	r2, [pc, #20]	; (8002f48 <HAL_RCC_OscConfig+0x298>)
 8002f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01b      	beq.n	8002f78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe f81a 	bl	8000f78 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f46:	e010      	b.n	8002f6a <HAL_RCC_OscConfig+0x2ba>
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	080064bc 	.word	0x080064bc
 8002f50:	20000000 	.word	0x20000000
 8002f54:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe f80e 	bl	8000f78 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e2bd      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f6a:	4baf      	ldr	r3, [pc, #700]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x2a8>
 8002f76:	e014      	b.n	8002fa2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fd fffe 	bl	8000f78 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f80:	f7fd fffa 	bl	8000f78 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e2a9      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f92:	4ba5      	ldr	r3, [pc, #660]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x2d0>
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d060      	beq.n	8003070 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x310>
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b0c      	cmp	r3, #12
 8002fb8:	d119      	bne.n	8002fee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d116      	bne.n	8002fee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fc0:	4b99      	ldr	r3, [pc, #612]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x328>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e286      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd8:	4b93      	ldr	r3, [pc, #588]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	061b      	lsls	r3, r3, #24
 8002fe6:	4990      	ldr	r1, [pc, #576]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fec:	e040      	b.n	8003070 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d023      	beq.n	800303e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff6:	4b8c      	ldr	r3, [pc, #560]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a8b      	ldr	r2, [pc, #556]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 8002ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003002:	f7fd ffb9 	bl	8000f78 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800300a:	f7fd ffb5 	bl	8000f78 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e264      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800301c:	4b82      	ldr	r3, [pc, #520]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003028:	4b7f      	ldr	r3, [pc, #508]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	061b      	lsls	r3, r3, #24
 8003036:	497c      	ldr	r1, [pc, #496]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 8003038:	4313      	orrs	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
 800303c:	e018      	b.n	8003070 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800303e:	4b7a      	ldr	r3, [pc, #488]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a79      	ldr	r2, [pc, #484]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 8003044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304a:	f7fd ff95 	bl	8000f78 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003052:	f7fd ff91 	bl	8000f78 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e240      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003064:	4b70      	ldr	r3, [pc, #448]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f0      	bne.n	8003052 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d03c      	beq.n	80030f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01c      	beq.n	80030be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003084:	4b68      	ldr	r3, [pc, #416]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 8003086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800308a:	4a67      	ldr	r2, [pc, #412]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003094:	f7fd ff70 	bl	8000f78 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309c:	f7fd ff6c 	bl	8000f78 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e21b      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ae:	4b5e      	ldr	r3, [pc, #376]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 80030b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0ef      	beq.n	800309c <HAL_RCC_OscConfig+0x3ec>
 80030bc:	e01b      	b.n	80030f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030be:	4b5a      	ldr	r3, [pc, #360]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 80030c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c4:	4a58      	ldr	r2, [pc, #352]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 80030c6:	f023 0301 	bic.w	r3, r3, #1
 80030ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ce:	f7fd ff53 	bl	8000f78 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d6:	f7fd ff4f 	bl	8000f78 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e1fe      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030e8:	4b4f      	ldr	r3, [pc, #316]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 80030ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1ef      	bne.n	80030d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 80a6 	beq.w	8003250 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003104:	2300      	movs	r3, #0
 8003106:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003108:	4b47      	ldr	r3, [pc, #284]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10d      	bne.n	8003130 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003114:	4b44      	ldr	r3, [pc, #272]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	4a43      	ldr	r2, [pc, #268]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 800311a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311e:	6593      	str	r3, [r2, #88]	; 0x58
 8003120:	4b41      	ldr	r3, [pc, #260]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 8003122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312c:	2301      	movs	r3, #1
 800312e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003130:	4b3e      	ldr	r3, [pc, #248]	; (800322c <HAL_RCC_OscConfig+0x57c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d118      	bne.n	800316e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800313c:	4b3b      	ldr	r3, [pc, #236]	; (800322c <HAL_RCC_OscConfig+0x57c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a3a      	ldr	r2, [pc, #232]	; (800322c <HAL_RCC_OscConfig+0x57c>)
 8003142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003146:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003148:	f7fd ff16 	bl	8000f78 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003150:	f7fd ff12 	bl	8000f78 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e1c1      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003162:	4b32      	ldr	r3, [pc, #200]	; (800322c <HAL_RCC_OscConfig+0x57c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d108      	bne.n	8003188 <HAL_RCC_OscConfig+0x4d8>
 8003176:	4b2c      	ldr	r3, [pc, #176]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317c:	4a2a      	ldr	r2, [pc, #168]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003186:	e024      	b.n	80031d2 <HAL_RCC_OscConfig+0x522>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b05      	cmp	r3, #5
 800318e:	d110      	bne.n	80031b2 <HAL_RCC_OscConfig+0x502>
 8003190:	4b25      	ldr	r3, [pc, #148]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	4a24      	ldr	r2, [pc, #144]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 8003198:	f043 0304 	orr.w	r3, r3, #4
 800319c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031a0:	4b21      	ldr	r3, [pc, #132]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	4a20      	ldr	r2, [pc, #128]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031b0:	e00f      	b.n	80031d2 <HAL_RCC_OscConfig+0x522>
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 80031b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b8:	4a1b      	ldr	r2, [pc, #108]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 80031ba:	f023 0301 	bic.w	r3, r3, #1
 80031be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031c2:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c8:	4a17      	ldr	r2, [pc, #92]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 80031ca:	f023 0304 	bic.w	r3, r3, #4
 80031ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d016      	beq.n	8003208 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031da:	f7fd fecd 	bl	8000f78 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e0:	e00a      	b.n	80031f8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fd fec9 	bl	8000f78 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e176      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RCC_OscConfig+0x578>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0ed      	beq.n	80031e2 <HAL_RCC_OscConfig+0x532>
 8003206:	e01a      	b.n	800323e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7fd feb6 	bl	8000f78 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800320e:	e00f      	b.n	8003230 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003210:	f7fd feb2 	bl	8000f78 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d906      	bls.n	8003230 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e15f      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
 8003226:	bf00      	nop
 8003228:	40021000 	.word	0x40021000
 800322c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003230:	4baa      	ldr	r3, [pc, #680]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1e8      	bne.n	8003210 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800323e:	7ffb      	ldrb	r3, [r7, #31]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d105      	bne.n	8003250 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003244:	4ba5      	ldr	r3, [pc, #660]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 8003246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003248:	4aa4      	ldr	r2, [pc, #656]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 800324a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b00      	cmp	r3, #0
 800325a:	d03c      	beq.n	80032d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01c      	beq.n	800329e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003264:	4b9d      	ldr	r3, [pc, #628]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 8003266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800326a:	4a9c      	ldr	r2, [pc, #624]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003274:	f7fd fe80 	bl	8000f78 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800327c:	f7fd fe7c 	bl	8000f78 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e12b      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800328e:	4b93      	ldr	r3, [pc, #588]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 8003290:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0ef      	beq.n	800327c <HAL_RCC_OscConfig+0x5cc>
 800329c:	e01b      	b.n	80032d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800329e:	4b8f      	ldr	r3, [pc, #572]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 80032a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032a4:	4a8d      	ldr	r2, [pc, #564]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 80032a6:	f023 0301 	bic.w	r3, r3, #1
 80032aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ae:	f7fd fe63 	bl	8000f78 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032b6:	f7fd fe5f 	bl	8000f78 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e10e      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032c8:	4b84      	ldr	r3, [pc, #528]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 80032ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1ef      	bne.n	80032b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 8102 	beq.w	80034e4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	f040 80c5 	bne.w	8003474 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032ea:	4b7c      	ldr	r3, [pc, #496]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f003 0203 	and.w	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d12c      	bne.n	8003358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	3b01      	subs	r3, #1
 800330a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d123      	bne.n	8003358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d11b      	bne.n	8003358 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d113      	bne.n	8003358 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333a:	085b      	lsrs	r3, r3, #1
 800333c:	3b01      	subs	r3, #1
 800333e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003340:	429a      	cmp	r2, r3
 8003342:	d109      	bne.n	8003358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	085b      	lsrs	r3, r3, #1
 8003350:	3b01      	subs	r3, #1
 8003352:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d067      	beq.n	8003428 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b0c      	cmp	r3, #12
 800335c:	d062      	beq.n	8003424 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800335e:	4b5f      	ldr	r3, [pc, #380]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0bb      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800336e:	4b5b      	ldr	r3, [pc, #364]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a5a      	ldr	r2, [pc, #360]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 8003374:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003378:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800337a:	f7fd fdfd 	bl	8000f78 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003382:	f7fd fdf9 	bl	8000f78 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e0a8      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003394:	4b51      	ldr	r3, [pc, #324]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033a0:	4b4e      	ldr	r3, [pc, #312]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	4b4e      	ldr	r3, [pc, #312]	; (80034e0 <HAL_RCC_OscConfig+0x830>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033b0:	3a01      	subs	r2, #1
 80033b2:	0112      	lsls	r2, r2, #4
 80033b4:	4311      	orrs	r1, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033ba:	0212      	lsls	r2, r2, #8
 80033bc:	4311      	orrs	r1, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033c2:	0852      	lsrs	r2, r2, #1
 80033c4:	3a01      	subs	r2, #1
 80033c6:	0552      	lsls	r2, r2, #21
 80033c8:	4311      	orrs	r1, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033ce:	0852      	lsrs	r2, r2, #1
 80033d0:	3a01      	subs	r2, #1
 80033d2:	0652      	lsls	r2, r2, #25
 80033d4:	4311      	orrs	r1, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033da:	06d2      	lsls	r2, r2, #27
 80033dc:	430a      	orrs	r2, r1
 80033de:	493f      	ldr	r1, [pc, #252]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033e4:	4b3d      	ldr	r3, [pc, #244]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a3c      	ldr	r2, [pc, #240]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 80033ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033f0:	4b3a      	ldr	r3, [pc, #232]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4a39      	ldr	r2, [pc, #228]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 80033f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033fc:	f7fd fdbc 	bl	8000f78 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003404:	f7fd fdb8 	bl	8000f78 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e067      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003416:	4b31      	ldr	r3, [pc, #196]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003422:	e05f      	b.n	80034e4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e05e      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003428:	4b2c      	ldr	r3, [pc, #176]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d157      	bne.n	80034e4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003434:	4b29      	ldr	r3, [pc, #164]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a28      	ldr	r2, [pc, #160]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 800343a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003440:	4b26      	ldr	r3, [pc, #152]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4a25      	ldr	r2, [pc, #148]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 8003446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800344a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800344c:	f7fd fd94 	bl	8000f78 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003454:	f7fd fd90 	bl	8000f78 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e03f      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003466:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0x7a4>
 8003472:	e037      	b.n	80034e4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d02d      	beq.n	80034d6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347a:	4b18      	ldr	r3, [pc, #96]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a17      	ldr	r2, [pc, #92]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 8003480:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003484:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003486:	4b15      	ldr	r3, [pc, #84]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d105      	bne.n	800349e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003492:	4b12      	ldr	r3, [pc, #72]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	4a11      	ldr	r2, [pc, #68]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 8003498:	f023 0303 	bic.w	r3, r3, #3
 800349c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800349e:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	4a0e      	ldr	r2, [pc, #56]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 80034a4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80034a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fd fd63 	bl	8000f78 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fd fd5f 	bl	8000f78 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e00e      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c8:	4b04      	ldr	r3, [pc, #16]	; (80034dc <HAL_RCC_OscConfig+0x82c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f0      	bne.n	80034b6 <HAL_RCC_OscConfig+0x806>
 80034d4:	e006      	b.n	80034e4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e005      	b.n	80034e6 <HAL_RCC_OscConfig+0x836>
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3720      	adds	r7, #32
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop

080034f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0c8      	b.n	8003696 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003504:	4b66      	ldr	r3, [pc, #408]	; (80036a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d910      	bls.n	8003534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003512:	4b63      	ldr	r3, [pc, #396]	; (80036a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 0207 	bic.w	r2, r3, #7
 800351a:	4961      	ldr	r1, [pc, #388]	; (80036a0 <HAL_RCC_ClockConfig+0x1b0>)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b5f      	ldr	r3, [pc, #380]	; (80036a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0b0      	b.n	8003696 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d04c      	beq.n	80035da <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b03      	cmp	r3, #3
 8003546:	d107      	bne.n	8003558 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003548:	4b56      	ldr	r3, [pc, #344]	; (80036a4 <HAL_RCC_ClockConfig+0x1b4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d121      	bne.n	8003598 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e09e      	b.n	8003696 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d107      	bne.n	8003570 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003560:	4b50      	ldr	r3, [pc, #320]	; (80036a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d115      	bne.n	8003598 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e092      	b.n	8003696 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d107      	bne.n	8003588 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003578:	4b4a      	ldr	r3, [pc, #296]	; (80036a4 <HAL_RCC_ClockConfig+0x1b4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d109      	bne.n	8003598 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e086      	b.n	8003696 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003588:	4b46      	ldr	r3, [pc, #280]	; (80036a4 <HAL_RCC_ClockConfig+0x1b4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e07e      	b.n	8003696 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003598:	4b42      	ldr	r3, [pc, #264]	; (80036a4 <HAL_RCC_ClockConfig+0x1b4>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f023 0203 	bic.w	r2, r3, #3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	493f      	ldr	r1, [pc, #252]	; (80036a4 <HAL_RCC_ClockConfig+0x1b4>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035aa:	f7fd fce5 	bl	8000f78 <HAL_GetTick>
 80035ae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b0:	e00a      	b.n	80035c8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b2:	f7fd fce1 	bl	8000f78 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e066      	b.n	8003696 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c8:	4b36      	ldr	r3, [pc, #216]	; (80036a4 <HAL_RCC_ClockConfig+0x1b4>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 020c 	and.w	r2, r3, #12
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d1eb      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e6:	4b2f      	ldr	r3, [pc, #188]	; (80036a4 <HAL_RCC_ClockConfig+0x1b4>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	492c      	ldr	r1, [pc, #176]	; (80036a4 <HAL_RCC_ClockConfig+0x1b4>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f8:	4b29      	ldr	r3, [pc, #164]	; (80036a0 <HAL_RCC_ClockConfig+0x1b0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d210      	bcs.n	8003628 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003606:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 0207 	bic.w	r2, r3, #7
 800360e:	4924      	ldr	r1, [pc, #144]	; (80036a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	4313      	orrs	r3, r2
 8003614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e036      	b.n	8003696 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003634:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4918      	ldr	r1, [pc, #96]	; (80036a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003652:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4910      	ldr	r1, [pc, #64]	; (80036a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003662:	4313      	orrs	r3, r2
 8003664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003666:	f000 f825 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 800366a:	4602      	mov	r2, r0
 800366c:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <HAL_RCC_ClockConfig+0x1b4>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	490c      	ldr	r1, [pc, #48]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	5ccb      	ldrb	r3, [r1, r3]
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	fa22 f303 	lsr.w	r3, r2, r3
 8003682:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003686:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7fd fc24 	bl	8000ed8 <HAL_InitTick>
 8003690:	4603      	mov	r3, r0
 8003692:	72fb      	strb	r3, [r7, #11]

  return status;
 8003694:	7afb      	ldrb	r3, [r7, #11]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40022000 	.word	0x40022000
 80036a4:	40021000 	.word	0x40021000
 80036a8:	080064bc 	.word	0x080064bc
 80036ac:	20000000 	.word	0x20000000
 80036b0:	20000004 	.word	0x20000004

080036b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b089      	sub	sp, #36	; 0x24
 80036b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036c2:	4b3e      	ldr	r3, [pc, #248]	; (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036cc:	4b3b      	ldr	r3, [pc, #236]	; (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_RCC_GetSysClockFreq+0x34>
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b0c      	cmp	r3, #12
 80036e0:	d121      	bne.n	8003726 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d11e      	bne.n	8003726 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036e8:	4b34      	ldr	r3, [pc, #208]	; (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d107      	bne.n	8003704 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036f4:	4b31      	ldr	r3, [pc, #196]	; (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 80036f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	e005      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003704:	4b2d      	ldr	r3, [pc, #180]	; (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003710:	4a2b      	ldr	r2, [pc, #172]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003718:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10d      	bne.n	800373c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003724:	e00a      	b.n	800373c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b04      	cmp	r3, #4
 800372a:	d102      	bne.n	8003732 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800372c:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800372e:	61bb      	str	r3, [r7, #24]
 8003730:	e004      	b.n	800373c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b08      	cmp	r3, #8
 8003736:	d101      	bne.n	800373c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003738:	4b23      	ldr	r3, [pc, #140]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800373a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	2b0c      	cmp	r3, #12
 8003740:	d134      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003742:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d003      	beq.n	800375a <HAL_RCC_GetSysClockFreq+0xa6>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b03      	cmp	r3, #3
 8003756:	d003      	beq.n	8003760 <HAL_RCC_GetSysClockFreq+0xac>
 8003758:	e005      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800375a:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800375c:	617b      	str	r3, [r7, #20]
      break;
 800375e:	e005      	b.n	800376c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003760:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003762:	617b      	str	r3, [r7, #20]
      break;
 8003764:	e002      	b.n	800376c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	617b      	str	r3, [r7, #20]
      break;
 800376a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800376c:	4b13      	ldr	r3, [pc, #76]	; (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	3301      	adds	r3, #1
 8003778:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	0a1b      	lsrs	r3, r3, #8
 8003780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	fb02 f203 	mul.w	r2, r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003790:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	0e5b      	lsrs	r3, r3, #25
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	3301      	adds	r3, #1
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037ac:	69bb      	ldr	r3, [r7, #24]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3724      	adds	r7, #36	; 0x24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000
 80037c0:	080064d4 	.word	0x080064d4
 80037c4:	00f42400 	.word	0x00f42400
 80037c8:	007a1200 	.word	0x007a1200

080037cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037d2:	681b      	ldr	r3, [r3, #0]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20000000 	.word	0x20000000

080037e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037e8:	f7ff fff0 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	0a1b      	lsrs	r3, r3, #8
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	4904      	ldr	r1, [pc, #16]	; (800380c <HAL_RCC_GetPCLK1Freq+0x28>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003804:	4618      	mov	r0, r3
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40021000 	.word	0x40021000
 800380c:	080064cc 	.word	0x080064cc

08003810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003814:	f7ff ffda 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 8003818:	4602      	mov	r2, r0
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <HAL_RCC_GetPCLK2Freq+0x24>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	0adb      	lsrs	r3, r3, #11
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	4904      	ldr	r1, [pc, #16]	; (8003838 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003826:	5ccb      	ldrb	r3, [r1, r3]
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40021000 	.word	0x40021000
 8003838:	080064cc 	.word	0x080064cc

0800383c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003844:	2300      	movs	r3, #0
 8003846:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003848:	4b2a      	ldr	r3, [pc, #168]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003854:	f7ff f9c8 	bl	8002be8 <HAL_PWREx_GetVoltageRange>
 8003858:	6178      	str	r0, [r7, #20]
 800385a:	e014      	b.n	8003886 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800385c:	4b25      	ldr	r3, [pc, #148]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800385e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003860:	4a24      	ldr	r2, [pc, #144]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003866:	6593      	str	r3, [r2, #88]	; 0x58
 8003868:	4b22      	ldr	r3, [pc, #136]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800386a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003874:	f7ff f9b8 	bl	8002be8 <HAL_PWREx_GetVoltageRange>
 8003878:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800387a:	4b1e      	ldr	r3, [pc, #120]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	4a1d      	ldr	r2, [pc, #116]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003884:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800388c:	d10b      	bne.n	80038a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b80      	cmp	r3, #128	; 0x80
 8003892:	d919      	bls.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2ba0      	cmp	r3, #160	; 0xa0
 8003898:	d902      	bls.n	80038a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800389a:	2302      	movs	r3, #2
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	e013      	b.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038a0:	2301      	movs	r3, #1
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	e010      	b.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b80      	cmp	r3, #128	; 0x80
 80038aa:	d902      	bls.n	80038b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038ac:	2303      	movs	r3, #3
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	e00a      	b.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b80      	cmp	r3, #128	; 0x80
 80038b6:	d102      	bne.n	80038be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038b8:	2302      	movs	r3, #2
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	e004      	b.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b70      	cmp	r3, #112	; 0x70
 80038c2:	d101      	bne.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038c4:	2301      	movs	r3, #1
 80038c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 0207 	bic.w	r2, r3, #7
 80038d0:	4909      	ldr	r1, [pc, #36]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038d8:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d001      	beq.n	80038ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40022000 	.word	0x40022000

080038fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003904:	2300      	movs	r3, #0
 8003906:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003908:	2300      	movs	r3, #0
 800390a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003914:	2b00      	cmp	r3, #0
 8003916:	d031      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003920:	d01a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003922:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003926:	d814      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003928:	2b00      	cmp	r3, #0
 800392a:	d009      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800392c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003930:	d10f      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003932:	4bac      	ldr	r3, [pc, #688]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	4aab      	ldr	r2, [pc, #684]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800393e:	e00c      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3304      	adds	r3, #4
 8003944:	2100      	movs	r1, #0
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f9dc 	bl	8003d04 <RCCEx_PLLSAI1_Config>
 800394c:	4603      	mov	r3, r0
 800394e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003950:	e003      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	74fb      	strb	r3, [r7, #19]
      break;
 8003956:	e000      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003958:	bf00      	nop
    }

    if(ret == HAL_OK)
 800395a:	7cfb      	ldrb	r3, [r7, #19]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10b      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003960:	4ba0      	ldr	r3, [pc, #640]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003966:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396e:	499d      	ldr	r1, [pc, #628]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003976:	e001      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003978:	7cfb      	ldrb	r3, [r7, #19]
 800397a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8099 	beq.w	8003abc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398a:	2300      	movs	r3, #0
 800398c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800398e:	4b95      	ldr	r3, [pc, #596]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800399e:	2300      	movs	r3, #0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00d      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a4:	4b8f      	ldr	r3, [pc, #572]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	4a8e      	ldr	r2, [pc, #568]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ae:	6593      	str	r3, [r2, #88]	; 0x58
 80039b0:	4b8c      	ldr	r3, [pc, #560]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039bc:	2301      	movs	r3, #1
 80039be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039c0:	4b89      	ldr	r3, [pc, #548]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a88      	ldr	r2, [pc, #544]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80039c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039cc:	f7fd fad4 	bl	8000f78 <HAL_GetTick>
 80039d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039d2:	e009      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d4:	f7fd fad0 	bl	8000f78 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d902      	bls.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	74fb      	strb	r3, [r7, #19]
        break;
 80039e6:	e005      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039e8:	4b7f      	ldr	r3, [pc, #508]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0ef      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80039f4:	7cfb      	ldrb	r3, [r7, #19]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d155      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039fa:	4b7a      	ldr	r3, [pc, #488]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01e      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d019      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a16:	4b73      	ldr	r3, [pc, #460]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a20:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a22:	4b70      	ldr	r3, [pc, #448]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a28:	4a6e      	ldr	r2, [pc, #440]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a32:	4b6c      	ldr	r3, [pc, #432]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a38:	4a6a      	ldr	r2, [pc, #424]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a42:	4a68      	ldr	r2, [pc, #416]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d016      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fd fa90 	bl	8000f78 <HAL_GetTick>
 8003a58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5a:	e00b      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5c:	f7fd fa8c 	bl	8000f78 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d902      	bls.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	74fb      	strb	r3, [r7, #19]
            break;
 8003a72:	e006      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a74:	4b5b      	ldr	r3, [pc, #364]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0ec      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003a82:	7cfb      	ldrb	r3, [r7, #19]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10b      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a88:	4b56      	ldr	r3, [pc, #344]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a96:	4953      	ldr	r1, [pc, #332]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a9e:	e004      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003aa0:	7cfb      	ldrb	r3, [r7, #19]
 8003aa2:	74bb      	strb	r3, [r7, #18]
 8003aa4:	e001      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa6:	7cfb      	ldrb	r3, [r7, #19]
 8003aa8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aaa:	7c7b      	ldrb	r3, [r7, #17]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d105      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab0:	4b4c      	ldr	r3, [pc, #304]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab4:	4a4b      	ldr	r2, [pc, #300]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ac8:	4b46      	ldr	r3, [pc, #280]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ace:	f023 0203 	bic.w	r2, r3, #3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	4943      	ldr	r1, [pc, #268]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aea:	4b3e      	ldr	r3, [pc, #248]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af0:	f023 020c 	bic.w	r2, r3, #12
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	493a      	ldr	r1, [pc, #232]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b0c:	4b35      	ldr	r3, [pc, #212]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	4932      	ldr	r1, [pc, #200]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b2e:	4b2d      	ldr	r3, [pc, #180]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3c:	4929      	ldr	r1, [pc, #164]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b50:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	4921      	ldr	r1, [pc, #132]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b72:	4b1c      	ldr	r3, [pc, #112]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	4918      	ldr	r1, [pc, #96]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b94:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	4910      	ldr	r1, [pc, #64]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d02c      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	4907      	ldr	r1, [pc, #28]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bd4:	d10a      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd6:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	4a02      	ldr	r2, [pc, #8]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003be0:	60d3      	str	r3, [r2, #12]
 8003be2:	e015      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003be4:	40021000 	.word	0x40021000
 8003be8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bf4:	d10c      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 f881 	bl	8003d04 <RCCEx_PLLSAI1_Config>
 8003c02:	4603      	mov	r3, r0
 8003c04:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c06:	7cfb      	ldrb	r3, [r7, #19]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003c0c:	7cfb      	ldrb	r3, [r7, #19]
 8003c0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d028      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c1c:	4b30      	ldr	r3, [pc, #192]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	492d      	ldr	r1, [pc, #180]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c3a:	d106      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c3c:	4b28      	ldr	r3, [pc, #160]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4a27      	ldr	r2, [pc, #156]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c46:	60d3      	str	r3, [r2, #12]
 8003c48:	e011      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c52:	d10c      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3304      	adds	r3, #4
 8003c58:	2101      	movs	r1, #1
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f852 	bl	8003d04 <RCCEx_PLLSAI1_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003c6a:	7cfb      	ldrb	r3, [r7, #19]
 8003c6c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d01c      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c7a:	4b19      	ldr	r3, [pc, #100]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c88:	4915      	ldr	r1, [pc, #84]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 f82f 	bl	8003d04 <RCCEx_PLLSAI1_Config>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003caa:	7cfb      	ldrb	r3, [r7, #19]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cc0:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cce:	4904      	ldr	r1, [pc, #16]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cd6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000

08003ce4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003cee:	f043 0304 	orr.w	r3, r3, #4
 8003cf2:	6013      	str	r3, [r2, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40021000 	.word	0x40021000

08003d04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d12:	4b74      	ldr	r3, [pc, #464]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d018      	beq.n	8003d50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d1e:	4b71      	ldr	r3, [pc, #452]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f003 0203 	and.w	r2, r3, #3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d10d      	bne.n	8003d4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
       ||
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d36:	4b6b      	ldr	r3, [pc, #428]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	091b      	lsrs	r3, r3, #4
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
       ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d047      	beq.n	8003dda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	73fb      	strb	r3, [r7, #15]
 8003d4e:	e044      	b.n	8003dda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d018      	beq.n	8003d8a <RCCEx_PLLSAI1_Config+0x86>
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d825      	bhi.n	8003da8 <RCCEx_PLLSAI1_Config+0xa4>
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d002      	beq.n	8003d66 <RCCEx_PLLSAI1_Config+0x62>
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d009      	beq.n	8003d78 <RCCEx_PLLSAI1_Config+0x74>
 8003d64:	e020      	b.n	8003da8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d66:	4b5f      	ldr	r3, [pc, #380]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d11d      	bne.n	8003dae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d76:	e01a      	b.n	8003dae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d78:	4b5a      	ldr	r3, [pc, #360]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d116      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d88:	e013      	b.n	8003db2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d8a:	4b56      	ldr	r3, [pc, #344]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10f      	bne.n	8003db6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d96:	4b53      	ldr	r3, [pc, #332]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003da6:	e006      	b.n	8003db6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
      break;
 8003dac:	e004      	b.n	8003db8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dae:	bf00      	nop
 8003db0:	e002      	b.n	8003db8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003db2:	bf00      	nop
 8003db4:	e000      	b.n	8003db8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003db6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10d      	bne.n	8003dda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dbe:	4b49      	ldr	r3, [pc, #292]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6819      	ldr	r1, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	4943      	ldr	r1, [pc, #268]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d17c      	bne.n	8003eda <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003de0:	4b40      	ldr	r3, [pc, #256]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a3f      	ldr	r2, [pc, #252]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dec:	f7fd f8c4 	bl	8000f78 <HAL_GetTick>
 8003df0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003df2:	e009      	b.n	8003e08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003df4:	f7fd f8c0 	bl	8000f78 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d902      	bls.n	8003e08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	73fb      	strb	r3, [r7, #15]
        break;
 8003e06:	e005      	b.n	8003e14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e08:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1ef      	bne.n	8003df4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d15f      	bne.n	8003eda <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d110      	bne.n	8003e42 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e20:	4b30      	ldr	r3, [pc, #192]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6892      	ldr	r2, [r2, #8]
 8003e30:	0211      	lsls	r1, r2, #8
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68d2      	ldr	r2, [r2, #12]
 8003e36:	06d2      	lsls	r2, r2, #27
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	492a      	ldr	r1, [pc, #168]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	610b      	str	r3, [r1, #16]
 8003e40:	e027      	b.n	8003e92 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d112      	bne.n	8003e6e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e48:	4b26      	ldr	r3, [pc, #152]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6892      	ldr	r2, [r2, #8]
 8003e58:	0211      	lsls	r1, r2, #8
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6912      	ldr	r2, [r2, #16]
 8003e5e:	0852      	lsrs	r2, r2, #1
 8003e60:	3a01      	subs	r2, #1
 8003e62:	0552      	lsls	r2, r2, #21
 8003e64:	430a      	orrs	r2, r1
 8003e66:	491f      	ldr	r1, [pc, #124]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	610b      	str	r3, [r1, #16]
 8003e6c:	e011      	b.n	8003e92 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6892      	ldr	r2, [r2, #8]
 8003e7e:	0211      	lsls	r1, r2, #8
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6952      	ldr	r2, [r2, #20]
 8003e84:	0852      	lsrs	r2, r2, #1
 8003e86:	3a01      	subs	r2, #1
 8003e88:	0652      	lsls	r2, r2, #25
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	4915      	ldr	r1, [pc, #84]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e92:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a13      	ldr	r2, [pc, #76]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e9c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9e:	f7fd f86b 	bl	8000f78 <HAL_GetTick>
 8003ea2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ea4:	e009      	b.n	8003eba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ea6:	f7fd f867 	bl	8000f78 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d902      	bls.n	8003eba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	73fb      	strb	r3, [r7, #15]
          break;
 8003eb8:	e005      	b.n	8003ec6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eba:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0ef      	beq.n	8003ea6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	4903      	ldr	r1, [pc, #12]	; (8003ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40021000 	.word	0x40021000

08003ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e049      	b.n	8003f8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fc fe1e 	bl	8000b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f000 fa20 	bl	800436c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d001      	beq.n	8003fb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e033      	b.n	8004018 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a19      	ldr	r2, [pc, #100]	; (8004024 <HAL_TIM_Base_Start+0x8c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d009      	beq.n	8003fd6 <HAL_TIM_Base_Start+0x3e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fca:	d004      	beq.n	8003fd6 <HAL_TIM_Base_Start+0x3e>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a15      	ldr	r2, [pc, #84]	; (8004028 <HAL_TIM_Base_Start+0x90>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d115      	bne.n	8004002 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	4b13      	ldr	r3, [pc, #76]	; (800402c <HAL_TIM_Base_Start+0x94>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2b06      	cmp	r3, #6
 8003fe6:	d015      	beq.n	8004014 <HAL_TIM_Base_Start+0x7c>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fee:	d011      	beq.n	8004014 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004000:	e008      	b.n	8004014 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0201 	orr.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e000      	b.n	8004016 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004014:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40012c00 	.word	0x40012c00
 8004028:	40014000 	.word	0x40014000
 800402c:	00010007 	.word	0x00010007

08004030 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e049      	b.n	80040d6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f841 	bl	80040de <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	4619      	mov	r1, r3
 800406e:	4610      	mov	r0, r2
 8004070:	f000 f97c 	bl	800436c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_TIM_OC_ConfigChannel+0x1a>
 800410a:	2302      	movs	r3, #2
 800410c:	e064      	b.n	80041d8 <HAL_TIM_OC_ConfigChannel+0xe4>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b14      	cmp	r3, #20
 800411a:	d857      	bhi.n	80041cc <HAL_TIM_OC_ConfigChannel+0xd8>
 800411c:	a201      	add	r2, pc, #4	; (adr r2, 8004124 <HAL_TIM_OC_ConfigChannel+0x30>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004179 	.word	0x08004179
 8004128:	080041cd 	.word	0x080041cd
 800412c:	080041cd 	.word	0x080041cd
 8004130:	080041cd 	.word	0x080041cd
 8004134:	08004187 	.word	0x08004187
 8004138:	080041cd 	.word	0x080041cd
 800413c:	080041cd 	.word	0x080041cd
 8004140:	080041cd 	.word	0x080041cd
 8004144:	08004195 	.word	0x08004195
 8004148:	080041cd 	.word	0x080041cd
 800414c:	080041cd 	.word	0x080041cd
 8004150:	080041cd 	.word	0x080041cd
 8004154:	080041a3 	.word	0x080041a3
 8004158:	080041cd 	.word	0x080041cd
 800415c:	080041cd 	.word	0x080041cd
 8004160:	080041cd 	.word	0x080041cd
 8004164:	080041b1 	.word	0x080041b1
 8004168:	080041cd 	.word	0x080041cd
 800416c:	080041cd 	.word	0x080041cd
 8004170:	080041cd 	.word	0x080041cd
 8004174:	080041bf 	.word	0x080041bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f958 	bl	8004434 <TIM_OC1_SetConfig>
      break;
 8004184:	e023      	b.n	80041ce <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	4618      	mov	r0, r3
 800418e:	f000 f9cd 	bl	800452c <TIM_OC2_SetConfig>
      break;
 8004192:	e01c      	b.n	80041ce <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fa40 	bl	8004620 <TIM_OC3_SetConfig>
      break;
 80041a0:	e015      	b.n	80041ce <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 fab1 	bl	8004710 <TIM_OC4_SetConfig>
      break;
 80041ae:	e00e      	b.n	80041ce <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fb08 	bl	80047cc <TIM_OC5_SetConfig>
      break;
 80041bc:	e007      	b.n	80041ce <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 fb59 	bl	800487c <TIM_OC6_SetConfig>
      break;
 80041ca:	e000      	b.n	80041ce <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 80041cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_TIM_ConfigClockSource+0x18>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e0b5      	b.n	8004364 <HAL_TIM_ConfigClockSource+0x184>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004216:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800421a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004222:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004234:	d03e      	beq.n	80042b4 <HAL_TIM_ConfigClockSource+0xd4>
 8004236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800423a:	f200 8087 	bhi.w	800434c <HAL_TIM_ConfigClockSource+0x16c>
 800423e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004242:	f000 8085 	beq.w	8004350 <HAL_TIM_ConfigClockSource+0x170>
 8004246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424a:	d87f      	bhi.n	800434c <HAL_TIM_ConfigClockSource+0x16c>
 800424c:	2b70      	cmp	r3, #112	; 0x70
 800424e:	d01a      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0xa6>
 8004250:	2b70      	cmp	r3, #112	; 0x70
 8004252:	d87b      	bhi.n	800434c <HAL_TIM_ConfigClockSource+0x16c>
 8004254:	2b60      	cmp	r3, #96	; 0x60
 8004256:	d050      	beq.n	80042fa <HAL_TIM_ConfigClockSource+0x11a>
 8004258:	2b60      	cmp	r3, #96	; 0x60
 800425a:	d877      	bhi.n	800434c <HAL_TIM_ConfigClockSource+0x16c>
 800425c:	2b50      	cmp	r3, #80	; 0x50
 800425e:	d03c      	beq.n	80042da <HAL_TIM_ConfigClockSource+0xfa>
 8004260:	2b50      	cmp	r3, #80	; 0x50
 8004262:	d873      	bhi.n	800434c <HAL_TIM_ConfigClockSource+0x16c>
 8004264:	2b40      	cmp	r3, #64	; 0x40
 8004266:	d058      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x13a>
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d86f      	bhi.n	800434c <HAL_TIM_ConfigClockSource+0x16c>
 800426c:	2b30      	cmp	r3, #48	; 0x30
 800426e:	d064      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x15a>
 8004270:	2b30      	cmp	r3, #48	; 0x30
 8004272:	d86b      	bhi.n	800434c <HAL_TIM_ConfigClockSource+0x16c>
 8004274:	2b20      	cmp	r3, #32
 8004276:	d060      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x15a>
 8004278:	2b20      	cmp	r3, #32
 800427a:	d867      	bhi.n	800434c <HAL_TIM_ConfigClockSource+0x16c>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d05c      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x15a>
 8004280:	2b10      	cmp	r3, #16
 8004282:	d05a      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004284:	e062      	b.n	800434c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6899      	ldr	r1, [r3, #8]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f000 fbc5 	bl	8004a24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	609a      	str	r2, [r3, #8]
      break;
 80042b2:	e04e      	b.n	8004352 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6818      	ldr	r0, [r3, #0]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	6899      	ldr	r1, [r3, #8]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f000 fbae 	bl	8004a24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042d6:	609a      	str	r2, [r3, #8]
      break;
 80042d8:	e03b      	b.n	8004352 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6859      	ldr	r1, [r3, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	461a      	mov	r2, r3
 80042e8:	f000 fb22 	bl	8004930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2150      	movs	r1, #80	; 0x50
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fb7b 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 80042f8:	e02b      	b.n	8004352 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6859      	ldr	r1, [r3, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	461a      	mov	r2, r3
 8004308:	f000 fb41 	bl	800498e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2160      	movs	r1, #96	; 0x60
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fb6b 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 8004318:	e01b      	b.n	8004352 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6859      	ldr	r1, [r3, #4]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	461a      	mov	r2, r3
 8004328:	f000 fb02 	bl	8004930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2140      	movs	r1, #64	; 0x40
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fb5b 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 8004338:	e00b      	b.n	8004352 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4619      	mov	r1, r3
 8004344:	4610      	mov	r0, r2
 8004346:	f000 fb52 	bl	80049ee <TIM_ITRx_SetConfig>
        break;
 800434a:	e002      	b.n	8004352 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800434c:	bf00      	nop
 800434e:	e000      	b.n	8004352 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004350:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a2a      	ldr	r2, [pc, #168]	; (8004428 <TIM_Base_SetConfig+0xbc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d003      	beq.n	800438c <TIM_Base_SetConfig+0x20>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438a:	d108      	bne.n	800439e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a21      	ldr	r2, [pc, #132]	; (8004428 <TIM_Base_SetConfig+0xbc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00b      	beq.n	80043be <TIM_Base_SetConfig+0x52>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ac:	d007      	beq.n	80043be <TIM_Base_SetConfig+0x52>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a1e      	ldr	r2, [pc, #120]	; (800442c <TIM_Base_SetConfig+0xc0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d003      	beq.n	80043be <TIM_Base_SetConfig+0x52>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a1d      	ldr	r2, [pc, #116]	; (8004430 <TIM_Base_SetConfig+0xc4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d108      	bne.n	80043d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a0c      	ldr	r2, [pc, #48]	; (8004428 <TIM_Base_SetConfig+0xbc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d007      	beq.n	800440c <TIM_Base_SetConfig+0xa0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a0b      	ldr	r2, [pc, #44]	; (800442c <TIM_Base_SetConfig+0xc0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d003      	beq.n	800440c <TIM_Base_SetConfig+0xa0>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a0a      	ldr	r2, [pc, #40]	; (8004430 <TIM_Base_SetConfig+0xc4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d103      	bne.n	8004414 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	615a      	str	r2, [r3, #20]
}
 800441a:	bf00      	nop
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40014000 	.word	0x40014000
 8004430:	40014400 	.word	0x40014400

08004434 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f023 0201 	bic.w	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0303 	bic.w	r3, r3, #3
 800446e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f023 0302 	bic.w	r3, r3, #2
 8004480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a24      	ldr	r2, [pc, #144]	; (8004520 <TIM_OC1_SetConfig+0xec>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d007      	beq.n	80044a4 <TIM_OC1_SetConfig+0x70>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a23      	ldr	r2, [pc, #140]	; (8004524 <TIM_OC1_SetConfig+0xf0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d003      	beq.n	80044a4 <TIM_OC1_SetConfig+0x70>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a22      	ldr	r2, [pc, #136]	; (8004528 <TIM_OC1_SetConfig+0xf4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d10c      	bne.n	80044be <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f023 0308 	bic.w	r3, r3, #8
 80044aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f023 0304 	bic.w	r3, r3, #4
 80044bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a17      	ldr	r2, [pc, #92]	; (8004520 <TIM_OC1_SetConfig+0xec>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <TIM_OC1_SetConfig+0xa2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a16      	ldr	r2, [pc, #88]	; (8004524 <TIM_OC1_SetConfig+0xf0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d003      	beq.n	80044d6 <TIM_OC1_SetConfig+0xa2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a15      	ldr	r2, [pc, #84]	; (8004528 <TIM_OC1_SetConfig+0xf4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d111      	bne.n	80044fa <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	621a      	str	r2, [r3, #32]
}
 8004514:	bf00      	nop
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	40012c00 	.word	0x40012c00
 8004524:	40014000 	.word	0x40014000
 8004528:	40014400 	.word	0x40014400

0800452c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f023 0210 	bic.w	r2, r3, #16
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800455a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	021b      	lsls	r3, r3, #8
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 0320 	bic.w	r3, r3, #32
 800457a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a22      	ldr	r2, [pc, #136]	; (8004614 <TIM_OC2_SetConfig+0xe8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d10d      	bne.n	80045ac <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a19      	ldr	r2, [pc, #100]	; (8004614 <TIM_OC2_SetConfig+0xe8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d007      	beq.n	80045c4 <TIM_OC2_SetConfig+0x98>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a18      	ldr	r2, [pc, #96]	; (8004618 <TIM_OC2_SetConfig+0xec>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_OC2_SetConfig+0x98>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a17      	ldr	r2, [pc, #92]	; (800461c <TIM_OC2_SetConfig+0xf0>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d113      	bne.n	80045ec <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40012c00 	.word	0x40012c00
 8004618:	40014000 	.word	0x40014000
 800461c:	40014400 	.word	0x40014400

08004620 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800464e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0303 	bic.w	r3, r3, #3
 800465a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800466c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a21      	ldr	r2, [pc, #132]	; (8004704 <TIM_OC3_SetConfig+0xe4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10d      	bne.n	800469e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800469c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a18      	ldr	r2, [pc, #96]	; (8004704 <TIM_OC3_SetConfig+0xe4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d007      	beq.n	80046b6 <TIM_OC3_SetConfig+0x96>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a17      	ldr	r2, [pc, #92]	; (8004708 <TIM_OC3_SetConfig+0xe8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d003      	beq.n	80046b6 <TIM_OC3_SetConfig+0x96>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a16      	ldr	r2, [pc, #88]	; (800470c <TIM_OC3_SetConfig+0xec>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d113      	bne.n	80046de <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	621a      	str	r2, [r3, #32]
}
 80046f8:	bf00      	nop
 80046fa:	371c      	adds	r7, #28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	40012c00 	.word	0x40012c00
 8004708:	40014000 	.word	0x40014000
 800470c:	40014400 	.word	0x40014400

08004710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800473e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800474a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	021b      	lsls	r3, r3, #8
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800475e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	031b      	lsls	r3, r3, #12
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a14      	ldr	r2, [pc, #80]	; (80047c0 <TIM_OC4_SetConfig+0xb0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d007      	beq.n	8004784 <TIM_OC4_SetConfig+0x74>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <TIM_OC4_SetConfig+0xb4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d003      	beq.n	8004784 <TIM_OC4_SetConfig+0x74>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a12      	ldr	r2, [pc, #72]	; (80047c8 <TIM_OC4_SetConfig+0xb8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d109      	bne.n	8004798 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800478a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	019b      	lsls	r3, r3, #6
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	621a      	str	r2, [r3, #32]
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40012c00 	.word	0x40012c00
 80047c4:	40014000 	.word	0x40014000
 80047c8:	40014400 	.word	0x40014400

080047cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004810:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a13      	ldr	r2, [pc, #76]	; (8004870 <TIM_OC5_SetConfig+0xa4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d007      	beq.n	8004836 <TIM_OC5_SetConfig+0x6a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a12      	ldr	r2, [pc, #72]	; (8004874 <TIM_OC5_SetConfig+0xa8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d003      	beq.n	8004836 <TIM_OC5_SetConfig+0x6a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a11      	ldr	r2, [pc, #68]	; (8004878 <TIM_OC5_SetConfig+0xac>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d109      	bne.n	800484a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800483c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	621a      	str	r2, [r3, #32]
}
 8004864:	bf00      	nop
 8004866:	371c      	adds	r7, #28
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	40012c00 	.word	0x40012c00
 8004874:	40014000 	.word	0x40014000
 8004878:	40014400 	.word	0x40014400

0800487c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	051b      	lsls	r3, r3, #20
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a14      	ldr	r2, [pc, #80]	; (8004924 <TIM_OC6_SetConfig+0xa8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d007      	beq.n	80048e8 <TIM_OC6_SetConfig+0x6c>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a13      	ldr	r2, [pc, #76]	; (8004928 <TIM_OC6_SetConfig+0xac>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d003      	beq.n	80048e8 <TIM_OC6_SetConfig+0x6c>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a12      	ldr	r2, [pc, #72]	; (800492c <TIM_OC6_SetConfig+0xb0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d109      	bne.n	80048fc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	029b      	lsls	r3, r3, #10
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	621a      	str	r2, [r3, #32]
}
 8004916:	bf00      	nop
 8004918:	371c      	adds	r7, #28
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40012c00 	.word	0x40012c00
 8004928:	40014000 	.word	0x40014000
 800492c:	40014400 	.word	0x40014400

08004930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f023 0201 	bic.w	r2, r3, #1
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800495a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f023 030a 	bic.w	r3, r3, #10
 800496c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	621a      	str	r2, [r3, #32]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800498e:	b480      	push	{r7}
 8004990:	b087      	sub	sp, #28
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f023 0210 	bic.w	r2, r3, #16
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	031b      	lsls	r3, r3, #12
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b085      	sub	sp, #20
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f043 0307 	orr.w	r3, r3, #7
 8004a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	609a      	str	r2, [r3, #8]
}
 8004a18:	bf00      	nop
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	021a      	lsls	r2, r3, #8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	609a      	str	r2, [r3, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e04f      	b.n	8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a21      	ldr	r2, [pc, #132]	; (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d108      	bne.n	8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004aac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a14      	ldr	r2, [pc, #80]	; (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d009      	beq.n	8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae4:	d004      	beq.n	8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a10      	ldr	r2, [pc, #64]	; (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d10c      	bne.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40014000 	.word	0x40014000

08004b30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e040      	b.n	8004bc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fc f81a 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2224      	movs	r2, #36	; 0x24
 8004b5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0201 	bic.w	r2, r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f992 	bl	8004e98 <UART_SetConfig>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e022      	b.n	8004bc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fb92 	bl	80052b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0201 	orr.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fc19 	bl	80053f4 <UART_CheckIdleState>
 8004bc2:	4603      	mov	r3, r0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08a      	sub	sp, #40	; 0x28
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004be0:	2b20      	cmp	r3, #32
 8004be2:	f040 8082 	bne.w	8004cea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <HAL_UART_Transmit+0x26>
 8004bec:	88fb      	ldrh	r3, [r7, #6]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e07a      	b.n	8004cec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_UART_Transmit+0x38>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e073      	b.n	8004cec <HAL_UART_Transmit+0x120>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2221      	movs	r2, #33	; 0x21
 8004c18:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c1a:	f7fc f9ad 	bl	8000f78 <HAL_GetTick>
 8004c1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	88fa      	ldrh	r2, [r7, #6]
 8004c24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	88fa      	ldrh	r2, [r7, #6]
 8004c2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c38:	d108      	bne.n	8004c4c <HAL_UART_Transmit+0x80>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d104      	bne.n	8004c4c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	e003      	b.n	8004c54 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c5c:	e02d      	b.n	8004cba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2200      	movs	r2, #0
 8004c66:	2180      	movs	r1, #128	; 0x80
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 fc0c 	bl	8005486 <UART_WaitOnFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e039      	b.n	8004cec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10b      	bne.n	8004c96 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	881a      	ldrh	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c8a:	b292      	uxth	r2, r2
 8004c8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	3302      	adds	r3, #2
 8004c92:	61bb      	str	r3, [r7, #24]
 8004c94:	e008      	b.n	8004ca8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	781a      	ldrb	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	b292      	uxth	r2, r2
 8004ca0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1cb      	bne.n	8004c5e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2140      	movs	r1, #64	; 0x40
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 fbd8 	bl	8005486 <UART_WaitOnFlagUntilTimeout>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e005      	b.n	8004cec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	e000      	b.n	8004cec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004cea:	2302      	movs	r3, #2
  }
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3720      	adds	r7, #32
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08a      	sub	sp, #40	; 0x28
 8004cf8:	af02      	add	r7, sp, #8
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	4613      	mov	r3, r2
 8004d02:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	f040 80bf 	bne.w	8004e8c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <HAL_UART_Receive+0x26>
 8004d14:	88fb      	ldrh	r3, [r7, #6]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e0b7      	b.n	8004e8e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_UART_Receive+0x38>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e0b0      	b.n	8004e8e <HAL_UART_Receive+0x19a>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2222      	movs	r2, #34	; 0x22
 8004d40:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d48:	f7fc f916 	bl	8000f78 <HAL_GetTick>
 8004d4c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	88fa      	ldrh	r2, [r7, #6]
 8004d52:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	88fa      	ldrh	r2, [r7, #6]
 8004d5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d66:	d10e      	bne.n	8004d86 <HAL_UART_Receive+0x92>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d105      	bne.n	8004d7c <HAL_UART_Receive+0x88>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d7a:	e02d      	b.n	8004dd8 <HAL_UART_Receive+0xe4>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	22ff      	movs	r2, #255	; 0xff
 8004d80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d84:	e028      	b.n	8004dd8 <HAL_UART_Receive+0xe4>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10d      	bne.n	8004daa <HAL_UART_Receive+0xb6>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d104      	bne.n	8004da0 <HAL_UART_Receive+0xac>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	22ff      	movs	r2, #255	; 0xff
 8004d9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d9e:	e01b      	b.n	8004dd8 <HAL_UART_Receive+0xe4>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	227f      	movs	r2, #127	; 0x7f
 8004da4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004da8:	e016      	b.n	8004dd8 <HAL_UART_Receive+0xe4>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004db2:	d10d      	bne.n	8004dd0 <HAL_UART_Receive+0xdc>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d104      	bne.n	8004dc6 <HAL_UART_Receive+0xd2>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	227f      	movs	r2, #127	; 0x7f
 8004dc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dc4:	e008      	b.n	8004dd8 <HAL_UART_Receive+0xe4>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	223f      	movs	r2, #63	; 0x3f
 8004dca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dce:	e003      	b.n	8004dd8 <HAL_UART_Receive+0xe4>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004dde:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de8:	d108      	bne.n	8004dfc <HAL_UART_Receive+0x108>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d104      	bne.n	8004dfc <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	e003      	b.n	8004e04 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e0c:	e033      	b.n	8004e76 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2200      	movs	r2, #0
 8004e16:	2120      	movs	r1, #32
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 fb34 	bl	8005486 <UART_WaitOnFlagUntilTimeout>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e032      	b.n	8004e8e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10c      	bne.n	8004e48 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	8a7b      	ldrh	r3, [r7, #18]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	3302      	adds	r3, #2
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	e00d      	b.n	8004e64 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	8a7b      	ldrh	r3, [r7, #18]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	4013      	ands	r3, r2
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	3301      	adds	r3, #1
 8004e62:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1c5      	bne.n	8004e0e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e000      	b.n	8004e8e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
  }
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e98:	b5b0      	push	{r4, r5, r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	4baf      	ldr	r3, [pc, #700]	; (8005180 <UART_SetConfig+0x2e8>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6812      	ldr	r2, [r2, #0]
 8004eca:	69f9      	ldr	r1, [r7, #28]
 8004ecc:	430b      	orrs	r3, r1
 8004ece:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4aa4      	ldr	r2, [pc, #656]	; (8005184 <UART_SetConfig+0x2ec>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a9b      	ldr	r2, [pc, #620]	; (8005188 <UART_SetConfig+0x2f0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d121      	bne.n	8004f62 <UART_SetConfig+0xca>
 8004f1e:	4b9b      	ldr	r3, [pc, #620]	; (800518c <UART_SetConfig+0x2f4>)
 8004f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d817      	bhi.n	8004f5c <UART_SetConfig+0xc4>
 8004f2c:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <UART_SetConfig+0x9c>)
 8004f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f32:	bf00      	nop
 8004f34:	08004f45 	.word	0x08004f45
 8004f38:	08004f51 	.word	0x08004f51
 8004f3c:	08004f4b 	.word	0x08004f4b
 8004f40:	08004f57 	.word	0x08004f57
 8004f44:	2301      	movs	r3, #1
 8004f46:	76fb      	strb	r3, [r7, #27]
 8004f48:	e070      	b.n	800502c <UART_SetConfig+0x194>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	76fb      	strb	r3, [r7, #27]
 8004f4e:	e06d      	b.n	800502c <UART_SetConfig+0x194>
 8004f50:	2304      	movs	r3, #4
 8004f52:	76fb      	strb	r3, [r7, #27]
 8004f54:	e06a      	b.n	800502c <UART_SetConfig+0x194>
 8004f56:	2308      	movs	r3, #8
 8004f58:	76fb      	strb	r3, [r7, #27]
 8004f5a:	e067      	b.n	800502c <UART_SetConfig+0x194>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	76fb      	strb	r3, [r7, #27]
 8004f60:	e064      	b.n	800502c <UART_SetConfig+0x194>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a8a      	ldr	r2, [pc, #552]	; (8005190 <UART_SetConfig+0x2f8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d132      	bne.n	8004fd2 <UART_SetConfig+0x13a>
 8004f6c:	4b87      	ldr	r3, [pc, #540]	; (800518c <UART_SetConfig+0x2f4>)
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f72:	f003 030c 	and.w	r3, r3, #12
 8004f76:	2b0c      	cmp	r3, #12
 8004f78:	d828      	bhi.n	8004fcc <UART_SetConfig+0x134>
 8004f7a:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <UART_SetConfig+0xe8>)
 8004f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f80:	08004fb5 	.word	0x08004fb5
 8004f84:	08004fcd 	.word	0x08004fcd
 8004f88:	08004fcd 	.word	0x08004fcd
 8004f8c:	08004fcd 	.word	0x08004fcd
 8004f90:	08004fc1 	.word	0x08004fc1
 8004f94:	08004fcd 	.word	0x08004fcd
 8004f98:	08004fcd 	.word	0x08004fcd
 8004f9c:	08004fcd 	.word	0x08004fcd
 8004fa0:	08004fbb 	.word	0x08004fbb
 8004fa4:	08004fcd 	.word	0x08004fcd
 8004fa8:	08004fcd 	.word	0x08004fcd
 8004fac:	08004fcd 	.word	0x08004fcd
 8004fb0:	08004fc7 	.word	0x08004fc7
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	76fb      	strb	r3, [r7, #27]
 8004fb8:	e038      	b.n	800502c <UART_SetConfig+0x194>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	76fb      	strb	r3, [r7, #27]
 8004fbe:	e035      	b.n	800502c <UART_SetConfig+0x194>
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	76fb      	strb	r3, [r7, #27]
 8004fc4:	e032      	b.n	800502c <UART_SetConfig+0x194>
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	76fb      	strb	r3, [r7, #27]
 8004fca:	e02f      	b.n	800502c <UART_SetConfig+0x194>
 8004fcc:	2310      	movs	r3, #16
 8004fce:	76fb      	strb	r3, [r7, #27]
 8004fd0:	e02c      	b.n	800502c <UART_SetConfig+0x194>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a6b      	ldr	r2, [pc, #428]	; (8005184 <UART_SetConfig+0x2ec>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d125      	bne.n	8005028 <UART_SetConfig+0x190>
 8004fdc:	4b6b      	ldr	r3, [pc, #428]	; (800518c <UART_SetConfig+0x2f4>)
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fe6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fea:	d017      	beq.n	800501c <UART_SetConfig+0x184>
 8004fec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ff0:	d817      	bhi.n	8005022 <UART_SetConfig+0x18a>
 8004ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff6:	d00b      	beq.n	8005010 <UART_SetConfig+0x178>
 8004ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ffc:	d811      	bhi.n	8005022 <UART_SetConfig+0x18a>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <UART_SetConfig+0x172>
 8005002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005006:	d006      	beq.n	8005016 <UART_SetConfig+0x17e>
 8005008:	e00b      	b.n	8005022 <UART_SetConfig+0x18a>
 800500a:	2300      	movs	r3, #0
 800500c:	76fb      	strb	r3, [r7, #27]
 800500e:	e00d      	b.n	800502c <UART_SetConfig+0x194>
 8005010:	2302      	movs	r3, #2
 8005012:	76fb      	strb	r3, [r7, #27]
 8005014:	e00a      	b.n	800502c <UART_SetConfig+0x194>
 8005016:	2304      	movs	r3, #4
 8005018:	76fb      	strb	r3, [r7, #27]
 800501a:	e007      	b.n	800502c <UART_SetConfig+0x194>
 800501c:	2308      	movs	r3, #8
 800501e:	76fb      	strb	r3, [r7, #27]
 8005020:	e004      	b.n	800502c <UART_SetConfig+0x194>
 8005022:	2310      	movs	r3, #16
 8005024:	76fb      	strb	r3, [r7, #27]
 8005026:	e001      	b.n	800502c <UART_SetConfig+0x194>
 8005028:	2310      	movs	r3, #16
 800502a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a54      	ldr	r2, [pc, #336]	; (8005184 <UART_SetConfig+0x2ec>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d173      	bne.n	800511e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005036:	7efb      	ldrb	r3, [r7, #27]
 8005038:	2b08      	cmp	r3, #8
 800503a:	d824      	bhi.n	8005086 <UART_SetConfig+0x1ee>
 800503c:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <UART_SetConfig+0x1ac>)
 800503e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005042:	bf00      	nop
 8005044:	08005069 	.word	0x08005069
 8005048:	08005087 	.word	0x08005087
 800504c:	08005071 	.word	0x08005071
 8005050:	08005087 	.word	0x08005087
 8005054:	08005077 	.word	0x08005077
 8005058:	08005087 	.word	0x08005087
 800505c:	08005087 	.word	0x08005087
 8005060:	08005087 	.word	0x08005087
 8005064:	0800507f 	.word	0x0800507f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005068:	f7fe fbbc 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 800506c:	6178      	str	r0, [r7, #20]
        break;
 800506e:	e00f      	b.n	8005090 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005070:	4b48      	ldr	r3, [pc, #288]	; (8005194 <UART_SetConfig+0x2fc>)
 8005072:	617b      	str	r3, [r7, #20]
        break;
 8005074:	e00c      	b.n	8005090 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005076:	f7fe fb1d 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 800507a:	6178      	str	r0, [r7, #20]
        break;
 800507c:	e008      	b.n	8005090 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800507e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005082:	617b      	str	r3, [r7, #20]
        break;
 8005084:	e004      	b.n	8005090 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	76bb      	strb	r3, [r7, #26]
        break;
 800508e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 80fe 	beq.w	8005294 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	4413      	add	r3, r2
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d305      	bcc.n	80050b4 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d902      	bls.n	80050ba <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	76bb      	strb	r3, [r7, #26]
 80050b8:	e0ec      	b.n	8005294 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	4618      	mov	r0, r3
 80050be:	f04f 0100 	mov.w	r1, #0
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	020b      	lsls	r3, r1, #8
 80050cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80050d0:	0202      	lsls	r2, r0, #8
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	6849      	ldr	r1, [r1, #4]
 80050d6:	0849      	lsrs	r1, r1, #1
 80050d8:	4608      	mov	r0, r1
 80050da:	f04f 0100 	mov.w	r1, #0
 80050de:	1814      	adds	r4, r2, r0
 80050e0:	eb43 0501 	adc.w	r5, r3, r1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	461a      	mov	r2, r3
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	4620      	mov	r0, r4
 80050f0:	4629      	mov	r1, r5
 80050f2:	f7fb f8bd 	bl	8000270 <__aeabi_uldivmod>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4613      	mov	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005104:	d308      	bcc.n	8005118 <UART_SetConfig+0x280>
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800510c:	d204      	bcs.n	8005118 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	60da      	str	r2, [r3, #12]
 8005116:	e0bd      	b.n	8005294 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	76bb      	strb	r3, [r7, #26]
 800511c:	e0ba      	b.n	8005294 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005126:	d168      	bne.n	80051fa <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8005128:	7efb      	ldrb	r3, [r7, #27]
 800512a:	2b08      	cmp	r3, #8
 800512c:	d834      	bhi.n	8005198 <UART_SetConfig+0x300>
 800512e:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <UART_SetConfig+0x29c>)
 8005130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005134:	08005159 	.word	0x08005159
 8005138:	08005161 	.word	0x08005161
 800513c:	08005169 	.word	0x08005169
 8005140:	08005199 	.word	0x08005199
 8005144:	0800516f 	.word	0x0800516f
 8005148:	08005199 	.word	0x08005199
 800514c:	08005199 	.word	0x08005199
 8005150:	08005199 	.word	0x08005199
 8005154:	08005177 	.word	0x08005177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005158:	f7fe fb44 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 800515c:	6178      	str	r0, [r7, #20]
        break;
 800515e:	e020      	b.n	80051a2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005160:	f7fe fb56 	bl	8003810 <HAL_RCC_GetPCLK2Freq>
 8005164:	6178      	str	r0, [r7, #20]
        break;
 8005166:	e01c      	b.n	80051a2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005168:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <UART_SetConfig+0x2fc>)
 800516a:	617b      	str	r3, [r7, #20]
        break;
 800516c:	e019      	b.n	80051a2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800516e:	f7fe faa1 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8005172:	6178      	str	r0, [r7, #20]
        break;
 8005174:	e015      	b.n	80051a2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800517a:	617b      	str	r3, [r7, #20]
        break;
 800517c:	e011      	b.n	80051a2 <UART_SetConfig+0x30a>
 800517e:	bf00      	nop
 8005180:	efff69f3 	.word	0xefff69f3
 8005184:	40008000 	.word	0x40008000
 8005188:	40013800 	.word	0x40013800
 800518c:	40021000 	.word	0x40021000
 8005190:	40004400 	.word	0x40004400
 8005194:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	76bb      	strb	r3, [r7, #26]
        break;
 80051a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d075      	beq.n	8005294 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	005a      	lsls	r2, r3, #1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	085b      	lsrs	r3, r3, #1
 80051b2:	441a      	add	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051bc:	b29b      	uxth	r3, r3
 80051be:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b0f      	cmp	r3, #15
 80051c4:	d916      	bls.n	80051f4 <UART_SetConfig+0x35c>
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051cc:	d212      	bcs.n	80051f4 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	f023 030f 	bic.w	r3, r3, #15
 80051d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	085b      	lsrs	r3, r3, #1
 80051dc:	b29b      	uxth	r3, r3
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	89fb      	ldrh	r3, [r7, #14]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	89fa      	ldrh	r2, [r7, #14]
 80051f0:	60da      	str	r2, [r3, #12]
 80051f2:	e04f      	b.n	8005294 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	76bb      	strb	r3, [r7, #26]
 80051f8:	e04c      	b.n	8005294 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051fa:	7efb      	ldrb	r3, [r7, #27]
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d828      	bhi.n	8005252 <UART_SetConfig+0x3ba>
 8005200:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <UART_SetConfig+0x370>)
 8005202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005206:	bf00      	nop
 8005208:	0800522d 	.word	0x0800522d
 800520c:	08005235 	.word	0x08005235
 8005210:	0800523d 	.word	0x0800523d
 8005214:	08005253 	.word	0x08005253
 8005218:	08005243 	.word	0x08005243
 800521c:	08005253 	.word	0x08005253
 8005220:	08005253 	.word	0x08005253
 8005224:	08005253 	.word	0x08005253
 8005228:	0800524b 	.word	0x0800524b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800522c:	f7fe fada 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 8005230:	6178      	str	r0, [r7, #20]
        break;
 8005232:	e013      	b.n	800525c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005234:	f7fe faec 	bl	8003810 <HAL_RCC_GetPCLK2Freq>
 8005238:	6178      	str	r0, [r7, #20]
        break;
 800523a:	e00f      	b.n	800525c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800523c:	4b1b      	ldr	r3, [pc, #108]	; (80052ac <UART_SetConfig+0x414>)
 800523e:	617b      	str	r3, [r7, #20]
        break;
 8005240:	e00c      	b.n	800525c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005242:	f7fe fa37 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8005246:	6178      	str	r0, [r7, #20]
        break;
 8005248:	e008      	b.n	800525c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800524a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800524e:	617b      	str	r3, [r7, #20]
        break;
 8005250:	e004      	b.n	800525c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	76bb      	strb	r3, [r7, #26]
        break;
 800525a:	bf00      	nop
    }

    if (pclk != 0U)
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d018      	beq.n	8005294 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	085a      	lsrs	r2, r3, #1
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	441a      	add	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	fbb2 f3f3 	udiv	r3, r2, r3
 8005274:	b29b      	uxth	r3, r3
 8005276:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b0f      	cmp	r3, #15
 800527c:	d908      	bls.n	8005290 <UART_SetConfig+0x3f8>
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005284:	d204      	bcs.n	8005290 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	60da      	str	r2, [r3, #12]
 800528e:	e001      	b.n	8005294 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80052a0:	7ebb      	ldrb	r3, [r7, #26]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3720      	adds	r7, #32
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bdb0      	pop	{r4, r5, r7, pc}
 80052aa:	bf00      	nop
 80052ac:	00f42400 	.word	0x00f42400

080052b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01a      	beq.n	80053c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ae:	d10a      	bne.n	80053c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	605a      	str	r2, [r3, #4]
  }
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005404:	f7fb fdb8 	bl	8000f78 <HAL_GetTick>
 8005408:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b08      	cmp	r3, #8
 8005416:	d10e      	bne.n	8005436 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005418:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f82d 	bl	8005486 <UART_WaitOnFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e023      	b.n	800547e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b04      	cmp	r3, #4
 8005442:	d10e      	bne.n	8005462 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f817 	bl	8005486 <UART_WaitOnFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e00d      	b.n	800547e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2220      	movs	r2, #32
 8005466:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	603b      	str	r3, [r7, #0]
 8005492:	4613      	mov	r3, r2
 8005494:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005496:	e05e      	b.n	8005556 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d05a      	beq.n	8005556 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a0:	f7fb fd6a 	bl	8000f78 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d302      	bcc.n	80054b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d11b      	bne.n	80054ee <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054c4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0201 	bic.w	r2, r2, #1
 80054d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2220      	movs	r2, #32
 80054da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e043      	b.n	8005576 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d02c      	beq.n	8005556 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800550a:	d124      	bne.n	8005556 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005514:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005524:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0201 	bic.w	r2, r2, #1
 8005534:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2220      	movs	r2, #32
 800553a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2220      	movs	r2, #32
 8005540:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2220      	movs	r2, #32
 8005546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e00f      	b.n	8005576 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69da      	ldr	r2, [r3, #28]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4013      	ands	r3, r2
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	429a      	cmp	r2, r3
 8005564:	bf0c      	ite	eq
 8005566:	2301      	moveq	r3, #1
 8005568:	2300      	movne	r3, #0
 800556a:	b2db      	uxtb	r3, r3
 800556c:	461a      	mov	r2, r3
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	429a      	cmp	r2, r3
 8005572:	d091      	beq.n	8005498 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <__errno>:
 8005580:	4b01      	ldr	r3, [pc, #4]	; (8005588 <__errno+0x8>)
 8005582:	6818      	ldr	r0, [r3, #0]
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	2000000c 	.word	0x2000000c

0800558c <__libc_init_array>:
 800558c:	b570      	push	{r4, r5, r6, lr}
 800558e:	4d0d      	ldr	r5, [pc, #52]	; (80055c4 <__libc_init_array+0x38>)
 8005590:	4c0d      	ldr	r4, [pc, #52]	; (80055c8 <__libc_init_array+0x3c>)
 8005592:	1b64      	subs	r4, r4, r5
 8005594:	10a4      	asrs	r4, r4, #2
 8005596:	2600      	movs	r6, #0
 8005598:	42a6      	cmp	r6, r4
 800559a:	d109      	bne.n	80055b0 <__libc_init_array+0x24>
 800559c:	4d0b      	ldr	r5, [pc, #44]	; (80055cc <__libc_init_array+0x40>)
 800559e:	4c0c      	ldr	r4, [pc, #48]	; (80055d0 <__libc_init_array+0x44>)
 80055a0:	f000 ff76 	bl	8006490 <_init>
 80055a4:	1b64      	subs	r4, r4, r5
 80055a6:	10a4      	asrs	r4, r4, #2
 80055a8:	2600      	movs	r6, #0
 80055aa:	42a6      	cmp	r6, r4
 80055ac:	d105      	bne.n	80055ba <__libc_init_array+0x2e>
 80055ae:	bd70      	pop	{r4, r5, r6, pc}
 80055b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b4:	4798      	blx	r3
 80055b6:	3601      	adds	r6, #1
 80055b8:	e7ee      	b.n	8005598 <__libc_init_array+0xc>
 80055ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80055be:	4798      	blx	r3
 80055c0:	3601      	adds	r6, #1
 80055c2:	e7f2      	b.n	80055aa <__libc_init_array+0x1e>
 80055c4:	080065a4 	.word	0x080065a4
 80055c8:	080065a4 	.word	0x080065a4
 80055cc:	080065a4 	.word	0x080065a4
 80055d0:	080065a8 	.word	0x080065a8

080055d4 <memset>:
 80055d4:	4402      	add	r2, r0
 80055d6:	4603      	mov	r3, r0
 80055d8:	4293      	cmp	r3, r2
 80055da:	d100      	bne.n	80055de <memset+0xa>
 80055dc:	4770      	bx	lr
 80055de:	f803 1b01 	strb.w	r1, [r3], #1
 80055e2:	e7f9      	b.n	80055d8 <memset+0x4>

080055e4 <iprintf>:
 80055e4:	b40f      	push	{r0, r1, r2, r3}
 80055e6:	4b0a      	ldr	r3, [pc, #40]	; (8005610 <iprintf+0x2c>)
 80055e8:	b513      	push	{r0, r1, r4, lr}
 80055ea:	681c      	ldr	r4, [r3, #0]
 80055ec:	b124      	cbz	r4, 80055f8 <iprintf+0x14>
 80055ee:	69a3      	ldr	r3, [r4, #24]
 80055f0:	b913      	cbnz	r3, 80055f8 <iprintf+0x14>
 80055f2:	4620      	mov	r0, r4
 80055f4:	f000 f866 	bl	80056c4 <__sinit>
 80055f8:	ab05      	add	r3, sp, #20
 80055fa:	9a04      	ldr	r2, [sp, #16]
 80055fc:	68a1      	ldr	r1, [r4, #8]
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	4620      	mov	r0, r4
 8005602:	f000 f983 	bl	800590c <_vfiprintf_r>
 8005606:	b002      	add	sp, #8
 8005608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800560c:	b004      	add	sp, #16
 800560e:	4770      	bx	lr
 8005610:	2000000c 	.word	0x2000000c

08005614 <std>:
 8005614:	2300      	movs	r3, #0
 8005616:	b510      	push	{r4, lr}
 8005618:	4604      	mov	r4, r0
 800561a:	e9c0 3300 	strd	r3, r3, [r0]
 800561e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005622:	6083      	str	r3, [r0, #8]
 8005624:	8181      	strh	r1, [r0, #12]
 8005626:	6643      	str	r3, [r0, #100]	; 0x64
 8005628:	81c2      	strh	r2, [r0, #14]
 800562a:	6183      	str	r3, [r0, #24]
 800562c:	4619      	mov	r1, r3
 800562e:	2208      	movs	r2, #8
 8005630:	305c      	adds	r0, #92	; 0x5c
 8005632:	f7ff ffcf 	bl	80055d4 <memset>
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <std+0x38>)
 8005638:	6263      	str	r3, [r4, #36]	; 0x24
 800563a:	4b05      	ldr	r3, [pc, #20]	; (8005650 <std+0x3c>)
 800563c:	62a3      	str	r3, [r4, #40]	; 0x28
 800563e:	4b05      	ldr	r3, [pc, #20]	; (8005654 <std+0x40>)
 8005640:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005642:	4b05      	ldr	r3, [pc, #20]	; (8005658 <std+0x44>)
 8005644:	6224      	str	r4, [r4, #32]
 8005646:	6323      	str	r3, [r4, #48]	; 0x30
 8005648:	bd10      	pop	{r4, pc}
 800564a:	bf00      	nop
 800564c:	08005eb5 	.word	0x08005eb5
 8005650:	08005ed7 	.word	0x08005ed7
 8005654:	08005f0f 	.word	0x08005f0f
 8005658:	08005f33 	.word	0x08005f33

0800565c <_cleanup_r>:
 800565c:	4901      	ldr	r1, [pc, #4]	; (8005664 <_cleanup_r+0x8>)
 800565e:	f000 b8af 	b.w	80057c0 <_fwalk_reent>
 8005662:	bf00      	nop
 8005664:	0800620d 	.word	0x0800620d

08005668 <__sfmoreglue>:
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	1e4a      	subs	r2, r1, #1
 800566c:	2568      	movs	r5, #104	; 0x68
 800566e:	4355      	muls	r5, r2
 8005670:	460e      	mov	r6, r1
 8005672:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005676:	f000 f8c5 	bl	8005804 <_malloc_r>
 800567a:	4604      	mov	r4, r0
 800567c:	b140      	cbz	r0, 8005690 <__sfmoreglue+0x28>
 800567e:	2100      	movs	r1, #0
 8005680:	e9c0 1600 	strd	r1, r6, [r0]
 8005684:	300c      	adds	r0, #12
 8005686:	60a0      	str	r0, [r4, #8]
 8005688:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800568c:	f7ff ffa2 	bl	80055d4 <memset>
 8005690:	4620      	mov	r0, r4
 8005692:	bd70      	pop	{r4, r5, r6, pc}

08005694 <__sfp_lock_acquire>:
 8005694:	4801      	ldr	r0, [pc, #4]	; (800569c <__sfp_lock_acquire+0x8>)
 8005696:	f000 b8b3 	b.w	8005800 <__retarget_lock_acquire_recursive>
 800569a:	bf00      	nop
 800569c:	20000224 	.word	0x20000224

080056a0 <__sfp_lock_release>:
 80056a0:	4801      	ldr	r0, [pc, #4]	; (80056a8 <__sfp_lock_release+0x8>)
 80056a2:	f000 b8ae 	b.w	8005802 <__retarget_lock_release_recursive>
 80056a6:	bf00      	nop
 80056a8:	20000224 	.word	0x20000224

080056ac <__sinit_lock_acquire>:
 80056ac:	4801      	ldr	r0, [pc, #4]	; (80056b4 <__sinit_lock_acquire+0x8>)
 80056ae:	f000 b8a7 	b.w	8005800 <__retarget_lock_acquire_recursive>
 80056b2:	bf00      	nop
 80056b4:	2000021f 	.word	0x2000021f

080056b8 <__sinit_lock_release>:
 80056b8:	4801      	ldr	r0, [pc, #4]	; (80056c0 <__sinit_lock_release+0x8>)
 80056ba:	f000 b8a2 	b.w	8005802 <__retarget_lock_release_recursive>
 80056be:	bf00      	nop
 80056c0:	2000021f 	.word	0x2000021f

080056c4 <__sinit>:
 80056c4:	b510      	push	{r4, lr}
 80056c6:	4604      	mov	r4, r0
 80056c8:	f7ff fff0 	bl	80056ac <__sinit_lock_acquire>
 80056cc:	69a3      	ldr	r3, [r4, #24]
 80056ce:	b11b      	cbz	r3, 80056d8 <__sinit+0x14>
 80056d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d4:	f7ff bff0 	b.w	80056b8 <__sinit_lock_release>
 80056d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80056dc:	6523      	str	r3, [r4, #80]	; 0x50
 80056de:	4b13      	ldr	r3, [pc, #76]	; (800572c <__sinit+0x68>)
 80056e0:	4a13      	ldr	r2, [pc, #76]	; (8005730 <__sinit+0x6c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80056e6:	42a3      	cmp	r3, r4
 80056e8:	bf04      	itt	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	61a3      	streq	r3, [r4, #24]
 80056ee:	4620      	mov	r0, r4
 80056f0:	f000 f820 	bl	8005734 <__sfp>
 80056f4:	6060      	str	r0, [r4, #4]
 80056f6:	4620      	mov	r0, r4
 80056f8:	f000 f81c 	bl	8005734 <__sfp>
 80056fc:	60a0      	str	r0, [r4, #8]
 80056fe:	4620      	mov	r0, r4
 8005700:	f000 f818 	bl	8005734 <__sfp>
 8005704:	2200      	movs	r2, #0
 8005706:	60e0      	str	r0, [r4, #12]
 8005708:	2104      	movs	r1, #4
 800570a:	6860      	ldr	r0, [r4, #4]
 800570c:	f7ff ff82 	bl	8005614 <std>
 8005710:	68a0      	ldr	r0, [r4, #8]
 8005712:	2201      	movs	r2, #1
 8005714:	2109      	movs	r1, #9
 8005716:	f7ff ff7d 	bl	8005614 <std>
 800571a:	68e0      	ldr	r0, [r4, #12]
 800571c:	2202      	movs	r2, #2
 800571e:	2112      	movs	r1, #18
 8005720:	f7ff ff78 	bl	8005614 <std>
 8005724:	2301      	movs	r3, #1
 8005726:	61a3      	str	r3, [r4, #24]
 8005728:	e7d2      	b.n	80056d0 <__sinit+0xc>
 800572a:	bf00      	nop
 800572c:	08006504 	.word	0x08006504
 8005730:	0800565d 	.word	0x0800565d

08005734 <__sfp>:
 8005734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005736:	4607      	mov	r7, r0
 8005738:	f7ff ffac 	bl	8005694 <__sfp_lock_acquire>
 800573c:	4b1e      	ldr	r3, [pc, #120]	; (80057b8 <__sfp+0x84>)
 800573e:	681e      	ldr	r6, [r3, #0]
 8005740:	69b3      	ldr	r3, [r6, #24]
 8005742:	b913      	cbnz	r3, 800574a <__sfp+0x16>
 8005744:	4630      	mov	r0, r6
 8005746:	f7ff ffbd 	bl	80056c4 <__sinit>
 800574a:	3648      	adds	r6, #72	; 0x48
 800574c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005750:	3b01      	subs	r3, #1
 8005752:	d503      	bpl.n	800575c <__sfp+0x28>
 8005754:	6833      	ldr	r3, [r6, #0]
 8005756:	b30b      	cbz	r3, 800579c <__sfp+0x68>
 8005758:	6836      	ldr	r6, [r6, #0]
 800575a:	e7f7      	b.n	800574c <__sfp+0x18>
 800575c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005760:	b9d5      	cbnz	r5, 8005798 <__sfp+0x64>
 8005762:	4b16      	ldr	r3, [pc, #88]	; (80057bc <__sfp+0x88>)
 8005764:	60e3      	str	r3, [r4, #12]
 8005766:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800576a:	6665      	str	r5, [r4, #100]	; 0x64
 800576c:	f000 f847 	bl	80057fe <__retarget_lock_init_recursive>
 8005770:	f7ff ff96 	bl	80056a0 <__sfp_lock_release>
 8005774:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005778:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800577c:	6025      	str	r5, [r4, #0]
 800577e:	61a5      	str	r5, [r4, #24]
 8005780:	2208      	movs	r2, #8
 8005782:	4629      	mov	r1, r5
 8005784:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005788:	f7ff ff24 	bl	80055d4 <memset>
 800578c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005790:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005794:	4620      	mov	r0, r4
 8005796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005798:	3468      	adds	r4, #104	; 0x68
 800579a:	e7d9      	b.n	8005750 <__sfp+0x1c>
 800579c:	2104      	movs	r1, #4
 800579e:	4638      	mov	r0, r7
 80057a0:	f7ff ff62 	bl	8005668 <__sfmoreglue>
 80057a4:	4604      	mov	r4, r0
 80057a6:	6030      	str	r0, [r6, #0]
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d1d5      	bne.n	8005758 <__sfp+0x24>
 80057ac:	f7ff ff78 	bl	80056a0 <__sfp_lock_release>
 80057b0:	230c      	movs	r3, #12
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	e7ee      	b.n	8005794 <__sfp+0x60>
 80057b6:	bf00      	nop
 80057b8:	08006504 	.word	0x08006504
 80057bc:	ffff0001 	.word	0xffff0001

080057c0 <_fwalk_reent>:
 80057c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057c4:	4606      	mov	r6, r0
 80057c6:	4688      	mov	r8, r1
 80057c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057cc:	2700      	movs	r7, #0
 80057ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057d2:	f1b9 0901 	subs.w	r9, r9, #1
 80057d6:	d505      	bpl.n	80057e4 <_fwalk_reent+0x24>
 80057d8:	6824      	ldr	r4, [r4, #0]
 80057da:	2c00      	cmp	r4, #0
 80057dc:	d1f7      	bne.n	80057ce <_fwalk_reent+0xe>
 80057de:	4638      	mov	r0, r7
 80057e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057e4:	89ab      	ldrh	r3, [r5, #12]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d907      	bls.n	80057fa <_fwalk_reent+0x3a>
 80057ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057ee:	3301      	adds	r3, #1
 80057f0:	d003      	beq.n	80057fa <_fwalk_reent+0x3a>
 80057f2:	4629      	mov	r1, r5
 80057f4:	4630      	mov	r0, r6
 80057f6:	47c0      	blx	r8
 80057f8:	4307      	orrs	r7, r0
 80057fa:	3568      	adds	r5, #104	; 0x68
 80057fc:	e7e9      	b.n	80057d2 <_fwalk_reent+0x12>

080057fe <__retarget_lock_init_recursive>:
 80057fe:	4770      	bx	lr

08005800 <__retarget_lock_acquire_recursive>:
 8005800:	4770      	bx	lr

08005802 <__retarget_lock_release_recursive>:
 8005802:	4770      	bx	lr

08005804 <_malloc_r>:
 8005804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005806:	1ccd      	adds	r5, r1, #3
 8005808:	f025 0503 	bic.w	r5, r5, #3
 800580c:	3508      	adds	r5, #8
 800580e:	2d0c      	cmp	r5, #12
 8005810:	bf38      	it	cc
 8005812:	250c      	movcc	r5, #12
 8005814:	2d00      	cmp	r5, #0
 8005816:	4606      	mov	r6, r0
 8005818:	db01      	blt.n	800581e <_malloc_r+0x1a>
 800581a:	42a9      	cmp	r1, r5
 800581c:	d903      	bls.n	8005826 <_malloc_r+0x22>
 800581e:	230c      	movs	r3, #12
 8005820:	6033      	str	r3, [r6, #0]
 8005822:	2000      	movs	r0, #0
 8005824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005826:	f000 fda3 	bl	8006370 <__malloc_lock>
 800582a:	4921      	ldr	r1, [pc, #132]	; (80058b0 <_malloc_r+0xac>)
 800582c:	680a      	ldr	r2, [r1, #0]
 800582e:	4614      	mov	r4, r2
 8005830:	b99c      	cbnz	r4, 800585a <_malloc_r+0x56>
 8005832:	4f20      	ldr	r7, [pc, #128]	; (80058b4 <_malloc_r+0xb0>)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	b923      	cbnz	r3, 8005842 <_malloc_r+0x3e>
 8005838:	4621      	mov	r1, r4
 800583a:	4630      	mov	r0, r6
 800583c:	f000 fb2a 	bl	8005e94 <_sbrk_r>
 8005840:	6038      	str	r0, [r7, #0]
 8005842:	4629      	mov	r1, r5
 8005844:	4630      	mov	r0, r6
 8005846:	f000 fb25 	bl	8005e94 <_sbrk_r>
 800584a:	1c43      	adds	r3, r0, #1
 800584c:	d123      	bne.n	8005896 <_malloc_r+0x92>
 800584e:	230c      	movs	r3, #12
 8005850:	6033      	str	r3, [r6, #0]
 8005852:	4630      	mov	r0, r6
 8005854:	f000 fd92 	bl	800637c <__malloc_unlock>
 8005858:	e7e3      	b.n	8005822 <_malloc_r+0x1e>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	1b5b      	subs	r3, r3, r5
 800585e:	d417      	bmi.n	8005890 <_malloc_r+0x8c>
 8005860:	2b0b      	cmp	r3, #11
 8005862:	d903      	bls.n	800586c <_malloc_r+0x68>
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	441c      	add	r4, r3
 8005868:	6025      	str	r5, [r4, #0]
 800586a:	e004      	b.n	8005876 <_malloc_r+0x72>
 800586c:	6863      	ldr	r3, [r4, #4]
 800586e:	42a2      	cmp	r2, r4
 8005870:	bf0c      	ite	eq
 8005872:	600b      	streq	r3, [r1, #0]
 8005874:	6053      	strne	r3, [r2, #4]
 8005876:	4630      	mov	r0, r6
 8005878:	f000 fd80 	bl	800637c <__malloc_unlock>
 800587c:	f104 000b 	add.w	r0, r4, #11
 8005880:	1d23      	adds	r3, r4, #4
 8005882:	f020 0007 	bic.w	r0, r0, #7
 8005886:	1ac2      	subs	r2, r0, r3
 8005888:	d0cc      	beq.n	8005824 <_malloc_r+0x20>
 800588a:	1a1b      	subs	r3, r3, r0
 800588c:	50a3      	str	r3, [r4, r2]
 800588e:	e7c9      	b.n	8005824 <_malloc_r+0x20>
 8005890:	4622      	mov	r2, r4
 8005892:	6864      	ldr	r4, [r4, #4]
 8005894:	e7cc      	b.n	8005830 <_malloc_r+0x2c>
 8005896:	1cc4      	adds	r4, r0, #3
 8005898:	f024 0403 	bic.w	r4, r4, #3
 800589c:	42a0      	cmp	r0, r4
 800589e:	d0e3      	beq.n	8005868 <_malloc_r+0x64>
 80058a0:	1a21      	subs	r1, r4, r0
 80058a2:	4630      	mov	r0, r6
 80058a4:	f000 faf6 	bl	8005e94 <_sbrk_r>
 80058a8:	3001      	adds	r0, #1
 80058aa:	d1dd      	bne.n	8005868 <_malloc_r+0x64>
 80058ac:	e7cf      	b.n	800584e <_malloc_r+0x4a>
 80058ae:	bf00      	nop
 80058b0:	20000094 	.word	0x20000094
 80058b4:	20000098 	.word	0x20000098

080058b8 <__sfputc_r>:
 80058b8:	6893      	ldr	r3, [r2, #8]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	b410      	push	{r4}
 80058c0:	6093      	str	r3, [r2, #8]
 80058c2:	da08      	bge.n	80058d6 <__sfputc_r+0x1e>
 80058c4:	6994      	ldr	r4, [r2, #24]
 80058c6:	42a3      	cmp	r3, r4
 80058c8:	db01      	blt.n	80058ce <__sfputc_r+0x16>
 80058ca:	290a      	cmp	r1, #10
 80058cc:	d103      	bne.n	80058d6 <__sfputc_r+0x1e>
 80058ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058d2:	f000 bb33 	b.w	8005f3c <__swbuf_r>
 80058d6:	6813      	ldr	r3, [r2, #0]
 80058d8:	1c58      	adds	r0, r3, #1
 80058da:	6010      	str	r0, [r2, #0]
 80058dc:	7019      	strb	r1, [r3, #0]
 80058de:	4608      	mov	r0, r1
 80058e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <__sfputs_r>:
 80058e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e8:	4606      	mov	r6, r0
 80058ea:	460f      	mov	r7, r1
 80058ec:	4614      	mov	r4, r2
 80058ee:	18d5      	adds	r5, r2, r3
 80058f0:	42ac      	cmp	r4, r5
 80058f2:	d101      	bne.n	80058f8 <__sfputs_r+0x12>
 80058f4:	2000      	movs	r0, #0
 80058f6:	e007      	b.n	8005908 <__sfputs_r+0x22>
 80058f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058fc:	463a      	mov	r2, r7
 80058fe:	4630      	mov	r0, r6
 8005900:	f7ff ffda 	bl	80058b8 <__sfputc_r>
 8005904:	1c43      	adds	r3, r0, #1
 8005906:	d1f3      	bne.n	80058f0 <__sfputs_r+0xa>
 8005908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800590c <_vfiprintf_r>:
 800590c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005910:	460d      	mov	r5, r1
 8005912:	b09d      	sub	sp, #116	; 0x74
 8005914:	4614      	mov	r4, r2
 8005916:	4698      	mov	r8, r3
 8005918:	4606      	mov	r6, r0
 800591a:	b118      	cbz	r0, 8005924 <_vfiprintf_r+0x18>
 800591c:	6983      	ldr	r3, [r0, #24]
 800591e:	b90b      	cbnz	r3, 8005924 <_vfiprintf_r+0x18>
 8005920:	f7ff fed0 	bl	80056c4 <__sinit>
 8005924:	4b89      	ldr	r3, [pc, #548]	; (8005b4c <_vfiprintf_r+0x240>)
 8005926:	429d      	cmp	r5, r3
 8005928:	d11b      	bne.n	8005962 <_vfiprintf_r+0x56>
 800592a:	6875      	ldr	r5, [r6, #4]
 800592c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800592e:	07d9      	lsls	r1, r3, #31
 8005930:	d405      	bmi.n	800593e <_vfiprintf_r+0x32>
 8005932:	89ab      	ldrh	r3, [r5, #12]
 8005934:	059a      	lsls	r2, r3, #22
 8005936:	d402      	bmi.n	800593e <_vfiprintf_r+0x32>
 8005938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800593a:	f7ff ff61 	bl	8005800 <__retarget_lock_acquire_recursive>
 800593e:	89ab      	ldrh	r3, [r5, #12]
 8005940:	071b      	lsls	r3, r3, #28
 8005942:	d501      	bpl.n	8005948 <_vfiprintf_r+0x3c>
 8005944:	692b      	ldr	r3, [r5, #16]
 8005946:	b9eb      	cbnz	r3, 8005984 <_vfiprintf_r+0x78>
 8005948:	4629      	mov	r1, r5
 800594a:	4630      	mov	r0, r6
 800594c:	f000 fb5a 	bl	8006004 <__swsetup_r>
 8005950:	b1c0      	cbz	r0, 8005984 <_vfiprintf_r+0x78>
 8005952:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005954:	07dc      	lsls	r4, r3, #31
 8005956:	d50e      	bpl.n	8005976 <_vfiprintf_r+0x6a>
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	b01d      	add	sp, #116	; 0x74
 800595e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005962:	4b7b      	ldr	r3, [pc, #492]	; (8005b50 <_vfiprintf_r+0x244>)
 8005964:	429d      	cmp	r5, r3
 8005966:	d101      	bne.n	800596c <_vfiprintf_r+0x60>
 8005968:	68b5      	ldr	r5, [r6, #8]
 800596a:	e7df      	b.n	800592c <_vfiprintf_r+0x20>
 800596c:	4b79      	ldr	r3, [pc, #484]	; (8005b54 <_vfiprintf_r+0x248>)
 800596e:	429d      	cmp	r5, r3
 8005970:	bf08      	it	eq
 8005972:	68f5      	ldreq	r5, [r6, #12]
 8005974:	e7da      	b.n	800592c <_vfiprintf_r+0x20>
 8005976:	89ab      	ldrh	r3, [r5, #12]
 8005978:	0598      	lsls	r0, r3, #22
 800597a:	d4ed      	bmi.n	8005958 <_vfiprintf_r+0x4c>
 800597c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800597e:	f7ff ff40 	bl	8005802 <__retarget_lock_release_recursive>
 8005982:	e7e9      	b.n	8005958 <_vfiprintf_r+0x4c>
 8005984:	2300      	movs	r3, #0
 8005986:	9309      	str	r3, [sp, #36]	; 0x24
 8005988:	2320      	movs	r3, #32
 800598a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800598e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005992:	2330      	movs	r3, #48	; 0x30
 8005994:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b58 <_vfiprintf_r+0x24c>
 8005998:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800599c:	f04f 0901 	mov.w	r9, #1
 80059a0:	4623      	mov	r3, r4
 80059a2:	469a      	mov	sl, r3
 80059a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059a8:	b10a      	cbz	r2, 80059ae <_vfiprintf_r+0xa2>
 80059aa:	2a25      	cmp	r2, #37	; 0x25
 80059ac:	d1f9      	bne.n	80059a2 <_vfiprintf_r+0x96>
 80059ae:	ebba 0b04 	subs.w	fp, sl, r4
 80059b2:	d00b      	beq.n	80059cc <_vfiprintf_r+0xc0>
 80059b4:	465b      	mov	r3, fp
 80059b6:	4622      	mov	r2, r4
 80059b8:	4629      	mov	r1, r5
 80059ba:	4630      	mov	r0, r6
 80059bc:	f7ff ff93 	bl	80058e6 <__sfputs_r>
 80059c0:	3001      	adds	r0, #1
 80059c2:	f000 80aa 	beq.w	8005b1a <_vfiprintf_r+0x20e>
 80059c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059c8:	445a      	add	r2, fp
 80059ca:	9209      	str	r2, [sp, #36]	; 0x24
 80059cc:	f89a 3000 	ldrb.w	r3, [sl]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 80a2 	beq.w	8005b1a <_vfiprintf_r+0x20e>
 80059d6:	2300      	movs	r3, #0
 80059d8:	f04f 32ff 	mov.w	r2, #4294967295
 80059dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059e0:	f10a 0a01 	add.w	sl, sl, #1
 80059e4:	9304      	str	r3, [sp, #16]
 80059e6:	9307      	str	r3, [sp, #28]
 80059e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059ec:	931a      	str	r3, [sp, #104]	; 0x68
 80059ee:	4654      	mov	r4, sl
 80059f0:	2205      	movs	r2, #5
 80059f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f6:	4858      	ldr	r0, [pc, #352]	; (8005b58 <_vfiprintf_r+0x24c>)
 80059f8:	f7fa fbea 	bl	80001d0 <memchr>
 80059fc:	9a04      	ldr	r2, [sp, #16]
 80059fe:	b9d8      	cbnz	r0, 8005a38 <_vfiprintf_r+0x12c>
 8005a00:	06d1      	lsls	r1, r2, #27
 8005a02:	bf44      	itt	mi
 8005a04:	2320      	movmi	r3, #32
 8005a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a0a:	0713      	lsls	r3, r2, #28
 8005a0c:	bf44      	itt	mi
 8005a0e:	232b      	movmi	r3, #43	; 0x2b
 8005a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a14:	f89a 3000 	ldrb.w	r3, [sl]
 8005a18:	2b2a      	cmp	r3, #42	; 0x2a
 8005a1a:	d015      	beq.n	8005a48 <_vfiprintf_r+0x13c>
 8005a1c:	9a07      	ldr	r2, [sp, #28]
 8005a1e:	4654      	mov	r4, sl
 8005a20:	2000      	movs	r0, #0
 8005a22:	f04f 0c0a 	mov.w	ip, #10
 8005a26:	4621      	mov	r1, r4
 8005a28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a2c:	3b30      	subs	r3, #48	; 0x30
 8005a2e:	2b09      	cmp	r3, #9
 8005a30:	d94e      	bls.n	8005ad0 <_vfiprintf_r+0x1c4>
 8005a32:	b1b0      	cbz	r0, 8005a62 <_vfiprintf_r+0x156>
 8005a34:	9207      	str	r2, [sp, #28]
 8005a36:	e014      	b.n	8005a62 <_vfiprintf_r+0x156>
 8005a38:	eba0 0308 	sub.w	r3, r0, r8
 8005a3c:	fa09 f303 	lsl.w	r3, r9, r3
 8005a40:	4313      	orrs	r3, r2
 8005a42:	9304      	str	r3, [sp, #16]
 8005a44:	46a2      	mov	sl, r4
 8005a46:	e7d2      	b.n	80059ee <_vfiprintf_r+0xe2>
 8005a48:	9b03      	ldr	r3, [sp, #12]
 8005a4a:	1d19      	adds	r1, r3, #4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	9103      	str	r1, [sp, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	bfbb      	ittet	lt
 8005a54:	425b      	neglt	r3, r3
 8005a56:	f042 0202 	orrlt.w	r2, r2, #2
 8005a5a:	9307      	strge	r3, [sp, #28]
 8005a5c:	9307      	strlt	r3, [sp, #28]
 8005a5e:	bfb8      	it	lt
 8005a60:	9204      	strlt	r2, [sp, #16]
 8005a62:	7823      	ldrb	r3, [r4, #0]
 8005a64:	2b2e      	cmp	r3, #46	; 0x2e
 8005a66:	d10c      	bne.n	8005a82 <_vfiprintf_r+0x176>
 8005a68:	7863      	ldrb	r3, [r4, #1]
 8005a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a6c:	d135      	bne.n	8005ada <_vfiprintf_r+0x1ce>
 8005a6e:	9b03      	ldr	r3, [sp, #12]
 8005a70:	1d1a      	adds	r2, r3, #4
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	9203      	str	r2, [sp, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	bfb8      	it	lt
 8005a7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a7e:	3402      	adds	r4, #2
 8005a80:	9305      	str	r3, [sp, #20]
 8005a82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b68 <_vfiprintf_r+0x25c>
 8005a86:	7821      	ldrb	r1, [r4, #0]
 8005a88:	2203      	movs	r2, #3
 8005a8a:	4650      	mov	r0, sl
 8005a8c:	f7fa fba0 	bl	80001d0 <memchr>
 8005a90:	b140      	cbz	r0, 8005aa4 <_vfiprintf_r+0x198>
 8005a92:	2340      	movs	r3, #64	; 0x40
 8005a94:	eba0 000a 	sub.w	r0, r0, sl
 8005a98:	fa03 f000 	lsl.w	r0, r3, r0
 8005a9c:	9b04      	ldr	r3, [sp, #16]
 8005a9e:	4303      	orrs	r3, r0
 8005aa0:	3401      	adds	r4, #1
 8005aa2:	9304      	str	r3, [sp, #16]
 8005aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa8:	482c      	ldr	r0, [pc, #176]	; (8005b5c <_vfiprintf_r+0x250>)
 8005aaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005aae:	2206      	movs	r2, #6
 8005ab0:	f7fa fb8e 	bl	80001d0 <memchr>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d03f      	beq.n	8005b38 <_vfiprintf_r+0x22c>
 8005ab8:	4b29      	ldr	r3, [pc, #164]	; (8005b60 <_vfiprintf_r+0x254>)
 8005aba:	bb1b      	cbnz	r3, 8005b04 <_vfiprintf_r+0x1f8>
 8005abc:	9b03      	ldr	r3, [sp, #12]
 8005abe:	3307      	adds	r3, #7
 8005ac0:	f023 0307 	bic.w	r3, r3, #7
 8005ac4:	3308      	adds	r3, #8
 8005ac6:	9303      	str	r3, [sp, #12]
 8005ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aca:	443b      	add	r3, r7
 8005acc:	9309      	str	r3, [sp, #36]	; 0x24
 8005ace:	e767      	b.n	80059a0 <_vfiprintf_r+0x94>
 8005ad0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	e7a5      	b.n	8005a26 <_vfiprintf_r+0x11a>
 8005ada:	2300      	movs	r3, #0
 8005adc:	3401      	adds	r4, #1
 8005ade:	9305      	str	r3, [sp, #20]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	f04f 0c0a 	mov.w	ip, #10
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aec:	3a30      	subs	r2, #48	; 0x30
 8005aee:	2a09      	cmp	r2, #9
 8005af0:	d903      	bls.n	8005afa <_vfiprintf_r+0x1ee>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0c5      	beq.n	8005a82 <_vfiprintf_r+0x176>
 8005af6:	9105      	str	r1, [sp, #20]
 8005af8:	e7c3      	b.n	8005a82 <_vfiprintf_r+0x176>
 8005afa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005afe:	4604      	mov	r4, r0
 8005b00:	2301      	movs	r3, #1
 8005b02:	e7f0      	b.n	8005ae6 <_vfiprintf_r+0x1da>
 8005b04:	ab03      	add	r3, sp, #12
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	462a      	mov	r2, r5
 8005b0a:	4b16      	ldr	r3, [pc, #88]	; (8005b64 <_vfiprintf_r+0x258>)
 8005b0c:	a904      	add	r1, sp, #16
 8005b0e:	4630      	mov	r0, r6
 8005b10:	f3af 8000 	nop.w
 8005b14:	4607      	mov	r7, r0
 8005b16:	1c78      	adds	r0, r7, #1
 8005b18:	d1d6      	bne.n	8005ac8 <_vfiprintf_r+0x1bc>
 8005b1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b1c:	07d9      	lsls	r1, r3, #31
 8005b1e:	d405      	bmi.n	8005b2c <_vfiprintf_r+0x220>
 8005b20:	89ab      	ldrh	r3, [r5, #12]
 8005b22:	059a      	lsls	r2, r3, #22
 8005b24:	d402      	bmi.n	8005b2c <_vfiprintf_r+0x220>
 8005b26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b28:	f7ff fe6b 	bl	8005802 <__retarget_lock_release_recursive>
 8005b2c:	89ab      	ldrh	r3, [r5, #12]
 8005b2e:	065b      	lsls	r3, r3, #25
 8005b30:	f53f af12 	bmi.w	8005958 <_vfiprintf_r+0x4c>
 8005b34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b36:	e711      	b.n	800595c <_vfiprintf_r+0x50>
 8005b38:	ab03      	add	r3, sp, #12
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	462a      	mov	r2, r5
 8005b3e:	4b09      	ldr	r3, [pc, #36]	; (8005b64 <_vfiprintf_r+0x258>)
 8005b40:	a904      	add	r1, sp, #16
 8005b42:	4630      	mov	r0, r6
 8005b44:	f000 f880 	bl	8005c48 <_printf_i>
 8005b48:	e7e4      	b.n	8005b14 <_vfiprintf_r+0x208>
 8005b4a:	bf00      	nop
 8005b4c:	08006528 	.word	0x08006528
 8005b50:	08006548 	.word	0x08006548
 8005b54:	08006508 	.word	0x08006508
 8005b58:	08006568 	.word	0x08006568
 8005b5c:	08006572 	.word	0x08006572
 8005b60:	00000000 	.word	0x00000000
 8005b64:	080058e7 	.word	0x080058e7
 8005b68:	0800656e 	.word	0x0800656e

08005b6c <_printf_common>:
 8005b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b70:	4616      	mov	r6, r2
 8005b72:	4699      	mov	r9, r3
 8005b74:	688a      	ldr	r2, [r1, #8]
 8005b76:	690b      	ldr	r3, [r1, #16]
 8005b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	bfb8      	it	lt
 8005b80:	4613      	movlt	r3, r2
 8005b82:	6033      	str	r3, [r6, #0]
 8005b84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b88:	4607      	mov	r7, r0
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	b10a      	cbz	r2, 8005b92 <_printf_common+0x26>
 8005b8e:	3301      	adds	r3, #1
 8005b90:	6033      	str	r3, [r6, #0]
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	0699      	lsls	r1, r3, #26
 8005b96:	bf42      	ittt	mi
 8005b98:	6833      	ldrmi	r3, [r6, #0]
 8005b9a:	3302      	addmi	r3, #2
 8005b9c:	6033      	strmi	r3, [r6, #0]
 8005b9e:	6825      	ldr	r5, [r4, #0]
 8005ba0:	f015 0506 	ands.w	r5, r5, #6
 8005ba4:	d106      	bne.n	8005bb4 <_printf_common+0x48>
 8005ba6:	f104 0a19 	add.w	sl, r4, #25
 8005baa:	68e3      	ldr	r3, [r4, #12]
 8005bac:	6832      	ldr	r2, [r6, #0]
 8005bae:	1a9b      	subs	r3, r3, r2
 8005bb0:	42ab      	cmp	r3, r5
 8005bb2:	dc26      	bgt.n	8005c02 <_printf_common+0x96>
 8005bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bb8:	1e13      	subs	r3, r2, #0
 8005bba:	6822      	ldr	r2, [r4, #0]
 8005bbc:	bf18      	it	ne
 8005bbe:	2301      	movne	r3, #1
 8005bc0:	0692      	lsls	r2, r2, #26
 8005bc2:	d42b      	bmi.n	8005c1c <_printf_common+0xb0>
 8005bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bc8:	4649      	mov	r1, r9
 8005bca:	4638      	mov	r0, r7
 8005bcc:	47c0      	blx	r8
 8005bce:	3001      	adds	r0, #1
 8005bd0:	d01e      	beq.n	8005c10 <_printf_common+0xa4>
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	68e5      	ldr	r5, [r4, #12]
 8005bd6:	6832      	ldr	r2, [r6, #0]
 8005bd8:	f003 0306 	and.w	r3, r3, #6
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	bf08      	it	eq
 8005be0:	1aad      	subeq	r5, r5, r2
 8005be2:	68a3      	ldr	r3, [r4, #8]
 8005be4:	6922      	ldr	r2, [r4, #16]
 8005be6:	bf0c      	ite	eq
 8005be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bec:	2500      	movne	r5, #0
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	bfc4      	itt	gt
 8005bf2:	1a9b      	subgt	r3, r3, r2
 8005bf4:	18ed      	addgt	r5, r5, r3
 8005bf6:	2600      	movs	r6, #0
 8005bf8:	341a      	adds	r4, #26
 8005bfa:	42b5      	cmp	r5, r6
 8005bfc:	d11a      	bne.n	8005c34 <_printf_common+0xc8>
 8005bfe:	2000      	movs	r0, #0
 8005c00:	e008      	b.n	8005c14 <_printf_common+0xa8>
 8005c02:	2301      	movs	r3, #1
 8005c04:	4652      	mov	r2, sl
 8005c06:	4649      	mov	r1, r9
 8005c08:	4638      	mov	r0, r7
 8005c0a:	47c0      	blx	r8
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d103      	bne.n	8005c18 <_printf_common+0xac>
 8005c10:	f04f 30ff 	mov.w	r0, #4294967295
 8005c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c18:	3501      	adds	r5, #1
 8005c1a:	e7c6      	b.n	8005baa <_printf_common+0x3e>
 8005c1c:	18e1      	adds	r1, r4, r3
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	2030      	movs	r0, #48	; 0x30
 8005c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c26:	4422      	add	r2, r4
 8005c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c30:	3302      	adds	r3, #2
 8005c32:	e7c7      	b.n	8005bc4 <_printf_common+0x58>
 8005c34:	2301      	movs	r3, #1
 8005c36:	4622      	mov	r2, r4
 8005c38:	4649      	mov	r1, r9
 8005c3a:	4638      	mov	r0, r7
 8005c3c:	47c0      	blx	r8
 8005c3e:	3001      	adds	r0, #1
 8005c40:	d0e6      	beq.n	8005c10 <_printf_common+0xa4>
 8005c42:	3601      	adds	r6, #1
 8005c44:	e7d9      	b.n	8005bfa <_printf_common+0x8e>
	...

08005c48 <_printf_i>:
 8005c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	4691      	mov	r9, r2
 8005c50:	7e27      	ldrb	r7, [r4, #24]
 8005c52:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c54:	2f78      	cmp	r7, #120	; 0x78
 8005c56:	4680      	mov	r8, r0
 8005c58:	469a      	mov	sl, r3
 8005c5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c5e:	d807      	bhi.n	8005c70 <_printf_i+0x28>
 8005c60:	2f62      	cmp	r7, #98	; 0x62
 8005c62:	d80a      	bhi.n	8005c7a <_printf_i+0x32>
 8005c64:	2f00      	cmp	r7, #0
 8005c66:	f000 80d8 	beq.w	8005e1a <_printf_i+0x1d2>
 8005c6a:	2f58      	cmp	r7, #88	; 0x58
 8005c6c:	f000 80a3 	beq.w	8005db6 <_printf_i+0x16e>
 8005c70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c78:	e03a      	b.n	8005cf0 <_printf_i+0xa8>
 8005c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c7e:	2b15      	cmp	r3, #21
 8005c80:	d8f6      	bhi.n	8005c70 <_printf_i+0x28>
 8005c82:	a001      	add	r0, pc, #4	; (adr r0, 8005c88 <_printf_i+0x40>)
 8005c84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c88:	08005ce1 	.word	0x08005ce1
 8005c8c:	08005cf5 	.word	0x08005cf5
 8005c90:	08005c71 	.word	0x08005c71
 8005c94:	08005c71 	.word	0x08005c71
 8005c98:	08005c71 	.word	0x08005c71
 8005c9c:	08005c71 	.word	0x08005c71
 8005ca0:	08005cf5 	.word	0x08005cf5
 8005ca4:	08005c71 	.word	0x08005c71
 8005ca8:	08005c71 	.word	0x08005c71
 8005cac:	08005c71 	.word	0x08005c71
 8005cb0:	08005c71 	.word	0x08005c71
 8005cb4:	08005e01 	.word	0x08005e01
 8005cb8:	08005d25 	.word	0x08005d25
 8005cbc:	08005de3 	.word	0x08005de3
 8005cc0:	08005c71 	.word	0x08005c71
 8005cc4:	08005c71 	.word	0x08005c71
 8005cc8:	08005e23 	.word	0x08005e23
 8005ccc:	08005c71 	.word	0x08005c71
 8005cd0:	08005d25 	.word	0x08005d25
 8005cd4:	08005c71 	.word	0x08005c71
 8005cd8:	08005c71 	.word	0x08005c71
 8005cdc:	08005deb 	.word	0x08005deb
 8005ce0:	680b      	ldr	r3, [r1, #0]
 8005ce2:	1d1a      	adds	r2, r3, #4
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	600a      	str	r2, [r1, #0]
 8005ce8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e0a3      	b.n	8005e3c <_printf_i+0x1f4>
 8005cf4:	6825      	ldr	r5, [r4, #0]
 8005cf6:	6808      	ldr	r0, [r1, #0]
 8005cf8:	062e      	lsls	r6, r5, #24
 8005cfa:	f100 0304 	add.w	r3, r0, #4
 8005cfe:	d50a      	bpl.n	8005d16 <_printf_i+0xce>
 8005d00:	6805      	ldr	r5, [r0, #0]
 8005d02:	600b      	str	r3, [r1, #0]
 8005d04:	2d00      	cmp	r5, #0
 8005d06:	da03      	bge.n	8005d10 <_printf_i+0xc8>
 8005d08:	232d      	movs	r3, #45	; 0x2d
 8005d0a:	426d      	negs	r5, r5
 8005d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d10:	485e      	ldr	r0, [pc, #376]	; (8005e8c <_printf_i+0x244>)
 8005d12:	230a      	movs	r3, #10
 8005d14:	e019      	b.n	8005d4a <_printf_i+0x102>
 8005d16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d1a:	6805      	ldr	r5, [r0, #0]
 8005d1c:	600b      	str	r3, [r1, #0]
 8005d1e:	bf18      	it	ne
 8005d20:	b22d      	sxthne	r5, r5
 8005d22:	e7ef      	b.n	8005d04 <_printf_i+0xbc>
 8005d24:	680b      	ldr	r3, [r1, #0]
 8005d26:	6825      	ldr	r5, [r4, #0]
 8005d28:	1d18      	adds	r0, r3, #4
 8005d2a:	6008      	str	r0, [r1, #0]
 8005d2c:	0628      	lsls	r0, r5, #24
 8005d2e:	d501      	bpl.n	8005d34 <_printf_i+0xec>
 8005d30:	681d      	ldr	r5, [r3, #0]
 8005d32:	e002      	b.n	8005d3a <_printf_i+0xf2>
 8005d34:	0669      	lsls	r1, r5, #25
 8005d36:	d5fb      	bpl.n	8005d30 <_printf_i+0xe8>
 8005d38:	881d      	ldrh	r5, [r3, #0]
 8005d3a:	4854      	ldr	r0, [pc, #336]	; (8005e8c <_printf_i+0x244>)
 8005d3c:	2f6f      	cmp	r7, #111	; 0x6f
 8005d3e:	bf0c      	ite	eq
 8005d40:	2308      	moveq	r3, #8
 8005d42:	230a      	movne	r3, #10
 8005d44:	2100      	movs	r1, #0
 8005d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d4a:	6866      	ldr	r6, [r4, #4]
 8005d4c:	60a6      	str	r6, [r4, #8]
 8005d4e:	2e00      	cmp	r6, #0
 8005d50:	bfa2      	ittt	ge
 8005d52:	6821      	ldrge	r1, [r4, #0]
 8005d54:	f021 0104 	bicge.w	r1, r1, #4
 8005d58:	6021      	strge	r1, [r4, #0]
 8005d5a:	b90d      	cbnz	r5, 8005d60 <_printf_i+0x118>
 8005d5c:	2e00      	cmp	r6, #0
 8005d5e:	d04d      	beq.n	8005dfc <_printf_i+0x1b4>
 8005d60:	4616      	mov	r6, r2
 8005d62:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d66:	fb03 5711 	mls	r7, r3, r1, r5
 8005d6a:	5dc7      	ldrb	r7, [r0, r7]
 8005d6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d70:	462f      	mov	r7, r5
 8005d72:	42bb      	cmp	r3, r7
 8005d74:	460d      	mov	r5, r1
 8005d76:	d9f4      	bls.n	8005d62 <_printf_i+0x11a>
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	d10b      	bne.n	8005d94 <_printf_i+0x14c>
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	07df      	lsls	r7, r3, #31
 8005d80:	d508      	bpl.n	8005d94 <_printf_i+0x14c>
 8005d82:	6923      	ldr	r3, [r4, #16]
 8005d84:	6861      	ldr	r1, [r4, #4]
 8005d86:	4299      	cmp	r1, r3
 8005d88:	bfde      	ittt	le
 8005d8a:	2330      	movle	r3, #48	; 0x30
 8005d8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d94:	1b92      	subs	r2, r2, r6
 8005d96:	6122      	str	r2, [r4, #16]
 8005d98:	f8cd a000 	str.w	sl, [sp]
 8005d9c:	464b      	mov	r3, r9
 8005d9e:	aa03      	add	r2, sp, #12
 8005da0:	4621      	mov	r1, r4
 8005da2:	4640      	mov	r0, r8
 8005da4:	f7ff fee2 	bl	8005b6c <_printf_common>
 8005da8:	3001      	adds	r0, #1
 8005daa:	d14c      	bne.n	8005e46 <_printf_i+0x1fe>
 8005dac:	f04f 30ff 	mov.w	r0, #4294967295
 8005db0:	b004      	add	sp, #16
 8005db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db6:	4835      	ldr	r0, [pc, #212]	; (8005e8c <_printf_i+0x244>)
 8005db8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	680e      	ldr	r6, [r1, #0]
 8005dc0:	061f      	lsls	r7, r3, #24
 8005dc2:	f856 5b04 	ldr.w	r5, [r6], #4
 8005dc6:	600e      	str	r6, [r1, #0]
 8005dc8:	d514      	bpl.n	8005df4 <_printf_i+0x1ac>
 8005dca:	07d9      	lsls	r1, r3, #31
 8005dcc:	bf44      	itt	mi
 8005dce:	f043 0320 	orrmi.w	r3, r3, #32
 8005dd2:	6023      	strmi	r3, [r4, #0]
 8005dd4:	b91d      	cbnz	r5, 8005dde <_printf_i+0x196>
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	f023 0320 	bic.w	r3, r3, #32
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	2310      	movs	r3, #16
 8005de0:	e7b0      	b.n	8005d44 <_printf_i+0xfc>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	f043 0320 	orr.w	r3, r3, #32
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	2378      	movs	r3, #120	; 0x78
 8005dec:	4828      	ldr	r0, [pc, #160]	; (8005e90 <_printf_i+0x248>)
 8005dee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005df2:	e7e3      	b.n	8005dbc <_printf_i+0x174>
 8005df4:	065e      	lsls	r6, r3, #25
 8005df6:	bf48      	it	mi
 8005df8:	b2ad      	uxthmi	r5, r5
 8005dfa:	e7e6      	b.n	8005dca <_printf_i+0x182>
 8005dfc:	4616      	mov	r6, r2
 8005dfe:	e7bb      	b.n	8005d78 <_printf_i+0x130>
 8005e00:	680b      	ldr	r3, [r1, #0]
 8005e02:	6826      	ldr	r6, [r4, #0]
 8005e04:	6960      	ldr	r0, [r4, #20]
 8005e06:	1d1d      	adds	r5, r3, #4
 8005e08:	600d      	str	r5, [r1, #0]
 8005e0a:	0635      	lsls	r5, r6, #24
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	d501      	bpl.n	8005e14 <_printf_i+0x1cc>
 8005e10:	6018      	str	r0, [r3, #0]
 8005e12:	e002      	b.n	8005e1a <_printf_i+0x1d2>
 8005e14:	0671      	lsls	r1, r6, #25
 8005e16:	d5fb      	bpl.n	8005e10 <_printf_i+0x1c8>
 8005e18:	8018      	strh	r0, [r3, #0]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	6123      	str	r3, [r4, #16]
 8005e1e:	4616      	mov	r6, r2
 8005e20:	e7ba      	b.n	8005d98 <_printf_i+0x150>
 8005e22:	680b      	ldr	r3, [r1, #0]
 8005e24:	1d1a      	adds	r2, r3, #4
 8005e26:	600a      	str	r2, [r1, #0]
 8005e28:	681e      	ldr	r6, [r3, #0]
 8005e2a:	6862      	ldr	r2, [r4, #4]
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	4630      	mov	r0, r6
 8005e30:	f7fa f9ce 	bl	80001d0 <memchr>
 8005e34:	b108      	cbz	r0, 8005e3a <_printf_i+0x1f2>
 8005e36:	1b80      	subs	r0, r0, r6
 8005e38:	6060      	str	r0, [r4, #4]
 8005e3a:	6863      	ldr	r3, [r4, #4]
 8005e3c:	6123      	str	r3, [r4, #16]
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e44:	e7a8      	b.n	8005d98 <_printf_i+0x150>
 8005e46:	6923      	ldr	r3, [r4, #16]
 8005e48:	4632      	mov	r2, r6
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	4640      	mov	r0, r8
 8005e4e:	47d0      	blx	sl
 8005e50:	3001      	adds	r0, #1
 8005e52:	d0ab      	beq.n	8005dac <_printf_i+0x164>
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	079b      	lsls	r3, r3, #30
 8005e58:	d413      	bmi.n	8005e82 <_printf_i+0x23a>
 8005e5a:	68e0      	ldr	r0, [r4, #12]
 8005e5c:	9b03      	ldr	r3, [sp, #12]
 8005e5e:	4298      	cmp	r0, r3
 8005e60:	bfb8      	it	lt
 8005e62:	4618      	movlt	r0, r3
 8005e64:	e7a4      	b.n	8005db0 <_printf_i+0x168>
 8005e66:	2301      	movs	r3, #1
 8005e68:	4632      	mov	r2, r6
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	4640      	mov	r0, r8
 8005e6e:	47d0      	blx	sl
 8005e70:	3001      	adds	r0, #1
 8005e72:	d09b      	beq.n	8005dac <_printf_i+0x164>
 8005e74:	3501      	adds	r5, #1
 8005e76:	68e3      	ldr	r3, [r4, #12]
 8005e78:	9903      	ldr	r1, [sp, #12]
 8005e7a:	1a5b      	subs	r3, r3, r1
 8005e7c:	42ab      	cmp	r3, r5
 8005e7e:	dcf2      	bgt.n	8005e66 <_printf_i+0x21e>
 8005e80:	e7eb      	b.n	8005e5a <_printf_i+0x212>
 8005e82:	2500      	movs	r5, #0
 8005e84:	f104 0619 	add.w	r6, r4, #25
 8005e88:	e7f5      	b.n	8005e76 <_printf_i+0x22e>
 8005e8a:	bf00      	nop
 8005e8c:	08006579 	.word	0x08006579
 8005e90:	0800658a 	.word	0x0800658a

08005e94 <_sbrk_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	4d06      	ldr	r5, [pc, #24]	; (8005eb0 <_sbrk_r+0x1c>)
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	602b      	str	r3, [r5, #0]
 8005ea0:	f7fa ff70 	bl	8000d84 <_sbrk>
 8005ea4:	1c43      	adds	r3, r0, #1
 8005ea6:	d102      	bne.n	8005eae <_sbrk_r+0x1a>
 8005ea8:	682b      	ldr	r3, [r5, #0]
 8005eaa:	b103      	cbz	r3, 8005eae <_sbrk_r+0x1a>
 8005eac:	6023      	str	r3, [r4, #0]
 8005eae:	bd38      	pop	{r3, r4, r5, pc}
 8005eb0:	20000228 	.word	0x20000228

08005eb4 <__sread>:
 8005eb4:	b510      	push	{r4, lr}
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ebc:	f000 fab4 	bl	8006428 <_read_r>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	bfab      	itete	ge
 8005ec4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ec8:	181b      	addge	r3, r3, r0
 8005eca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ece:	bfac      	ite	ge
 8005ed0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ed2:	81a3      	strhlt	r3, [r4, #12]
 8005ed4:	bd10      	pop	{r4, pc}

08005ed6 <__swrite>:
 8005ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eda:	461f      	mov	r7, r3
 8005edc:	898b      	ldrh	r3, [r1, #12]
 8005ede:	05db      	lsls	r3, r3, #23
 8005ee0:	4605      	mov	r5, r0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	4616      	mov	r6, r2
 8005ee6:	d505      	bpl.n	8005ef4 <__swrite+0x1e>
 8005ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eec:	2302      	movs	r3, #2
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f000 f9c8 	bl	8006284 <_lseek_r>
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005efa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005efe:	81a3      	strh	r3, [r4, #12]
 8005f00:	4632      	mov	r2, r6
 8005f02:	463b      	mov	r3, r7
 8005f04:	4628      	mov	r0, r5
 8005f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0a:	f000 b869 	b.w	8005fe0 <_write_r>

08005f0e <__sseek>:
 8005f0e:	b510      	push	{r4, lr}
 8005f10:	460c      	mov	r4, r1
 8005f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f16:	f000 f9b5 	bl	8006284 <_lseek_r>
 8005f1a:	1c43      	adds	r3, r0, #1
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	bf15      	itete	ne
 8005f20:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f2a:	81a3      	strheq	r3, [r4, #12]
 8005f2c:	bf18      	it	ne
 8005f2e:	81a3      	strhne	r3, [r4, #12]
 8005f30:	bd10      	pop	{r4, pc}

08005f32 <__sclose>:
 8005f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f36:	f000 b8d3 	b.w	80060e0 <_close_r>
	...

08005f3c <__swbuf_r>:
 8005f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3e:	460e      	mov	r6, r1
 8005f40:	4614      	mov	r4, r2
 8005f42:	4605      	mov	r5, r0
 8005f44:	b118      	cbz	r0, 8005f4e <__swbuf_r+0x12>
 8005f46:	6983      	ldr	r3, [r0, #24]
 8005f48:	b90b      	cbnz	r3, 8005f4e <__swbuf_r+0x12>
 8005f4a:	f7ff fbbb 	bl	80056c4 <__sinit>
 8005f4e:	4b21      	ldr	r3, [pc, #132]	; (8005fd4 <__swbuf_r+0x98>)
 8005f50:	429c      	cmp	r4, r3
 8005f52:	d12b      	bne.n	8005fac <__swbuf_r+0x70>
 8005f54:	686c      	ldr	r4, [r5, #4]
 8005f56:	69a3      	ldr	r3, [r4, #24]
 8005f58:	60a3      	str	r3, [r4, #8]
 8005f5a:	89a3      	ldrh	r3, [r4, #12]
 8005f5c:	071a      	lsls	r2, r3, #28
 8005f5e:	d52f      	bpl.n	8005fc0 <__swbuf_r+0x84>
 8005f60:	6923      	ldr	r3, [r4, #16]
 8005f62:	b36b      	cbz	r3, 8005fc0 <__swbuf_r+0x84>
 8005f64:	6923      	ldr	r3, [r4, #16]
 8005f66:	6820      	ldr	r0, [r4, #0]
 8005f68:	1ac0      	subs	r0, r0, r3
 8005f6a:	6963      	ldr	r3, [r4, #20]
 8005f6c:	b2f6      	uxtb	r6, r6
 8005f6e:	4283      	cmp	r3, r0
 8005f70:	4637      	mov	r7, r6
 8005f72:	dc04      	bgt.n	8005f7e <__swbuf_r+0x42>
 8005f74:	4621      	mov	r1, r4
 8005f76:	4628      	mov	r0, r5
 8005f78:	f000 f948 	bl	800620c <_fflush_r>
 8005f7c:	bb30      	cbnz	r0, 8005fcc <__swbuf_r+0x90>
 8005f7e:	68a3      	ldr	r3, [r4, #8]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	60a3      	str	r3, [r4, #8]
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	6022      	str	r2, [r4, #0]
 8005f8a:	701e      	strb	r6, [r3, #0]
 8005f8c:	6963      	ldr	r3, [r4, #20]
 8005f8e:	3001      	adds	r0, #1
 8005f90:	4283      	cmp	r3, r0
 8005f92:	d004      	beq.n	8005f9e <__swbuf_r+0x62>
 8005f94:	89a3      	ldrh	r3, [r4, #12]
 8005f96:	07db      	lsls	r3, r3, #31
 8005f98:	d506      	bpl.n	8005fa8 <__swbuf_r+0x6c>
 8005f9a:	2e0a      	cmp	r6, #10
 8005f9c:	d104      	bne.n	8005fa8 <__swbuf_r+0x6c>
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	f000 f933 	bl	800620c <_fflush_r>
 8005fa6:	b988      	cbnz	r0, 8005fcc <__swbuf_r+0x90>
 8005fa8:	4638      	mov	r0, r7
 8005faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fac:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <__swbuf_r+0x9c>)
 8005fae:	429c      	cmp	r4, r3
 8005fb0:	d101      	bne.n	8005fb6 <__swbuf_r+0x7a>
 8005fb2:	68ac      	ldr	r4, [r5, #8]
 8005fb4:	e7cf      	b.n	8005f56 <__swbuf_r+0x1a>
 8005fb6:	4b09      	ldr	r3, [pc, #36]	; (8005fdc <__swbuf_r+0xa0>)
 8005fb8:	429c      	cmp	r4, r3
 8005fba:	bf08      	it	eq
 8005fbc:	68ec      	ldreq	r4, [r5, #12]
 8005fbe:	e7ca      	b.n	8005f56 <__swbuf_r+0x1a>
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f000 f81e 	bl	8006004 <__swsetup_r>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d0cb      	beq.n	8005f64 <__swbuf_r+0x28>
 8005fcc:	f04f 37ff 	mov.w	r7, #4294967295
 8005fd0:	e7ea      	b.n	8005fa8 <__swbuf_r+0x6c>
 8005fd2:	bf00      	nop
 8005fd4:	08006528 	.word	0x08006528
 8005fd8:	08006548 	.word	0x08006548
 8005fdc:	08006508 	.word	0x08006508

08005fe0 <_write_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4d07      	ldr	r5, [pc, #28]	; (8006000 <_write_r+0x20>)
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	4608      	mov	r0, r1
 8005fe8:	4611      	mov	r1, r2
 8005fea:	2200      	movs	r2, #0
 8005fec:	602a      	str	r2, [r5, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f7fa fe72 	bl	8000cd8 <_write>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	d102      	bne.n	8005ffe <_write_r+0x1e>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	b103      	cbz	r3, 8005ffe <_write_r+0x1e>
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	20000228 	.word	0x20000228

08006004 <__swsetup_r>:
 8006004:	4b32      	ldr	r3, [pc, #200]	; (80060d0 <__swsetup_r+0xcc>)
 8006006:	b570      	push	{r4, r5, r6, lr}
 8006008:	681d      	ldr	r5, [r3, #0]
 800600a:	4606      	mov	r6, r0
 800600c:	460c      	mov	r4, r1
 800600e:	b125      	cbz	r5, 800601a <__swsetup_r+0x16>
 8006010:	69ab      	ldr	r3, [r5, #24]
 8006012:	b913      	cbnz	r3, 800601a <__swsetup_r+0x16>
 8006014:	4628      	mov	r0, r5
 8006016:	f7ff fb55 	bl	80056c4 <__sinit>
 800601a:	4b2e      	ldr	r3, [pc, #184]	; (80060d4 <__swsetup_r+0xd0>)
 800601c:	429c      	cmp	r4, r3
 800601e:	d10f      	bne.n	8006040 <__swsetup_r+0x3c>
 8006020:	686c      	ldr	r4, [r5, #4]
 8006022:	89a3      	ldrh	r3, [r4, #12]
 8006024:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006028:	0719      	lsls	r1, r3, #28
 800602a:	d42c      	bmi.n	8006086 <__swsetup_r+0x82>
 800602c:	06dd      	lsls	r5, r3, #27
 800602e:	d411      	bmi.n	8006054 <__swsetup_r+0x50>
 8006030:	2309      	movs	r3, #9
 8006032:	6033      	str	r3, [r6, #0]
 8006034:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006038:	81a3      	strh	r3, [r4, #12]
 800603a:	f04f 30ff 	mov.w	r0, #4294967295
 800603e:	e03e      	b.n	80060be <__swsetup_r+0xba>
 8006040:	4b25      	ldr	r3, [pc, #148]	; (80060d8 <__swsetup_r+0xd4>)
 8006042:	429c      	cmp	r4, r3
 8006044:	d101      	bne.n	800604a <__swsetup_r+0x46>
 8006046:	68ac      	ldr	r4, [r5, #8]
 8006048:	e7eb      	b.n	8006022 <__swsetup_r+0x1e>
 800604a:	4b24      	ldr	r3, [pc, #144]	; (80060dc <__swsetup_r+0xd8>)
 800604c:	429c      	cmp	r4, r3
 800604e:	bf08      	it	eq
 8006050:	68ec      	ldreq	r4, [r5, #12]
 8006052:	e7e6      	b.n	8006022 <__swsetup_r+0x1e>
 8006054:	0758      	lsls	r0, r3, #29
 8006056:	d512      	bpl.n	800607e <__swsetup_r+0x7a>
 8006058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800605a:	b141      	cbz	r1, 800606e <__swsetup_r+0x6a>
 800605c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006060:	4299      	cmp	r1, r3
 8006062:	d002      	beq.n	800606a <__swsetup_r+0x66>
 8006064:	4630      	mov	r0, r6
 8006066:	f000 f98f 	bl	8006388 <_free_r>
 800606a:	2300      	movs	r3, #0
 800606c:	6363      	str	r3, [r4, #52]	; 0x34
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006074:	81a3      	strh	r3, [r4, #12]
 8006076:	2300      	movs	r3, #0
 8006078:	6063      	str	r3, [r4, #4]
 800607a:	6923      	ldr	r3, [r4, #16]
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	89a3      	ldrh	r3, [r4, #12]
 8006080:	f043 0308 	orr.w	r3, r3, #8
 8006084:	81a3      	strh	r3, [r4, #12]
 8006086:	6923      	ldr	r3, [r4, #16]
 8006088:	b94b      	cbnz	r3, 800609e <__swsetup_r+0x9a>
 800608a:	89a3      	ldrh	r3, [r4, #12]
 800608c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006094:	d003      	beq.n	800609e <__swsetup_r+0x9a>
 8006096:	4621      	mov	r1, r4
 8006098:	4630      	mov	r0, r6
 800609a:	f000 f929 	bl	80062f0 <__smakebuf_r>
 800609e:	89a0      	ldrh	r0, [r4, #12]
 80060a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060a4:	f010 0301 	ands.w	r3, r0, #1
 80060a8:	d00a      	beq.n	80060c0 <__swsetup_r+0xbc>
 80060aa:	2300      	movs	r3, #0
 80060ac:	60a3      	str	r3, [r4, #8]
 80060ae:	6963      	ldr	r3, [r4, #20]
 80060b0:	425b      	negs	r3, r3
 80060b2:	61a3      	str	r3, [r4, #24]
 80060b4:	6923      	ldr	r3, [r4, #16]
 80060b6:	b943      	cbnz	r3, 80060ca <__swsetup_r+0xc6>
 80060b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80060bc:	d1ba      	bne.n	8006034 <__swsetup_r+0x30>
 80060be:	bd70      	pop	{r4, r5, r6, pc}
 80060c0:	0781      	lsls	r1, r0, #30
 80060c2:	bf58      	it	pl
 80060c4:	6963      	ldrpl	r3, [r4, #20]
 80060c6:	60a3      	str	r3, [r4, #8]
 80060c8:	e7f4      	b.n	80060b4 <__swsetup_r+0xb0>
 80060ca:	2000      	movs	r0, #0
 80060cc:	e7f7      	b.n	80060be <__swsetup_r+0xba>
 80060ce:	bf00      	nop
 80060d0:	2000000c 	.word	0x2000000c
 80060d4:	08006528 	.word	0x08006528
 80060d8:	08006548 	.word	0x08006548
 80060dc:	08006508 	.word	0x08006508

080060e0 <_close_r>:
 80060e0:	b538      	push	{r3, r4, r5, lr}
 80060e2:	4d06      	ldr	r5, [pc, #24]	; (80060fc <_close_r+0x1c>)
 80060e4:	2300      	movs	r3, #0
 80060e6:	4604      	mov	r4, r0
 80060e8:	4608      	mov	r0, r1
 80060ea:	602b      	str	r3, [r5, #0]
 80060ec:	f7fa fe16 	bl	8000d1c <_close>
 80060f0:	1c43      	adds	r3, r0, #1
 80060f2:	d102      	bne.n	80060fa <_close_r+0x1a>
 80060f4:	682b      	ldr	r3, [r5, #0]
 80060f6:	b103      	cbz	r3, 80060fa <_close_r+0x1a>
 80060f8:	6023      	str	r3, [r4, #0]
 80060fa:	bd38      	pop	{r3, r4, r5, pc}
 80060fc:	20000228 	.word	0x20000228

08006100 <__sflush_r>:
 8006100:	898a      	ldrh	r2, [r1, #12]
 8006102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006106:	4605      	mov	r5, r0
 8006108:	0710      	lsls	r0, r2, #28
 800610a:	460c      	mov	r4, r1
 800610c:	d458      	bmi.n	80061c0 <__sflush_r+0xc0>
 800610e:	684b      	ldr	r3, [r1, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	dc05      	bgt.n	8006120 <__sflush_r+0x20>
 8006114:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	dc02      	bgt.n	8006120 <__sflush_r+0x20>
 800611a:	2000      	movs	r0, #0
 800611c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006120:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006122:	2e00      	cmp	r6, #0
 8006124:	d0f9      	beq.n	800611a <__sflush_r+0x1a>
 8006126:	2300      	movs	r3, #0
 8006128:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800612c:	682f      	ldr	r7, [r5, #0]
 800612e:	602b      	str	r3, [r5, #0]
 8006130:	d032      	beq.n	8006198 <__sflush_r+0x98>
 8006132:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	075a      	lsls	r2, r3, #29
 8006138:	d505      	bpl.n	8006146 <__sflush_r+0x46>
 800613a:	6863      	ldr	r3, [r4, #4]
 800613c:	1ac0      	subs	r0, r0, r3
 800613e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006140:	b10b      	cbz	r3, 8006146 <__sflush_r+0x46>
 8006142:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006144:	1ac0      	subs	r0, r0, r3
 8006146:	2300      	movs	r3, #0
 8006148:	4602      	mov	r2, r0
 800614a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800614c:	6a21      	ldr	r1, [r4, #32]
 800614e:	4628      	mov	r0, r5
 8006150:	47b0      	blx	r6
 8006152:	1c43      	adds	r3, r0, #1
 8006154:	89a3      	ldrh	r3, [r4, #12]
 8006156:	d106      	bne.n	8006166 <__sflush_r+0x66>
 8006158:	6829      	ldr	r1, [r5, #0]
 800615a:	291d      	cmp	r1, #29
 800615c:	d82c      	bhi.n	80061b8 <__sflush_r+0xb8>
 800615e:	4a2a      	ldr	r2, [pc, #168]	; (8006208 <__sflush_r+0x108>)
 8006160:	40ca      	lsrs	r2, r1
 8006162:	07d6      	lsls	r6, r2, #31
 8006164:	d528      	bpl.n	80061b8 <__sflush_r+0xb8>
 8006166:	2200      	movs	r2, #0
 8006168:	6062      	str	r2, [r4, #4]
 800616a:	04d9      	lsls	r1, r3, #19
 800616c:	6922      	ldr	r2, [r4, #16]
 800616e:	6022      	str	r2, [r4, #0]
 8006170:	d504      	bpl.n	800617c <__sflush_r+0x7c>
 8006172:	1c42      	adds	r2, r0, #1
 8006174:	d101      	bne.n	800617a <__sflush_r+0x7a>
 8006176:	682b      	ldr	r3, [r5, #0]
 8006178:	b903      	cbnz	r3, 800617c <__sflush_r+0x7c>
 800617a:	6560      	str	r0, [r4, #84]	; 0x54
 800617c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800617e:	602f      	str	r7, [r5, #0]
 8006180:	2900      	cmp	r1, #0
 8006182:	d0ca      	beq.n	800611a <__sflush_r+0x1a>
 8006184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006188:	4299      	cmp	r1, r3
 800618a:	d002      	beq.n	8006192 <__sflush_r+0x92>
 800618c:	4628      	mov	r0, r5
 800618e:	f000 f8fb 	bl	8006388 <_free_r>
 8006192:	2000      	movs	r0, #0
 8006194:	6360      	str	r0, [r4, #52]	; 0x34
 8006196:	e7c1      	b.n	800611c <__sflush_r+0x1c>
 8006198:	6a21      	ldr	r1, [r4, #32]
 800619a:	2301      	movs	r3, #1
 800619c:	4628      	mov	r0, r5
 800619e:	47b0      	blx	r6
 80061a0:	1c41      	adds	r1, r0, #1
 80061a2:	d1c7      	bne.n	8006134 <__sflush_r+0x34>
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0c4      	beq.n	8006134 <__sflush_r+0x34>
 80061aa:	2b1d      	cmp	r3, #29
 80061ac:	d001      	beq.n	80061b2 <__sflush_r+0xb2>
 80061ae:	2b16      	cmp	r3, #22
 80061b0:	d101      	bne.n	80061b6 <__sflush_r+0xb6>
 80061b2:	602f      	str	r7, [r5, #0]
 80061b4:	e7b1      	b.n	800611a <__sflush_r+0x1a>
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061bc:	81a3      	strh	r3, [r4, #12]
 80061be:	e7ad      	b.n	800611c <__sflush_r+0x1c>
 80061c0:	690f      	ldr	r7, [r1, #16]
 80061c2:	2f00      	cmp	r7, #0
 80061c4:	d0a9      	beq.n	800611a <__sflush_r+0x1a>
 80061c6:	0793      	lsls	r3, r2, #30
 80061c8:	680e      	ldr	r6, [r1, #0]
 80061ca:	bf08      	it	eq
 80061cc:	694b      	ldreq	r3, [r1, #20]
 80061ce:	600f      	str	r7, [r1, #0]
 80061d0:	bf18      	it	ne
 80061d2:	2300      	movne	r3, #0
 80061d4:	eba6 0807 	sub.w	r8, r6, r7
 80061d8:	608b      	str	r3, [r1, #8]
 80061da:	f1b8 0f00 	cmp.w	r8, #0
 80061de:	dd9c      	ble.n	800611a <__sflush_r+0x1a>
 80061e0:	6a21      	ldr	r1, [r4, #32]
 80061e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80061e4:	4643      	mov	r3, r8
 80061e6:	463a      	mov	r2, r7
 80061e8:	4628      	mov	r0, r5
 80061ea:	47b0      	blx	r6
 80061ec:	2800      	cmp	r0, #0
 80061ee:	dc06      	bgt.n	80061fe <__sflush_r+0xfe>
 80061f0:	89a3      	ldrh	r3, [r4, #12]
 80061f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061f6:	81a3      	strh	r3, [r4, #12]
 80061f8:	f04f 30ff 	mov.w	r0, #4294967295
 80061fc:	e78e      	b.n	800611c <__sflush_r+0x1c>
 80061fe:	4407      	add	r7, r0
 8006200:	eba8 0800 	sub.w	r8, r8, r0
 8006204:	e7e9      	b.n	80061da <__sflush_r+0xda>
 8006206:	bf00      	nop
 8006208:	20400001 	.word	0x20400001

0800620c <_fflush_r>:
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	690b      	ldr	r3, [r1, #16]
 8006210:	4605      	mov	r5, r0
 8006212:	460c      	mov	r4, r1
 8006214:	b913      	cbnz	r3, 800621c <_fflush_r+0x10>
 8006216:	2500      	movs	r5, #0
 8006218:	4628      	mov	r0, r5
 800621a:	bd38      	pop	{r3, r4, r5, pc}
 800621c:	b118      	cbz	r0, 8006226 <_fflush_r+0x1a>
 800621e:	6983      	ldr	r3, [r0, #24]
 8006220:	b90b      	cbnz	r3, 8006226 <_fflush_r+0x1a>
 8006222:	f7ff fa4f 	bl	80056c4 <__sinit>
 8006226:	4b14      	ldr	r3, [pc, #80]	; (8006278 <_fflush_r+0x6c>)
 8006228:	429c      	cmp	r4, r3
 800622a:	d11b      	bne.n	8006264 <_fflush_r+0x58>
 800622c:	686c      	ldr	r4, [r5, #4]
 800622e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0ef      	beq.n	8006216 <_fflush_r+0xa>
 8006236:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006238:	07d0      	lsls	r0, r2, #31
 800623a:	d404      	bmi.n	8006246 <_fflush_r+0x3a>
 800623c:	0599      	lsls	r1, r3, #22
 800623e:	d402      	bmi.n	8006246 <_fflush_r+0x3a>
 8006240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006242:	f7ff fadd 	bl	8005800 <__retarget_lock_acquire_recursive>
 8006246:	4628      	mov	r0, r5
 8006248:	4621      	mov	r1, r4
 800624a:	f7ff ff59 	bl	8006100 <__sflush_r>
 800624e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006250:	07da      	lsls	r2, r3, #31
 8006252:	4605      	mov	r5, r0
 8006254:	d4e0      	bmi.n	8006218 <_fflush_r+0xc>
 8006256:	89a3      	ldrh	r3, [r4, #12]
 8006258:	059b      	lsls	r3, r3, #22
 800625a:	d4dd      	bmi.n	8006218 <_fflush_r+0xc>
 800625c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800625e:	f7ff fad0 	bl	8005802 <__retarget_lock_release_recursive>
 8006262:	e7d9      	b.n	8006218 <_fflush_r+0xc>
 8006264:	4b05      	ldr	r3, [pc, #20]	; (800627c <_fflush_r+0x70>)
 8006266:	429c      	cmp	r4, r3
 8006268:	d101      	bne.n	800626e <_fflush_r+0x62>
 800626a:	68ac      	ldr	r4, [r5, #8]
 800626c:	e7df      	b.n	800622e <_fflush_r+0x22>
 800626e:	4b04      	ldr	r3, [pc, #16]	; (8006280 <_fflush_r+0x74>)
 8006270:	429c      	cmp	r4, r3
 8006272:	bf08      	it	eq
 8006274:	68ec      	ldreq	r4, [r5, #12]
 8006276:	e7da      	b.n	800622e <_fflush_r+0x22>
 8006278:	08006528 	.word	0x08006528
 800627c:	08006548 	.word	0x08006548
 8006280:	08006508 	.word	0x08006508

08006284 <_lseek_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4d07      	ldr	r5, [pc, #28]	; (80062a4 <_lseek_r+0x20>)
 8006288:	4604      	mov	r4, r0
 800628a:	4608      	mov	r0, r1
 800628c:	4611      	mov	r1, r2
 800628e:	2200      	movs	r2, #0
 8006290:	602a      	str	r2, [r5, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	f7fa fd69 	bl	8000d6a <_lseek>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d102      	bne.n	80062a2 <_lseek_r+0x1e>
 800629c:	682b      	ldr	r3, [r5, #0]
 800629e:	b103      	cbz	r3, 80062a2 <_lseek_r+0x1e>
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	bd38      	pop	{r3, r4, r5, pc}
 80062a4:	20000228 	.word	0x20000228

080062a8 <__swhatbuf_r>:
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	460e      	mov	r6, r1
 80062ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b0:	2900      	cmp	r1, #0
 80062b2:	b096      	sub	sp, #88	; 0x58
 80062b4:	4614      	mov	r4, r2
 80062b6:	461d      	mov	r5, r3
 80062b8:	da07      	bge.n	80062ca <__swhatbuf_r+0x22>
 80062ba:	2300      	movs	r3, #0
 80062bc:	602b      	str	r3, [r5, #0]
 80062be:	89b3      	ldrh	r3, [r6, #12]
 80062c0:	061a      	lsls	r2, r3, #24
 80062c2:	d410      	bmi.n	80062e6 <__swhatbuf_r+0x3e>
 80062c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062c8:	e00e      	b.n	80062e8 <__swhatbuf_r+0x40>
 80062ca:	466a      	mov	r2, sp
 80062cc:	f000 f8be 	bl	800644c <_fstat_r>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	dbf2      	blt.n	80062ba <__swhatbuf_r+0x12>
 80062d4:	9a01      	ldr	r2, [sp, #4]
 80062d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80062da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80062de:	425a      	negs	r2, r3
 80062e0:	415a      	adcs	r2, r3
 80062e2:	602a      	str	r2, [r5, #0]
 80062e4:	e7ee      	b.n	80062c4 <__swhatbuf_r+0x1c>
 80062e6:	2340      	movs	r3, #64	; 0x40
 80062e8:	2000      	movs	r0, #0
 80062ea:	6023      	str	r3, [r4, #0]
 80062ec:	b016      	add	sp, #88	; 0x58
 80062ee:	bd70      	pop	{r4, r5, r6, pc}

080062f0 <__smakebuf_r>:
 80062f0:	898b      	ldrh	r3, [r1, #12]
 80062f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062f4:	079d      	lsls	r5, r3, #30
 80062f6:	4606      	mov	r6, r0
 80062f8:	460c      	mov	r4, r1
 80062fa:	d507      	bpl.n	800630c <__smakebuf_r+0x1c>
 80062fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	6123      	str	r3, [r4, #16]
 8006304:	2301      	movs	r3, #1
 8006306:	6163      	str	r3, [r4, #20]
 8006308:	b002      	add	sp, #8
 800630a:	bd70      	pop	{r4, r5, r6, pc}
 800630c:	ab01      	add	r3, sp, #4
 800630e:	466a      	mov	r2, sp
 8006310:	f7ff ffca 	bl	80062a8 <__swhatbuf_r>
 8006314:	9900      	ldr	r1, [sp, #0]
 8006316:	4605      	mov	r5, r0
 8006318:	4630      	mov	r0, r6
 800631a:	f7ff fa73 	bl	8005804 <_malloc_r>
 800631e:	b948      	cbnz	r0, 8006334 <__smakebuf_r+0x44>
 8006320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006324:	059a      	lsls	r2, r3, #22
 8006326:	d4ef      	bmi.n	8006308 <__smakebuf_r+0x18>
 8006328:	f023 0303 	bic.w	r3, r3, #3
 800632c:	f043 0302 	orr.w	r3, r3, #2
 8006330:	81a3      	strh	r3, [r4, #12]
 8006332:	e7e3      	b.n	80062fc <__smakebuf_r+0xc>
 8006334:	4b0d      	ldr	r3, [pc, #52]	; (800636c <__smakebuf_r+0x7c>)
 8006336:	62b3      	str	r3, [r6, #40]	; 0x28
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	6020      	str	r0, [r4, #0]
 800633c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006340:	81a3      	strh	r3, [r4, #12]
 8006342:	9b00      	ldr	r3, [sp, #0]
 8006344:	6163      	str	r3, [r4, #20]
 8006346:	9b01      	ldr	r3, [sp, #4]
 8006348:	6120      	str	r0, [r4, #16]
 800634a:	b15b      	cbz	r3, 8006364 <__smakebuf_r+0x74>
 800634c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006350:	4630      	mov	r0, r6
 8006352:	f000 f88d 	bl	8006470 <_isatty_r>
 8006356:	b128      	cbz	r0, 8006364 <__smakebuf_r+0x74>
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	f023 0303 	bic.w	r3, r3, #3
 800635e:	f043 0301 	orr.w	r3, r3, #1
 8006362:	81a3      	strh	r3, [r4, #12]
 8006364:	89a0      	ldrh	r0, [r4, #12]
 8006366:	4305      	orrs	r5, r0
 8006368:	81a5      	strh	r5, [r4, #12]
 800636a:	e7cd      	b.n	8006308 <__smakebuf_r+0x18>
 800636c:	0800565d 	.word	0x0800565d

08006370 <__malloc_lock>:
 8006370:	4801      	ldr	r0, [pc, #4]	; (8006378 <__malloc_lock+0x8>)
 8006372:	f7ff ba45 	b.w	8005800 <__retarget_lock_acquire_recursive>
 8006376:	bf00      	nop
 8006378:	20000220 	.word	0x20000220

0800637c <__malloc_unlock>:
 800637c:	4801      	ldr	r0, [pc, #4]	; (8006384 <__malloc_unlock+0x8>)
 800637e:	f7ff ba40 	b.w	8005802 <__retarget_lock_release_recursive>
 8006382:	bf00      	nop
 8006384:	20000220 	.word	0x20000220

08006388 <_free_r>:
 8006388:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800638a:	2900      	cmp	r1, #0
 800638c:	d048      	beq.n	8006420 <_free_r+0x98>
 800638e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006392:	9001      	str	r0, [sp, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	f1a1 0404 	sub.w	r4, r1, #4
 800639a:	bfb8      	it	lt
 800639c:	18e4      	addlt	r4, r4, r3
 800639e:	f7ff ffe7 	bl	8006370 <__malloc_lock>
 80063a2:	4a20      	ldr	r2, [pc, #128]	; (8006424 <_free_r+0x9c>)
 80063a4:	9801      	ldr	r0, [sp, #4]
 80063a6:	6813      	ldr	r3, [r2, #0]
 80063a8:	4615      	mov	r5, r2
 80063aa:	b933      	cbnz	r3, 80063ba <_free_r+0x32>
 80063ac:	6063      	str	r3, [r4, #4]
 80063ae:	6014      	str	r4, [r2, #0]
 80063b0:	b003      	add	sp, #12
 80063b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063b6:	f7ff bfe1 	b.w	800637c <__malloc_unlock>
 80063ba:	42a3      	cmp	r3, r4
 80063bc:	d90b      	bls.n	80063d6 <_free_r+0x4e>
 80063be:	6821      	ldr	r1, [r4, #0]
 80063c0:	1862      	adds	r2, r4, r1
 80063c2:	4293      	cmp	r3, r2
 80063c4:	bf04      	itt	eq
 80063c6:	681a      	ldreq	r2, [r3, #0]
 80063c8:	685b      	ldreq	r3, [r3, #4]
 80063ca:	6063      	str	r3, [r4, #4]
 80063cc:	bf04      	itt	eq
 80063ce:	1852      	addeq	r2, r2, r1
 80063d0:	6022      	streq	r2, [r4, #0]
 80063d2:	602c      	str	r4, [r5, #0]
 80063d4:	e7ec      	b.n	80063b0 <_free_r+0x28>
 80063d6:	461a      	mov	r2, r3
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	b10b      	cbz	r3, 80063e0 <_free_r+0x58>
 80063dc:	42a3      	cmp	r3, r4
 80063de:	d9fa      	bls.n	80063d6 <_free_r+0x4e>
 80063e0:	6811      	ldr	r1, [r2, #0]
 80063e2:	1855      	adds	r5, r2, r1
 80063e4:	42a5      	cmp	r5, r4
 80063e6:	d10b      	bne.n	8006400 <_free_r+0x78>
 80063e8:	6824      	ldr	r4, [r4, #0]
 80063ea:	4421      	add	r1, r4
 80063ec:	1854      	adds	r4, r2, r1
 80063ee:	42a3      	cmp	r3, r4
 80063f0:	6011      	str	r1, [r2, #0]
 80063f2:	d1dd      	bne.n	80063b0 <_free_r+0x28>
 80063f4:	681c      	ldr	r4, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	6053      	str	r3, [r2, #4]
 80063fa:	4421      	add	r1, r4
 80063fc:	6011      	str	r1, [r2, #0]
 80063fe:	e7d7      	b.n	80063b0 <_free_r+0x28>
 8006400:	d902      	bls.n	8006408 <_free_r+0x80>
 8006402:	230c      	movs	r3, #12
 8006404:	6003      	str	r3, [r0, #0]
 8006406:	e7d3      	b.n	80063b0 <_free_r+0x28>
 8006408:	6825      	ldr	r5, [r4, #0]
 800640a:	1961      	adds	r1, r4, r5
 800640c:	428b      	cmp	r3, r1
 800640e:	bf04      	itt	eq
 8006410:	6819      	ldreq	r1, [r3, #0]
 8006412:	685b      	ldreq	r3, [r3, #4]
 8006414:	6063      	str	r3, [r4, #4]
 8006416:	bf04      	itt	eq
 8006418:	1949      	addeq	r1, r1, r5
 800641a:	6021      	streq	r1, [r4, #0]
 800641c:	6054      	str	r4, [r2, #4]
 800641e:	e7c7      	b.n	80063b0 <_free_r+0x28>
 8006420:	b003      	add	sp, #12
 8006422:	bd30      	pop	{r4, r5, pc}
 8006424:	20000094 	.word	0x20000094

08006428 <_read_r>:
 8006428:	b538      	push	{r3, r4, r5, lr}
 800642a:	4d07      	ldr	r5, [pc, #28]	; (8006448 <_read_r+0x20>)
 800642c:	4604      	mov	r4, r0
 800642e:	4608      	mov	r0, r1
 8006430:	4611      	mov	r1, r2
 8006432:	2200      	movs	r2, #0
 8006434:	602a      	str	r2, [r5, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	f7fa fc30 	bl	8000c9c <_read>
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d102      	bne.n	8006446 <_read_r+0x1e>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	b103      	cbz	r3, 8006446 <_read_r+0x1e>
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	bd38      	pop	{r3, r4, r5, pc}
 8006448:	20000228 	.word	0x20000228

0800644c <_fstat_r>:
 800644c:	b538      	push	{r3, r4, r5, lr}
 800644e:	4d07      	ldr	r5, [pc, #28]	; (800646c <_fstat_r+0x20>)
 8006450:	2300      	movs	r3, #0
 8006452:	4604      	mov	r4, r0
 8006454:	4608      	mov	r0, r1
 8006456:	4611      	mov	r1, r2
 8006458:	602b      	str	r3, [r5, #0]
 800645a:	f7fa fc6b 	bl	8000d34 <_fstat>
 800645e:	1c43      	adds	r3, r0, #1
 8006460:	d102      	bne.n	8006468 <_fstat_r+0x1c>
 8006462:	682b      	ldr	r3, [r5, #0]
 8006464:	b103      	cbz	r3, 8006468 <_fstat_r+0x1c>
 8006466:	6023      	str	r3, [r4, #0]
 8006468:	bd38      	pop	{r3, r4, r5, pc}
 800646a:	bf00      	nop
 800646c:	20000228 	.word	0x20000228

08006470 <_isatty_r>:
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	4d06      	ldr	r5, [pc, #24]	; (800648c <_isatty_r+0x1c>)
 8006474:	2300      	movs	r3, #0
 8006476:	4604      	mov	r4, r0
 8006478:	4608      	mov	r0, r1
 800647a:	602b      	str	r3, [r5, #0]
 800647c:	f7fa fc6a 	bl	8000d54 <_isatty>
 8006480:	1c43      	adds	r3, r0, #1
 8006482:	d102      	bne.n	800648a <_isatty_r+0x1a>
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	b103      	cbz	r3, 800648a <_isatty_r+0x1a>
 8006488:	6023      	str	r3, [r4, #0]
 800648a:	bd38      	pop	{r3, r4, r5, pc}
 800648c:	20000228 	.word	0x20000228

08006490 <_init>:
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	bf00      	nop
 8006494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006496:	bc08      	pop	{r3}
 8006498:	469e      	mov	lr, r3
 800649a:	4770      	bx	lr

0800649c <_fini>:
 800649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649e:	bf00      	nop
 80064a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a2:	bc08      	pop	{r3}
 80064a4:	469e      	mov	lr, r3
 80064a6:	4770      	bx	lr
