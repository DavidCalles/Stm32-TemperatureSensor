
Assignment3V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cac0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800cc50  0800cc50  0001cc50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0ec  0800d0ec  000209e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0ec  0800d0ec  0001d0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0f4  0800d0f4  000209e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d0f4  0800d0f4  0001d0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0fc  0800d0fc  0001d0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009e8  20000000  0800d100  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200009e8  0800dae8  000209e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c40  0800dae8  00020c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180f1  00000000  00000000  00020a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e05  00000000  00000000  00038b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  0003b910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  0003cd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244e1  00000000  00000000  0003e038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014acd  00000000  00000000  00062519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd6d3  00000000  00000000  00076fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001546b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a24  00000000  00000000  0015470c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200009e8 	.word	0x200009e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc38 	.word	0x0800cc38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200009ec 	.word	0x200009ec
 80001cc:	0800cc38 	.word	0x0800cc38

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000f4e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000f52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000f56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000f5a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f5e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000f60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000f62:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 f80e 	bl	8000f96 <Lcd_init>

	return lcd;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	461d      	mov	r5, r3
 8000f7e:	f107 0410 	add.w	r4, r7, #16
 8000f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f8a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	3728      	adds	r7, #40	; 0x28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bdb0      	pop	{r4, r5, r7, pc}

08000f96 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7d9b      	ldrb	r3, [r3, #22]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10c      	bne.n	8000fc0 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000fa6:	2133      	movs	r1, #51	; 0x33
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f863 	bl	8001074 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000fae:	2132      	movs	r1, #50	; 0x32
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f85f 	bl	8001074 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000fb6:	2128      	movs	r1, #40	; 0x28
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f000 f85b 	bl	8001074 <lcd_write_command>
 8000fbe:	e003      	b.n	8000fc8 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000fc0:	2138      	movs	r1, #56	; 0x38
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f856 	bl	8001074 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000fc8:	2101      	movs	r1, #1
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f852 	bl	8001074 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000fd0:	210c      	movs	r1, #12
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f84e 	bl	8001074 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000fd8:	2106      	movs	r1, #6
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f84a 	bl	8001074 <lcd_write_command>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	e00a      	b.n	800100e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 f864 	bl	80010d0 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	3301      	adds	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	7bfc      	ldrb	r4, [r7, #15]
 8001010:	6838      	ldr	r0, [r7, #0]
 8001012:	f7ff f8dd 	bl	80001d0 <strlen>
 8001016:	4603      	mov	r3, r0
 8001018:	429c      	cmp	r4, r3
 800101a:	d3ed      	bcc.n	8000ff8 <Lcd_string+0x10>
	}
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bd90      	pop	{r4, r7, pc}
	...

08001028 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
 8001034:	4613      	mov	r3, r2
 8001036:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	4a07      	ldr	r2, [pc, #28]	; (8001058 <Lcd_cursor+0x30>)
 800103c:	5cd2      	ldrb	r2, [r2, r3]
 800103e:	78bb      	ldrb	r3, [r7, #2]
 8001040:	4413      	add	r3, r2
 8001042:	b2db      	uxtb	r3, r3
 8001044:	3b80      	subs	r3, #128	; 0x80
 8001046:	b2db      	uxtb	r3, r3
 8001048:	4619      	mov	r1, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f812 	bl	8001074 <lcd_write_command>
	#endif
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	0800cce0 	.word	0x0800cce0

0800105c <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8001064:	2101      	movs	r1, #1
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f804 	bl	8001074 <lcd_write_command>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6898      	ldr	r0, [r3, #8]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	899b      	ldrh	r3, [r3, #12]
 8001088:	2200      	movs	r2, #0
 800108a:	4619      	mov	r1, r3
 800108c:	f002 ff74 	bl	8003f78 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	7d9b      	ldrb	r3, [r3, #22]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d111      	bne.n	80010bc <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	091b      	lsrs	r3, r3, #4
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2204      	movs	r2, #4
 80010a0:	4619      	mov	r1, r3
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f842 	bl	800112c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2204      	movs	r2, #4
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f839 	bl	800112c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80010ba:	e005      	b.n	80010c8 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	2208      	movs	r2, #8
 80010c0:	4619      	mov	r1, r3
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f832 	bl	800112c <lcd_write>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6898      	ldr	r0, [r3, #8]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	899b      	ldrh	r3, [r3, #12]
 80010e4:	2201      	movs	r2, #1
 80010e6:	4619      	mov	r1, r3
 80010e8:	f002 ff46 	bl	8003f78 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7d9b      	ldrb	r3, [r3, #22]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d111      	bne.n	8001118 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2204      	movs	r2, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f814 	bl	800112c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2204      	movs	r2, #4
 800110e:	4619      	mov	r1, r3
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f80b 	bl	800112c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001116:	e005      	b.n	8001124 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	2208      	movs	r2, #8
 800111c:	4619      	mov	r1, r3
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f804 	bl	800112c <lcd_write>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	70fb      	strb	r3, [r7, #3]
 8001138:	4613      	mov	r3, r2
 800113a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	e019      	b.n	8001176 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	8819      	ldrh	r1, [r3, #0]
 800115a:	78fa      	ldrb	r2, [r7, #3]
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	fa42 f303 	asr.w	r3, r2, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	f002 ff04 	bl	8003f78 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	3301      	adds	r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	78bb      	ldrb	r3, [r7, #2]
 800117a:	429a      	cmp	r2, r3
 800117c:	d3e1      	bcc.n	8001142 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6918      	ldr	r0, [r3, #16]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	8a9b      	ldrh	r3, [r3, #20]
 8001186:	2201      	movs	r2, #1
 8001188:	4619      	mov	r1, r3
 800118a:	f002 fef5 	bl	8003f78 <HAL_GPIO_WritePin>
	DELAY(1);
 800118e:	2001      	movs	r0, #1
 8001190:	f001 f8ca 	bl	8002328 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6918      	ldr	r0, [r3, #16]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	8a9b      	ldrh	r3, [r3, #20]
 800119c:	2200      	movs	r2, #0
 800119e:	4619      	mov	r1, r3
 80011a0:	f002 feea 	bl	8003f78 <HAL_GPIO_WritePin>
}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	0000      	movs	r0, r0
	...

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b0a6      	sub	sp, #152	; 0x98
 80011b4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	// GPIO Ports for LCD
	Lcd_PortType ports[] = {
 80011b6:	4bc4      	ldr	r3, [pc, #784]	; (80014c8 <main+0x318>)
 80011b8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80011bc:	461d      	mov	r5, r3
 80011be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		D0_GPIO_Port, D1_GPIO_Port, D2_GPIO_Port, D3_GPIO_Port,
		D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
	 };
	// GPIO Pins for LCD
	Lcd_PinType pins[] = {D0_Pin, D1_Pin, D2_Pin, D3_Pin,
 80011ca:	4bc0      	ldr	r3, [pc, #768]	; (80014cc <main+0x31c>)
 80011cc:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80011d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						  D4_Pin, D5_Pin, D6_Pin, D7_Pin};

	// Typical calibration values for on-board temperature sensor
	slope2 = 400;
 80011d6:	4bbe      	ldr	r3, [pc, #760]	; (80014d0 <main+0x320>)
 80011d8:	4abe      	ldr	r2, [pc, #760]	; (80014d4 <main+0x324>)
 80011da:	601a      	str	r2, [r3, #0]
	interb2 = -slope2*0.76 + 30;
 80011dc:	4bbc      	ldr	r3, [pc, #752]	; (80014d0 <main+0x320>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	eef1 7a67 	vneg.f32	s15, s15
 80011e6:	ee17 3a90 	vmov	r3, s15
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f9ac 	bl	8000548 <__aeabi_f2d>
 80011f0:	a3b3      	add	r3, pc, #716	; (adr r3, 80014c0 <main+0x310>)
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	f7ff f9ff 	bl	80005f8 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4bb4      	ldr	r3, [pc, #720]	; (80014d8 <main+0x328>)
 8001208:	f7ff f840 	bl	800028c <__adddf3>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fcc8 	bl	8000ba8 <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	4ab0      	ldr	r2, [pc, #704]	; (80014dc <main+0x32c>)
 800121c:	6013      	str	r3, [r2, #0]

	// Timing variable
	uint32_t tick;
	uint32_t tLast = HAL_GetTick();
 800121e:	f001 f877 	bl	8002310 <HAL_GetTick>
 8001222:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	uint32_t tLastRGB = tLast;
 8001226:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800122a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	// RGB measurements
	COLOR currentColor;
	uint16_t *currentColorArr;
	//Initial values
	rgb.color = white;
 800122e:	4bac      	ldr	r3, [pc, #688]	; (80014e0 <main+0x330>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
	rgb.ticksT = RGB_PERIOD;
 8001234:	4baa      	ldr	r3, [pc, #680]	; (80014e0 <main+0x330>)
 8001236:	2214      	movs	r2, #20
 8001238:	805a      	strh	r2, [r3, #2]
	rgb.colorTicks[0] = whiteRGB[0];
 800123a:	4baa      	ldr	r3, [pc, #680]	; (80014e4 <main+0x334>)
 800123c:	881a      	ldrh	r2, [r3, #0]
 800123e:	4ba8      	ldr	r3, [pc, #672]	; (80014e0 <main+0x330>)
 8001240:	809a      	strh	r2, [r3, #4]
	rgb.colorTicks[1] = whiteRGB[1];
 8001242:	4ba8      	ldr	r3, [pc, #672]	; (80014e4 <main+0x334>)
 8001244:	885a      	ldrh	r2, [r3, #2]
 8001246:	4ba6      	ldr	r3, [pc, #664]	; (80014e0 <main+0x330>)
 8001248:	80da      	strh	r2, [r3, #6]
	rgb.colorTicks[2] = whiteRGB[2];
 800124a:	4ba6      	ldr	r3, [pc, #664]	; (80014e4 <main+0x334>)
 800124c:	889a      	ldrh	r2, [r3, #4]
 800124e:	4ba4      	ldr	r3, [pc, #656]	; (80014e0 <main+0x330>)
 8001250:	811a      	strh	r2, [r3, #8]
	rgb.counterON[0] = 0;
 8001252:	4ba3      	ldr	r3, [pc, #652]	; (80014e0 <main+0x330>)
 8001254:	2200      	movs	r2, #0
 8001256:	815a      	strh	r2, [r3, #10]
	rgb.counterON[1] = 0;
 8001258:	4ba1      	ldr	r3, [pc, #644]	; (80014e0 <main+0x330>)
 800125a:	2200      	movs	r2, #0
 800125c:	819a      	strh	r2, [r3, #12]
	rgb.counterON[2] = 0;
 800125e:	4ba0      	ldr	r3, [pc, #640]	; (80014e0 <main+0x330>)
 8001260:	2200      	movs	r2, #0
 8001262:	81da      	strh	r2, [r3, #14]
	rgb.counterT = 0;
 8001264:	4b9e      	ldr	r3, [pc, #632]	; (80014e0 <main+0x330>)
 8001266:	2200      	movs	r2, #0
 8001268:	821a      	strh	r2, [r3, #16]
	rgb.state[0] = GPIO_PIN_SET;
 800126a:	4b9d      	ldr	r3, [pc, #628]	; (80014e0 <main+0x330>)
 800126c:	2201      	movs	r2, #1
 800126e:	749a      	strb	r2, [r3, #18]
	rgb.state[1] = GPIO_PIN_RESET;
 8001270:	4b9b      	ldr	r3, [pc, #620]	; (80014e0 <main+0x330>)
 8001272:	2200      	movs	r2, #0
 8001274:	74da      	strb	r2, [r3, #19]
	rgb.state[2] = GPIO_PIN_RESET;
 8001276:	4b9a      	ldr	r3, [pc, #616]	; (80014e0 <main+0x330>)
 8001278:	2200      	movs	r2, #0
 800127a:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127c:	f000 ffdf 	bl	800223e <HAL_Init>

  /* USER CODE BEGIN Init */
  // Create handler for the LCD
	Lcd_HandleTypeDef lcd;
	lcd = Lcd_create(ports, pins,
 8001280:	4638      	mov	r0, r7
 8001282:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001286:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800128a:	2301      	movs	r3, #1
 800128c:	9303      	str	r3, [sp, #12]
 800128e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001292:	9302      	str	r3, [sp, #8]
 8001294:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012a4:	f7ff fe4c 	bl	8000f40 <Lcd_create>
 80012a8:	f107 0418 	add.w	r4, r7, #24
 80012ac:	463d      	mov	r5, r7
 80012ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012b6:	e884 0003 	stmia.w	r4, {r0, r1}
				  EN_GPIO_Port, EN_Pin,
				  LCD_8_BIT_MODE);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ba:	f000 f94b 	bl	8001554 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /*Initial test LCD message*/
  Lcd_clear(&lcd);
 80012be:	f107 0318 	add.w	r3, r7, #24
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff feca 	bl	800105c <Lcd_clear>
  Lcd_cursor(&lcd, 0,1);
 80012c8:	f107 0318 	add.w	r3, r7, #24
 80012cc:	2201      	movs	r2, #1
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fea9 	bl	8001028 <Lcd_cursor>
  Lcd_string(&lcd, "HI; HOW ARE YOU?");
 80012d6:	f107 0318 	add.w	r3, r7, #24
 80012da:	4983      	ldr	r1, [pc, #524]	; (80014e8 <main+0x338>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe83 	bl	8000fe8 <Lcd_string>
  HAL_Delay(2000);
 80012e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012e6:	f001 f81f 	bl	8002328 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ea:	f000 fb45 	bl	8001978 <MX_GPIO_Init>
  MX_DMA_Init();
 80012ee:	f000 fb25 	bl	800193c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80012f2:	f000 faf3 	bl	80018dc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80012f6:	f000 f9c1 	bl	800167c <MX_ADC1_Init>
  MX_TIM2_Init();
 80012fa:	f000 fa45 	bl	8001788 <MX_TIM2_Init>
  MX_TIM7_Init();
 80012fe:	f000 fab7 	bl	8001870 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001302:	487a      	ldr	r0, [pc, #488]	; (80014ec <main+0x33c>)
 8001304:	f004 f838 	bl	8005378 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8001308:	4879      	ldr	r0, [pc, #484]	; (80014f0 <main+0x340>)
 800130a:	f004 f881 	bl	8005410 <HAL_TIM_Base_Start_IT>
  // Initial ADC calibration
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800130e:	217f      	movs	r1, #127	; 0x7f
 8001310:	4878      	ldr	r0, [pc, #480]	; (80014f4 <main+0x344>)
 8001312:	f002 f95d 	bl	80035d0 <HAL_ADCEx_Calibration_Start>
  // Circular sampling from 3 channels every 1ms
  HAL_ADC_Start_DMA(&hadc1, myVar, 3);
 8001316:	2203      	movs	r2, #3
 8001318:	4977      	ldr	r1, [pc, #476]	; (80014f8 <main+0x348>)
 800131a:	4876      	ldr	r0, [pc, #472]	; (80014f4 <main+0x344>)
 800131c:	f001 fb5e 	bl	80029dc <HAL_ADC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Temperature from on-board temperature sensor
	  tempIn = CalculateSensorInside(myVar[1]);
 8001320:	4b75      	ldr	r3, [pc, #468]	; (80014f8 <main+0x348>)
 8001322:	885b      	ldrh	r3, [r3, #2]
 8001324:	b29b      	uxth	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fc18 	bl	8001b5c <CalculateSensorInside>
 800132c:	eef0 7a40 	vmov.f32	s15, s0
 8001330:	4b72      	ldr	r3, [pc, #456]	; (80014fc <main+0x34c>)
 8001332:	edc3 7a00 	vstr	s15, [r3]
	  // Temperature from MCP9700A
	  tempOut = CalculateSensorOutside(myVar[2]);
 8001336:	4b70      	ldr	r3, [pc, #448]	; (80014f8 <main+0x348>)
 8001338:	889b      	ldrh	r3, [r3, #4]
 800133a:	b29b      	uxth	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fb93 	bl	8001a68 <CalculateSensorOutside>
 8001342:	eef0 7a40 	vmov.f32	s15, s0
 8001346:	4b6e      	ldr	r3, [pc, #440]	; (8001500 <main+0x350>)
 8001348:	edc3 7a00 	vstr	s15, [r3]
	  // Compensating Temperature from MCP9700A with second order equation
	  tempOut = CalculateSensorOutside2nd(tempOut);
 800134c:	4b6c      	ldr	r3, [pc, #432]	; (8001500 <main+0x350>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	eeb0 0a67 	vmov.f32	s0, s15
 8001356:	f000 fbc3 	bl	8001ae0 <CalculateSensorOutside2nd>
 800135a:	eef0 7a40 	vmov.f32	s15, s0
 800135e:	4b68      	ldr	r3, [pc, #416]	; (8001500 <main+0x350>)
 8001360:	edc3 7a00 	vstr	s15, [r3]

	  // Updating LCD when required
	  tick = HAL_GetTick();
 8001364:	f000 ffd4 	bl	8002310 <HAL_GetTick>
 8001368:	6778      	str	r0, [r7, #116]	; 0x74
	  if(tick-tLast > LCD_TICKS){
 800136a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800136c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001376:	d953      	bls.n	8001420 <main+0x270>
		  tLast = tick;
 8001378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800137a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  // LCD Message
		  Lcd_clear(&lcd);
 800137e:	f107 0318 	add.w	r3, r7, #24
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fe6a 	bl	800105c <Lcd_clear>
		  Lcd_cursor(&lcd, 0,0);
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fe49 	bl	8001028 <Lcd_cursor>
		  sprintf(mssg, "T: In  %.1f C", tempIn);
 8001396:	4b59      	ldr	r3, [pc, #356]	; (80014fc <main+0x34c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f8d4 	bl	8000548 <__aeabi_f2d>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80013a8:	4956      	ldr	r1, [pc, #344]	; (8001504 <main+0x354>)
 80013aa:	f005 fcd5 	bl	8006d58 <sprintf>
		  Lcd_string(&lcd, mssg);
 80013ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80013b2:	f107 0318 	add.w	r3, r7, #24
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fe15 	bl	8000fe8 <Lcd_string>
		  Lcd_cursor(&lcd, 1,0);
 80013be:	f107 0318 	add.w	r3, r7, #24
 80013c2:	2200      	movs	r2, #0
 80013c4:	2101      	movs	r1, #1
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fe2e 	bl	8001028 <Lcd_cursor>
		  sprintf(mssg, "T: Out %.1f C", tempOut);
 80013cc:	4b4c      	ldr	r3, [pc, #304]	; (8001500 <main+0x350>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8b9 	bl	8000548 <__aeabi_f2d>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80013de:	494a      	ldr	r1, [pc, #296]	; (8001508 <main+0x358>)
 80013e0:	f005 fcba 	bl	8006d58 <sprintf>
		  Lcd_string(&lcd, mssg);
 80013e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80013e8:	f107 0318 	add.w	r3, r7, #24
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fdfa 	bl	8000fe8 <Lcd_string>
		  // Print in Serial Port
		  printf("Time: %ld, TempIn: %.2f \t TempOut: %.2f \n\r", tick, tempIn, tempOut);
 80013f4:	4b41      	ldr	r3, [pc, #260]	; (80014fc <main+0x34c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f8a5 	bl	8000548 <__aeabi_f2d>
 80013fe:	4604      	mov	r4, r0
 8001400:	460d      	mov	r5, r1
 8001402:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <main+0x350>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f89e 	bl	8000548 <__aeabi_f2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	e9cd 2300 	strd	r2, r3, [sp]
 8001414:	4622      	mov	r2, r4
 8001416:	462b      	mov	r3, r5
 8001418:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800141a:	483c      	ldr	r0, [pc, #240]	; (800150c <main+0x35c>)
 800141c:	f005 fc8a 	bl	8006d34 <printf>
	  }

	  // Updating RGB LED
	  tick = HAL_GetTick();
 8001420:	f000 ff76 	bl	8002310 <HAL_GetTick>
 8001424:	6778      	str	r0, [r7, #116]	; 0x74
	  if((tick-tLastRGB) > RGB_TICKS){
 8001426:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001428:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001432:	f67f af75 	bls.w	8001320 <main+0x170>
		  tLastRGB = tick;
 8001436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001438:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		  // Current color conditions
		  if(tempOut < -15){
 800143c:	4b30      	ldr	r3, [pc, #192]	; (8001500 <main+0x350>)
 800143e:	edd3 7a00 	vldr	s15, [r3]
 8001442:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 8001446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144e:	d505      	bpl.n	800145c <main+0x2ac>
			  currentColor = white;
 8001450:	2300      	movs	r3, #0
 8001452:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  currentColorArr = whiteRGB;
 8001456:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <main+0x334>)
 8001458:	67bb      	str	r3, [r7, #120]	; 0x78
 800145a:	e064      	b.n	8001526 <main+0x376>
		  }
		  else if(tempOut <= 5){
 800145c:	4b28      	ldr	r3, [pc, #160]	; (8001500 <main+0x350>)
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146e:	d805      	bhi.n	800147c <main+0x2cc>
			  currentColor = blue;
 8001470:	2301      	movs	r3, #1
 8001472:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  currentColorArr = blueRGB;
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <main+0x360>)
 8001478:	67bb      	str	r3, [r7, #120]	; 0x78
 800147a:	e054      	b.n	8001526 <main+0x376>
		  }
		  else if(tempOut <= 15){
 800147c:	4b20      	ldr	r3, [pc, #128]	; (8001500 <main+0x350>)
 800147e:	edd3 7a00 	vldr	s15, [r3]
 8001482:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	d805      	bhi.n	800149c <main+0x2ec>
			  currentColor = yellow;
 8001490:	2302      	movs	r3, #2
 8001492:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  currentColorArr = yellowRGB;
 8001496:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <main+0x364>)
 8001498:	67bb      	str	r3, [r7, #120]	; 0x78
 800149a:	e044      	b.n	8001526 <main+0x376>
		  }
		  else if(tempOut <= 25){
 800149c:	4b18      	ldr	r3, [pc, #96]	; (8001500 <main+0x350>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80014a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	d835      	bhi.n	800151c <main+0x36c>
			  currentColor = orange;
 80014b0:	2303      	movs	r3, #3
 80014b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  currentColorArr = orangeRGB;
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <main+0x368>)
 80014b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80014ba:	e034      	b.n	8001526 <main+0x376>
 80014bc:	f3af 8000 	nop.w
 80014c0:	851eb852 	.word	0x851eb852
 80014c4:	3fe851eb 	.word	0x3fe851eb
 80014c8:	0800ccb0 	.word	0x0800ccb0
 80014cc:	0800ccd0 	.word	0x0800ccd0
 80014d0:	20000a44 	.word	0x20000a44
 80014d4:	43c80000 	.word	0x43c80000
 80014d8:	403e0000 	.word	0x403e0000
 80014dc:	20000c28 	.word	0x20000c28
 80014e0:	20000a48 	.word	0x20000a48
 80014e4:	20000018 	.word	0x20000018
 80014e8:	0800cc50 	.word	0x0800cc50
 80014ec:	20000b0c 	.word	0x20000b0c
 80014f0:	20000bdc 	.word	0x20000bdc
 80014f4:	20000a60 	.word	0x20000a60
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000a04 	.word	0x20000a04
 8001500:	20000a08 	.word	0x20000a08
 8001504:	0800cc64 	.word	0x0800cc64
 8001508:	0800cc74 	.word	0x0800cc74
 800150c:	0800cc84 	.word	0x0800cc84
 8001510:	20000020 	.word	0x20000020
 8001514:	20000028 	.word	0x20000028
 8001518:	20000008 	.word	0x20000008
		  }
		  else{
			  currentColor = red;
 800151c:	2304      	movs	r3, #4
 800151e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  currentColorArr = redRGB;
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <main+0x39c>)
 8001524:	67bb      	str	r3, [r7, #120]	; 0x78
		  }

		  // Update to "should-be" value
		  if (currentColor != rgb.color){
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <main+0x3a0>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800152e:	429a      	cmp	r2, r3
 8001530:	f43f aef6 	beq.w	8001320 <main+0x170>
			  ChangeColor(&rgb, currentColor, currentColorArr);
 8001534:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001538:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800153a:	4619      	mov	r1, r3
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <main+0x3a0>)
 800153e:	f000 fb5d 	bl	8001bfc <ChangeColor>
			  RestartRGBTimer(&rgb);
 8001542:	4803      	ldr	r0, [pc, #12]	; (8001550 <main+0x3a0>)
 8001544:	f000 fb38 	bl	8001bb8 <RestartRGBTimer>
	  tempIn = CalculateSensorInside(myVar[1]);
 8001548:	e6ea      	b.n	8001320 <main+0x170>
 800154a:	bf00      	nop
 800154c:	20000010 	.word	0x20000010
 8001550:	20000a48 	.word	0x20000a48

08001554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b0ac      	sub	sp, #176	; 0xb0
 8001558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800155e:	2244      	movs	r2, #68	; 0x44
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f005 fbde 	bl	8006d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001568:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2254      	movs	r2, #84	; 0x54
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f005 fbd0 	bl	8006d24 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001584:	f002 fd10 	bl	8003fa8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001588:	4b3b      	ldr	r3, [pc, #236]	; (8001678 <SystemClock_Config+0x124>)
 800158a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158e:	4a3a      	ldr	r2, [pc, #232]	; (8001678 <SystemClock_Config+0x124>)
 8001590:	f023 0318 	bic.w	r3, r3, #24
 8001594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001598:	2314      	movs	r3, #20
 800159a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800159c:	2301      	movs	r3, #1
 800159e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015a0:	2301      	movs	r3, #1
 80015a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015ac:	2360      	movs	r3, #96	; 0x60
 80015ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b2:	2302      	movs	r3, #2
 80015b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015b8:	2301      	movs	r3, #1
 80015ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015be:	2301      	movs	r3, #1
 80015c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80015c4:	2310      	movs	r3, #16
 80015c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015ca:	2307      	movs	r3, #7
 80015cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015d0:	2302      	movs	r3, #2
 80015d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015d6:	2302      	movs	r3, #2
 80015d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015e0:	4618      	mov	r0, r3
 80015e2:	f002 fd55 	bl	8004090 <HAL_RCC_OscConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015ec:	f000 fb9e 	bl	8001d2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f0:	230f      	movs	r3, #15
 80015f2:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f4:	2303      	movs	r3, #3
 80015f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001604:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001608:	2101      	movs	r1, #1
 800160a:	4618      	mov	r0, r3
 800160c:	f003 f960 	bl	80048d0 <HAL_RCC_ClockConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001616:	f000 fb89 	bl	8001d2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800161a:	f244 0302 	movw	r3, #16386	; 0x4002
 800161e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001624:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001628:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800162a:	2301      	movs	r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800162e:	2301      	movs	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001632:	2310      	movs	r3, #16
 8001634:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001636:	2307      	movs	r3, #7
 8001638:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800163a:	2302      	movs	r3, #2
 800163c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800163e:	2302      	movs	r3, #2
 8001640:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001642:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001646:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	4618      	mov	r0, r3
 800164c:	f003 fb46 	bl	8004cdc <HAL_RCCEx_PeriphCLKConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0x106>
  {
    Error_Handler();
 8001656:	f000 fb69 	bl	8001d2c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800165a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800165e:	f002 fcc1 	bl	8003fe4 <HAL_PWREx_ControlVoltageScaling>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <SystemClock_Config+0x118>
  {
    Error_Handler();
 8001668:	f000 fb60 	bl	8001d2c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800166c:	f003 fd2a 	bl	80050c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001670:	bf00      	nop
 8001672:	37b0      	adds	r7, #176	; 0xb0
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40021000 	.word	0x40021000

0800167c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001682:	463b      	mov	r3, r7
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
 8001690:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001692:	4b38      	ldr	r3, [pc, #224]	; (8001774 <MX_ADC1_Init+0xf8>)
 8001694:	4a38      	ldr	r2, [pc, #224]	; (8001778 <MX_ADC1_Init+0xfc>)
 8001696:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001698:	4b36      	ldr	r3, [pc, #216]	; (8001774 <MX_ADC1_Init+0xf8>)
 800169a:	2200      	movs	r2, #0
 800169c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800169e:	4b35      	ldr	r3, [pc, #212]	; (8001774 <MX_ADC1_Init+0xf8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016a4:	4b33      	ldr	r3, [pc, #204]	; (8001774 <MX_ADC1_Init+0xf8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016aa:	4b32      	ldr	r3, [pc, #200]	; (8001774 <MX_ADC1_Init+0xf8>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016b0:	4b30      	ldr	r3, [pc, #192]	; (8001774 <MX_ADC1_Init+0xf8>)
 80016b2:	2204      	movs	r2, #4
 80016b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016b6:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <MX_ADC1_Init+0xf8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <MX_ADC1_Init+0xf8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80016c2:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <MX_ADC1_Init+0xf8>)
 80016c4:	2203      	movs	r2, #3
 80016c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016c8:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <MX_ADC1_Init+0xf8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80016d0:	4b28      	ldr	r3, [pc, #160]	; (8001774 <MX_ADC1_Init+0xf8>)
 80016d2:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80016d8:	4b26      	ldr	r3, [pc, #152]	; (8001774 <MX_ADC1_Init+0xf8>)
 80016da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80016e0:	4b24      	ldr	r3, [pc, #144]	; (8001774 <MX_ADC1_Init+0xf8>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016e8:	4b22      	ldr	r3, [pc, #136]	; (8001774 <MX_ADC1_Init+0xf8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80016ee:	4b21      	ldr	r3, [pc, #132]	; (8001774 <MX_ADC1_Init+0xf8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016f6:	481f      	ldr	r0, [pc, #124]	; (8001774 <MX_ADC1_Init+0xf8>)
 80016f8:	f001 f828 	bl	800274c <HAL_ADC_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001702:	f000 fb13 	bl	8001d2c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <MX_ADC1_Init+0x100>)
 8001708:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800170a:	2306      	movs	r3, #6
 800170c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800170e:	2306      	movs	r3, #6
 8001710:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001712:	237f      	movs	r3, #127	; 0x7f
 8001714:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001716:	2304      	movs	r3, #4
 8001718:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800171e:	463b      	mov	r3, r7
 8001720:	4619      	mov	r1, r3
 8001722:	4814      	ldr	r0, [pc, #80]	; (8001774 <MX_ADC1_Init+0xf8>)
 8001724:	f001 f9f2 	bl	8002b0c <HAL_ADC_ConfigChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800172e:	f000 fafd 	bl	8001d2c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <MX_ADC1_Init+0x104>)
 8001734:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001736:	230c      	movs	r3, #12
 8001738:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800173a:	463b      	mov	r3, r7
 800173c:	4619      	mov	r1, r3
 800173e:	480d      	ldr	r0, [pc, #52]	; (8001774 <MX_ADC1_Init+0xf8>)
 8001740:	f001 f9e4 	bl	8002b0c <HAL_ADC_ConfigChannel>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800174a:	f000 faef 	bl	8001d2c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <MX_ADC1_Init+0x108>)
 8001750:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001752:	2312      	movs	r3, #18
 8001754:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001756:	463b      	mov	r3, r7
 8001758:	4619      	mov	r1, r3
 800175a:	4806      	ldr	r0, [pc, #24]	; (8001774 <MX_ADC1_Init+0xf8>)
 800175c:	f001 f9d6 	bl	8002b0c <HAL_ADC_ConfigChannel>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8001766:	f000 fae1 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000a60 	.word	0x20000a60
 8001778:	50040000 	.word	0x50040000
 800177c:	2e300800 	.word	0x2e300800
 8001780:	c7520000 	.word	0xc7520000
 8001784:	19200040 	.word	0x19200040

08001788 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08e      	sub	sp, #56	; 0x38
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a8:	463b      	mov	r3, r7
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	615a      	str	r2, [r3, #20]
 80017b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017ba:	4b2c      	ldr	r3, [pc, #176]	; (800186c <MX_TIM2_Init+0xe4>)
 80017bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320;
 80017c2:	4b2a      	ldr	r3, [pc, #168]	; (800186c <MX_TIM2_Init+0xe4>)
 80017c4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <MX_TIM2_Init+0xe4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80017d0:	4b26      	ldr	r3, [pc, #152]	; (800186c <MX_TIM2_Init+0xe4>)
 80017d2:	2264      	movs	r2, #100	; 0x64
 80017d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d6:	4b25      	ldr	r3, [pc, #148]	; (800186c <MX_TIM2_Init+0xe4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017dc:	4b23      	ldr	r3, [pc, #140]	; (800186c <MX_TIM2_Init+0xe4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017e2:	4822      	ldr	r0, [pc, #136]	; (800186c <MX_TIM2_Init+0xe4>)
 80017e4:	f003 fd70 	bl	80052c8 <HAL_TIM_Base_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80017ee:	f000 fa9d 	bl	8001d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017fc:	4619      	mov	r1, r3
 80017fe:	481b      	ldr	r0, [pc, #108]	; (800186c <MX_TIM2_Init+0xe4>)
 8001800:	f004 f850 	bl	80058a4 <HAL_TIM_ConfigClockSource>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800180a:	f000 fa8f 	bl	8001d2c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800180e:	4817      	ldr	r0, [pc, #92]	; (800186c <MX_TIM2_Init+0xe4>)
 8001810:	f003 fe52 	bl	80054b8 <HAL_TIM_OC_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800181a:	f000 fa87 	bl	8001d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800181e:	2320      	movs	r3, #32
 8001820:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001826:	f107 031c 	add.w	r3, r7, #28
 800182a:	4619      	mov	r1, r3
 800182c:	480f      	ldr	r0, [pc, #60]	; (800186c <MX_TIM2_Init+0xe4>)
 800182e:	f004 fca3 	bl	8006178 <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001838:	f000 fa78 	bl	8001d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800183c:	2300      	movs	r3, #0
 800183e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800184c:	463b      	mov	r3, r7
 800184e:	2204      	movs	r2, #4
 8001850:	4619      	mov	r1, r3
 8001852:	4806      	ldr	r0, [pc, #24]	; (800186c <MX_TIM2_Init+0xe4>)
 8001854:	f003 ffb0 	bl	80057b8 <HAL_TIM_OC_ConfigChannel>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800185e:	f000 fa65 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	3738      	adds	r7, #56	; 0x38
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000b0c 	.word	0x20000b0c

08001870 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <MX_TIM7_Init+0x64>)
 8001882:	4a15      	ldr	r2, [pc, #84]	; (80018d8 <MX_TIM7_Init+0x68>)
 8001884:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 320;
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <MX_TIM7_Init+0x64>)
 8001888:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800188c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_TIM7_Init+0x64>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_TIM7_Init+0x64>)
 8001896:	2264      	movs	r2, #100	; 0x64
 8001898:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <MX_TIM7_Init+0x64>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018a0:	480c      	ldr	r0, [pc, #48]	; (80018d4 <MX_TIM7_Init+0x64>)
 80018a2:	f003 fd11 	bl	80052c8 <HAL_TIM_Base_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80018ac:	f000 fa3e 	bl	8001d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018b0:	2320      	movs	r3, #32
 80018b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_TIM7_Init+0x64>)
 80018be:	f004 fc5b 	bl	8006178 <HAL_TIMEx_MasterConfigSynchronization>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80018c8:	f000 fa30 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000bdc 	.word	0x20000bdc
 80018d8:	40001400 	.word	0x40001400

080018dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <MX_USART2_UART_Init+0x58>)
 80018e2:	4a15      	ldr	r2, [pc, #84]	; (8001938 <MX_USART2_UART_Init+0x5c>)
 80018e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <MX_USART2_UART_Init+0x58>)
 80018e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_USART2_UART_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_USART2_UART_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MX_USART2_UART_Init+0x58>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <MX_USART2_UART_Init+0x58>)
 8001902:	220c      	movs	r2, #12
 8001904:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <MX_USART2_UART_Init+0x58>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_USART2_UART_Init+0x58>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <MX_USART2_UART_Init+0x58>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_USART2_UART_Init+0x58>)
 800191a:	2200      	movs	r2, #0
 800191c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_USART2_UART_Init+0x58>)
 8001920:	f004 fcae 	bl	8006280 <HAL_UART_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800192a:	f000 f9ff 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000b58 	.word	0x20000b58
 8001938:	40004400 	.word	0x40004400

0800193c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_DMA_Init+0x38>)
 8001944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <MX_DMA_Init+0x38>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6493      	str	r3, [r2, #72]	; 0x48
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_DMA_Init+0x38>)
 8001950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	200b      	movs	r0, #11
 8001960:	f001 ff71 	bl	8003846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001964:	200b      	movs	r0, #11
 8001966:	f001 ff8a 	bl	800387e <HAL_NVIC_EnableIRQ>

}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000

08001978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198e:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <MX_GPIO_Init+0xbc>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4a28      	ldr	r2, [pc, #160]	; (8001a34 <MX_GPIO_Init+0xbc>)
 8001994:	f043 0304 	orr.w	r3, r3, #4
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <MX_GPIO_Init+0xbc>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <MX_GPIO_Init+0xbc>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <MX_GPIO_Init+0xbc>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b2:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <MX_GPIO_Init+0xbc>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <MX_GPIO_Init+0xbc>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <MX_GPIO_Init+0xbc>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <MX_GPIO_Init+0xbc>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 80019d6:	2200      	movs	r2, #0
 80019d8:	f640 71b8 	movw	r1, #4024	; 0xfb8
 80019dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e0:	f002 faca 	bl	8003f78 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|GPIO_PIN_4
 80019e4:	2200      	movs	r2, #0
 80019e6:	21fb      	movs	r1, #251	; 0xfb
 80019e8:	4813      	ldr	r0, [pc, #76]	; (8001a38 <MX_GPIO_Init+0xc0>)
 80019ea:	f002 fac5 	bl	8003f78 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA4 PA5 PA7
                           PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 80019ee:	f640 73b8 	movw	r3, #4024	; 0xfb8
 80019f2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0a:	f002 f94b 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 LD3_Pin PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|GPIO_PIN_4
 8001a0e:	23fb      	movs	r3, #251	; 0xfb
 8001a10:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	4619      	mov	r1, r3
 8001a24:	4804      	ldr	r0, [pc, #16]	; (8001a38 <MX_GPIO_Init+0xc0>)
 8001a26:	f002 f93d 	bl	8003ca4 <HAL_GPIO_Init>

}
 8001a2a:	bf00      	nop
 8001a2c:	3720      	adds	r7, #32
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	48000400 	.word	0x48000400

08001a3c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	// Small pulse each time
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001a44:	2201      	movs	r2, #1
 8001a46:	2120      	movs	r1, #32
 8001a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4c:	f002 fa94 	bl	8003f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2120      	movs	r1, #32
 8001a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a58:	f002 fa8e 	bl	8003f78 <HAL_GPIO_WritePin>
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	0000      	movs	r0, r0
	...

08001a68 <CalculateSensorOutside>:

//Temperature sensor on a MCP9700A
float CalculateSensorOutside(uint16_t tempIn){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]

	float voltsIn = (float)tempIn*convRate;
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a7c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001ad8 <CalculateSensorOutside+0x70>
 8001a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a84:	edc7 7a03 	vstr	s15, [r7, #12]
	float tempOut = (voltsIn-0.5)/0.01;
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7fe fd5d 	bl	8000548 <__aeabi_f2d>
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <CalculateSensorOutside+0x74>)
 8001a94:	f7fe fbf8 	bl	8000288 <__aeabi_dsub>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	a30b      	add	r3, pc, #44	; (adr r3, 8001ad0 <CalculateSensorOutside+0x68>)
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	f7fe fed1 	bl	800084c <__aeabi_ddiv>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f7ff f879 	bl	8000ba8 <__aeabi_d2f>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	60bb      	str	r3, [r7, #8]
	return tempOut;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	ee07 3a90 	vmov	s15, r3
}
 8001ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	f3af 8000 	nop.w
 8001ad0:	47ae147b 	.word	0x47ae147b
 8001ad4:	3f847ae1 	.word	0x3f847ae1
 8001ad8:	3a534067 	.word	0x3a534067
 8001adc:	3fe00000 	.word	0x3fe00000

08001ae0 <CalculateSensorOutside2nd>:

//Compansated Temperature on MCP9700A with 2nd order error calculation
//AN1001 application note
float CalculateSensorOutside2nd(float ta){
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	ed87 0a01 	vstr	s0, [r7, #4]

	float tError = (ec_2*(125-ta)*(ta+40)) + (ec_1*(ta+40)) + error_40;
 8001aea:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001b4c <CalculateSensorOutside2nd+0x6c>
 8001aee:	edd7 7a01 	vldr	s15, [r7, #4]
 8001af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001b50 <CalculateSensorOutside2nd+0x70>
 8001afa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001afe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b02:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001b54 <CalculateSensorOutside2nd+0x74>
 8001b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b12:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001b54 <CalculateSensorOutside2nd+0x74>
 8001b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b1a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001b58 <CalculateSensorOutside2nd+0x78>
 8001b1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b26:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001b2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b2e:	edc7 7a03 	vstr	s15, [r7, #12]
	return (ta-tError);
 8001b32:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b36:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	42fa0000 	.word	0x42fa0000
 8001b50:	b97fda40 	.word	0xb97fda40
 8001b54:	42200000 	.word	0x42200000
 8001b58:	2c0cbccc 	.word	0x2c0cbccc

08001b5c <CalculateSensorInside>:
//Temperature sensor on board

float CalculateSensorInside(uint16_t tempIn){
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]

	float voltsIn = (float)tempIn*convRate;
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	ee07 3a90 	vmov	s15, r3
 8001b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b70:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001bac <CalculateSensorInside+0x50>
 8001b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b78:	edc7 7a03 	vstr	s15, [r7, #12]
	float tempOut = (slope2*((float)voltsIn)) +interb2;
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <CalculateSensorInside+0x54>)
 8001b7e:	ed93 7a00 	vldr	s14, [r3]
 8001b82:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <CalculateSensorInside+0x58>)
 8001b8c:	edd3 7a00 	vldr	s15, [r3]
 8001b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b94:	edc7 7a02 	vstr	s15, [r7, #8]
	return tempOut;
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	ee07 3a90 	vmov	s15, r3
}
 8001b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	3a534067 	.word	0x3a534067
 8001bb0:	20000a44 	.word	0x20000a44
 8001bb4:	20000c28 	.word	0x20000c28

08001bb8 <RestartRGBTimer>:

void RestartRGBTimer(LED_TIMER *rgb){
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	//Initial values
	rgb->ticksT = RGB_PERIOD;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2214      	movs	r2, #20
 8001bc4:	805a      	strh	r2, [r3, #2]
	rgb->counterON[0] = 0;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	815a      	strh	r2, [r3, #10]
	rgb->counterON[1] = 0;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	819a      	strh	r2, [r3, #12]
	rgb->counterON[2] = 0;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	81da      	strh	r2, [r3, #14]
	rgb->counterT = 0;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	821a      	strh	r2, [r3, #16]
	rgb->state[0] = GPIO_PIN_RESET;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	749a      	strb	r2, [r3, #18]
	rgb->state[1] = GPIO_PIN_RESET;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	74da      	strb	r2, [r3, #19]
	rgb->state[2] = GPIO_PIN_RESET;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	751a      	strb	r2, [r3, #20]

}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <ChangeColor>:

void ChangeColor(LED_TIMER *rgb, COLOR colorIn, uint16_t *colorarr){
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	460b      	mov	r3, r1
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	72fb      	strb	r3, [r7, #11]
	rgb->color = colorIn;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	7afa      	ldrb	r2, [r7, #11]
 8001c0e:	701a      	strb	r2, [r3, #0]
	rgb->colorTicks[0] = colorarr[0];
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	881a      	ldrh	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	809a      	strh	r2, [r3, #4]
	rgb->colorTicks[1] = colorarr[1];
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	885a      	ldrh	r2, [r3, #2]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	80da      	strh	r2, [r3, #6]
	rgb->colorTicks[2] = colorarr[2];
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	889a      	ldrh	r2, [r3, #4]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	811a      	strh	r2, [r3, #8]

}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <IncreaseRGBTimer>:

void IncreaseRGBTimer(LED_TIMER *rgb){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	if(rgb->counterT > rgb->ticksT){
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	8a1a      	ldrh	r2, [r3, #16]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	885b      	ldrh	r3, [r3, #2]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d903      	bls.n	8001c50 <IncreaseRGBTimer+0x1c>
		RestartRGBTimer(rgb);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ffb5 	bl	8001bb8 <RestartRGBTimer>
	}
	else{
		rgb->counterT += 1;
	}
}
 8001c4e:	e005      	b.n	8001c5c <IncreaseRGBTimer+0x28>
		rgb->counterT += 1;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	8a1b      	ldrh	r3, [r3, #16]
 8001c54:	3301      	adds	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	821a      	strh	r2, [r3, #16]
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <UpdateRGBState>:

void UpdateRGBState(LED_TIMER *rgb){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

	for(int i=0; i<3; i++){
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	e02b      	b.n	8001cca <UpdateRGBState+0x66>
		// check on ON timers and update state
		if(rgb->counterON[i] < rgb->colorTicks[i]){
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3304      	adds	r3, #4
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	885a      	ldrh	r2, [r3, #2]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	440b      	add	r3, r1
 8001c86:	889b      	ldrh	r3, [r3, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d215      	bcs.n	8001cb8 <UpdateRGBState+0x54>
			rgb->state[i] = GPIO_PIN_SET;
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4413      	add	r3, r2
 8001c92:	3312      	adds	r3, #18
 8001c94:	2201      	movs	r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
			rgb->counterON[i]+=1;
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	885b      	ldrh	r3, [r3, #2]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	b299      	uxth	r1, r3
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3304      	adds	r3, #4
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	460a      	mov	r2, r1
 8001cb4:	805a      	strh	r2, [r3, #2]
 8001cb6:	e005      	b.n	8001cc4 <UpdateRGBState+0x60>
		}
		else{
			rgb->state[i] = GPIO_PIN_RESET;
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3312      	adds	r3, #18
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<3; i++){
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	ddd0      	ble.n	8001c72 <UpdateRGBState+0xe>
		}
	}
	IncreaseRGBTimer(rgb);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ffaf 	bl	8001c34 <IncreaseRGBTimer>
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	// Increase virtual timer value
	UpdateRGBState(&rgb);
 8001ce8:	480f      	ldr	r0, [pc, #60]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001cea:	f7ff ffbb 	bl	8001c64 <UpdateRGBState>

	// output values

	HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, rgb.state[0]);
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001cf0:	7c9b      	ldrb	r3, [r3, #18]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	2110      	movs	r1, #16
 8001cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cfa:	f002 f93d 	bl	8003f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, rgb.state[1]);
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001d00:	7cdb      	ldrb	r3, [r3, #19]
 8001d02:	461a      	mov	r2, r3
 8001d04:	2108      	movs	r1, #8
 8001d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d0a:	f002 f935 	bl	8003f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, rgb.state[2]);
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001d10:	7d1b      	ldrb	r3, [r3, #20]
 8001d12:	461a      	mov	r2, r3
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1a:	f002 f92d 	bl	8003f78 <HAL_GPIO_WritePin>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000a48 	.word	0x20000a48

08001d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d30:	b672      	cpsid	i
}
 8001d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <Error_Handler+0x8>
	...

08001d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_MspInit+0x44>)
 8001d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d42:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <HAL_MspInit+0x44>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6613      	str	r3, [r2, #96]	; 0x60
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_MspInit+0x44>)
 8001d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_MspInit+0x44>)
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	4a08      	ldr	r2, [pc, #32]	; (8001d7c <HAL_MspInit+0x44>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d60:	6593      	str	r3, [r2, #88]	; 0x58
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_MspInit+0x44>)
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000

08001d80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a2b      	ldr	r2, [pc, #172]	; (8001e4c <HAL_ADC_MspInit+0xcc>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d14f      	bne.n	8001e42 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001da2:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <HAL_ADC_MspInit+0xd0>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	4a2a      	ldr	r2, [pc, #168]	; (8001e50 <HAL_ADC_MspInit+0xd0>)
 8001da8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dae:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <HAL_ADC_MspInit+0xd0>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <HAL_ADC_MspInit+0xd0>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	4a24      	ldr	r2, [pc, #144]	; (8001e50 <HAL_ADC_MspInit+0xd0>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc6:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <HAL_ADC_MspInit+0xd0>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001dd2:	2342      	movs	r3, #66	; 0x42
 8001dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001dd6:	230b      	movs	r3, #11
 8001dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4619      	mov	r1, r3
 8001de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de8:	f001 ff5c 	bl	8003ca4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_ADC_MspInit+0xd4>)
 8001dee:	4a1a      	ldr	r2, [pc, #104]	; (8001e58 <HAL_ADC_MspInit+0xd8>)
 8001df0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <HAL_ADC_MspInit+0xd4>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_ADC_MspInit+0xd4>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HAL_ADC_MspInit+0xd4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <HAL_ADC_MspInit+0xd4>)
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_ADC_MspInit+0xd4>)
 8001e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e10:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HAL_ADC_MspInit+0xd4>)
 8001e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e18:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_ADC_MspInit+0xd4>)
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <HAL_ADC_MspInit+0xd4>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e26:	480b      	ldr	r0, [pc, #44]	; (8001e54 <HAL_ADC_MspInit+0xd4>)
 8001e28:	f001 fd44 	bl	80038b4 <HAL_DMA_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8001e32:	f7ff ff7b 	bl	8001d2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a06      	ldr	r2, [pc, #24]	; (8001e54 <HAL_ADC_MspInit+0xd4>)
 8001e3a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e3c:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <HAL_ADC_MspInit+0xd4>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e42:	bf00      	nop
 8001e44:	3728      	adds	r7, #40	; 0x28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	50040000 	.word	0x50040000
 8001e50:	40021000 	.word	0x40021000
 8001e54:	20000ac4 	.word	0x20000ac4
 8001e58:	40020008 	.word	0x40020008

08001e5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6c:	d10c      	bne.n	8001e88 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_TIM_Base_MspInit+0x68>)
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <HAL_TIM_Base_MspInit+0x68>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6593      	str	r3, [r2, #88]	; 0x58
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_TIM_Base_MspInit+0x68>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001e86:	e018      	b.n	8001eba <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <HAL_TIM_Base_MspInit+0x6c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d113      	bne.n	8001eba <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <HAL_TIM_Base_MspInit+0x68>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <HAL_TIM_Base_MspInit+0x68>)
 8001e98:	f043 0320 	orr.w	r3, r3, #32
 8001e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_TIM_Base_MspInit+0x68>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2037      	movs	r0, #55	; 0x37
 8001eb0:	f001 fcc9 	bl	8003846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001eb4:	2037      	movs	r0, #55	; 0x37
 8001eb6:	f001 fce2 	bl	800387e <HAL_NVIC_EnableIRQ>
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40001400 	.word	0x40001400

08001ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a20      	ldr	r2, [pc, #128]	; (8001f6c <HAL_UART_MspInit+0xa0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d13a      	bne.n	8001f64 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_UART_MspInit+0xa4>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	4a1f      	ldr	r2, [pc, #124]	; (8001f70 <HAL_UART_MspInit+0xa4>)
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <HAL_UART_MspInit+0xa4>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <HAL_UART_MspInit+0xa4>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <HAL_UART_MspInit+0xa4>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f12:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <HAL_UART_MspInit+0xa4>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001f1e:	2304      	movs	r3, #4
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f2e:	2307      	movs	r3, #7
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4619      	mov	r1, r3
 8001f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f3c:	f001 feb2 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001f40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001f52:	2303      	movs	r3, #3
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f60:	f001 fea0 	bl	8003ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f64:	bf00      	nop
 8001f66:	3728      	adds	r7, #40	; 0x28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40004400 	.word	0x40004400
 8001f70:	40021000 	.word	0x40021000

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <NMI_Handler+0x4>

08001f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <HardFault_Handler+0x4>

08001f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <MemManage_Handler+0x4>

08001f86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <BusFault_Handler+0x4>

08001f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <UsageFault_Handler+0x4>

08001f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc0:	f000 f992 	bl	80022e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <DMA1_Channel1_IRQHandler+0x10>)
 8001fce:	f001 fd89 	bl	8003ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000ac4 	.word	0x20000ac4

08001fdc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <TIM7_IRQHandler+0x10>)
 8001fe2:	f003 faca 	bl	800557a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000bdc 	.word	0x20000bdc

08001ff0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
	return 1;
 8001ff4:	2301      	movs	r3, #1
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_kill>:

int _kill(int pid, int sig)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800200a:	f004 fe61 	bl	8006cd0 <__errno>
 800200e:	4603      	mov	r3, r0
 8002010:	2216      	movs	r2, #22
 8002012:	601a      	str	r2, [r3, #0]
	return -1;
 8002014:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <_exit>:

void _exit (int status)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ffe7 	bl	8002000 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002032:	e7fe      	b.n	8002032 <_exit+0x12>

08002034 <_read>:
}

int _read (int file, char *ptr, int len)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8002040:	2301      	movs	r3, #1
 8002042:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	b29a      	uxth	r2, r3
 8002048:	f04f 33ff 	mov.w	r3, #4294967295
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	4807      	ldr	r0, [pc, #28]	; (800206c <_read+0x38>)
 8002050:	f004 f9f8 	bl	8006444 <HAL_UART_Receive>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
 800205e:	607b      	str	r3, [r7, #4]

	return len;
 8002060:	687b      	ldr	r3, [r7, #4]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000b58 	.word	0x20000b58

08002070 <_write>:

int _write(int file, char *ptr, int len)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	b29a      	uxth	r2, r3
 8002084:	f04f 33ff 	mov.w	r3, #4294967295
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	4809      	ldr	r0, [pc, #36]	; (80020b0 <_write+0x40>)
 800208c:	f004 f946 	bl	800631c <HAL_UART_Transmit>
 8002090:	4603      	mov	r3, r0
 8002092:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d002      	beq.n	80020a0 <_write+0x30>
 800209a:	7dfb      	ldrb	r3, [r7, #23]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d101      	bne.n	80020a4 <_write+0x34>
	{
		Error_Handler();
 80020a0:	f7ff fe44 	bl	8001d2c <Error_Handler>
	}

	return len;
 80020a4:	687b      	ldr	r3, [r7, #4]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000b58 	.word	0x20000b58

080020b4 <_close>:



int _close(int file)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	return -1;
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020dc:	605a      	str	r2, [r3, #4]
	return 0;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_isatty>:

int _isatty(int file)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	return 1;
 80020f4:	2301      	movs	r3, #1
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
	return 0;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <_sbrk+0x5c>)
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <_sbrk+0x60>)
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <_sbrk+0x64>)
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <_sbrk+0x68>)
 800213c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	429a      	cmp	r2, r3
 800214a:	d207      	bcs.n	800215c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800214c:	f004 fdc0 	bl	8006cd0 <__errno>
 8002150:	4603      	mov	r3, r0
 8002152:	220c      	movs	r2, #12
 8002154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
 800215a:	e009      	b.n	8002170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <_sbrk+0x64>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <_sbrk+0x64>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <_sbrk+0x64>)
 800216c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800216e:	68fb      	ldr	r3, [r7, #12]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20010000 	.word	0x20010000
 800217c:	00000400 	.word	0x00000400
 8002180:	20000a0c 	.word	0x20000a0c
 8002184:	20000c40 	.word	0x20000c40

08002188 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800218c:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <SystemInit+0x5c>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002192:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <SystemInit+0x5c>)
 8002194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <SystemInit+0x60>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a11      	ldr	r2, [pc, #68]	; (80021e8 <SystemInit+0x60>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <SystemInit+0x60>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <SystemInit+0x60>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a0d      	ldr	r2, [pc, #52]	; (80021e8 <SystemInit+0x60>)
 80021b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80021b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80021bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <SystemInit+0x60>)
 80021c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <SystemInit+0x60>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <SystemInit+0x60>)
 80021cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <SystemInit+0x60>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000ed00 	.word	0xe000ed00
 80021e8:	40021000 	.word	0x40021000

080021ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002224 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021f0:	f7ff ffca 	bl	8002188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80021f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80021f6:	e003      	b.n	8002200 <LoopCopyDataInit>

080021f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80021fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80021fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80021fe:	3104      	adds	r1, #4

08002200 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002200:	480a      	ldr	r0, [pc, #40]	; (800222c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002204:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002206:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002208:	d3f6      	bcc.n	80021f8 <CopyDataInit>
	ldr	r2, =_sbss
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <LoopForever+0x12>)
	b	LoopFillZerobss
 800220c:	e002      	b.n	8002214 <LoopFillZerobss>

0800220e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800220e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002210:	f842 3b04 	str.w	r3, [r2], #4

08002214 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002214:	4b08      	ldr	r3, [pc, #32]	; (8002238 <LoopForever+0x16>)
	cmp	r2, r3
 8002216:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002218:	d3f9      	bcc.n	800220e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800221a:	f004 fd5f 	bl	8006cdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800221e:	f7fe ffc7 	bl	80011b0 <main>

08002222 <LoopForever>:

LoopForever:
    b LoopForever
 8002222:	e7fe      	b.n	8002222 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002224:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002228:	0800d100 	.word	0x0800d100
	ldr	r0, =_sdata
 800222c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002230:	200009e8 	.word	0x200009e8
	ldr	r2, =_sbss
 8002234:	200009e8 	.word	0x200009e8
	ldr	r3, = _ebss
 8002238:	20000c40 	.word	0x20000c40

0800223c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800223c:	e7fe      	b.n	800223c <ADC1_IRQHandler>

0800223e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002248:	2003      	movs	r0, #3
 800224a:	f001 faf1 	bl	8003830 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800224e:	2000      	movs	r0, #0
 8002250:	f000 f80e 	bl	8002270 <HAL_InitTick>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	71fb      	strb	r3, [r7, #7]
 800225e:	e001      	b.n	8002264 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002260:	f7ff fd6a 	bl	8001d38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002264:	79fb      	ldrb	r3, [r7, #7]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800227c:	4b17      	ldr	r3, [pc, #92]	; (80022dc <HAL_InitTick+0x6c>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d023      	beq.n	80022cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002284:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <HAL_InitTick+0x70>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b14      	ldr	r3, [pc, #80]	; (80022dc <HAL_InitTick+0x6c>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002292:	fbb3 f3f1 	udiv	r3, r3, r1
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	4618      	mov	r0, r3
 800229c:	f001 fafd 	bl	800389a <HAL_SYSTICK_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10f      	bne.n	80022c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b0f      	cmp	r3, #15
 80022aa:	d809      	bhi.n	80022c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ac:	2200      	movs	r2, #0
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f001 fac7 	bl	8003846 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <HAL_InitTick+0x74>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e007      	b.n	80022d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	e004      	b.n	80022d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
 80022ca:	e001      	b.n	80022d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000038 	.word	0x20000038
 80022e0:	20000030 	.word	0x20000030
 80022e4:	20000034 	.word	0x20000034

080022e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_IncTick+0x20>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_IncTick+0x24>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <HAL_IncTick+0x24>)
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000038 	.word	0x20000038
 800230c:	20000c2c 	.word	0x20000c2c

08002310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_GetTick+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000c2c 	.word	0x20000c2c

08002328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff ffee 	bl	8002310 <HAL_GetTick>
 8002334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d005      	beq.n	800234e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_Delay+0x44>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800234e:	bf00      	nop
 8002350:	f7ff ffde 	bl	8002310 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	429a      	cmp	r2, r3
 800235e:	d8f7      	bhi.n	8002350 <HAL_Delay+0x28>
  {
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000038 	.word	0x20000038

08002370 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	609a      	str	r2, [r3, #8]
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	609a      	str	r2, [r3, #8]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023d8:	b480      	push	{r7}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	3360      	adds	r3, #96	; 0x60
 80023ea:	461a      	mov	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <LL_ADC_SetOffset+0x44>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	4313      	orrs	r3, r2
 8002408:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002410:	bf00      	nop
 8002412:	371c      	adds	r7, #28
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	03fff000 	.word	0x03fff000

08002420 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3360      	adds	r3, #96	; 0x60
 800242e:	461a      	mov	r2, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3360      	adds	r3, #96	; 0x60
 800245c:	461a      	mov	r2, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	431a      	orrs	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002476:	bf00      	nop
 8002478:	371c      	adds	r7, #28
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3330      	adds	r3, #48	; 0x30
 80024b8:	461a      	mov	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	4413      	add	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	211f      	movs	r1, #31
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	401a      	ands	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	0e9b      	lsrs	r3, r3, #26
 80024e0:	f003 011f 	and.w	r1, r3, #31
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	431a      	orrs	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024f4:	bf00      	nop
 80024f6:	371c      	adds	r7, #28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	3314      	adds	r3, #20
 8002510:	461a      	mov	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	0e5b      	lsrs	r3, r3, #25
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	4413      	add	r3, r2
 800251e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	0d1b      	lsrs	r3, r3, #20
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	2107      	movs	r1, #7
 800252e:	fa01 f303 	lsl.w	r3, r1, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	401a      	ands	r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	0d1b      	lsrs	r3, r3, #20
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	fa01 f303 	lsl.w	r3, r1, r3
 8002544:	431a      	orrs	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800254a:	bf00      	nop
 800254c:	371c      	adds	r7, #28
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002570:	43db      	mvns	r3, r3
 8002572:	401a      	ands	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 0318 	and.w	r3, r3, #24
 800257a:	4908      	ldr	r1, [pc, #32]	; (800259c <LL_ADC_SetChannelSingleDiff+0x44>)
 800257c:	40d9      	lsrs	r1, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	400b      	ands	r3, r1
 8002582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002586:	431a      	orrs	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	0007ffff 	.word	0x0007ffff

080025a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80025b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6093      	str	r3, [r2, #8]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025d8:	d101      	bne.n	80025de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80025fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002600:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002628:	d101      	bne.n	800262e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800264c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002650:	f043 0201 	orr.w	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002674:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002678:	f043 0202 	orr.w	r2, r3, #2
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <LL_ADC_IsEnabled+0x18>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <LL_ADC_IsEnabled+0x1a>
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d101      	bne.n	80026ca <LL_ADC_IsDisableOngoing+0x18>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <LL_ADC_IsDisableOngoing+0x1a>
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026ec:	f043 0204 	orr.w	r2, r3, #4
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b04      	cmp	r3, #4
 8002712:	d101      	bne.n	8002718 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b08      	cmp	r3, #8
 8002738:	d101      	bne.n	800273e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e12c      	b.n	80029c0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff fb03 	bl	8001d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ff19 	bl	80025c4 <LL_ADC_IsDeepPowerDownEnabled>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d004      	beq.n	80027a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff feff 	bl	80025a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ff34 	bl	8002614 <LL_ADC_IsInternalRegulatorEnabled>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d115      	bne.n	80027de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ff18 	bl	80025ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027bc:	4b82      	ldr	r3, [pc, #520]	; (80029c8 <HAL_ADC_Init+0x27c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	099b      	lsrs	r3, r3, #6
 80027c2:	4a82      	ldr	r2, [pc, #520]	; (80029cc <HAL_ADC_Init+0x280>)
 80027c4:	fba2 2303 	umull	r2, r3, r2, r3
 80027c8:	099b      	lsrs	r3, r3, #6
 80027ca:	3301      	adds	r3, #1
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027d0:	e002      	b.n	80027d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f9      	bne.n	80027d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff ff16 	bl	8002614 <LL_ADC_IsInternalRegulatorEnabled>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10d      	bne.n	800280a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	f043 0210 	orr.w	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	f043 0201 	orr.w	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ff76 	bl	8002700 <LL_ADC_REG_IsConversionOngoing>
 8002814:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b00      	cmp	r3, #0
 8002820:	f040 80c5 	bne.w	80029ae <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 80c1 	bne.w	80029ae <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002834:	f043 0202 	orr.w	r2, r3, #2
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff23 	bl	800268c <LL_ADC_IsEnabled>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10b      	bne.n	8002864 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800284c:	4860      	ldr	r0, [pc, #384]	; (80029d0 <HAL_ADC_Init+0x284>)
 800284e:	f7ff ff1d 	bl	800268c <LL_ADC_IsEnabled>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4619      	mov	r1, r3
 800285e:	485d      	ldr	r0, [pc, #372]	; (80029d4 <HAL_ADC_Init+0x288>)
 8002860:	f7ff fd86 	bl	8002370 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	7e5b      	ldrb	r3, [r3, #25]
 8002868:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800286e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002874:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800287a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002882:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d106      	bne.n	80028a0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	3b01      	subs	r3, #1
 8002898:	045b      	lsls	r3, r3, #17
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d009      	beq.n	80028bc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	4b45      	ldr	r3, [pc, #276]	; (80029d8 <HAL_ADC_Init+0x28c>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	69b9      	ldr	r1, [r7, #24]
 80028cc:	430b      	orrs	r3, r1
 80028ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff13 	bl	8002700 <LL_ADC_REG_IsConversionOngoing>
 80028da:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff20 	bl	8002726 <LL_ADC_INJ_IsConversionOngoing>
 80028e6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d13d      	bne.n	800296a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d13a      	bne.n	800296a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028f8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002900:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002910:	f023 0302 	bic.w	r3, r3, #2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	69b9      	ldr	r1, [r7, #24]
 800291a:	430b      	orrs	r3, r1
 800291c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002924:	2b01      	cmp	r3, #1
 8002926:	d118      	bne.n	800295a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002932:	f023 0304 	bic.w	r3, r3, #4
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800293e:	4311      	orrs	r1, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002944:	4311      	orrs	r1, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800294a:	430a      	orrs	r2, r1
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	611a      	str	r2, [r3, #16]
 8002958:	e007      	b.n	800296a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0201 	bic.w	r2, r2, #1
 8002968:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d10c      	bne.n	800298c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	f023 010f 	bic.w	r1, r3, #15
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	1e5a      	subs	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
 800298a:	e007      	b.n	800299c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 020f 	bic.w	r2, r2, #15
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f023 0303 	bic.w	r3, r3, #3
 80029a4:	f043 0201 	orr.w	r2, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	655a      	str	r2, [r3, #84]	; 0x54
 80029ac:	e007      	b.n	80029be <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	f043 0210 	orr.w	r2, r3, #16
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029be:	7ffb      	ldrb	r3, [r7, #31]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000030 	.word	0x20000030
 80029cc:	053e2d63 	.word	0x053e2d63
 80029d0:	50040000 	.word	0x50040000
 80029d4:	50040300 	.word	0x50040300
 80029d8:	fff0c007 	.word	0xfff0c007

080029dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fe87 	bl	8002700 <LL_ADC_REG_IsConversionOngoing>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d167      	bne.n	8002ac8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_ADC_Start_DMA+0x2a>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e063      	b.n	8002ace <HAL_ADC_Start_DMA+0xf2>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 fc5c 	bl	80032cc <ADC_Enable>
 8002a14:	4603      	mov	r3, r0
 8002a16:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a18:	7dfb      	ldrb	r3, [r7, #23]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d14f      	bne.n	8002abe <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d006      	beq.n	8002a4c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a42:	f023 0206 	bic.w	r2, r3, #6
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	659a      	str	r2, [r3, #88]	; 0x58
 8002a4a:	e002      	b.n	8002a52 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a56:	4a20      	ldr	r2, [pc, #128]	; (8002ad8 <HAL_ADC_Start_DMA+0xfc>)
 8002a58:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5e:	4a1f      	ldr	r2, [pc, #124]	; (8002adc <HAL_ADC_Start_DMA+0x100>)
 8002a60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a66:	4a1e      	ldr	r2, [pc, #120]	; (8002ae0 <HAL_ADC_Start_DMA+0x104>)
 8002a68:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	221c      	movs	r2, #28
 8002a70:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0210 	orr.w	r2, r2, #16
 8002a88:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 0201 	orr.w	r2, r2, #1
 8002a98:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3340      	adds	r3, #64	; 0x40
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f000 ffbb 	bl	8003a24 <HAL_DMA_Start_IT>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fe0e 	bl	80026d8 <LL_ADC_REG_StartConversion>
 8002abc:	e006      	b.n	8002acc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002ac6:	e001      	b.n	8002acc <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	0800344f 	.word	0x0800344f
 8002adc:	08003527 	.word	0x08003527
 8002ae0:	08003543 	.word	0x08003543

08002ae4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b0b6      	sub	sp, #216	; 0xd8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x22>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e3b9      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x796>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff fde0 	bl	8002700 <LL_ADC_REG_IsConversionOngoing>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 839e 	bne.w	8003284 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b05      	cmp	r3, #5
 8002b4e:	d824      	bhi.n	8002b9a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	3b02      	subs	r3, #2
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d81b      	bhi.n	8002b92 <HAL_ADC_ConfigChannel+0x86>
 8002b5a:	a201      	add	r2, pc, #4	; (adr r2, 8002b60 <HAL_ADC_ConfigChannel+0x54>)
 8002b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b60:	08002b71 	.word	0x08002b71
 8002b64:	08002b79 	.word	0x08002b79
 8002b68:	08002b81 	.word	0x08002b81
 8002b6c:	08002b89 	.word	0x08002b89
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	220c      	movs	r2, #12
 8002b74:	605a      	str	r2, [r3, #4]
          break;
 8002b76:	e011      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2212      	movs	r2, #18
 8002b7c:	605a      	str	r2, [r3, #4]
          break;
 8002b7e:	e00d      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2218      	movs	r2, #24
 8002b84:	605a      	str	r2, [r3, #4]
          break;
 8002b86:	e009      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b8e:	605a      	str	r2, [r3, #4]
          break;
 8002b90:	e004      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2206      	movs	r2, #6
 8002b96:	605a      	str	r2, [r3, #4]
          break;
 8002b98:	e000      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002b9a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f7ff fc7d 	bl	80024a8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff fda4 	bl	8002700 <LL_ADC_REG_IsConversionOngoing>
 8002bb8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fdb0 	bl	8002726 <LL_ADC_INJ_IsConversionOngoing>
 8002bc6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 81a6 	bne.w	8002f20 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f040 81a1 	bne.w	8002f20 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6819      	ldr	r1, [r3, #0]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f7ff fc88 	bl	8002500 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	08db      	lsrs	r3, r3, #3
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d00a      	beq.n	8002c28 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6919      	ldr	r1, [r3, #16]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c22:	f7ff fbd9 	bl	80023d8 <LL_ADC_SetOffset>
 8002c26:	e17b      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fbf6 	bl	8002420 <LL_ADC_GetOffsetChannel>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10a      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x148>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2100      	movs	r1, #0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fbeb 	bl	8002420 <LL_ADC_GetOffsetChannel>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	0e9b      	lsrs	r3, r3, #26
 8002c4e:	f003 021f 	and.w	r2, r3, #31
 8002c52:	e01e      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x186>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fbe0 	bl	8002420 <LL_ADC_GetOffsetChannel>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002c82:	2320      	movs	r3, #32
 8002c84:	e004      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002c86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d105      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x19e>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	0e9b      	lsrs	r3, r3, #26
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	e018      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x1d0>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002cc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002cce:	2320      	movs	r3, #32
 8002cd0:	e004      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002cd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d106      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fbaf 	bl	800244c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fb93 	bl	8002420 <LL_ADC_GetOffsetChannel>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10a      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x20e>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fb88 	bl	8002420 <LL_ADC_GetOffsetChannel>
 8002d10:	4603      	mov	r3, r0
 8002d12:	0e9b      	lsrs	r3, r3, #26
 8002d14:	f003 021f 	and.w	r2, r3, #31
 8002d18:	e01e      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x24c>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2101      	movs	r1, #1
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fb7d 	bl	8002420 <LL_ADC_GetOffsetChannel>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002d38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002d40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002d48:	2320      	movs	r3, #32
 8002d4a:	e004      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002d4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d50:	fab3 f383 	clz	r3, r3
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x264>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	0e9b      	lsrs	r3, r3, #26
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	e018      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x296>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002d84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002d94:	2320      	movs	r3, #32
 8002d96:	e004      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002d98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d9c:	fab3 f383 	clz	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d106      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2200      	movs	r2, #0
 8002dac:	2101      	movs	r1, #1
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fb4c 	bl	800244c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2102      	movs	r1, #2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fb30 	bl	8002420 <LL_ADC_GetOffsetChannel>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10a      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x2d4>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2102      	movs	r1, #2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fb25 	bl	8002420 <LL_ADC_GetOffsetChannel>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	0e9b      	lsrs	r3, r3, #26
 8002dda:	f003 021f 	and.w	r2, r3, #31
 8002dde:	e01e      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x312>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2102      	movs	r1, #2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fb1a 	bl	8002420 <LL_ADC_GetOffsetChannel>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002e06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002e0e:	2320      	movs	r3, #32
 8002e10:	e004      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002e12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d105      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x32a>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	0e9b      	lsrs	r3, r3, #26
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	e016      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x358>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002e48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002e4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002e56:	2320      	movs	r3, #32
 8002e58:	e004      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002e5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d106      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2102      	movs	r1, #2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff faeb 	bl	800244c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2103      	movs	r1, #3
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff facf 	bl	8002420 <LL_ADC_GetOffsetChannel>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x396>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2103      	movs	r1, #3
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fac4 	bl	8002420 <LL_ADC_GetOffsetChannel>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	0e9b      	lsrs	r3, r3, #26
 8002e9c:	f003 021f 	and.w	r2, r3, #31
 8002ea0:	e017      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x3c6>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2103      	movs	r1, #3
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fab9 	bl	8002420 <LL_ADC_GetOffsetChannel>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ebc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002ec4:	2320      	movs	r3, #32
 8002ec6:	e003      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d105      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x3de>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	0e9b      	lsrs	r3, r3, #26
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	e011      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x402>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002efa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002f02:	2320      	movs	r3, #32
 8002f04:	e003      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d106      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2200      	movs	r2, #0
 8002f18:	2103      	movs	r1, #3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fa96 	bl	800244c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fbb1 	bl	800268c <LL_ADC_IsEnabled>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f040 813f 	bne.w	80031b0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6819      	ldr	r1, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f7ff fb0a 	bl	8002558 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4a8e      	ldr	r2, [pc, #568]	; (8003184 <HAL_ADC_ConfigChannel+0x678>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	f040 8130 	bne.w	80031b0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10b      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x46c>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	0e9b      	lsrs	r3, r3, #26
 8002f66:	3301      	adds	r3, #1
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2b09      	cmp	r3, #9
 8002f6e:	bf94      	ite	ls
 8002f70:	2301      	movls	r3, #1
 8002f72:	2300      	movhi	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	e019      	b.n	8002fac <HAL_ADC_ConfigChannel+0x4a0>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f88:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002f90:	2320      	movs	r3, #32
 8002f92:	e003      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002f94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f003 031f 	and.w	r3, r3, #31
 8002fa2:	2b09      	cmp	r3, #9
 8002fa4:	bf94      	ite	ls
 8002fa6:	2301      	movls	r3, #1
 8002fa8:	2300      	movhi	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d079      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d107      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x4c0>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	0e9b      	lsrs	r3, r3, #26
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	069b      	lsls	r3, r3, #26
 8002fc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fca:	e015      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x4ec>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fdc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002fe4:	2320      	movs	r3, #32
 8002fe6:	e003      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	069b      	lsls	r3, r3, #26
 8002ff4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003000:	2b00      	cmp	r3, #0
 8003002:	d109      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x50c>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	0e9b      	lsrs	r3, r3, #26
 800300a:	3301      	adds	r3, #1
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	2101      	movs	r1, #1
 8003012:	fa01 f303 	lsl.w	r3, r1, r3
 8003016:	e017      	b.n	8003048 <HAL_ADC_ConfigChannel+0x53c>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003020:	fa93 f3a3 	rbit	r3, r3
 8003024:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003028:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800302a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003030:	2320      	movs	r3, #32
 8003032:	e003      	b.n	800303c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003036:	fab3 f383 	clz	r3, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	3301      	adds	r3, #1
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	2101      	movs	r1, #1
 8003044:	fa01 f303 	lsl.w	r3, r1, r3
 8003048:	ea42 0103 	orr.w	r1, r2, r3
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <HAL_ADC_ConfigChannel+0x562>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	3301      	adds	r3, #1
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	051b      	lsls	r3, r3, #20
 800306c:	e018      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x594>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800307c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003086:	2320      	movs	r3, #32
 8003088:	e003      	b.n	8003092 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800308a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	3301      	adds	r3, #1
 8003094:	f003 021f 	and.w	r2, r3, #31
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030a0:	430b      	orrs	r3, r1
 80030a2:	e080      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d107      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x5b4>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	0e9b      	lsrs	r3, r3, #26
 80030b6:	3301      	adds	r3, #1
 80030b8:	069b      	lsls	r3, r3, #26
 80030ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030be:	e015      	b.n	80030ec <HAL_ADC_ConfigChannel+0x5e0>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80030d8:	2320      	movs	r3, #32
 80030da:	e003      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	3301      	adds	r3, #1
 80030e6:	069b      	lsls	r3, r3, #26
 80030e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d109      	bne.n	800310c <HAL_ADC_ConfigChannel+0x600>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	0e9b      	lsrs	r3, r3, #26
 80030fe:	3301      	adds	r3, #1
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	2101      	movs	r1, #1
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	e017      	b.n	800313c <HAL_ADC_ConfigChannel+0x630>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	fa93 f3a3 	rbit	r3, r3
 8003118:	61fb      	str	r3, [r7, #28]
  return result;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003124:	2320      	movs	r3, #32
 8003126:	e003      	b.n	8003130 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	fab3 f383 	clz	r3, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	3301      	adds	r3, #1
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	2101      	movs	r1, #1
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	ea42 0103 	orr.w	r1, r2, r3
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10d      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x65c>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	0e9b      	lsrs	r3, r3, #26
 8003152:	3301      	adds	r3, #1
 8003154:	f003 021f 	and.w	r2, r3, #31
 8003158:	4613      	mov	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4413      	add	r3, r2
 800315e:	3b1e      	subs	r3, #30
 8003160:	051b      	lsls	r3, r3, #20
 8003162:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003166:	e01d      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x698>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	613b      	str	r3, [r7, #16]
  return result;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d103      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003180:	2320      	movs	r3, #32
 8003182:	e005      	b.n	8003190 <HAL_ADC_ConfigChannel+0x684>
 8003184:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	3301      	adds	r3, #1
 8003192:	f003 021f 	and.w	r2, r3, #31
 8003196:	4613      	mov	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4413      	add	r3, r2
 800319c:	3b1e      	subs	r3, #30
 800319e:	051b      	lsls	r3, r3, #20
 80031a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031a4:	430b      	orrs	r3, r1
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	6892      	ldr	r2, [r2, #8]
 80031aa:	4619      	mov	r1, r3
 80031ac:	f7ff f9a8 	bl	8002500 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b3d      	ldr	r3, [pc, #244]	; (80032ac <HAL_ADC_ConfigChannel+0x7a0>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d06c      	beq.n	8003296 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031bc:	483c      	ldr	r0, [pc, #240]	; (80032b0 <HAL_ADC_ConfigChannel+0x7a4>)
 80031be:	f7ff f8fd 	bl	80023bc <LL_ADC_GetCommonPathInternalCh>
 80031c2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a3a      	ldr	r2, [pc, #232]	; (80032b4 <HAL_ADC_ConfigChannel+0x7a8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d127      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d121      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a35      	ldr	r2, [pc, #212]	; (80032b8 <HAL_ADC_ConfigChannel+0x7ac>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d157      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031ee:	4619      	mov	r1, r3
 80031f0:	482f      	ldr	r0, [pc, #188]	; (80032b0 <HAL_ADC_ConfigChannel+0x7a4>)
 80031f2:	f7ff f8d0 	bl	8002396 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031f6:	4b31      	ldr	r3, [pc, #196]	; (80032bc <HAL_ADC_ConfigChannel+0x7b0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	099b      	lsrs	r3, r3, #6
 80031fc:	4a30      	ldr	r2, [pc, #192]	; (80032c0 <HAL_ADC_ConfigChannel+0x7b4>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	099b      	lsrs	r3, r3, #6
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	4613      	mov	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003210:	e002      	b.n	8003218 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3b01      	subs	r3, #1
 8003216:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f9      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800321e:	e03a      	b.n	8003296 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a27      	ldr	r2, [pc, #156]	; (80032c4 <HAL_ADC_ConfigChannel+0x7b8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d113      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x746>
 800322a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800322e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10d      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1f      	ldr	r2, [pc, #124]	; (80032b8 <HAL_ADC_ConfigChannel+0x7ac>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d12a      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003244:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003248:	4619      	mov	r1, r3
 800324a:	4819      	ldr	r0, [pc, #100]	; (80032b0 <HAL_ADC_ConfigChannel+0x7a4>)
 800324c:	f7ff f8a3 	bl	8002396 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003250:	e021      	b.n	8003296 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1c      	ldr	r2, [pc, #112]	; (80032c8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d11c      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800325c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d116      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a12      	ldr	r2, [pc, #72]	; (80032b8 <HAL_ADC_ConfigChannel+0x7ac>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d111      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003276:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800327a:	4619      	mov	r1, r3
 800327c:	480c      	ldr	r0, [pc, #48]	; (80032b0 <HAL_ADC_ConfigChannel+0x7a4>)
 800327e:	f7ff f88a 	bl	8002396 <LL_ADC_SetCommonPathInternalCh>
 8003282:	e008      	b.n	8003296 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	f043 0220 	orr.w	r2, r3, #32
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800329e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	37d8      	adds	r7, #216	; 0xd8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	80080000 	.word	0x80080000
 80032b0:	50040300 	.word	0x50040300
 80032b4:	c7520000 	.word	0xc7520000
 80032b8:	50040000 	.word	0x50040000
 80032bc:	20000030 	.word	0x20000030
 80032c0:	053e2d63 	.word	0x053e2d63
 80032c4:	cb840000 	.word	0xcb840000
 80032c8:	80000001 	.word	0x80000001

080032cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff f9d7 	bl	800268c <LL_ADC_IsEnabled>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d14d      	bne.n	8003380 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	4b28      	ldr	r3, [pc, #160]	; (800338c <ADC_Enable+0xc0>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00d      	beq.n	800330e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f6:	f043 0210 	orr.w	r2, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	f043 0201 	orr.w	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e039      	b.n	8003382 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff f992 	bl	800263c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003318:	f7fe fffa 	bl	8002310 <HAL_GetTick>
 800331c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800331e:	e028      	b.n	8003372 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff f9b1 	bl	800268c <LL_ADC_IsEnabled>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d104      	bne.n	800333a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff f981 	bl	800263c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800333a:	f7fe ffe9 	bl	8002310 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d914      	bls.n	8003372 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b01      	cmp	r3, #1
 8003354:	d00d      	beq.n	8003372 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335a:	f043 0210 	orr.w	r2, r3, #16
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	f043 0201 	orr.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e007      	b.n	8003382 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b01      	cmp	r3, #1
 800337e:	d1cf      	bne.n	8003320 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	8000003f 	.word	0x8000003f

08003390 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff f988 	bl	80026b2 <LL_ADC_IsDisableOngoing>
 80033a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff f96f 	bl	800268c <LL_ADC_IsEnabled>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d047      	beq.n	8003444 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d144      	bne.n	8003444 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 030d 	and.w	r3, r3, #13
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d10c      	bne.n	80033e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff f949 	bl	8002664 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2203      	movs	r2, #3
 80033d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033da:	f7fe ff99 	bl	8002310 <HAL_GetTick>
 80033de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033e0:	e029      	b.n	8003436 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	f043 0210 	orr.w	r2, r3, #16
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f2:	f043 0201 	orr.w	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e023      	b.n	8003446 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033fe:	f7fe ff87 	bl	8002310 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d914      	bls.n	8003436 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00d      	beq.n	8003436 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341e:	f043 0210 	orr.w	r2, r3, #16
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e007      	b.n	8003446 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1dc      	bne.n	80033fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003460:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003464:	2b00      	cmp	r3, #0
 8003466:	d14b      	bne.n	8003500 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d021      	beq.n	80034c6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe fffb 	bl	8002482 <LL_ADC_REG_IsTriggerSourceSWStart>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d032      	beq.n	80034f8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d12b      	bne.n	80034f8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d11f      	bne.n	80034f8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034bc:	f043 0201 	orr.w	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54
 80034c4:	e018      	b.n	80034f8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d111      	bne.n	80034f8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	f043 0201 	orr.w	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f7fe fa9f 	bl	8001a3c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034fe:	e00e      	b.n	800351e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f7ff faf3 	bl	8002af8 <HAL_ADC_ErrorCallback>
}
 8003512:	e004      	b.n	800351e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f7ff fad5 	bl	8002ae4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003560:	f043 0204 	orr.w	r2, r3, #4
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f7ff fac5 	bl	8002af8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <LL_ADC_StartCalibration>:
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003588:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003592:	4313      	orrs	r3, r2
 8003594:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	609a      	str	r2, [r3, #8]
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <LL_ADC_IsCalibrationOnGoing>:
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035bc:	d101      	bne.n	80035c2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80035da:	2300      	movs	r3, #0
 80035dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_ADCEx_Calibration_Start+0x1c>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e04d      	b.n	8003688 <HAL_ADCEx_Calibration_Start+0xb8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff fecb 	bl	8003390 <ADC_Disable>
 80035fa:	4603      	mov	r3, r0
 80035fc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d136      	bne.n	8003672 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003608:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800360c:	f023 0302 	bic.w	r3, r3, #2
 8003610:	f043 0202 	orr.w	r2, r3, #2
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6839      	ldr	r1, [r7, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff ffa9 	bl	8003576 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003624:	e014      	b.n	8003650 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	3301      	adds	r3, #1
 800362a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003632:	d30d      	bcc.n	8003650 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	f023 0312 	bic.w	r3, r3, #18
 800363c:	f043 0210 	orr.w	r2, r3, #16
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e01b      	b.n	8003688 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ffa7 	bl	80035a8 <LL_ADC_IsCalibrationOnGoing>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e2      	bne.n	8003626 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	f023 0303 	bic.w	r3, r3, #3
 8003668:	f043 0201 	orr.w	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	655a      	str	r2, [r3, #84]	; 0x54
 8003670:	e005      	b.n	800367e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003676:	f043 0210 	orr.w	r2, r3, #16
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003686:	7bfb      	ldrb	r3, [r7, #15]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <__NVIC_SetPriorityGrouping+0x44>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036ac:	4013      	ands	r3, r2
 80036ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036c2:	4a04      	ldr	r2, [pc, #16]	; (80036d4 <__NVIC_SetPriorityGrouping+0x44>)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	60d3      	str	r3, [r2, #12]
}
 80036c8:	bf00      	nop
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036dc:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <__NVIC_GetPriorityGrouping+0x18>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	0a1b      	lsrs	r3, r3, #8
 80036e2:	f003 0307 	and.w	r3, r3, #7
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	e000ed00 	.word	0xe000ed00

080036f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	2b00      	cmp	r3, #0
 8003704:	db0b      	blt.n	800371e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	f003 021f 	and.w	r2, r3, #31
 800370c:	4907      	ldr	r1, [pc, #28]	; (800372c <__NVIC_EnableIRQ+0x38>)
 800370e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2001      	movs	r0, #1
 8003716:	fa00 f202 	lsl.w	r2, r0, r2
 800371a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	e000e100 	.word	0xe000e100

08003730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	6039      	str	r1, [r7, #0]
 800373a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800373c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003740:	2b00      	cmp	r3, #0
 8003742:	db0a      	blt.n	800375a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	b2da      	uxtb	r2, r3
 8003748:	490c      	ldr	r1, [pc, #48]	; (800377c <__NVIC_SetPriority+0x4c>)
 800374a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374e:	0112      	lsls	r2, r2, #4
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	440b      	add	r3, r1
 8003754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003758:	e00a      	b.n	8003770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	4908      	ldr	r1, [pc, #32]	; (8003780 <__NVIC_SetPriority+0x50>)
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	3b04      	subs	r3, #4
 8003768:	0112      	lsls	r2, r2, #4
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	440b      	add	r3, r1
 800376e:	761a      	strb	r2, [r3, #24]
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	e000e100 	.word	0xe000e100
 8003780:	e000ed00 	.word	0xe000ed00

08003784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003784:	b480      	push	{r7}
 8003786:	b089      	sub	sp, #36	; 0x24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f1c3 0307 	rsb	r3, r3, #7
 800379e:	2b04      	cmp	r3, #4
 80037a0:	bf28      	it	cs
 80037a2:	2304      	movcs	r3, #4
 80037a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3304      	adds	r3, #4
 80037aa:	2b06      	cmp	r3, #6
 80037ac:	d902      	bls.n	80037b4 <NVIC_EncodePriority+0x30>
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3b03      	subs	r3, #3
 80037b2:	e000      	b.n	80037b6 <NVIC_EncodePriority+0x32>
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b8:	f04f 32ff 	mov.w	r2, #4294967295
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43da      	mvns	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	401a      	ands	r2, r3
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037cc:	f04f 31ff 	mov.w	r1, #4294967295
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	fa01 f303 	lsl.w	r3, r1, r3
 80037d6:	43d9      	mvns	r1, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037dc:	4313      	orrs	r3, r2
         );
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3724      	adds	r7, #36	; 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037fc:	d301      	bcc.n	8003802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037fe:	2301      	movs	r3, #1
 8003800:	e00f      	b.n	8003822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003802:	4a0a      	ldr	r2, [pc, #40]	; (800382c <SysTick_Config+0x40>)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3b01      	subs	r3, #1
 8003808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800380a:	210f      	movs	r1, #15
 800380c:	f04f 30ff 	mov.w	r0, #4294967295
 8003810:	f7ff ff8e 	bl	8003730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <SysTick_Config+0x40>)
 8003816:	2200      	movs	r2, #0
 8003818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800381a:	4b04      	ldr	r3, [pc, #16]	; (800382c <SysTick_Config+0x40>)
 800381c:	2207      	movs	r2, #7
 800381e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	e000e010 	.word	0xe000e010

08003830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff ff29 	bl	8003690 <__NVIC_SetPriorityGrouping>
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b086      	sub	sp, #24
 800384a:	af00      	add	r7, sp, #0
 800384c:	4603      	mov	r3, r0
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
 8003852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003858:	f7ff ff3e 	bl	80036d8 <__NVIC_GetPriorityGrouping>
 800385c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	6978      	ldr	r0, [r7, #20]
 8003864:	f7ff ff8e 	bl	8003784 <NVIC_EncodePriority>
 8003868:	4602      	mov	r2, r0
 800386a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386e:	4611      	mov	r1, r2
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff ff5d 	bl	8003730 <__NVIC_SetPriority>
}
 8003876:	bf00      	nop
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	4603      	mov	r3, r0
 8003886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff31 	bl	80036f4 <__NVIC_EnableIRQ>
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff ffa2 	bl	80037ec <SysTick_Config>
 80038a8:	4603      	mov	r3, r0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e098      	b.n	80039f8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	4b4d      	ldr	r3, [pc, #308]	; (8003a04 <HAL_DMA_Init+0x150>)
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d80f      	bhi.n	80038f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	4b4b      	ldr	r3, [pc, #300]	; (8003a08 <HAL_DMA_Init+0x154>)
 80038da:	4413      	add	r3, r2
 80038dc:	4a4b      	ldr	r2, [pc, #300]	; (8003a0c <HAL_DMA_Init+0x158>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	091b      	lsrs	r3, r3, #4
 80038e4:	009a      	lsls	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a48      	ldr	r2, [pc, #288]	; (8003a10 <HAL_DMA_Init+0x15c>)
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40
 80038f0:	e00e      	b.n	8003910 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	4b46      	ldr	r3, [pc, #280]	; (8003a14 <HAL_DMA_Init+0x160>)
 80038fa:	4413      	add	r3, r2
 80038fc:	4a43      	ldr	r2, [pc, #268]	; (8003a0c <HAL_DMA_Init+0x158>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	009a      	lsls	r2, r3, #2
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a42      	ldr	r2, [pc, #264]	; (8003a18 <HAL_DMA_Init+0x164>)
 800390e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003934:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003940:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800394c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800396a:	d039      	beq.n	80039e0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	4a27      	ldr	r2, [pc, #156]	; (8003a10 <HAL_DMA_Init+0x15c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d11a      	bne.n	80039ac <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003976:	4b29      	ldr	r3, [pc, #164]	; (8003a1c <HAL_DMA_Init+0x168>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	f003 031c 	and.w	r3, r3, #28
 8003982:	210f      	movs	r1, #15
 8003984:	fa01 f303 	lsl.w	r3, r1, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	4924      	ldr	r1, [pc, #144]	; (8003a1c <HAL_DMA_Init+0x168>)
 800398c:	4013      	ands	r3, r2
 800398e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003990:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <HAL_DMA_Init+0x168>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6859      	ldr	r1, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399c:	f003 031c 	and.w	r3, r3, #28
 80039a0:	fa01 f303 	lsl.w	r3, r1, r3
 80039a4:	491d      	ldr	r1, [pc, #116]	; (8003a1c <HAL_DMA_Init+0x168>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
 80039aa:	e019      	b.n	80039e0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80039ac:	4b1c      	ldr	r3, [pc, #112]	; (8003a20 <HAL_DMA_Init+0x16c>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	f003 031c 	and.w	r3, r3, #28
 80039b8:	210f      	movs	r1, #15
 80039ba:	fa01 f303 	lsl.w	r3, r1, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	4917      	ldr	r1, [pc, #92]	; (8003a20 <HAL_DMA_Init+0x16c>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80039c6:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <HAL_DMA_Init+0x16c>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6859      	ldr	r1, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	f003 031c 	and.w	r3, r3, #28
 80039d6:	fa01 f303 	lsl.w	r3, r1, r3
 80039da:	4911      	ldr	r1, [pc, #68]	; (8003a20 <HAL_DMA_Init+0x16c>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	40020407 	.word	0x40020407
 8003a08:	bffdfff8 	.word	0xbffdfff8
 8003a0c:	cccccccd 	.word	0xcccccccd
 8003a10:	40020000 	.word	0x40020000
 8003a14:	bffdfbf8 	.word	0xbffdfbf8
 8003a18:	40020400 	.word	0x40020400
 8003a1c:	400200a8 	.word	0x400200a8
 8003a20:	400204a8 	.word	0x400204a8

08003a24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_DMA_Start_IT+0x20>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e04b      	b.n	8003adc <HAL_DMA_Start_IT+0xb8>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d13a      	bne.n	8003ace <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0201 	bic.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f8e0 	bl	8003c42 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 020e 	orr.w	r2, r2, #14
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	e00f      	b.n	8003abc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0204 	bic.w	r2, r2, #4
 8003aaa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 020a 	orr.w	r2, r2, #10
 8003aba:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	e005      	b.n	8003ada <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b00:	f003 031c 	and.w	r3, r3, #28
 8003b04:	2204      	movs	r2, #4
 8003b06:	409a      	lsls	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d026      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x7a>
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d021      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d107      	bne.n	8003b38 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0204 	bic.w	r2, r2, #4
 8003b36:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3c:	f003 021c 	and.w	r2, r3, #28
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	2104      	movs	r1, #4
 8003b46:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d071      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003b5c:	e06c      	b.n	8003c38 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	f003 031c 	and.w	r3, r3, #28
 8003b66:	2202      	movs	r2, #2
 8003b68:	409a      	lsls	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d02e      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0xec>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d029      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10b      	bne.n	8003ba2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 020a 	bic.w	r2, r2, #10
 8003b98:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	f003 021c 	and.w	r2, r3, #28
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	2102      	movs	r1, #2
 8003bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d038      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003bce:	e033      	b.n	8003c38 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	f003 031c 	and.w	r3, r3, #28
 8003bd8:	2208      	movs	r2, #8
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d02a      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x156>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d025      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 020e 	bic.w	r2, r2, #14
 8003bfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	f003 021c 	and.w	r2, r3, #28
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c10:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d004      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c38:	bf00      	nop
 8003c3a:	bf00      	nop
}
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
 8003c4e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c54:	f003 021c 	and.w	r2, r3, #28
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c62:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b10      	cmp	r3, #16
 8003c72:	d108      	bne.n	8003c86 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c84:	e007      	b.n	8003c96 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	60da      	str	r2, [r3, #12]
}
 8003c96:	bf00      	nop
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cb2:	e148      	b.n	8003f46 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 813a 	beq.w	8003f40 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d00b      	beq.n	8003cec <HAL_GPIO_Init+0x48>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d007      	beq.n	8003cec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ce0:	2b11      	cmp	r3, #17
 8003ce2:	d003      	beq.n	8003cec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b12      	cmp	r3, #18
 8003cea:	d130      	bne.n	8003d4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4013      	ands	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d22:	2201      	movs	r2, #1
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	f003 0201 	and.w	r2, r3, #1
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	2203      	movs	r2, #3
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4013      	ands	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d003      	beq.n	8003d8e <HAL_GPIO_Init+0xea>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b12      	cmp	r3, #18
 8003d8c:	d123      	bne.n	8003dd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	08da      	lsrs	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3208      	adds	r2, #8
 8003d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	220f      	movs	r2, #15
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43db      	mvns	r3, r3
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4013      	ands	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	08da      	lsrs	r2, r3, #3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3208      	adds	r2, #8
 8003dd0:	6939      	ldr	r1, [r7, #16]
 8003dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	2203      	movs	r2, #3
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4013      	ands	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f003 0203 	and.w	r2, r3, #3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 8094 	beq.w	8003f40 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e18:	4b52      	ldr	r3, [pc, #328]	; (8003f64 <HAL_GPIO_Init+0x2c0>)
 8003e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1c:	4a51      	ldr	r2, [pc, #324]	; (8003f64 <HAL_GPIO_Init+0x2c0>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6613      	str	r3, [r2, #96]	; 0x60
 8003e24:	4b4f      	ldr	r3, [pc, #316]	; (8003f64 <HAL_GPIO_Init+0x2c0>)
 8003e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e30:	4a4d      	ldr	r2, [pc, #308]	; (8003f68 <HAL_GPIO_Init+0x2c4>)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	089b      	lsrs	r3, r3, #2
 8003e36:	3302      	adds	r3, #2
 8003e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	220f      	movs	r2, #15
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4013      	ands	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e5a:	d00d      	beq.n	8003e78 <HAL_GPIO_Init+0x1d4>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a43      	ldr	r2, [pc, #268]	; (8003f6c <HAL_GPIO_Init+0x2c8>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d007      	beq.n	8003e74 <HAL_GPIO_Init+0x1d0>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a42      	ldr	r2, [pc, #264]	; (8003f70 <HAL_GPIO_Init+0x2cc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d101      	bne.n	8003e70 <HAL_GPIO_Init+0x1cc>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e004      	b.n	8003e7a <HAL_GPIO_Init+0x1d6>
 8003e70:	2307      	movs	r3, #7
 8003e72:	e002      	b.n	8003e7a <HAL_GPIO_Init+0x1d6>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <HAL_GPIO_Init+0x1d6>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	f002 0203 	and.w	r2, r2, #3
 8003e80:	0092      	lsls	r2, r2, #2
 8003e82:	4093      	lsls	r3, r2
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e8a:	4937      	ldr	r1, [pc, #220]	; (8003f68 <HAL_GPIO_Init+0x2c4>)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	089b      	lsrs	r3, r3, #2
 8003e90:	3302      	adds	r3, #2
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e98:	4b36      	ldr	r3, [pc, #216]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ebc:	4a2d      	ldr	r2, [pc, #180]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003ec2:	4b2c      	ldr	r3, [pc, #176]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ee6:	4a23      	ldr	r2, [pc, #140]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003eec:	4b21      	ldr	r3, [pc, #132]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f10:	4a18      	ldr	r2, [pc, #96]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f16:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4013      	ands	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f3a:	4a0e      	ldr	r2, [pc, #56]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	3301      	adds	r3, #1
 8003f44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f47f aeaf 	bne.w	8003cb4 <HAL_GPIO_Init+0x10>
  }
}
 8003f56:	bf00      	nop
 8003f58:	bf00      	nop
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	48000400 	.word	0x48000400
 8003f70:	48000800 	.word	0x48000800
 8003f74:	40010400 	.word	0x40010400

08003f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	807b      	strh	r3, [r7, #2]
 8003f84:	4613      	mov	r3, r2
 8003f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f88:	787b      	ldrb	r3, [r7, #1]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f8e:	887a      	ldrh	r2, [r7, #2]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f94:	e002      	b.n	8003f9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f96:	887a      	ldrh	r2, [r7, #2]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a04      	ldr	r2, [pc, #16]	; (8003fc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb6:	6013      	str	r3, [r2, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40007000 	.word	0x40007000

08003fc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003fcc:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40007000 	.word	0x40007000

08003fe4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff2:	d130      	bne.n	8004056 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ff4:	4b23      	ldr	r3, [pc, #140]	; (8004084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004000:	d038      	beq.n	8004074 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004002:	4b20      	ldr	r3, [pc, #128]	; (8004084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800400a:	4a1e      	ldr	r2, [pc, #120]	; (8004084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800400c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004010:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004012:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2232      	movs	r2, #50	; 0x32
 8004018:	fb02 f303 	mul.w	r3, r2, r3
 800401c:	4a1b      	ldr	r2, [pc, #108]	; (800408c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800401e:	fba2 2303 	umull	r2, r3, r2, r3
 8004022:	0c9b      	lsrs	r3, r3, #18
 8004024:	3301      	adds	r3, #1
 8004026:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004028:	e002      	b.n	8004030 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3b01      	subs	r3, #1
 800402e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004030:	4b14      	ldr	r3, [pc, #80]	; (8004084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403c:	d102      	bne.n	8004044 <HAL_PWREx_ControlVoltageScaling+0x60>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f2      	bne.n	800402a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004044:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004050:	d110      	bne.n	8004074 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e00f      	b.n	8004076 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004056:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800405e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004062:	d007      	beq.n	8004074 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004064:	4b07      	ldr	r3, [pc, #28]	; (8004084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800406c:	4a05      	ldr	r2, [pc, #20]	; (8004084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800406e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004072:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40007000 	.word	0x40007000
 8004088:	20000030 	.word	0x20000030
 800408c:	431bde83 	.word	0x431bde83

08004090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d102      	bne.n	80040a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	f000 bc11 	b.w	80048c6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040a4:	4ba0      	ldr	r3, [pc, #640]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 030c 	and.w	r3, r3, #12
 80040ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040ae:	4b9e      	ldr	r3, [pc, #632]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80e4 	beq.w	800428e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <HAL_RCC_OscConfig+0x4c>
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	2b0c      	cmp	r3, #12
 80040d0:	f040 808b 	bne.w	80041ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	f040 8087 	bne.w	80041ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040dc:	4b92      	ldr	r3, [pc, #584]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_RCC_OscConfig+0x64>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e3e8      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1a      	ldr	r2, [r3, #32]
 80040f8:	4b8b      	ldr	r3, [pc, #556]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d004      	beq.n	800410e <HAL_RCC_OscConfig+0x7e>
 8004104:	4b88      	ldr	r3, [pc, #544]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800410c:	e005      	b.n	800411a <HAL_RCC_OscConfig+0x8a>
 800410e:	4b86      	ldr	r3, [pc, #536]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800411a:	4293      	cmp	r3, r2
 800411c:	d223      	bcs.n	8004166 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fd7a 	bl	8004c1c <RCC_SetFlashLatencyFromMSIRange>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e3c9      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004132:	4b7d      	ldr	r3, [pc, #500]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a7c      	ldr	r2, [pc, #496]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004138:	f043 0308 	orr.w	r3, r3, #8
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	4b7a      	ldr	r3, [pc, #488]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	4977      	ldr	r1, [pc, #476]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 800414c:	4313      	orrs	r3, r2
 800414e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004150:	4b75      	ldr	r3, [pc, #468]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	4972      	ldr	r1, [pc, #456]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004160:	4313      	orrs	r3, r2
 8004162:	604b      	str	r3, [r1, #4]
 8004164:	e025      	b.n	80041b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004166:	4b70      	ldr	r3, [pc, #448]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a6f      	ldr	r2, [pc, #444]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 800416c:	f043 0308 	orr.w	r3, r3, #8
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	4b6d      	ldr	r3, [pc, #436]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	496a      	ldr	r1, [pc, #424]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004180:	4313      	orrs	r3, r2
 8004182:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004184:	4b68      	ldr	r3, [pc, #416]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	4965      	ldr	r1, [pc, #404]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004194:	4313      	orrs	r3, r2
 8004196:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fd3a 	bl	8004c1c <RCC_SetFlashLatencyFromMSIRange>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e389      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041b2:	f000 fc6f 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 80041b6:	4602      	mov	r2, r0
 80041b8:	4b5b      	ldr	r3, [pc, #364]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	495a      	ldr	r1, [pc, #360]	; (800432c <HAL_RCC_OscConfig+0x29c>)
 80041c4:	5ccb      	ldrb	r3, [r1, r3]
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	fa22 f303 	lsr.w	r3, r2, r3
 80041ce:	4a58      	ldr	r2, [pc, #352]	; (8004330 <HAL_RCC_OscConfig+0x2a0>)
 80041d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041d2:	4b58      	ldr	r3, [pc, #352]	; (8004334 <HAL_RCC_OscConfig+0x2a4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe f84a 	bl	8002270 <HAL_InitTick>
 80041dc:	4603      	mov	r3, r0
 80041de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d052      	beq.n	800428c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	e36d      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d032      	beq.n	8004258 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041f2:	4b4d      	ldr	r3, [pc, #308]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a4c      	ldr	r2, [pc, #304]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 80041f8:	f043 0301 	orr.w	r3, r3, #1
 80041fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041fe:	f7fe f887 	bl	8002310 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004206:	f7fe f883 	bl	8002310 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e356      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004218:	4b43      	ldr	r3, [pc, #268]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004224:	4b40      	ldr	r3, [pc, #256]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a3f      	ldr	r2, [pc, #252]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 800422a:	f043 0308 	orr.w	r3, r3, #8
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	4b3d      	ldr	r3, [pc, #244]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	493a      	ldr	r1, [pc, #232]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004242:	4b39      	ldr	r3, [pc, #228]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	4935      	ldr	r1, [pc, #212]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004252:	4313      	orrs	r3, r2
 8004254:	604b      	str	r3, [r1, #4]
 8004256:	e01a      	b.n	800428e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004258:	4b33      	ldr	r3, [pc, #204]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a32      	ldr	r2, [pc, #200]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004264:	f7fe f854 	bl	8002310 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800426c:	f7fe f850 	bl	8002310 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e323      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800427e:	4b2a      	ldr	r3, [pc, #168]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0x1dc>
 800428a:	e000      	b.n	800428e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800428c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d073      	beq.n	8004382 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d005      	beq.n	80042ac <HAL_RCC_OscConfig+0x21c>
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2b0c      	cmp	r3, #12
 80042a4:	d10e      	bne.n	80042c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d10b      	bne.n	80042c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ac:	4b1e      	ldr	r3, [pc, #120]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d063      	beq.n	8004380 <HAL_RCC_OscConfig+0x2f0>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d15f      	bne.n	8004380 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e300      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042cc:	d106      	bne.n	80042dc <HAL_RCC_OscConfig+0x24c>
 80042ce:	4b16      	ldr	r3, [pc, #88]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a15      	ldr	r2, [pc, #84]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 80042d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	e01d      	b.n	8004318 <HAL_RCC_OscConfig+0x288>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042e4:	d10c      	bne.n	8004300 <HAL_RCC_OscConfig+0x270>
 80042e6:	4b10      	ldr	r3, [pc, #64]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a0f      	ldr	r2, [pc, #60]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 80042ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a0c      	ldr	r2, [pc, #48]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 80042f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e00b      	b.n	8004318 <HAL_RCC_OscConfig+0x288>
 8004300:	4b09      	ldr	r3, [pc, #36]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a08      	ldr	r2, [pc, #32]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	4b06      	ldr	r3, [pc, #24]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a05      	ldr	r2, [pc, #20]	; (8004328 <HAL_RCC_OscConfig+0x298>)
 8004312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01b      	beq.n	8004358 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fd fff6 	bl	8002310 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004326:	e010      	b.n	800434a <HAL_RCC_OscConfig+0x2ba>
 8004328:	40021000 	.word	0x40021000
 800432c:	0800cce4 	.word	0x0800cce4
 8004330:	20000030 	.word	0x20000030
 8004334:	20000034 	.word	0x20000034
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004338:	f7fd ffea 	bl	8002310 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e2bd      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800434a:	4baf      	ldr	r3, [pc, #700]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x2a8>
 8004356:	e014      	b.n	8004382 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fd ffda 	bl	8002310 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004360:	f7fd ffd6 	bl	8002310 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b64      	cmp	r3, #100	; 0x64
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e2a9      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004372:	4ba5      	ldr	r3, [pc, #660]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x2d0>
 800437e:	e000      	b.n	8004382 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d060      	beq.n	8004450 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	2b04      	cmp	r3, #4
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_OscConfig+0x310>
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	2b0c      	cmp	r3, #12
 8004398:	d119      	bne.n	80043ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2b02      	cmp	r3, #2
 800439e:	d116      	bne.n	80043ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043a0:	4b99      	ldr	r3, [pc, #612]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_OscConfig+0x328>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e286      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b8:	4b93      	ldr	r3, [pc, #588]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	061b      	lsls	r3, r3, #24
 80043c6:	4990      	ldr	r1, [pc, #576]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043cc:	e040      	b.n	8004450 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d023      	beq.n	800441e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d6:	4b8c      	ldr	r3, [pc, #560]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a8b      	ldr	r2, [pc, #556]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80043dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e2:	f7fd ff95 	bl	8002310 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ea:	f7fd ff91 	bl	8002310 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e264      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043fc:	4b82      	ldr	r3, [pc, #520]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f0      	beq.n	80043ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004408:	4b7f      	ldr	r3, [pc, #508]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	061b      	lsls	r3, r3, #24
 8004416:	497c      	ldr	r1, [pc, #496]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
 800441c:	e018      	b.n	8004450 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800441e:	4b7a      	ldr	r3, [pc, #488]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a79      	ldr	r2, [pc, #484]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442a:	f7fd ff71 	bl	8002310 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004432:	f7fd ff6d 	bl	8002310 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e240      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004444:	4b70      	ldr	r3, [pc, #448]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f0      	bne.n	8004432 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b00      	cmp	r3, #0
 800445a:	d03c      	beq.n	80044d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01c      	beq.n	800449e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004464:	4b68      	ldr	r3, [pc, #416]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800446a:	4a67      	ldr	r2, [pc, #412]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004474:	f7fd ff4c 	bl	8002310 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800447c:	f7fd ff48 	bl	8002310 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e21b      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800448e:	4b5e      	ldr	r3, [pc, #376]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0ef      	beq.n	800447c <HAL_RCC_OscConfig+0x3ec>
 800449c:	e01b      	b.n	80044d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800449e:	4b5a      	ldr	r3, [pc, #360]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80044a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044a4:	4a58      	ldr	r2, [pc, #352]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ae:	f7fd ff2f 	bl	8002310 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b6:	f7fd ff2b 	bl	8002310 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e1fe      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044c8:	4b4f      	ldr	r3, [pc, #316]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80044ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1ef      	bne.n	80044b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 80a6 	beq.w	8004630 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044e4:	2300      	movs	r3, #0
 80044e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044e8:	4b47      	ldr	r3, [pc, #284]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80044ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10d      	bne.n	8004510 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f4:	4b44      	ldr	r3, [pc, #272]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f8:	4a43      	ldr	r2, [pc, #268]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80044fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004500:	4b41      	ldr	r3, [pc, #260]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450c:	2301      	movs	r3, #1
 800450e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004510:	4b3e      	ldr	r3, [pc, #248]	; (800460c <HAL_RCC_OscConfig+0x57c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004518:	2b00      	cmp	r3, #0
 800451a:	d118      	bne.n	800454e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800451c:	4b3b      	ldr	r3, [pc, #236]	; (800460c <HAL_RCC_OscConfig+0x57c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a3a      	ldr	r2, [pc, #232]	; (800460c <HAL_RCC_OscConfig+0x57c>)
 8004522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004526:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004528:	f7fd fef2 	bl	8002310 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004530:	f7fd feee 	bl	8002310 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e1c1      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004542:	4b32      	ldr	r3, [pc, #200]	; (800460c <HAL_RCC_OscConfig+0x57c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d108      	bne.n	8004568 <HAL_RCC_OscConfig+0x4d8>
 8004556:	4b2c      	ldr	r3, [pc, #176]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455c:	4a2a      	ldr	r2, [pc, #168]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004566:	e024      	b.n	80045b2 <HAL_RCC_OscConfig+0x522>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	2b05      	cmp	r3, #5
 800456e:	d110      	bne.n	8004592 <HAL_RCC_OscConfig+0x502>
 8004570:	4b25      	ldr	r3, [pc, #148]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004576:	4a24      	ldr	r2, [pc, #144]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004578:	f043 0304 	orr.w	r3, r3, #4
 800457c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004580:	4b21      	ldr	r3, [pc, #132]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004586:	4a20      	ldr	r2, [pc, #128]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004588:	f043 0301 	orr.w	r3, r3, #1
 800458c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004590:	e00f      	b.n	80045b2 <HAL_RCC_OscConfig+0x522>
 8004592:	4b1d      	ldr	r3, [pc, #116]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004598:	4a1b      	ldr	r2, [pc, #108]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045a2:	4b19      	ldr	r3, [pc, #100]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a8:	4a17      	ldr	r2, [pc, #92]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80045aa:	f023 0304 	bic.w	r3, r3, #4
 80045ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d016      	beq.n	80045e8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ba:	f7fd fea9 	bl	8002310 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c0:	e00a      	b.n	80045d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c2:	f7fd fea5 	bl	8002310 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e176      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0ed      	beq.n	80045c2 <HAL_RCC_OscConfig+0x532>
 80045e6:	e01a      	b.n	800461e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fd fe92 	bl	8002310 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045ee:	e00f      	b.n	8004610 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f0:	f7fd fe8e 	bl	8002310 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d906      	bls.n	8004610 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e15f      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
 8004606:	bf00      	nop
 8004608:	40021000 	.word	0x40021000
 800460c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004610:	4baa      	ldr	r3, [pc, #680]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1e8      	bne.n	80045f0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800461e:	7ffb      	ldrb	r3, [r7, #31]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d105      	bne.n	8004630 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004624:	4ba5      	ldr	r3, [pc, #660]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004628:	4aa4      	ldr	r2, [pc, #656]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 800462a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800462e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b00      	cmp	r3, #0
 800463a:	d03c      	beq.n	80046b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01c      	beq.n	800467e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004644:	4b9d      	ldr	r3, [pc, #628]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004646:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800464a:	4a9c      	ldr	r2, [pc, #624]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 800464c:	f043 0301 	orr.w	r3, r3, #1
 8004650:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004654:	f7fd fe5c 	bl	8002310 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800465c:	f7fd fe58 	bl	8002310 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e12b      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800466e:	4b93      	ldr	r3, [pc, #588]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004670:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0ef      	beq.n	800465c <HAL_RCC_OscConfig+0x5cc>
 800467c:	e01b      	b.n	80046b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800467e:	4b8f      	ldr	r3, [pc, #572]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004680:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004684:	4a8d      	ldr	r2, [pc, #564]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004686:	f023 0301 	bic.w	r3, r3, #1
 800468a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468e:	f7fd fe3f 	bl	8002310 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004696:	f7fd fe3b 	bl	8002310 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e10e      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046a8:	4b84      	ldr	r3, [pc, #528]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 80046aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1ef      	bne.n	8004696 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 8102 	beq.w	80048c4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	f040 80c5 	bne.w	8004854 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80046ca:	4b7c      	ldr	r3, [pc, #496]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f003 0203 	and.w	r2, r3, #3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	429a      	cmp	r2, r3
 80046dc:	d12c      	bne.n	8004738 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	3b01      	subs	r3, #1
 80046ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d123      	bne.n	8004738 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d11b      	bne.n	8004738 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800470c:	429a      	cmp	r2, r3
 800470e:	d113      	bne.n	8004738 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471a:	085b      	lsrs	r3, r3, #1
 800471c:	3b01      	subs	r3, #1
 800471e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d109      	bne.n	8004738 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	085b      	lsrs	r3, r3, #1
 8004730:	3b01      	subs	r3, #1
 8004732:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004734:	429a      	cmp	r2, r3
 8004736:	d067      	beq.n	8004808 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2b0c      	cmp	r3, #12
 800473c:	d062      	beq.n	8004804 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800473e:	4b5f      	ldr	r3, [pc, #380]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e0bb      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800474e:	4b5b      	ldr	r3, [pc, #364]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a5a      	ldr	r2, [pc, #360]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004754:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004758:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800475a:	f7fd fdd9 	bl	8002310 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004762:	f7fd fdd5 	bl	8002310 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e0a8      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004774:	4b51      	ldr	r3, [pc, #324]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f0      	bne.n	8004762 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004780:	4b4e      	ldr	r3, [pc, #312]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004782:	68da      	ldr	r2, [r3, #12]
 8004784:	4b4e      	ldr	r3, [pc, #312]	; (80048c0 <HAL_RCC_OscConfig+0x830>)
 8004786:	4013      	ands	r3, r2
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004790:	3a01      	subs	r2, #1
 8004792:	0112      	lsls	r2, r2, #4
 8004794:	4311      	orrs	r1, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800479a:	0212      	lsls	r2, r2, #8
 800479c:	4311      	orrs	r1, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047a2:	0852      	lsrs	r2, r2, #1
 80047a4:	3a01      	subs	r2, #1
 80047a6:	0552      	lsls	r2, r2, #21
 80047a8:	4311      	orrs	r1, r2
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047ae:	0852      	lsrs	r2, r2, #1
 80047b0:	3a01      	subs	r2, #1
 80047b2:	0652      	lsls	r2, r2, #25
 80047b4:	4311      	orrs	r1, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047ba:	06d2      	lsls	r2, r2, #27
 80047bc:	430a      	orrs	r2, r1
 80047be:	493f      	ldr	r1, [pc, #252]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047c4:	4b3d      	ldr	r3, [pc, #244]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a3c      	ldr	r2, [pc, #240]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 80047ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047d0:	4b3a      	ldr	r3, [pc, #232]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4a39      	ldr	r2, [pc, #228]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 80047d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047dc:	f7fd fd98 	bl	8002310 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e4:	f7fd fd94 	bl	8002310 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e067      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047f6:	4b31      	ldr	r3, [pc, #196]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0f0      	beq.n	80047e4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004802:	e05f      	b.n	80048c4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e05e      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004808:	4b2c      	ldr	r3, [pc, #176]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d157      	bne.n	80048c4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004814:	4b29      	ldr	r3, [pc, #164]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a28      	ldr	r2, [pc, #160]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 800481a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800481e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004820:	4b26      	ldr	r3, [pc, #152]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4a25      	ldr	r2, [pc, #148]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800482a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800482c:	f7fd fd70 	bl	8002310 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004834:	f7fd fd6c 	bl	8002310 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e03f      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004846:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f0      	beq.n	8004834 <HAL_RCC_OscConfig+0x7a4>
 8004852:	e037      	b.n	80048c4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	2b0c      	cmp	r3, #12
 8004858:	d02d      	beq.n	80048b6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800485a:	4b18      	ldr	r3, [pc, #96]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a17      	ldr	r2, [pc, #92]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004860:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004864:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004866:	4b15      	ldr	r3, [pc, #84]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d105      	bne.n	800487e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004872:	4b12      	ldr	r3, [pc, #72]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	4a11      	ldr	r2, [pc, #68]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004878:	f023 0303 	bic.w	r3, r3, #3
 800487c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800487e:	4b0f      	ldr	r3, [pc, #60]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	4a0e      	ldr	r2, [pc, #56]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 8004884:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800488c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488e:	f7fd fd3f 	bl	8002310 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004896:	f7fd fd3b 	bl	8002310 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e00e      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048a8:	4b04      	ldr	r3, [pc, #16]	; (80048bc <HAL_RCC_OscConfig+0x82c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f0      	bne.n	8004896 <HAL_RCC_OscConfig+0x806>
 80048b4:	e006      	b.n	80048c4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e005      	b.n	80048c6 <HAL_RCC_OscConfig+0x836>
 80048ba:	bf00      	nop
 80048bc:	40021000 	.word	0x40021000
 80048c0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3720      	adds	r7, #32
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop

080048d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0c8      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048e4:	4b66      	ldr	r3, [pc, #408]	; (8004a80 <HAL_RCC_ClockConfig+0x1b0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d910      	bls.n	8004914 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f2:	4b63      	ldr	r3, [pc, #396]	; (8004a80 <HAL_RCC_ClockConfig+0x1b0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f023 0207 	bic.w	r2, r3, #7
 80048fa:	4961      	ldr	r1, [pc, #388]	; (8004a80 <HAL_RCC_ClockConfig+0x1b0>)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	4313      	orrs	r3, r2
 8004900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004902:	4b5f      	ldr	r3, [pc, #380]	; (8004a80 <HAL_RCC_ClockConfig+0x1b0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d001      	beq.n	8004914 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0b0      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d04c      	beq.n	80049ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b03      	cmp	r3, #3
 8004926:	d107      	bne.n	8004938 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004928:	4b56      	ldr	r3, [pc, #344]	; (8004a84 <HAL_RCC_ClockConfig+0x1b4>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d121      	bne.n	8004978 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e09e      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b02      	cmp	r3, #2
 800493e:	d107      	bne.n	8004950 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004940:	4b50      	ldr	r3, [pc, #320]	; (8004a84 <HAL_RCC_ClockConfig+0x1b4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d115      	bne.n	8004978 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e092      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004958:	4b4a      	ldr	r3, [pc, #296]	; (8004a84 <HAL_RCC_ClockConfig+0x1b4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d109      	bne.n	8004978 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e086      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004968:	4b46      	ldr	r3, [pc, #280]	; (8004a84 <HAL_RCC_ClockConfig+0x1b4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e07e      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004978:	4b42      	ldr	r3, [pc, #264]	; (8004a84 <HAL_RCC_ClockConfig+0x1b4>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f023 0203 	bic.w	r2, r3, #3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	493f      	ldr	r1, [pc, #252]	; (8004a84 <HAL_RCC_ClockConfig+0x1b4>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800498a:	f7fd fcc1 	bl	8002310 <HAL_GetTick>
 800498e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004990:	e00a      	b.n	80049a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004992:	f7fd fcbd 	bl	8002310 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e066      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a8:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <HAL_RCC_ClockConfig+0x1b4>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 020c 	and.w	r2, r3, #12
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d1eb      	bne.n	8004992 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d008      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c6:	4b2f      	ldr	r3, [pc, #188]	; (8004a84 <HAL_RCC_ClockConfig+0x1b4>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	492c      	ldr	r1, [pc, #176]	; (8004a84 <HAL_RCC_ClockConfig+0x1b4>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049d8:	4b29      	ldr	r3, [pc, #164]	; (8004a80 <HAL_RCC_ClockConfig+0x1b0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d210      	bcs.n	8004a08 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e6:	4b26      	ldr	r3, [pc, #152]	; (8004a80 <HAL_RCC_ClockConfig+0x1b0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f023 0207 	bic.w	r2, r3, #7
 80049ee:	4924      	ldr	r1, [pc, #144]	; (8004a80 <HAL_RCC_ClockConfig+0x1b0>)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f6:	4b22      	ldr	r3, [pc, #136]	; (8004a80 <HAL_RCC_ClockConfig+0x1b0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d001      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e036      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a14:	4b1b      	ldr	r3, [pc, #108]	; (8004a84 <HAL_RCC_ClockConfig+0x1b4>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4918      	ldr	r1, [pc, #96]	; (8004a84 <HAL_RCC_ClockConfig+0x1b4>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d009      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a32:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <HAL_RCC_ClockConfig+0x1b4>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	4910      	ldr	r1, [pc, #64]	; (8004a84 <HAL_RCC_ClockConfig+0x1b4>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a46:	f000 f825 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <HAL_RCC_ClockConfig+0x1b4>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	490c      	ldr	r1, [pc, #48]	; (8004a88 <HAL_RCC_ClockConfig+0x1b8>)
 8004a58:	5ccb      	ldrb	r3, [r1, r3]
 8004a5a:	f003 031f 	and.w	r3, r3, #31
 8004a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a62:	4a0a      	ldr	r2, [pc, #40]	; (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a66:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <HAL_RCC_ClockConfig+0x1c0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fd fc00 	bl	8002270 <HAL_InitTick>
 8004a70:	4603      	mov	r3, r0
 8004a72:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a74:	7afb      	ldrb	r3, [r7, #11]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	40022000 	.word	0x40022000
 8004a84:	40021000 	.word	0x40021000
 8004a88:	0800cce4 	.word	0x0800cce4
 8004a8c:	20000030 	.word	0x20000030
 8004a90:	20000034 	.word	0x20000034

08004a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b089      	sub	sp, #36	; 0x24
 8004a98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aa2:	4b3e      	ldr	r3, [pc, #248]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 030c 	and.w	r3, r3, #12
 8004aaa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aac:	4b3b      	ldr	r3, [pc, #236]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	2b0c      	cmp	r3, #12
 8004ac0:	d121      	bne.n	8004b06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d11e      	bne.n	8004b06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ac8:	4b34      	ldr	r3, [pc, #208]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d107      	bne.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ad4:	4b31      	ldr	r3, [pc, #196]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	f003 030f 	and.w	r3, r3, #15
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	e005      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ae4:	4b2d      	ldr	r3, [pc, #180]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004af0:	4a2b      	ldr	r2, [pc, #172]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10d      	bne.n	8004b1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d102      	bne.n	8004b12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b0c:	4b25      	ldr	r3, [pc, #148]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b0e:	61bb      	str	r3, [r7, #24]
 8004b10:	e004      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d101      	bne.n	8004b1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b18:	4b23      	ldr	r3, [pc, #140]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b0c      	cmp	r3, #12
 8004b20:	d134      	bne.n	8004b8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b22:	4b1e      	ldr	r3, [pc, #120]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d003      	beq.n	8004b3a <HAL_RCC_GetSysClockFreq+0xa6>
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d003      	beq.n	8004b40 <HAL_RCC_GetSysClockFreq+0xac>
 8004b38:	e005      	b.n	8004b46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b3c:	617b      	str	r3, [r7, #20]
      break;
 8004b3e:	e005      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b40:	4b19      	ldr	r3, [pc, #100]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b42:	617b      	str	r3, [r7, #20]
      break;
 8004b44:	e002      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	617b      	str	r3, [r7, #20]
      break;
 8004b4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b4c:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	091b      	lsrs	r3, r3, #4
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	3301      	adds	r3, #1
 8004b58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b5a:	4b10      	ldr	r3, [pc, #64]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	fb02 f203 	mul.w	r2, r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b72:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	0e5b      	lsrs	r3, r3, #25
 8004b78:	f003 0303 	and.w	r3, r3, #3
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b8c:	69bb      	ldr	r3, [r7, #24]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3724      	adds	r7, #36	; 0x24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	0800ccfc 	.word	0x0800ccfc
 8004ba4:	00f42400 	.word	0x00f42400
 8004ba8:	007a1200 	.word	0x007a1200

08004bac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bb0:	4b03      	ldr	r3, [pc, #12]	; (8004bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20000030 	.word	0x20000030

08004bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bc8:	f7ff fff0 	bl	8004bac <HAL_RCC_GetHCLKFreq>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	0a1b      	lsrs	r3, r3, #8
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	4904      	ldr	r1, [pc, #16]	; (8004bec <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bda:	5ccb      	ldrb	r3, [r1, r3]
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40021000 	.word	0x40021000
 8004bec:	0800ccf4 	.word	0x0800ccf4

08004bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bf4:	f7ff ffda 	bl	8004bac <HAL_RCC_GetHCLKFreq>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	0adb      	lsrs	r3, r3, #11
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	4904      	ldr	r1, [pc, #16]	; (8004c18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c06:	5ccb      	ldrb	r3, [r1, r3]
 8004c08:	f003 031f 	and.w	r3, r3, #31
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40021000 	.word	0x40021000
 8004c18:	0800ccf4 	.word	0x0800ccf4

08004c1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c24:	2300      	movs	r3, #0
 8004c26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c28:	4b2a      	ldr	r3, [pc, #168]	; (8004cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c34:	f7ff f9c8 	bl	8003fc8 <HAL_PWREx_GetVoltageRange>
 8004c38:	6178      	str	r0, [r7, #20]
 8004c3a:	e014      	b.n	8004c66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c3c:	4b25      	ldr	r3, [pc, #148]	; (8004cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c40:	4a24      	ldr	r2, [pc, #144]	; (8004cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c46:	6593      	str	r3, [r2, #88]	; 0x58
 8004c48:	4b22      	ldr	r3, [pc, #136]	; (8004cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c54:	f7ff f9b8 	bl	8003fc8 <HAL_PWREx_GetVoltageRange>
 8004c58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c5a:	4b1e      	ldr	r3, [pc, #120]	; (8004cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5e:	4a1d      	ldr	r2, [pc, #116]	; (8004cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c6c:	d10b      	bne.n	8004c86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b80      	cmp	r3, #128	; 0x80
 8004c72:	d919      	bls.n	8004ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2ba0      	cmp	r3, #160	; 0xa0
 8004c78:	d902      	bls.n	8004c80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	e013      	b.n	8004ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c80:	2301      	movs	r3, #1
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	e010      	b.n	8004ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b80      	cmp	r3, #128	; 0x80
 8004c8a:	d902      	bls.n	8004c92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	613b      	str	r3, [r7, #16]
 8004c90:	e00a      	b.n	8004ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b80      	cmp	r3, #128	; 0x80
 8004c96:	d102      	bne.n	8004c9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c98:	2302      	movs	r3, #2
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	e004      	b.n	8004ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b70      	cmp	r3, #112	; 0x70
 8004ca2:	d101      	bne.n	8004ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f023 0207 	bic.w	r2, r3, #7
 8004cb0:	4909      	ldr	r1, [pc, #36]	; (8004cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cb8:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d001      	beq.n	8004cca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	40022000 	.word	0x40022000

08004cdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ce8:	2300      	movs	r3, #0
 8004cea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d031      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d00:	d01a      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004d02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d06:	d814      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d009      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d10:	d10f      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004d12:	4bac      	ldr	r3, [pc, #688]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	4aab      	ldr	r2, [pc, #684]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d1e:	e00c      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3304      	adds	r3, #4
 8004d24:	2100      	movs	r1, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 f9dc 	bl	80050e4 <RCCEx_PLLSAI1_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d30:	e003      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	74fb      	strb	r3, [r7, #19]
      break;
 8004d36:	e000      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d3a:	7cfb      	ldrb	r3, [r7, #19]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10b      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d40:	4ba0      	ldr	r3, [pc, #640]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4e:	499d      	ldr	r1, [pc, #628]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d56:	e001      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d58:	7cfb      	ldrb	r3, [r7, #19]
 8004d5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 8099 	beq.w	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d6e:	4b95      	ldr	r3, [pc, #596]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00d      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d84:	4b8f      	ldr	r3, [pc, #572]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d88:	4a8e      	ldr	r2, [pc, #568]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8004d90:	4b8c      	ldr	r3, [pc, #560]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d98:	60bb      	str	r3, [r7, #8]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004da0:	4b89      	ldr	r3, [pc, #548]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a88      	ldr	r2, [pc, #544]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004daa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dac:	f7fd fab0 	bl	8002310 <HAL_GetTick>
 8004db0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004db2:	e009      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db4:	f7fd faac 	bl	8002310 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d902      	bls.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	74fb      	strb	r3, [r7, #19]
        break;
 8004dc6:	e005      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dc8:	4b7f      	ldr	r3, [pc, #508]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0ef      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004dd4:	7cfb      	ldrb	r3, [r7, #19]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d155      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004dda:	4b7a      	ldr	r3, [pc, #488]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01e      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d019      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004df6:	4b73      	ldr	r3, [pc, #460]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e00:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e02:	4b70      	ldr	r3, [pc, #448]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e08:	4a6e      	ldr	r2, [pc, #440]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e12:	4b6c      	ldr	r3, [pc, #432]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e18:	4a6a      	ldr	r2, [pc, #424]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e22:	4a68      	ldr	r2, [pc, #416]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d016      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e34:	f7fd fa6c 	bl	8002310 <HAL_GetTick>
 8004e38:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e3a:	e00b      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3c:	f7fd fa68 	bl	8002310 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d902      	bls.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	74fb      	strb	r3, [r7, #19]
            break;
 8004e52:	e006      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e54:	4b5b      	ldr	r3, [pc, #364]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0ec      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004e62:	7cfb      	ldrb	r3, [r7, #19]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10b      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e68:	4b56      	ldr	r3, [pc, #344]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e76:	4953      	ldr	r1, [pc, #332]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e7e:	e004      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e80:	7cfb      	ldrb	r3, [r7, #19]
 8004e82:	74bb      	strb	r3, [r7, #18]
 8004e84:	e001      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e86:	7cfb      	ldrb	r3, [r7, #19]
 8004e88:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e8a:	7c7b      	ldrb	r3, [r7, #17]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d105      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e90:	4b4c      	ldr	r3, [pc, #304]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e94:	4a4b      	ldr	r2, [pc, #300]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00a      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ea8:	4b46      	ldr	r3, [pc, #280]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eae:	f023 0203 	bic.w	r2, r3, #3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	4943      	ldr	r1, [pc, #268]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004eca:	4b3e      	ldr	r3, [pc, #248]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed0:	f023 020c 	bic.w	r2, r3, #12
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	493a      	ldr	r1, [pc, #232]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004eec:	4b35      	ldr	r3, [pc, #212]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efa:	4932      	ldr	r1, [pc, #200]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f0e:	4b2d      	ldr	r3, [pc, #180]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1c:	4929      	ldr	r1, [pc, #164]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f30:	4b24      	ldr	r3, [pc, #144]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	4921      	ldr	r1, [pc, #132]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f52:	4b1c      	ldr	r3, [pc, #112]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	4918      	ldr	r1, [pc, #96]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f74:	4b13      	ldr	r3, [pc, #76]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	4910      	ldr	r1, [pc, #64]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d02c      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f96:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	4907      	ldr	r1, [pc, #28]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fb4:	d10a      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fb6:	4b03      	ldr	r3, [pc, #12]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	4a02      	ldr	r2, [pc, #8]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004fbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fc0:	60d3      	str	r3, [r2, #12]
 8004fc2:	e015      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fd4:	d10c      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	2101      	movs	r1, #1
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 f881 	bl	80050e4 <RCCEx_PLLSAI1_Config>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004fe6:	7cfb      	ldrb	r3, [r7, #19]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8004fec:	7cfb      	ldrb	r3, [r7, #19]
 8004fee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d028      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ffc:	4b30      	ldr	r3, [pc, #192]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500a:	492d      	ldr	r1, [pc, #180]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800501a:	d106      	bne.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800501c:	4b28      	ldr	r3, [pc, #160]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4a27      	ldr	r2, [pc, #156]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005026:	60d3      	str	r3, [r2, #12]
 8005028:	e011      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005032:	d10c      	bne.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3304      	adds	r3, #4
 8005038:	2101      	movs	r1, #1
 800503a:	4618      	mov	r0, r3
 800503c:	f000 f852 	bl	80050e4 <RCCEx_PLLSAI1_Config>
 8005040:	4603      	mov	r3, r0
 8005042:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005044:	7cfb      	ldrb	r3, [r7, #19]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800504a:	7cfb      	ldrb	r3, [r7, #19]
 800504c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d01c      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800505a:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005060:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005068:	4915      	ldr	r1, [pc, #84]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005074:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005078:	d10c      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	2102      	movs	r1, #2
 8005080:	4618      	mov	r0, r3
 8005082:	f000 f82f 	bl	80050e4 <RCCEx_PLLSAI1_Config>
 8005086:	4603      	mov	r3, r0
 8005088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800508a:	7cfb      	ldrb	r3, [r7, #19]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005090:	7cfb      	ldrb	r3, [r7, #19]
 8005092:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050a0:	4b07      	ldr	r3, [pc, #28]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ae:	4904      	ldr	r1, [pc, #16]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40021000 	.word	0x40021000

080050c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a04      	ldr	r2, [pc, #16]	; (80050e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80050ce:	f043 0304 	orr.w	r3, r3, #4
 80050d2:	6013      	str	r3, [r2, #0]
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40021000 	.word	0x40021000

080050e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050f2:	4b74      	ldr	r3, [pc, #464]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d018      	beq.n	8005130 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80050fe:	4b71      	ldr	r3, [pc, #452]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f003 0203 	and.w	r2, r3, #3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d10d      	bne.n	800512a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
       ||
 8005112:	2b00      	cmp	r3, #0
 8005114:	d009      	beq.n	800512a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005116:	4b6b      	ldr	r3, [pc, #428]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	091b      	lsrs	r3, r3, #4
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
       ||
 8005126:	429a      	cmp	r2, r3
 8005128:	d047      	beq.n	80051ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	73fb      	strb	r3, [r7, #15]
 800512e:	e044      	b.n	80051ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d018      	beq.n	800516a <RCCEx_PLLSAI1_Config+0x86>
 8005138:	2b03      	cmp	r3, #3
 800513a:	d825      	bhi.n	8005188 <RCCEx_PLLSAI1_Config+0xa4>
 800513c:	2b01      	cmp	r3, #1
 800513e:	d002      	beq.n	8005146 <RCCEx_PLLSAI1_Config+0x62>
 8005140:	2b02      	cmp	r3, #2
 8005142:	d009      	beq.n	8005158 <RCCEx_PLLSAI1_Config+0x74>
 8005144:	e020      	b.n	8005188 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005146:	4b5f      	ldr	r3, [pc, #380]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d11d      	bne.n	800518e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005156:	e01a      	b.n	800518e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005158:	4b5a      	ldr	r3, [pc, #360]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005160:	2b00      	cmp	r3, #0
 8005162:	d116      	bne.n	8005192 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005168:	e013      	b.n	8005192 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800516a:	4b56      	ldr	r3, [pc, #344]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10f      	bne.n	8005196 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005176:	4b53      	ldr	r3, [pc, #332]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005186:	e006      	b.n	8005196 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	73fb      	strb	r3, [r7, #15]
      break;
 800518c:	e004      	b.n	8005198 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800518e:	bf00      	nop
 8005190:	e002      	b.n	8005198 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005192:	bf00      	nop
 8005194:	e000      	b.n	8005198 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005196:	bf00      	nop
    }

    if(status == HAL_OK)
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10d      	bne.n	80051ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800519e:	4b49      	ldr	r3, [pc, #292]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6819      	ldr	r1, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	430b      	orrs	r3, r1
 80051b4:	4943      	ldr	r1, [pc, #268]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d17c      	bne.n	80052ba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051c0:	4b40      	ldr	r3, [pc, #256]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a3f      	ldr	r2, [pc, #252]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051cc:	f7fd f8a0 	bl	8002310 <HAL_GetTick>
 80051d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051d2:	e009      	b.n	80051e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051d4:	f7fd f89c 	bl	8002310 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d902      	bls.n	80051e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	73fb      	strb	r3, [r7, #15]
        break;
 80051e6:	e005      	b.n	80051f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051e8:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1ef      	bne.n	80051d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d15f      	bne.n	80052ba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d110      	bne.n	8005222 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005200:	4b30      	ldr	r3, [pc, #192]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005208:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6892      	ldr	r2, [r2, #8]
 8005210:	0211      	lsls	r1, r2, #8
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68d2      	ldr	r2, [r2, #12]
 8005216:	06d2      	lsls	r2, r2, #27
 8005218:	430a      	orrs	r2, r1
 800521a:	492a      	ldr	r1, [pc, #168]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800521c:	4313      	orrs	r3, r2
 800521e:	610b      	str	r3, [r1, #16]
 8005220:	e027      	b.n	8005272 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d112      	bne.n	800524e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005228:	4b26      	ldr	r3, [pc, #152]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005230:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6892      	ldr	r2, [r2, #8]
 8005238:	0211      	lsls	r1, r2, #8
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6912      	ldr	r2, [r2, #16]
 800523e:	0852      	lsrs	r2, r2, #1
 8005240:	3a01      	subs	r2, #1
 8005242:	0552      	lsls	r2, r2, #21
 8005244:	430a      	orrs	r2, r1
 8005246:	491f      	ldr	r1, [pc, #124]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005248:	4313      	orrs	r3, r2
 800524a:	610b      	str	r3, [r1, #16]
 800524c:	e011      	b.n	8005272 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800524e:	4b1d      	ldr	r3, [pc, #116]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005256:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6892      	ldr	r2, [r2, #8]
 800525e:	0211      	lsls	r1, r2, #8
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6952      	ldr	r2, [r2, #20]
 8005264:	0852      	lsrs	r2, r2, #1
 8005266:	3a01      	subs	r2, #1
 8005268:	0652      	lsls	r2, r2, #25
 800526a:	430a      	orrs	r2, r1
 800526c:	4915      	ldr	r1, [pc, #84]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800526e:	4313      	orrs	r3, r2
 8005270:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005272:	4b14      	ldr	r3, [pc, #80]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a13      	ldr	r2, [pc, #76]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005278:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800527c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527e:	f7fd f847 	bl	8002310 <HAL_GetTick>
 8005282:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005284:	e009      	b.n	800529a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005286:	f7fd f843 	bl	8002310 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d902      	bls.n	800529a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	73fb      	strb	r3, [r7, #15]
          break;
 8005298:	e005      	b.n	80052a6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800529a:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0ef      	beq.n	8005286 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052ac:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	4903      	ldr	r1, [pc, #12]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40021000 	.word	0x40021000

080052c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e049      	b.n	800536e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fc fdb4 	bl	8001e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3304      	adds	r3, #4
 8005304:	4619      	mov	r1, r3
 8005306:	4610      	mov	r0, r2
 8005308:	f000 fbba 	bl	8005a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b01      	cmp	r3, #1
 800538a:	d001      	beq.n	8005390 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e033      	b.n	80053f8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a19      	ldr	r2, [pc, #100]	; (8005404 <HAL_TIM_Base_Start+0x8c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d009      	beq.n	80053b6 <HAL_TIM_Base_Start+0x3e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053aa:	d004      	beq.n	80053b6 <HAL_TIM_Base_Start+0x3e>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a15      	ldr	r2, [pc, #84]	; (8005408 <HAL_TIM_Base_Start+0x90>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d115      	bne.n	80053e2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	4b13      	ldr	r3, [pc, #76]	; (800540c <HAL_TIM_Base_Start+0x94>)
 80053be:	4013      	ands	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b06      	cmp	r3, #6
 80053c6:	d015      	beq.n	80053f4 <HAL_TIM_Base_Start+0x7c>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ce:	d011      	beq.n	80053f4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e0:	e008      	b.n	80053f4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f042 0201 	orr.w	r2, r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	e000      	b.n	80053f6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40014000 	.word	0x40014000
 800540c:	00010007 	.word	0x00010007

08005410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b01      	cmp	r3, #1
 8005422:	d001      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e03b      	b.n	80054a0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0201 	orr.w	r2, r2, #1
 800543e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a19      	ldr	r2, [pc, #100]	; (80054ac <HAL_TIM_Base_Start_IT+0x9c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d009      	beq.n	800545e <HAL_TIM_Base_Start_IT+0x4e>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005452:	d004      	beq.n	800545e <HAL_TIM_Base_Start_IT+0x4e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a15      	ldr	r2, [pc, #84]	; (80054b0 <HAL_TIM_Base_Start_IT+0xa0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d115      	bne.n	800548a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <HAL_TIM_Base_Start_IT+0xa4>)
 8005466:	4013      	ands	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b06      	cmp	r3, #6
 800546e:	d015      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x8c>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005476:	d011      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005488:	e008      	b.n	800549c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0201 	orr.w	r2, r2, #1
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	e000      	b.n	800549e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	40012c00 	.word	0x40012c00
 80054b0:	40014000 	.word	0x40014000
 80054b4:	00010007 	.word	0x00010007

080054b8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e049      	b.n	800555e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f841 	bl	8005566 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3304      	adds	r3, #4
 80054f4:	4619      	mov	r1, r3
 80054f6:	4610      	mov	r0, r2
 80054f8:	f000 fac2 	bl	8005a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b02      	cmp	r3, #2
 800558e:	d122      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b02      	cmp	r3, #2
 800559c:	d11b      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f06f 0202 	mvn.w	r2, #2
 80055a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fa41 	bl	8005a44 <HAL_TIM_IC_CaptureCallback>
 80055c2:	e005      	b.n	80055d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fa33 	bl	8005a30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fa44 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d122      	bne.n	800562a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d11b      	bne.n	800562a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f06f 0204 	mvn.w	r2, #4
 80055fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fa17 	bl	8005a44 <HAL_TIM_IC_CaptureCallback>
 8005616:	e005      	b.n	8005624 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fa09 	bl	8005a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa1a 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b08      	cmp	r3, #8
 8005636:	d122      	bne.n	800567e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b08      	cmp	r3, #8
 8005644:	d11b      	bne.n	800567e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f06f 0208 	mvn.w	r2, #8
 800564e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2204      	movs	r2, #4
 8005654:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f003 0303 	and.w	r3, r3, #3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f9ed 	bl	8005a44 <HAL_TIM_IC_CaptureCallback>
 800566a:	e005      	b.n	8005678 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f9df 	bl	8005a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f9f0 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f003 0310 	and.w	r3, r3, #16
 8005688:	2b10      	cmp	r3, #16
 800568a:	d122      	bne.n	80056d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b10      	cmp	r3, #16
 8005698:	d11b      	bne.n	80056d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f06f 0210 	mvn.w	r2, #16
 80056a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2208      	movs	r2, #8
 80056a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f9c3 	bl	8005a44 <HAL_TIM_IC_CaptureCallback>
 80056be:	e005      	b.n	80056cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f9b5 	bl	8005a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9c6 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d10e      	bne.n	80056fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d107      	bne.n	80056fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f06f 0201 	mvn.w	r2, #1
 80056f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7fc faf1 	bl	8001ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005708:	2b80      	cmp	r3, #128	; 0x80
 800570a:	d10e      	bne.n	800572a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005716:	2b80      	cmp	r3, #128	; 0x80
 8005718:	d107      	bne.n	800572a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fd97 	bl	8006258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005738:	d10e      	bne.n	8005758 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005744:	2b80      	cmp	r3, #128	; 0x80
 8005746:	d107      	bne.n	8005758 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fd8a 	bl	800626c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005762:	2b40      	cmp	r3, #64	; 0x40
 8005764:	d10e      	bne.n	8005784 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005770:	2b40      	cmp	r3, #64	; 0x40
 8005772:	d107      	bne.n	8005784 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800577c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f974 	bl	8005a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b20      	cmp	r3, #32
 8005790:	d10e      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b20      	cmp	r3, #32
 800579e:	d107      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0220 	mvn.w	r2, #32
 80057a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fd4a 	bl	8006244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057b0:	bf00      	nop
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e064      	b.n	800589c <HAL_TIM_OC_ConfigChannel+0xe4>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b14      	cmp	r3, #20
 80057de:	d857      	bhi.n	8005890 <HAL_TIM_OC_ConfigChannel+0xd8>
 80057e0:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <HAL_TIM_OC_ConfigChannel+0x30>)
 80057e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e6:	bf00      	nop
 80057e8:	0800583d 	.word	0x0800583d
 80057ec:	08005891 	.word	0x08005891
 80057f0:	08005891 	.word	0x08005891
 80057f4:	08005891 	.word	0x08005891
 80057f8:	0800584b 	.word	0x0800584b
 80057fc:	08005891 	.word	0x08005891
 8005800:	08005891 	.word	0x08005891
 8005804:	08005891 	.word	0x08005891
 8005808:	08005859 	.word	0x08005859
 800580c:	08005891 	.word	0x08005891
 8005810:	08005891 	.word	0x08005891
 8005814:	08005891 	.word	0x08005891
 8005818:	08005867 	.word	0x08005867
 800581c:	08005891 	.word	0x08005891
 8005820:	08005891 	.word	0x08005891
 8005824:	08005891 	.word	0x08005891
 8005828:	08005875 	.word	0x08005875
 800582c:	08005891 	.word	0x08005891
 8005830:	08005891 	.word	0x08005891
 8005834:	08005891 	.word	0x08005891
 8005838:	08005883 	.word	0x08005883
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 f980 	bl	8005b48 <TIM_OC1_SetConfig>
      break;
 8005848:	e023      	b.n	8005892 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	4618      	mov	r0, r3
 8005852:	f000 f9f5 	bl	8005c40 <TIM_OC2_SetConfig>
      break;
 8005856:	e01c      	b.n	8005892 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68b9      	ldr	r1, [r7, #8]
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fa68 	bl	8005d34 <TIM_OC3_SetConfig>
      break;
 8005864:	e015      	b.n	8005892 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	4618      	mov	r0, r3
 800586e:	f000 fad9 	bl	8005e24 <TIM_OC4_SetConfig>
      break;
 8005872:	e00e      	b.n	8005892 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68b9      	ldr	r1, [r7, #8]
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fb30 	bl	8005ee0 <TIM_OC5_SetConfig>
      break;
 8005880:	e007      	b.n	8005892 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fb81 	bl	8005f90 <TIM_OC6_SetConfig>
      break;
 800588e:	e000      	b.n	8005892 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8005890:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_TIM_ConfigClockSource+0x18>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e0b5      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x184>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f8:	d03e      	beq.n	8005978 <HAL_TIM_ConfigClockSource+0xd4>
 80058fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058fe:	f200 8087 	bhi.w	8005a10 <HAL_TIM_ConfigClockSource+0x16c>
 8005902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005906:	f000 8085 	beq.w	8005a14 <HAL_TIM_ConfigClockSource+0x170>
 800590a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590e:	d87f      	bhi.n	8005a10 <HAL_TIM_ConfigClockSource+0x16c>
 8005910:	2b70      	cmp	r3, #112	; 0x70
 8005912:	d01a      	beq.n	800594a <HAL_TIM_ConfigClockSource+0xa6>
 8005914:	2b70      	cmp	r3, #112	; 0x70
 8005916:	d87b      	bhi.n	8005a10 <HAL_TIM_ConfigClockSource+0x16c>
 8005918:	2b60      	cmp	r3, #96	; 0x60
 800591a:	d050      	beq.n	80059be <HAL_TIM_ConfigClockSource+0x11a>
 800591c:	2b60      	cmp	r3, #96	; 0x60
 800591e:	d877      	bhi.n	8005a10 <HAL_TIM_ConfigClockSource+0x16c>
 8005920:	2b50      	cmp	r3, #80	; 0x50
 8005922:	d03c      	beq.n	800599e <HAL_TIM_ConfigClockSource+0xfa>
 8005924:	2b50      	cmp	r3, #80	; 0x50
 8005926:	d873      	bhi.n	8005a10 <HAL_TIM_ConfigClockSource+0x16c>
 8005928:	2b40      	cmp	r3, #64	; 0x40
 800592a:	d058      	beq.n	80059de <HAL_TIM_ConfigClockSource+0x13a>
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	d86f      	bhi.n	8005a10 <HAL_TIM_ConfigClockSource+0x16c>
 8005930:	2b30      	cmp	r3, #48	; 0x30
 8005932:	d064      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x15a>
 8005934:	2b30      	cmp	r3, #48	; 0x30
 8005936:	d86b      	bhi.n	8005a10 <HAL_TIM_ConfigClockSource+0x16c>
 8005938:	2b20      	cmp	r3, #32
 800593a:	d060      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x15a>
 800593c:	2b20      	cmp	r3, #32
 800593e:	d867      	bhi.n	8005a10 <HAL_TIM_ConfigClockSource+0x16c>
 8005940:	2b00      	cmp	r3, #0
 8005942:	d05c      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x15a>
 8005944:	2b10      	cmp	r3, #16
 8005946:	d05a      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005948:	e062      	b.n	8005a10 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	6899      	ldr	r1, [r3, #8]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f000 fbed 	bl	8006138 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800596c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	609a      	str	r2, [r3, #8]
      break;
 8005976:	e04e      	b.n	8005a16 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6818      	ldr	r0, [r3, #0]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	6899      	ldr	r1, [r3, #8]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f000 fbd6 	bl	8006138 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800599a:	609a      	str	r2, [r3, #8]
      break;
 800599c:	e03b      	b.n	8005a16 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6818      	ldr	r0, [r3, #0]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	6859      	ldr	r1, [r3, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	461a      	mov	r2, r3
 80059ac:	f000 fb4a 	bl	8006044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2150      	movs	r1, #80	; 0x50
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fba3 	bl	8006102 <TIM_ITRx_SetConfig>
      break;
 80059bc:	e02b      	b.n	8005a16 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	6859      	ldr	r1, [r3, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	461a      	mov	r2, r3
 80059cc:	f000 fb69 	bl	80060a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2160      	movs	r1, #96	; 0x60
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fb93 	bl	8006102 <TIM_ITRx_SetConfig>
      break;
 80059dc:	e01b      	b.n	8005a16 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	6859      	ldr	r1, [r3, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	461a      	mov	r2, r3
 80059ec:	f000 fb2a 	bl	8006044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2140      	movs	r1, #64	; 0x40
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fb83 	bl	8006102 <TIM_ITRx_SetConfig>
      break;
 80059fc:	e00b      	b.n	8005a16 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4619      	mov	r1, r3
 8005a08:	4610      	mov	r0, r2
 8005a0a:	f000 fb7a 	bl	8006102 <TIM_ITRx_SetConfig>
        break;
 8005a0e:	e002      	b.n	8005a16 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005a10:	bf00      	nop
 8005a12:	e000      	b.n	8005a16 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005a14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a2a      	ldr	r2, [pc, #168]	; (8005b3c <TIM_Base_SetConfig+0xbc>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_Base_SetConfig+0x20>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9e:	d108      	bne.n	8005ab2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a21      	ldr	r2, [pc, #132]	; (8005b3c <TIM_Base_SetConfig+0xbc>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00b      	beq.n	8005ad2 <TIM_Base_SetConfig+0x52>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac0:	d007      	beq.n	8005ad2 <TIM_Base_SetConfig+0x52>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a1e      	ldr	r2, [pc, #120]	; (8005b40 <TIM_Base_SetConfig+0xc0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_Base_SetConfig+0x52>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a1d      	ldr	r2, [pc, #116]	; (8005b44 <TIM_Base_SetConfig+0xc4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d108      	bne.n	8005ae4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a0c      	ldr	r2, [pc, #48]	; (8005b3c <TIM_Base_SetConfig+0xbc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d007      	beq.n	8005b20 <TIM_Base_SetConfig+0xa0>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a0b      	ldr	r2, [pc, #44]	; (8005b40 <TIM_Base_SetConfig+0xc0>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d003      	beq.n	8005b20 <TIM_Base_SetConfig+0xa0>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a0a      	ldr	r2, [pc, #40]	; (8005b44 <TIM_Base_SetConfig+0xc4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d103      	bne.n	8005b28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	615a      	str	r2, [r3, #20]
}
 8005b2e:	bf00      	nop
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40012c00 	.word	0x40012c00
 8005b40:	40014000 	.word	0x40014000
 8005b44:	40014400 	.word	0x40014400

08005b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	f023 0201 	bic.w	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0303 	bic.w	r3, r3, #3
 8005b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f023 0302 	bic.w	r3, r3, #2
 8005b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a24      	ldr	r2, [pc, #144]	; (8005c34 <TIM_OC1_SetConfig+0xec>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d007      	beq.n	8005bb8 <TIM_OC1_SetConfig+0x70>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a23      	ldr	r2, [pc, #140]	; (8005c38 <TIM_OC1_SetConfig+0xf0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_OC1_SetConfig+0x70>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a22      	ldr	r2, [pc, #136]	; (8005c3c <TIM_OC1_SetConfig+0xf4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d10c      	bne.n	8005bd2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f023 0308 	bic.w	r3, r3, #8
 8005bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f023 0304 	bic.w	r3, r3, #4
 8005bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a17      	ldr	r2, [pc, #92]	; (8005c34 <TIM_OC1_SetConfig+0xec>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d007      	beq.n	8005bea <TIM_OC1_SetConfig+0xa2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a16      	ldr	r2, [pc, #88]	; (8005c38 <TIM_OC1_SetConfig+0xf0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d003      	beq.n	8005bea <TIM_OC1_SetConfig+0xa2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a15      	ldr	r2, [pc, #84]	; (8005c3c <TIM_OC1_SetConfig+0xf4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d111      	bne.n	8005c0e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	621a      	str	r2, [r3, #32]
}
 8005c28:	bf00      	nop
 8005c2a:	371c      	adds	r7, #28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	40012c00 	.word	0x40012c00
 8005c38:	40014000 	.word	0x40014000
 8005c3c:	40014400 	.word	0x40014400

08005c40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f023 0210 	bic.w	r2, r3, #16
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f023 0320 	bic.w	r3, r3, #32
 8005c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a22      	ldr	r2, [pc, #136]	; (8005d28 <TIM_OC2_SetConfig+0xe8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d10d      	bne.n	8005cc0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005caa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a19      	ldr	r2, [pc, #100]	; (8005d28 <TIM_OC2_SetConfig+0xe8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d007      	beq.n	8005cd8 <TIM_OC2_SetConfig+0x98>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a18      	ldr	r2, [pc, #96]	; (8005d2c <TIM_OC2_SetConfig+0xec>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d003      	beq.n	8005cd8 <TIM_OC2_SetConfig+0x98>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a17      	ldr	r2, [pc, #92]	; (8005d30 <TIM_OC2_SetConfig+0xf0>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d113      	bne.n	8005d00 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	621a      	str	r2, [r3, #32]
}
 8005d1a:	bf00      	nop
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40012c00 	.word	0x40012c00
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	40014400 	.word	0x40014400

08005d34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0303 	bic.w	r3, r3, #3
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a21      	ldr	r2, [pc, #132]	; (8005e18 <TIM_OC3_SetConfig+0xe4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d10d      	bne.n	8005db2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a18      	ldr	r2, [pc, #96]	; (8005e18 <TIM_OC3_SetConfig+0xe4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d007      	beq.n	8005dca <TIM_OC3_SetConfig+0x96>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a17      	ldr	r2, [pc, #92]	; (8005e1c <TIM_OC3_SetConfig+0xe8>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d003      	beq.n	8005dca <TIM_OC3_SetConfig+0x96>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a16      	ldr	r2, [pc, #88]	; (8005e20 <TIM_OC3_SetConfig+0xec>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d113      	bne.n	8005df2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	621a      	str	r2, [r3, #32]
}
 8005e0c:	bf00      	nop
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	40012c00 	.word	0x40012c00
 8005e1c:	40014000 	.word	0x40014000
 8005e20:	40014400 	.word	0x40014400

08005e24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	021b      	lsls	r3, r3, #8
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	031b      	lsls	r3, r3, #12
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a14      	ldr	r2, [pc, #80]	; (8005ed4 <TIM_OC4_SetConfig+0xb0>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d007      	beq.n	8005e98 <TIM_OC4_SetConfig+0x74>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a13      	ldr	r2, [pc, #76]	; (8005ed8 <TIM_OC4_SetConfig+0xb4>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d003      	beq.n	8005e98 <TIM_OC4_SetConfig+0x74>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a12      	ldr	r2, [pc, #72]	; (8005edc <TIM_OC4_SetConfig+0xb8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d109      	bne.n	8005eac <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	019b      	lsls	r3, r3, #6
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	621a      	str	r2, [r3, #32]
}
 8005ec6:	bf00      	nop
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40012c00 	.word	0x40012c00
 8005ed8:	40014000 	.word	0x40014000
 8005edc:	40014400 	.word	0x40014400

08005ee0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	041b      	lsls	r3, r3, #16
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a13      	ldr	r2, [pc, #76]	; (8005f84 <TIM_OC5_SetConfig+0xa4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d007      	beq.n	8005f4a <TIM_OC5_SetConfig+0x6a>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a12      	ldr	r2, [pc, #72]	; (8005f88 <TIM_OC5_SetConfig+0xa8>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d003      	beq.n	8005f4a <TIM_OC5_SetConfig+0x6a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a11      	ldr	r2, [pc, #68]	; (8005f8c <TIM_OC5_SetConfig+0xac>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d109      	bne.n	8005f5e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	021b      	lsls	r3, r3, #8
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	621a      	str	r2, [r3, #32]
}
 8005f78:	bf00      	nop
 8005f7a:	371c      	adds	r7, #28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	40012c00 	.word	0x40012c00
 8005f88:	40014000 	.word	0x40014000
 8005f8c:	40014400 	.word	0x40014400

08005f90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	021b      	lsls	r3, r3, #8
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	051b      	lsls	r3, r3, #20
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a14      	ldr	r2, [pc, #80]	; (8006038 <TIM_OC6_SetConfig+0xa8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d007      	beq.n	8005ffc <TIM_OC6_SetConfig+0x6c>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a13      	ldr	r2, [pc, #76]	; (800603c <TIM_OC6_SetConfig+0xac>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d003      	beq.n	8005ffc <TIM_OC6_SetConfig+0x6c>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a12      	ldr	r2, [pc, #72]	; (8006040 <TIM_OC6_SetConfig+0xb0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d109      	bne.n	8006010 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006002:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	029b      	lsls	r3, r3, #10
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	621a      	str	r2, [r3, #32]
}
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40012c00 	.word	0x40012c00
 800603c:	40014000 	.word	0x40014000
 8006040:	40014400 	.word	0x40014400

08006044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	f023 0201 	bic.w	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800606e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f023 030a 	bic.w	r3, r3, #10
 8006080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	621a      	str	r2, [r3, #32]
}
 8006096:	bf00      	nop
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b087      	sub	sp, #28
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	60b9      	str	r1, [r7, #8]
 80060ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	f023 0210 	bic.w	r2, r3, #16
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	031b      	lsls	r3, r3, #12
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	621a      	str	r2, [r3, #32]
}
 80060f6:	bf00      	nop
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006102:	b480      	push	{r7}
 8006104:	b085      	sub	sp, #20
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006118:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	f043 0307 	orr.w	r3, r3, #7
 8006124:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	609a      	str	r2, [r3, #8]
}
 800612c:	bf00      	nop
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006152:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	021a      	lsls	r2, r3, #8
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	431a      	orrs	r2, r3
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	4313      	orrs	r3, r2
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4313      	orrs	r3, r2
 8006164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	609a      	str	r2, [r3, #8]
}
 800616c:	bf00      	nop
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006188:	2b01      	cmp	r3, #1
 800618a:	d101      	bne.n	8006190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800618c:	2302      	movs	r3, #2
 800618e:	e04f      	b.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a21      	ldr	r2, [pc, #132]	; (800623c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d108      	bne.n	80061cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a14      	ldr	r2, [pc, #80]	; (800623c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d009      	beq.n	8006204 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f8:	d004      	beq.n	8006204 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a10      	ldr	r2, [pc, #64]	; (8006240 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d10c      	bne.n	800621e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800620a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	4313      	orrs	r3, r2
 8006214:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	40012c00 	.word	0x40012c00
 8006240:	40014000 	.word	0x40014000

08006244 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e040      	b.n	8006314 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006296:	2b00      	cmp	r3, #0
 8006298:	d106      	bne.n	80062a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7fb fe12 	bl	8001ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2224      	movs	r2, #36	; 0x24
 80062ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0201 	bic.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f992 	bl	80065e8 <UART_SetConfig>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d101      	bne.n	80062ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e022      	b.n	8006314 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fb92 	bl	8006a00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689a      	ldr	r2, [r3, #8]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0201 	orr.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fc19 	bl	8006b44 <UART_CheckIdleState>
 8006312:	4603      	mov	r3, r0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b08a      	sub	sp, #40	; 0x28
 8006320:	af02      	add	r7, sp, #8
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	4613      	mov	r3, r2
 800632a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006330:	2b20      	cmp	r3, #32
 8006332:	f040 8082 	bne.w	800643a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <HAL_UART_Transmit+0x26>
 800633c:	88fb      	ldrh	r3, [r7, #6]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e07a      	b.n	800643c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_UART_Transmit+0x38>
 8006350:	2302      	movs	r3, #2
 8006352:	e073      	b.n	800643c <HAL_UART_Transmit+0x120>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2221      	movs	r2, #33	; 0x21
 8006368:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800636a:	f7fb ffd1 	bl	8002310 <HAL_GetTick>
 800636e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	88fa      	ldrh	r2, [r7, #6]
 8006374:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	88fa      	ldrh	r2, [r7, #6]
 800637c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006388:	d108      	bne.n	800639c <HAL_UART_Transmit+0x80>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d104      	bne.n	800639c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006392:	2300      	movs	r3, #0
 8006394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	e003      	b.n	80063a4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063a0:	2300      	movs	r3, #0
 80063a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80063ac:	e02d      	b.n	800640a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2200      	movs	r2, #0
 80063b6:	2180      	movs	r1, #128	; 0x80
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 fc0c 	bl	8006bd6 <UART_WaitOnFlagUntilTimeout>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e039      	b.n	800643c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10b      	bne.n	80063e6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	881a      	ldrh	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063da:	b292      	uxth	r2, r2
 80063dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	3302      	adds	r3, #2
 80063e2:	61bb      	str	r3, [r7, #24]
 80063e4:	e008      	b.n	80063f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	781a      	ldrb	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	b292      	uxth	r2, r2
 80063f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	3301      	adds	r3, #1
 80063f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006410:	b29b      	uxth	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1cb      	bne.n	80063ae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2200      	movs	r2, #0
 800641e:	2140      	movs	r1, #64	; 0x40
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fbd8 	bl	8006bd6 <UART_WaitOnFlagUntilTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e005      	b.n	800643c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2220      	movs	r2, #32
 8006434:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	e000      	b.n	800643c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800643a:	2302      	movs	r3, #2
  }
}
 800643c:	4618      	mov	r0, r3
 800643e:	3720      	adds	r7, #32
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08a      	sub	sp, #40	; 0x28
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	4613      	mov	r3, r2
 8006452:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006458:	2b20      	cmp	r3, #32
 800645a:	f040 80bf 	bne.w	80065dc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <HAL_UART_Receive+0x26>
 8006464:	88fb      	ldrh	r3, [r7, #6]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e0b7      	b.n	80065de <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_UART_Receive+0x38>
 8006478:	2302      	movs	r3, #2
 800647a:	e0b0      	b.n	80065de <HAL_UART_Receive+0x19a>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2222      	movs	r2, #34	; 0x22
 8006490:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006498:	f7fb ff3a 	bl	8002310 <HAL_GetTick>
 800649c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	88fa      	ldrh	r2, [r7, #6]
 80064a2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	88fa      	ldrh	r2, [r7, #6]
 80064aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b6:	d10e      	bne.n	80064d6 <HAL_UART_Receive+0x92>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d105      	bne.n	80064cc <HAL_UART_Receive+0x88>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80064c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064ca:	e02d      	b.n	8006528 <HAL_UART_Receive+0xe4>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	22ff      	movs	r2, #255	; 0xff
 80064d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064d4:	e028      	b.n	8006528 <HAL_UART_Receive+0xe4>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10d      	bne.n	80064fa <HAL_UART_Receive+0xb6>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d104      	bne.n	80064f0 <HAL_UART_Receive+0xac>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	22ff      	movs	r2, #255	; 0xff
 80064ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064ee:	e01b      	b.n	8006528 <HAL_UART_Receive+0xe4>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	227f      	movs	r2, #127	; 0x7f
 80064f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064f8:	e016      	b.n	8006528 <HAL_UART_Receive+0xe4>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006502:	d10d      	bne.n	8006520 <HAL_UART_Receive+0xdc>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d104      	bne.n	8006516 <HAL_UART_Receive+0xd2>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	227f      	movs	r2, #127	; 0x7f
 8006510:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006514:	e008      	b.n	8006528 <HAL_UART_Receive+0xe4>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	223f      	movs	r2, #63	; 0x3f
 800651a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800651e:	e003      	b.n	8006528 <HAL_UART_Receive+0xe4>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800652e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006538:	d108      	bne.n	800654c <HAL_UART_Receive+0x108>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d104      	bne.n	800654c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006542:	2300      	movs	r3, #0
 8006544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	61bb      	str	r3, [r7, #24]
 800654a:	e003      	b.n	8006554 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006550:	2300      	movs	r3, #0
 8006552:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800655c:	e033      	b.n	80065c6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2200      	movs	r2, #0
 8006566:	2120      	movs	r1, #32
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fb34 	bl	8006bd6 <UART_WaitOnFlagUntilTimeout>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e032      	b.n	80065de <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10c      	bne.n	8006598 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006584:	b29a      	uxth	r2, r3
 8006586:	8a7b      	ldrh	r3, [r7, #18]
 8006588:	4013      	ands	r3, r2
 800658a:	b29a      	uxth	r2, r3
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	3302      	adds	r3, #2
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	e00d      	b.n	80065b4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800659e:	b29b      	uxth	r3, r3
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	8a7b      	ldrh	r3, [r7, #18]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	4013      	ands	r3, r2
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	3301      	adds	r3, #1
 80065b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1c5      	bne.n	800655e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2220      	movs	r2, #32
 80065d6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80065d8:	2300      	movs	r3, #0
 80065da:	e000      	b.n	80065de <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80065dc:	2302      	movs	r3, #2
  }
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3720      	adds	r7, #32
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065e8:	b5b0      	push	{r4, r5, r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	431a      	orrs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	4313      	orrs	r3, r2
 800660a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	4baf      	ldr	r3, [pc, #700]	; (80068d0 <UART_SetConfig+0x2e8>)
 8006614:	4013      	ands	r3, r2
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6812      	ldr	r2, [r2, #0]
 800661a:	69f9      	ldr	r1, [r7, #28]
 800661c:	430b      	orrs	r3, r1
 800661e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4aa4      	ldr	r2, [pc, #656]	; (80068d4 <UART_SetConfig+0x2ec>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d004      	beq.n	8006650 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	4313      	orrs	r3, r2
 800664e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	430a      	orrs	r2, r1
 8006662:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a9b      	ldr	r2, [pc, #620]	; (80068d8 <UART_SetConfig+0x2f0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d121      	bne.n	80066b2 <UART_SetConfig+0xca>
 800666e:	4b9b      	ldr	r3, [pc, #620]	; (80068dc <UART_SetConfig+0x2f4>)
 8006670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006674:	f003 0303 	and.w	r3, r3, #3
 8006678:	2b03      	cmp	r3, #3
 800667a:	d817      	bhi.n	80066ac <UART_SetConfig+0xc4>
 800667c:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <UART_SetConfig+0x9c>)
 800667e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006682:	bf00      	nop
 8006684:	08006695 	.word	0x08006695
 8006688:	080066a1 	.word	0x080066a1
 800668c:	0800669b 	.word	0x0800669b
 8006690:	080066a7 	.word	0x080066a7
 8006694:	2301      	movs	r3, #1
 8006696:	76fb      	strb	r3, [r7, #27]
 8006698:	e070      	b.n	800677c <UART_SetConfig+0x194>
 800669a:	2302      	movs	r3, #2
 800669c:	76fb      	strb	r3, [r7, #27]
 800669e:	e06d      	b.n	800677c <UART_SetConfig+0x194>
 80066a0:	2304      	movs	r3, #4
 80066a2:	76fb      	strb	r3, [r7, #27]
 80066a4:	e06a      	b.n	800677c <UART_SetConfig+0x194>
 80066a6:	2308      	movs	r3, #8
 80066a8:	76fb      	strb	r3, [r7, #27]
 80066aa:	e067      	b.n	800677c <UART_SetConfig+0x194>
 80066ac:	2310      	movs	r3, #16
 80066ae:	76fb      	strb	r3, [r7, #27]
 80066b0:	e064      	b.n	800677c <UART_SetConfig+0x194>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a8a      	ldr	r2, [pc, #552]	; (80068e0 <UART_SetConfig+0x2f8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d132      	bne.n	8006722 <UART_SetConfig+0x13a>
 80066bc:	4b87      	ldr	r3, [pc, #540]	; (80068dc <UART_SetConfig+0x2f4>)
 80066be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c2:	f003 030c 	and.w	r3, r3, #12
 80066c6:	2b0c      	cmp	r3, #12
 80066c8:	d828      	bhi.n	800671c <UART_SetConfig+0x134>
 80066ca:	a201      	add	r2, pc, #4	; (adr r2, 80066d0 <UART_SetConfig+0xe8>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	08006705 	.word	0x08006705
 80066d4:	0800671d 	.word	0x0800671d
 80066d8:	0800671d 	.word	0x0800671d
 80066dc:	0800671d 	.word	0x0800671d
 80066e0:	08006711 	.word	0x08006711
 80066e4:	0800671d 	.word	0x0800671d
 80066e8:	0800671d 	.word	0x0800671d
 80066ec:	0800671d 	.word	0x0800671d
 80066f0:	0800670b 	.word	0x0800670b
 80066f4:	0800671d 	.word	0x0800671d
 80066f8:	0800671d 	.word	0x0800671d
 80066fc:	0800671d 	.word	0x0800671d
 8006700:	08006717 	.word	0x08006717
 8006704:	2300      	movs	r3, #0
 8006706:	76fb      	strb	r3, [r7, #27]
 8006708:	e038      	b.n	800677c <UART_SetConfig+0x194>
 800670a:	2302      	movs	r3, #2
 800670c:	76fb      	strb	r3, [r7, #27]
 800670e:	e035      	b.n	800677c <UART_SetConfig+0x194>
 8006710:	2304      	movs	r3, #4
 8006712:	76fb      	strb	r3, [r7, #27]
 8006714:	e032      	b.n	800677c <UART_SetConfig+0x194>
 8006716:	2308      	movs	r3, #8
 8006718:	76fb      	strb	r3, [r7, #27]
 800671a:	e02f      	b.n	800677c <UART_SetConfig+0x194>
 800671c:	2310      	movs	r3, #16
 800671e:	76fb      	strb	r3, [r7, #27]
 8006720:	e02c      	b.n	800677c <UART_SetConfig+0x194>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a6b      	ldr	r2, [pc, #428]	; (80068d4 <UART_SetConfig+0x2ec>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d125      	bne.n	8006778 <UART_SetConfig+0x190>
 800672c:	4b6b      	ldr	r3, [pc, #428]	; (80068dc <UART_SetConfig+0x2f4>)
 800672e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006732:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006736:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800673a:	d017      	beq.n	800676c <UART_SetConfig+0x184>
 800673c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006740:	d817      	bhi.n	8006772 <UART_SetConfig+0x18a>
 8006742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006746:	d00b      	beq.n	8006760 <UART_SetConfig+0x178>
 8006748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800674c:	d811      	bhi.n	8006772 <UART_SetConfig+0x18a>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <UART_SetConfig+0x172>
 8006752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006756:	d006      	beq.n	8006766 <UART_SetConfig+0x17e>
 8006758:	e00b      	b.n	8006772 <UART_SetConfig+0x18a>
 800675a:	2300      	movs	r3, #0
 800675c:	76fb      	strb	r3, [r7, #27]
 800675e:	e00d      	b.n	800677c <UART_SetConfig+0x194>
 8006760:	2302      	movs	r3, #2
 8006762:	76fb      	strb	r3, [r7, #27]
 8006764:	e00a      	b.n	800677c <UART_SetConfig+0x194>
 8006766:	2304      	movs	r3, #4
 8006768:	76fb      	strb	r3, [r7, #27]
 800676a:	e007      	b.n	800677c <UART_SetConfig+0x194>
 800676c:	2308      	movs	r3, #8
 800676e:	76fb      	strb	r3, [r7, #27]
 8006770:	e004      	b.n	800677c <UART_SetConfig+0x194>
 8006772:	2310      	movs	r3, #16
 8006774:	76fb      	strb	r3, [r7, #27]
 8006776:	e001      	b.n	800677c <UART_SetConfig+0x194>
 8006778:	2310      	movs	r3, #16
 800677a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a54      	ldr	r2, [pc, #336]	; (80068d4 <UART_SetConfig+0x2ec>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d173      	bne.n	800686e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006786:	7efb      	ldrb	r3, [r7, #27]
 8006788:	2b08      	cmp	r3, #8
 800678a:	d824      	bhi.n	80067d6 <UART_SetConfig+0x1ee>
 800678c:	a201      	add	r2, pc, #4	; (adr r2, 8006794 <UART_SetConfig+0x1ac>)
 800678e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006792:	bf00      	nop
 8006794:	080067b9 	.word	0x080067b9
 8006798:	080067d7 	.word	0x080067d7
 800679c:	080067c1 	.word	0x080067c1
 80067a0:	080067d7 	.word	0x080067d7
 80067a4:	080067c7 	.word	0x080067c7
 80067a8:	080067d7 	.word	0x080067d7
 80067ac:	080067d7 	.word	0x080067d7
 80067b0:	080067d7 	.word	0x080067d7
 80067b4:	080067cf 	.word	0x080067cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b8:	f7fe fa04 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
 80067bc:	6178      	str	r0, [r7, #20]
        break;
 80067be:	e00f      	b.n	80067e0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067c0:	4b48      	ldr	r3, [pc, #288]	; (80068e4 <UART_SetConfig+0x2fc>)
 80067c2:	617b      	str	r3, [r7, #20]
        break;
 80067c4:	e00c      	b.n	80067e0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067c6:	f7fe f965 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 80067ca:	6178      	str	r0, [r7, #20]
        break;
 80067cc:	e008      	b.n	80067e0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067d2:	617b      	str	r3, [r7, #20]
        break;
 80067d4:	e004      	b.n	80067e0 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	76bb      	strb	r3, [r7, #26]
        break;
 80067de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 80fe 	beq.w	80069e4 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	4613      	mov	r3, r2
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	4413      	add	r3, r2
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d305      	bcc.n	8006804 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	429a      	cmp	r2, r3
 8006802:	d902      	bls.n	800680a <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	76bb      	strb	r3, [r7, #26]
 8006808:	e0ec      	b.n	80069e4 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	4618      	mov	r0, r3
 800680e:	f04f 0100 	mov.w	r1, #0
 8006812:	f04f 0200 	mov.w	r2, #0
 8006816:	f04f 0300 	mov.w	r3, #0
 800681a:	020b      	lsls	r3, r1, #8
 800681c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006820:	0202      	lsls	r2, r0, #8
 8006822:	6879      	ldr	r1, [r7, #4]
 8006824:	6849      	ldr	r1, [r1, #4]
 8006826:	0849      	lsrs	r1, r1, #1
 8006828:	4608      	mov	r0, r1
 800682a:	f04f 0100 	mov.w	r1, #0
 800682e:	1814      	adds	r4, r2, r0
 8006830:	eb43 0501 	adc.w	r5, r3, r1
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	461a      	mov	r2, r3
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	4620      	mov	r0, r4
 8006840:	4629      	mov	r1, r5
 8006842:	f7fa fa01 	bl	8000c48 <__aeabi_uldivmod>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4613      	mov	r3, r2
 800684c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006854:	d308      	bcc.n	8006868 <UART_SetConfig+0x280>
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800685c:	d204      	bcs.n	8006868 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	60da      	str	r2, [r3, #12]
 8006866:	e0bd      	b.n	80069e4 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	76bb      	strb	r3, [r7, #26]
 800686c:	e0ba      	b.n	80069e4 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006876:	d168      	bne.n	800694a <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8006878:	7efb      	ldrb	r3, [r7, #27]
 800687a:	2b08      	cmp	r3, #8
 800687c:	d834      	bhi.n	80068e8 <UART_SetConfig+0x300>
 800687e:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <UART_SetConfig+0x29c>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	080068a9 	.word	0x080068a9
 8006888:	080068b1 	.word	0x080068b1
 800688c:	080068b9 	.word	0x080068b9
 8006890:	080068e9 	.word	0x080068e9
 8006894:	080068bf 	.word	0x080068bf
 8006898:	080068e9 	.word	0x080068e9
 800689c:	080068e9 	.word	0x080068e9
 80068a0:	080068e9 	.word	0x080068e9
 80068a4:	080068c7 	.word	0x080068c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a8:	f7fe f98c 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
 80068ac:	6178      	str	r0, [r7, #20]
        break;
 80068ae:	e020      	b.n	80068f2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068b0:	f7fe f99e 	bl	8004bf0 <HAL_RCC_GetPCLK2Freq>
 80068b4:	6178      	str	r0, [r7, #20]
        break;
 80068b6:	e01c      	b.n	80068f2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068b8:	4b0a      	ldr	r3, [pc, #40]	; (80068e4 <UART_SetConfig+0x2fc>)
 80068ba:	617b      	str	r3, [r7, #20]
        break;
 80068bc:	e019      	b.n	80068f2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068be:	f7fe f8e9 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 80068c2:	6178      	str	r0, [r7, #20]
        break;
 80068c4:	e015      	b.n	80068f2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ca:	617b      	str	r3, [r7, #20]
        break;
 80068cc:	e011      	b.n	80068f2 <UART_SetConfig+0x30a>
 80068ce:	bf00      	nop
 80068d0:	efff69f3 	.word	0xefff69f3
 80068d4:	40008000 	.word	0x40008000
 80068d8:	40013800 	.word	0x40013800
 80068dc:	40021000 	.word	0x40021000
 80068e0:	40004400 	.word	0x40004400
 80068e4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	76bb      	strb	r3, [r7, #26]
        break;
 80068f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d075      	beq.n	80069e4 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	005a      	lsls	r2, r3, #1
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	085b      	lsrs	r3, r3, #1
 8006902:	441a      	add	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	fbb2 f3f3 	udiv	r3, r2, r3
 800690c:	b29b      	uxth	r3, r3
 800690e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	2b0f      	cmp	r3, #15
 8006914:	d916      	bls.n	8006944 <UART_SetConfig+0x35c>
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800691c:	d212      	bcs.n	8006944 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	b29b      	uxth	r3, r3
 8006922:	f023 030f 	bic.w	r3, r3, #15
 8006926:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	085b      	lsrs	r3, r3, #1
 800692c:	b29b      	uxth	r3, r3
 800692e:	f003 0307 	and.w	r3, r3, #7
 8006932:	b29a      	uxth	r2, r3
 8006934:	89fb      	ldrh	r3, [r7, #14]
 8006936:	4313      	orrs	r3, r2
 8006938:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	89fa      	ldrh	r2, [r7, #14]
 8006940:	60da      	str	r2, [r3, #12]
 8006942:	e04f      	b.n	80069e4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	76bb      	strb	r3, [r7, #26]
 8006948:	e04c      	b.n	80069e4 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800694a:	7efb      	ldrb	r3, [r7, #27]
 800694c:	2b08      	cmp	r3, #8
 800694e:	d828      	bhi.n	80069a2 <UART_SetConfig+0x3ba>
 8006950:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <UART_SetConfig+0x370>)
 8006952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006956:	bf00      	nop
 8006958:	0800697d 	.word	0x0800697d
 800695c:	08006985 	.word	0x08006985
 8006960:	0800698d 	.word	0x0800698d
 8006964:	080069a3 	.word	0x080069a3
 8006968:	08006993 	.word	0x08006993
 800696c:	080069a3 	.word	0x080069a3
 8006970:	080069a3 	.word	0x080069a3
 8006974:	080069a3 	.word	0x080069a3
 8006978:	0800699b 	.word	0x0800699b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800697c:	f7fe f922 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
 8006980:	6178      	str	r0, [r7, #20]
        break;
 8006982:	e013      	b.n	80069ac <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006984:	f7fe f934 	bl	8004bf0 <HAL_RCC_GetPCLK2Freq>
 8006988:	6178      	str	r0, [r7, #20]
        break;
 800698a:	e00f      	b.n	80069ac <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800698c:	4b1b      	ldr	r3, [pc, #108]	; (80069fc <UART_SetConfig+0x414>)
 800698e:	617b      	str	r3, [r7, #20]
        break;
 8006990:	e00c      	b.n	80069ac <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006992:	f7fe f87f 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 8006996:	6178      	str	r0, [r7, #20]
        break;
 8006998:	e008      	b.n	80069ac <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800699a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800699e:	617b      	str	r3, [r7, #20]
        break;
 80069a0:	e004      	b.n	80069ac <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	76bb      	strb	r3, [r7, #26]
        break;
 80069aa:	bf00      	nop
    }

    if (pclk != 0U)
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d018      	beq.n	80069e4 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	085a      	lsrs	r2, r3, #1
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	441a      	add	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	2b0f      	cmp	r3, #15
 80069cc:	d908      	bls.n	80069e0 <UART_SetConfig+0x3f8>
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d4:	d204      	bcs.n	80069e0 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	60da      	str	r2, [r3, #12]
 80069de:	e001      	b.n	80069e4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80069f0:	7ebb      	ldrb	r3, [r7, #26]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3720      	adds	r7, #32
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bdb0      	pop	{r4, r5, r7, pc}
 80069fa:	bf00      	nop
 80069fc:	00f42400 	.word	0x00f42400

08006a00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00a      	beq.n	8006a2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00a      	beq.n	8006a6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	f003 0308 	and.w	r3, r3, #8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	f003 0310 	and.w	r3, r3, #16
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00a      	beq.n	8006ab2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d01a      	beq.n	8006b16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006afe:	d10a      	bne.n	8006b16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00a      	beq.n	8006b38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	605a      	str	r2, [r3, #4]
  }
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b54:	f7fb fbdc 	bl	8002310 <HAL_GetTick>
 8006b58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d10e      	bne.n	8006b86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f82d 	bl	8006bd6 <UART_WaitOnFlagUntilTimeout>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e023      	b.n	8006bce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d10e      	bne.n	8006bb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f817 	bl	8006bd6 <UART_WaitOnFlagUntilTimeout>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e00d      	b.n	8006bce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	603b      	str	r3, [r7, #0]
 8006be2:	4613      	mov	r3, r2
 8006be4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006be6:	e05e      	b.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bee:	d05a      	beq.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bf0:	f7fb fb8e 	bl	8002310 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d302      	bcc.n	8006c06 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d11b      	bne.n	8006c3e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c14:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0201 	bic.w	r2, r2, #1
 8006c24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e043      	b.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d02c      	beq.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c5a:	d124      	bne.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c64:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c74:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 0201 	bic.w	r2, r2, #1
 8006c84:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e00f      	b.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69da      	ldr	r2, [r3, #28]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	4013      	ands	r3, r2
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	bf0c      	ite	eq
 8006cb6:	2301      	moveq	r3, #1
 8006cb8:	2300      	movne	r3, #0
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	79fb      	ldrb	r3, [r7, #7]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d091      	beq.n	8006be8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <__errno>:
 8006cd0:	4b01      	ldr	r3, [pc, #4]	; (8006cd8 <__errno+0x8>)
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	2000003c 	.word	0x2000003c

08006cdc <__libc_init_array>:
 8006cdc:	b570      	push	{r4, r5, r6, lr}
 8006cde:	4d0d      	ldr	r5, [pc, #52]	; (8006d14 <__libc_init_array+0x38>)
 8006ce0:	4c0d      	ldr	r4, [pc, #52]	; (8006d18 <__libc_init_array+0x3c>)
 8006ce2:	1b64      	subs	r4, r4, r5
 8006ce4:	10a4      	asrs	r4, r4, #2
 8006ce6:	2600      	movs	r6, #0
 8006ce8:	42a6      	cmp	r6, r4
 8006cea:	d109      	bne.n	8006d00 <__libc_init_array+0x24>
 8006cec:	4d0b      	ldr	r5, [pc, #44]	; (8006d1c <__libc_init_array+0x40>)
 8006cee:	4c0c      	ldr	r4, [pc, #48]	; (8006d20 <__libc_init_array+0x44>)
 8006cf0:	f005 ffa2 	bl	800cc38 <_init>
 8006cf4:	1b64      	subs	r4, r4, r5
 8006cf6:	10a4      	asrs	r4, r4, #2
 8006cf8:	2600      	movs	r6, #0
 8006cfa:	42a6      	cmp	r6, r4
 8006cfc:	d105      	bne.n	8006d0a <__libc_init_array+0x2e>
 8006cfe:	bd70      	pop	{r4, r5, r6, pc}
 8006d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d04:	4798      	blx	r3
 8006d06:	3601      	adds	r6, #1
 8006d08:	e7ee      	b.n	8006ce8 <__libc_init_array+0xc>
 8006d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d0e:	4798      	blx	r3
 8006d10:	3601      	adds	r6, #1
 8006d12:	e7f2      	b.n	8006cfa <__libc_init_array+0x1e>
 8006d14:	0800d0f4 	.word	0x0800d0f4
 8006d18:	0800d0f4 	.word	0x0800d0f4
 8006d1c:	0800d0f4 	.word	0x0800d0f4
 8006d20:	0800d0fc 	.word	0x0800d0fc

08006d24 <memset>:
 8006d24:	4402      	add	r2, r0
 8006d26:	4603      	mov	r3, r0
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d100      	bne.n	8006d2e <memset+0xa>
 8006d2c:	4770      	bx	lr
 8006d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d32:	e7f9      	b.n	8006d28 <memset+0x4>

08006d34 <printf>:
 8006d34:	b40f      	push	{r0, r1, r2, r3}
 8006d36:	b507      	push	{r0, r1, r2, lr}
 8006d38:	4906      	ldr	r1, [pc, #24]	; (8006d54 <printf+0x20>)
 8006d3a:	ab04      	add	r3, sp, #16
 8006d3c:	6808      	ldr	r0, [r1, #0]
 8006d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d42:	6881      	ldr	r1, [r0, #8]
 8006d44:	9301      	str	r3, [sp, #4]
 8006d46:	f001 fa07 	bl	8008158 <_vfprintf_r>
 8006d4a:	b003      	add	sp, #12
 8006d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d50:	b004      	add	sp, #16
 8006d52:	4770      	bx	lr
 8006d54:	2000003c 	.word	0x2000003c

08006d58 <sprintf>:
 8006d58:	b40e      	push	{r1, r2, r3}
 8006d5a:	b500      	push	{lr}
 8006d5c:	b09c      	sub	sp, #112	; 0x70
 8006d5e:	ab1d      	add	r3, sp, #116	; 0x74
 8006d60:	9002      	str	r0, [sp, #8]
 8006d62:	9006      	str	r0, [sp, #24]
 8006d64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d68:	4809      	ldr	r0, [pc, #36]	; (8006d90 <sprintf+0x38>)
 8006d6a:	9107      	str	r1, [sp, #28]
 8006d6c:	9104      	str	r1, [sp, #16]
 8006d6e:	4909      	ldr	r1, [pc, #36]	; (8006d94 <sprintf+0x3c>)
 8006d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d74:	9105      	str	r1, [sp, #20]
 8006d76:	6800      	ldr	r0, [r0, #0]
 8006d78:	9301      	str	r3, [sp, #4]
 8006d7a:	a902      	add	r1, sp, #8
 8006d7c:	f000 f80c 	bl	8006d98 <_svfprintf_r>
 8006d80:	9b02      	ldr	r3, [sp, #8]
 8006d82:	2200      	movs	r2, #0
 8006d84:	701a      	strb	r2, [r3, #0]
 8006d86:	b01c      	add	sp, #112	; 0x70
 8006d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d8c:	b003      	add	sp, #12
 8006d8e:	4770      	bx	lr
 8006d90:	2000003c 	.word	0x2000003c
 8006d94:	ffff0208 	.word	0xffff0208

08006d98 <_svfprintf_r>:
 8006d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9c:	ed2d 8b04 	vpush	{d8-d9}
 8006da0:	b0cf      	sub	sp, #316	; 0x13c
 8006da2:	4689      	mov	r9, r1
 8006da4:	4693      	mov	fp, r2
 8006da6:	461e      	mov	r6, r3
 8006da8:	4682      	mov	sl, r0
 8006daa:	f003 fd7f 	bl	800a8ac <_localeconv_r>
 8006dae:	6803      	ldr	r3, [r0, #0]
 8006db0:	9313      	str	r3, [sp, #76]	; 0x4c
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7f9 fa0c 	bl	80001d0 <strlen>
 8006db8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006dbc:	900e      	str	r0, [sp, #56]	; 0x38
 8006dbe:	0618      	lsls	r0, r3, #24
 8006dc0:	d51a      	bpl.n	8006df8 <_svfprintf_r+0x60>
 8006dc2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006dc6:	b9bb      	cbnz	r3, 8006df8 <_svfprintf_r+0x60>
 8006dc8:	2140      	movs	r1, #64	; 0x40
 8006dca:	4650      	mov	r0, sl
 8006dcc:	f003 fde2 	bl	800a994 <_malloc_r>
 8006dd0:	f8c9 0000 	str.w	r0, [r9]
 8006dd4:	f8c9 0010 	str.w	r0, [r9, #16]
 8006dd8:	b958      	cbnz	r0, 8006df2 <_svfprintf_r+0x5a>
 8006dda:	230c      	movs	r3, #12
 8006ddc:	f8ca 3000 	str.w	r3, [sl]
 8006de0:	f04f 33ff 	mov.w	r3, #4294967295
 8006de4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006de6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006de8:	b04f      	add	sp, #316	; 0x13c
 8006dea:	ecbd 8b04 	vpop	{d8-d9}
 8006dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df2:	2340      	movs	r3, #64	; 0x40
 8006df4:	f8c9 3014 	str.w	r3, [r9, #20]
 8006df8:	ed9f 7b93 	vldr	d7, [pc, #588]	; 8007048 <_svfprintf_r+0x2b0>
 8006dfc:	2500      	movs	r5, #0
 8006dfe:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8006e02:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006e06:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8006e0a:	ac25      	add	r4, sp, #148	; 0x94
 8006e0c:	9422      	str	r4, [sp, #136]	; 0x88
 8006e0e:	9505      	str	r5, [sp, #20]
 8006e10:	950a      	str	r5, [sp, #40]	; 0x28
 8006e12:	9512      	str	r5, [sp, #72]	; 0x48
 8006e14:	9514      	str	r5, [sp, #80]	; 0x50
 8006e16:	950f      	str	r5, [sp, #60]	; 0x3c
 8006e18:	465b      	mov	r3, fp
 8006e1a:	461d      	mov	r5, r3
 8006e1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e20:	b10a      	cbz	r2, 8006e26 <_svfprintf_r+0x8e>
 8006e22:	2a25      	cmp	r2, #37	; 0x25
 8006e24:	d1f9      	bne.n	8006e1a <_svfprintf_r+0x82>
 8006e26:	ebb5 070b 	subs.w	r7, r5, fp
 8006e2a:	d00d      	beq.n	8006e48 <_svfprintf_r+0xb0>
 8006e2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006e2e:	443b      	add	r3, r7
 8006e30:	9324      	str	r3, [sp, #144]	; 0x90
 8006e32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e34:	3301      	adds	r3, #1
 8006e36:	2b07      	cmp	r3, #7
 8006e38:	e9c4 b700 	strd	fp, r7, [r4]
 8006e3c:	9323      	str	r3, [sp, #140]	; 0x8c
 8006e3e:	dc79      	bgt.n	8006f34 <_svfprintf_r+0x19c>
 8006e40:	3408      	adds	r4, #8
 8006e42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e44:	443b      	add	r3, r7
 8006e46:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e48:	782b      	ldrb	r3, [r5, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f001 8140 	beq.w	80080d0 <_svfprintf_r+0x1338>
 8006e50:	2300      	movs	r3, #0
 8006e52:	f04f 32ff 	mov.w	r2, #4294967295
 8006e56:	3501      	adds	r5, #1
 8006e58:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006e5c:	9204      	str	r2, [sp, #16]
 8006e5e:	9310      	str	r3, [sp, #64]	; 0x40
 8006e60:	4698      	mov	r8, r3
 8006e62:	270a      	movs	r7, #10
 8006e64:	212b      	movs	r1, #43	; 0x2b
 8006e66:	462a      	mov	r2, r5
 8006e68:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006e6c:	9307      	str	r3, [sp, #28]
 8006e6e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006e70:	9b07      	ldr	r3, [sp, #28]
 8006e72:	3b20      	subs	r3, #32
 8006e74:	2b5a      	cmp	r3, #90	; 0x5a
 8006e76:	f200 85b4 	bhi.w	80079e2 <_svfprintf_r+0xc4a>
 8006e7a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006e7e:	007e      	.short	0x007e
 8006e80:	05b205b2 	.word	0x05b205b2
 8006e84:	05b20086 	.word	0x05b20086
 8006e88:	05b205b2 	.word	0x05b205b2
 8006e8c:	05b20065 	.word	0x05b20065
 8006e90:	008905b2 	.word	0x008905b2
 8006e94:	05b20093 	.word	0x05b20093
 8006e98:	00960090 	.word	0x00960090
 8006e9c:	00b305b2 	.word	0x00b305b2
 8006ea0:	00b600b6 	.word	0x00b600b6
 8006ea4:	00b600b6 	.word	0x00b600b6
 8006ea8:	00b600b6 	.word	0x00b600b6
 8006eac:	00b600b6 	.word	0x00b600b6
 8006eb0:	05b200b6 	.word	0x05b200b6
 8006eb4:	05b205b2 	.word	0x05b205b2
 8006eb8:	05b205b2 	.word	0x05b205b2
 8006ebc:	05b205b2 	.word	0x05b205b2
 8006ec0:	05b20127 	.word	0x05b20127
 8006ec4:	00fc00e9 	.word	0x00fc00e9
 8006ec8:	01270127 	.word	0x01270127
 8006ecc:	05b20127 	.word	0x05b20127
 8006ed0:	05b205b2 	.word	0x05b205b2
 8006ed4:	00c605b2 	.word	0x00c605b2
 8006ed8:	05b205b2 	.word	0x05b205b2
 8006edc:	05b20492 	.word	0x05b20492
 8006ee0:	05b205b2 	.word	0x05b205b2
 8006ee4:	05b204d9 	.word	0x05b204d9
 8006ee8:	05b204fa 	.word	0x05b204fa
 8006eec:	051905b2 	.word	0x051905b2
 8006ef0:	05b205b2 	.word	0x05b205b2
 8006ef4:	05b205b2 	.word	0x05b205b2
 8006ef8:	05b205b2 	.word	0x05b205b2
 8006efc:	05b205b2 	.word	0x05b205b2
 8006f00:	05b20127 	.word	0x05b20127
 8006f04:	00fe00e9 	.word	0x00fe00e9
 8006f08:	01270127 	.word	0x01270127
 8006f0c:	00c90127 	.word	0x00c90127
 8006f10:	00dd00fe 	.word	0x00dd00fe
 8006f14:	00d605b2 	.word	0x00d605b2
 8006f18:	046f05b2 	.word	0x046f05b2
 8006f1c:	04c80494 	.word	0x04c80494
 8006f20:	05b200dd 	.word	0x05b200dd
 8006f24:	007c04d9 	.word	0x007c04d9
 8006f28:	05b204fc 	.word	0x05b204fc
 8006f2c:	053605b2 	.word	0x053605b2
 8006f30:	007c05b2 	.word	0x007c05b2
 8006f34:	aa22      	add	r2, sp, #136	; 0x88
 8006f36:	4649      	mov	r1, r9
 8006f38:	4650      	mov	r0, sl
 8006f3a:	f004 fb55 	bl	800b5e8 <__ssprint_r>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	f040 8132 	bne.w	80071a8 <_svfprintf_r+0x410>
 8006f44:	ac25      	add	r4, sp, #148	; 0x94
 8006f46:	e77c      	b.n	8006e42 <_svfprintf_r+0xaa>
 8006f48:	4650      	mov	r0, sl
 8006f4a:	f003 fcaf 	bl	800a8ac <_localeconv_r>
 8006f4e:	6843      	ldr	r3, [r0, #4]
 8006f50:	9314      	str	r3, [sp, #80]	; 0x50
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7f9 f93c 	bl	80001d0 <strlen>
 8006f58:	9012      	str	r0, [sp, #72]	; 0x48
 8006f5a:	4650      	mov	r0, sl
 8006f5c:	f003 fca6 	bl	800a8ac <_localeconv_r>
 8006f60:	6883      	ldr	r3, [r0, #8]
 8006f62:	930a      	str	r3, [sp, #40]	; 0x28
 8006f64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f66:	212b      	movs	r1, #43	; 0x2b
 8006f68:	b12b      	cbz	r3, 8006f76 <_svfprintf_r+0x1de>
 8006f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f6c:	b11b      	cbz	r3, 8006f76 <_svfprintf_r+0x1de>
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	b10b      	cbz	r3, 8006f76 <_svfprintf_r+0x1de>
 8006f72:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 8006f76:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006f78:	e775      	b.n	8006e66 <_svfprintf_r+0xce>
 8006f7a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1f9      	bne.n	8006f76 <_svfprintf_r+0x1de>
 8006f82:	2320      	movs	r3, #32
 8006f84:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006f88:	e7f5      	b.n	8006f76 <_svfprintf_r+0x1de>
 8006f8a:	f048 0801 	orr.w	r8, r8, #1
 8006f8e:	e7f2      	b.n	8006f76 <_svfprintf_r+0x1de>
 8006f90:	f856 3b04 	ldr.w	r3, [r6], #4
 8006f94:	9310      	str	r3, [sp, #64]	; 0x40
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	daed      	bge.n	8006f76 <_svfprintf_r+0x1de>
 8006f9a:	425b      	negs	r3, r3
 8006f9c:	9310      	str	r3, [sp, #64]	; 0x40
 8006f9e:	f048 0804 	orr.w	r8, r8, #4
 8006fa2:	e7e8      	b.n	8006f76 <_svfprintf_r+0x1de>
 8006fa4:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8006fa8:	e7e5      	b.n	8006f76 <_svfprintf_r+0x1de>
 8006faa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fac:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006fb0:	9307      	str	r3, [sp, #28]
 8006fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8006fb4:	d113      	bne.n	8006fde <_svfprintf_r+0x246>
 8006fb6:	f856 0b04 	ldr.w	r0, [r6], #4
 8006fba:	920b      	str	r2, [sp, #44]	; 0x2c
 8006fbc:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8006fc0:	9304      	str	r3, [sp, #16]
 8006fc2:	e7d8      	b.n	8006f76 <_svfprintf_r+0x1de>
 8006fc4:	9804      	ldr	r0, [sp, #16]
 8006fc6:	fb07 3300 	mla	r3, r7, r0, r3
 8006fca:	9304      	str	r3, [sp, #16]
 8006fcc:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006fd0:	9307      	str	r3, [sp, #28]
 8006fd2:	9b07      	ldr	r3, [sp, #28]
 8006fd4:	3b30      	subs	r3, #48	; 0x30
 8006fd6:	2b09      	cmp	r3, #9
 8006fd8:	d9f4      	bls.n	8006fc4 <_svfprintf_r+0x22c>
 8006fda:	920b      	str	r2, [sp, #44]	; 0x2c
 8006fdc:	e748      	b.n	8006e70 <_svfprintf_r+0xd8>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	9304      	str	r3, [sp, #16]
 8006fe2:	e7f6      	b.n	8006fd2 <_svfprintf_r+0x23a>
 8006fe4:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8006fe8:	e7c5      	b.n	8006f76 <_svfprintf_r+0x1de>
 8006fea:	2300      	movs	r3, #0
 8006fec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fee:	9310      	str	r3, [sp, #64]	; 0x40
 8006ff0:	9b07      	ldr	r3, [sp, #28]
 8006ff2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006ff4:	3b30      	subs	r3, #48	; 0x30
 8006ff6:	fb07 3300 	mla	r3, r7, r0, r3
 8006ffa:	9310      	str	r3, [sp, #64]	; 0x40
 8006ffc:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007000:	9307      	str	r3, [sp, #28]
 8007002:	3b30      	subs	r3, #48	; 0x30
 8007004:	2b09      	cmp	r3, #9
 8007006:	d9f3      	bls.n	8006ff0 <_svfprintf_r+0x258>
 8007008:	e7e7      	b.n	8006fda <_svfprintf_r+0x242>
 800700a:	f048 0808 	orr.w	r8, r8, #8
 800700e:	e7b2      	b.n	8006f76 <_svfprintf_r+0x1de>
 8007010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b68      	cmp	r3, #104	; 0x68
 8007016:	bf01      	itttt	eq
 8007018:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 800701a:	3301      	addeq	r3, #1
 800701c:	930b      	streq	r3, [sp, #44]	; 0x2c
 800701e:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 8007022:	bf18      	it	ne
 8007024:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8007028:	e7a5      	b.n	8006f76 <_svfprintf_r+0x1de>
 800702a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	2b6c      	cmp	r3, #108	; 0x6c
 8007030:	d105      	bne.n	800703e <_svfprintf_r+0x2a6>
 8007032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007034:	3301      	adds	r3, #1
 8007036:	930b      	str	r3, [sp, #44]	; 0x2c
 8007038:	f048 0820 	orr.w	r8, r8, #32
 800703c:	e79b      	b.n	8006f76 <_svfprintf_r+0x1de>
 800703e:	f048 0810 	orr.w	r8, r8, #16
 8007042:	e798      	b.n	8006f76 <_svfprintf_r+0x1de>
 8007044:	f3af 8000 	nop.w
	...
 8007050:	4632      	mov	r2, r6
 8007052:	2000      	movs	r0, #0
 8007054:	f852 3b04 	ldr.w	r3, [r2], #4
 8007058:	9206      	str	r2, [sp, #24]
 800705a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800705e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8007062:	2301      	movs	r3, #1
 8007064:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8007068:	9003      	str	r0, [sp, #12]
 800706a:	9304      	str	r3, [sp, #16]
 800706c:	4606      	mov	r6, r0
 800706e:	4605      	mov	r5, r0
 8007070:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 8007074:	e1b8      	b.n	80073e8 <_svfprintf_r+0x650>
 8007076:	f048 0810 	orr.w	r8, r8, #16
 800707a:	f018 0f20 	tst.w	r8, #32
 800707e:	d012      	beq.n	80070a6 <_svfprintf_r+0x30e>
 8007080:	3607      	adds	r6, #7
 8007082:	f026 0307 	bic.w	r3, r6, #7
 8007086:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800708a:	9306      	str	r3, [sp, #24]
 800708c:	2e00      	cmp	r6, #0
 800708e:	f177 0300 	sbcs.w	r3, r7, #0
 8007092:	da06      	bge.n	80070a2 <_svfprintf_r+0x30a>
 8007094:	4276      	negs	r6, r6
 8007096:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800709a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800709e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80070a2:	2301      	movs	r3, #1
 80070a4:	e38e      	b.n	80077c4 <_svfprintf_r+0xa2c>
 80070a6:	1d33      	adds	r3, r6, #4
 80070a8:	f018 0f10 	tst.w	r8, #16
 80070ac:	9306      	str	r3, [sp, #24]
 80070ae:	d002      	beq.n	80070b6 <_svfprintf_r+0x31e>
 80070b0:	6836      	ldr	r6, [r6, #0]
 80070b2:	17f7      	asrs	r7, r6, #31
 80070b4:	e7ea      	b.n	800708c <_svfprintf_r+0x2f4>
 80070b6:	f018 0f40 	tst.w	r8, #64	; 0x40
 80070ba:	6836      	ldr	r6, [r6, #0]
 80070bc:	d001      	beq.n	80070c2 <_svfprintf_r+0x32a>
 80070be:	b236      	sxth	r6, r6
 80070c0:	e7f7      	b.n	80070b2 <_svfprintf_r+0x31a>
 80070c2:	f418 7f00 	tst.w	r8, #512	; 0x200
 80070c6:	bf18      	it	ne
 80070c8:	b276      	sxtbne	r6, r6
 80070ca:	e7f2      	b.n	80070b2 <_svfprintf_r+0x31a>
 80070cc:	3607      	adds	r6, #7
 80070ce:	f026 0307 	bic.w	r3, r6, #7
 80070d2:	ecb3 7b02 	vldmia	r3!, {d7}
 80070d6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80070da:	9306      	str	r3, [sp, #24]
 80070dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070de:	ee09 3a10 	vmov	s18, r3
 80070e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070e8:	ee09 3a90 	vmov	s19, r3
 80070ec:	f04f 32ff 	mov.w	r2, #4294967295
 80070f0:	4b3a      	ldr	r3, [pc, #232]	; (80071dc <_svfprintf_r+0x444>)
 80070f2:	ec51 0b19 	vmov	r0, r1, d9
 80070f6:	f7f9 fd19 	bl	8000b2c <__aeabi_dcmpun>
 80070fa:	bb10      	cbnz	r0, 8007142 <_svfprintf_r+0x3aa>
 80070fc:	4b37      	ldr	r3, [pc, #220]	; (80071dc <_svfprintf_r+0x444>)
 80070fe:	ec51 0b19 	vmov	r0, r1, d9
 8007102:	f04f 32ff 	mov.w	r2, #4294967295
 8007106:	f7f9 fcf3 	bl	8000af0 <__aeabi_dcmple>
 800710a:	b9d0      	cbnz	r0, 8007142 <_svfprintf_r+0x3aa>
 800710c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007110:	2200      	movs	r2, #0
 8007112:	2300      	movs	r3, #0
 8007114:	f7f9 fce2 	bl	8000adc <__aeabi_dcmplt>
 8007118:	b110      	cbz	r0, 8007120 <_svfprintf_r+0x388>
 800711a:	232d      	movs	r3, #45	; 0x2d
 800711c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8007120:	4a2f      	ldr	r2, [pc, #188]	; (80071e0 <_svfprintf_r+0x448>)
 8007122:	4830      	ldr	r0, [pc, #192]	; (80071e4 <_svfprintf_r+0x44c>)
 8007124:	9b07      	ldr	r3, [sp, #28]
 8007126:	2100      	movs	r1, #0
 8007128:	2b47      	cmp	r3, #71	; 0x47
 800712a:	bfd4      	ite	le
 800712c:	4693      	movle	fp, r2
 800712e:	4683      	movgt	fp, r0
 8007130:	2303      	movs	r3, #3
 8007132:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8007136:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 800713a:	2600      	movs	r6, #0
 800713c:	4633      	mov	r3, r6
 800713e:	f001 b802 	b.w	8008146 <_svfprintf_r+0x13ae>
 8007142:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007146:	4610      	mov	r0, r2
 8007148:	4619      	mov	r1, r3
 800714a:	f7f9 fcef 	bl	8000b2c <__aeabi_dcmpun>
 800714e:	b140      	cbz	r0, 8007162 <_svfprintf_r+0x3ca>
 8007150:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007152:	4a25      	ldr	r2, [pc, #148]	; (80071e8 <_svfprintf_r+0x450>)
 8007154:	4825      	ldr	r0, [pc, #148]	; (80071ec <_svfprintf_r+0x454>)
 8007156:	2b00      	cmp	r3, #0
 8007158:	bfbc      	itt	lt
 800715a:	232d      	movlt	r3, #45	; 0x2d
 800715c:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8007160:	e7e0      	b.n	8007124 <_svfprintf_r+0x38c>
 8007162:	9b07      	ldr	r3, [sp, #28]
 8007164:	f023 0320 	bic.w	r3, r3, #32
 8007168:	2b41      	cmp	r3, #65	; 0x41
 800716a:	9308      	str	r3, [sp, #32]
 800716c:	d125      	bne.n	80071ba <_svfprintf_r+0x422>
 800716e:	2330      	movs	r3, #48	; 0x30
 8007170:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8007174:	9b07      	ldr	r3, [sp, #28]
 8007176:	2b61      	cmp	r3, #97	; 0x61
 8007178:	bf0c      	ite	eq
 800717a:	2378      	moveq	r3, #120	; 0x78
 800717c:	2358      	movne	r3, #88	; 0x58
 800717e:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8007182:	9b04      	ldr	r3, [sp, #16]
 8007184:	2b63      	cmp	r3, #99	; 0x63
 8007186:	f048 0802 	orr.w	r8, r8, #2
 800718a:	dd31      	ble.n	80071f0 <_svfprintf_r+0x458>
 800718c:	1c59      	adds	r1, r3, #1
 800718e:	4650      	mov	r0, sl
 8007190:	f003 fc00 	bl	800a994 <_malloc_r>
 8007194:	4683      	mov	fp, r0
 8007196:	2800      	cmp	r0, #0
 8007198:	f040 81fe 	bne.w	8007598 <_svfprintf_r+0x800>
 800719c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80071a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071a4:	f8a9 300c 	strh.w	r3, [r9, #12]
 80071a8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80071ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80071b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071b2:	bf18      	it	ne
 80071b4:	f04f 33ff 	movne.w	r3, #4294967295
 80071b8:	e614      	b.n	8006de4 <_svfprintf_r+0x4c>
 80071ba:	9b04      	ldr	r3, [sp, #16]
 80071bc:	3301      	adds	r3, #1
 80071be:	f000 81ed 	beq.w	800759c <_svfprintf_r+0x804>
 80071c2:	9b08      	ldr	r3, [sp, #32]
 80071c4:	2b47      	cmp	r3, #71	; 0x47
 80071c6:	f040 81ec 	bne.w	80075a2 <_svfprintf_r+0x80a>
 80071ca:	9b04      	ldr	r3, [sp, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f040 81e8 	bne.w	80075a2 <_svfprintf_r+0x80a>
 80071d2:	9303      	str	r3, [sp, #12]
 80071d4:	2301      	movs	r3, #1
 80071d6:	9304      	str	r3, [sp, #16]
 80071d8:	e00d      	b.n	80071f6 <_svfprintf_r+0x45e>
 80071da:	bf00      	nop
 80071dc:	7fefffff 	.word	0x7fefffff
 80071e0:	0800cd30 	.word	0x0800cd30
 80071e4:	0800cd34 	.word	0x0800cd34
 80071e8:	0800cd38 	.word	0x0800cd38
 80071ec:	0800cd3c 	.word	0x0800cd3c
 80071f0:	9003      	str	r0, [sp, #12]
 80071f2:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 80071f6:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 80071fa:	9311      	str	r3, [sp, #68]	; 0x44
 80071fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f280 81d1 	bge.w	80075a6 <_svfprintf_r+0x80e>
 8007204:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007206:	ee08 3a10 	vmov	s16, r3
 800720a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800720c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007210:	ee08 3a90 	vmov	s17, r3
 8007214:	232d      	movs	r3, #45	; 0x2d
 8007216:	9318      	str	r3, [sp, #96]	; 0x60
 8007218:	9b08      	ldr	r3, [sp, #32]
 800721a:	2b41      	cmp	r3, #65	; 0x41
 800721c:	f040 81e1 	bne.w	80075e2 <_svfprintf_r+0x84a>
 8007220:	eeb0 0a48 	vmov.f32	s0, s16
 8007224:	eef0 0a68 	vmov.f32	s1, s17
 8007228:	a81c      	add	r0, sp, #112	; 0x70
 800722a:	f004 f93f 	bl	800b4ac <frexp>
 800722e:	2200      	movs	r2, #0
 8007230:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007234:	ec51 0b10 	vmov	r0, r1, d0
 8007238:	f7f9 f9de 	bl	80005f8 <__aeabi_dmul>
 800723c:	2200      	movs	r2, #0
 800723e:	2300      	movs	r3, #0
 8007240:	4606      	mov	r6, r0
 8007242:	460f      	mov	r7, r1
 8007244:	f7f9 fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 8007248:	b108      	cbz	r0, 800724e <_svfprintf_r+0x4b6>
 800724a:	2301      	movs	r3, #1
 800724c:	931c      	str	r3, [sp, #112]	; 0x70
 800724e:	4bb4      	ldr	r3, [pc, #720]	; (8007520 <_svfprintf_r+0x788>)
 8007250:	4ab4      	ldr	r2, [pc, #720]	; (8007524 <_svfprintf_r+0x78c>)
 8007252:	9907      	ldr	r1, [sp, #28]
 8007254:	2961      	cmp	r1, #97	; 0x61
 8007256:	bf18      	it	ne
 8007258:	461a      	movne	r2, r3
 800725a:	9b04      	ldr	r3, [sp, #16]
 800725c:	9217      	str	r2, [sp, #92]	; 0x5c
 800725e:	3b01      	subs	r3, #1
 8007260:	9305      	str	r3, [sp, #20]
 8007262:	465d      	mov	r5, fp
 8007264:	4bb0      	ldr	r3, [pc, #704]	; (8007528 <_svfprintf_r+0x790>)
 8007266:	2200      	movs	r2, #0
 8007268:	4630      	mov	r0, r6
 800726a:	4639      	mov	r1, r7
 800726c:	f7f9 f9c4 	bl	80005f8 <__aeabi_dmul>
 8007270:	460f      	mov	r7, r1
 8007272:	4606      	mov	r6, r0
 8007274:	f7f9 fc70 	bl	8000b58 <__aeabi_d2iz>
 8007278:	9019      	str	r0, [sp, #100]	; 0x64
 800727a:	f7f9 f953 	bl	8000524 <__aeabi_i2d>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	4630      	mov	r0, r6
 8007284:	4639      	mov	r1, r7
 8007286:	f7f8 ffff 	bl	8000288 <__aeabi_dsub>
 800728a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800728c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800728e:	5c9b      	ldrb	r3, [r3, r2]
 8007290:	f805 3b01 	strb.w	r3, [r5], #1
 8007294:	9b05      	ldr	r3, [sp, #20]
 8007296:	9309      	str	r3, [sp, #36]	; 0x24
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	4606      	mov	r6, r0
 800729c:	460f      	mov	r7, r1
 800729e:	d007      	beq.n	80072b0 <_svfprintf_r+0x518>
 80072a0:	3b01      	subs	r3, #1
 80072a2:	9305      	str	r3, [sp, #20]
 80072a4:	2200      	movs	r2, #0
 80072a6:	2300      	movs	r3, #0
 80072a8:	f7f9 fc0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d0d9      	beq.n	8007264 <_svfprintf_r+0x4cc>
 80072b0:	4b9e      	ldr	r3, [pc, #632]	; (800752c <_svfprintf_r+0x794>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	4630      	mov	r0, r6
 80072b6:	4639      	mov	r1, r7
 80072b8:	f7f9 fc2e 	bl	8000b18 <__aeabi_dcmpgt>
 80072bc:	b960      	cbnz	r0, 80072d8 <_svfprintf_r+0x540>
 80072be:	4b9b      	ldr	r3, [pc, #620]	; (800752c <_svfprintf_r+0x794>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	4630      	mov	r0, r6
 80072c4:	4639      	mov	r1, r7
 80072c6:	f7f9 fbff 	bl	8000ac8 <__aeabi_dcmpeq>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	f000 8184 	beq.w	80075d8 <_svfprintf_r+0x840>
 80072d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072d2:	07df      	lsls	r7, r3, #31
 80072d4:	f140 8180 	bpl.w	80075d8 <_svfprintf_r+0x840>
 80072d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072da:	9520      	str	r5, [sp, #128]	; 0x80
 80072dc:	7bd9      	ldrb	r1, [r3, #15]
 80072de:	2030      	movs	r0, #48	; 0x30
 80072e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80072e2:	1e53      	subs	r3, r2, #1
 80072e4:	9320      	str	r3, [sp, #128]	; 0x80
 80072e6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80072ea:	428b      	cmp	r3, r1
 80072ec:	f000 8163 	beq.w	80075b6 <_svfprintf_r+0x81e>
 80072f0:	2b39      	cmp	r3, #57	; 0x39
 80072f2:	bf0b      	itete	eq
 80072f4:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 80072f6:	3301      	addne	r3, #1
 80072f8:	7a9b      	ldrbeq	r3, [r3, #10]
 80072fa:	b2db      	uxtbne	r3, r3
 80072fc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007300:	eba5 030b 	sub.w	r3, r5, fp
 8007304:	9305      	str	r3, [sp, #20]
 8007306:	9b08      	ldr	r3, [sp, #32]
 8007308:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800730a:	2b47      	cmp	r3, #71	; 0x47
 800730c:	f040 81b1 	bne.w	8007672 <_svfprintf_r+0x8da>
 8007310:	1cee      	adds	r6, r5, #3
 8007312:	db03      	blt.n	800731c <_svfprintf_r+0x584>
 8007314:	9b04      	ldr	r3, [sp, #16]
 8007316:	42ab      	cmp	r3, r5
 8007318:	f280 81d6 	bge.w	80076c8 <_svfprintf_r+0x930>
 800731c:	9b07      	ldr	r3, [sp, #28]
 800731e:	3b02      	subs	r3, #2
 8007320:	9307      	str	r3, [sp, #28]
 8007322:	9907      	ldr	r1, [sp, #28]
 8007324:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8007328:	f021 0120 	bic.w	r1, r1, #32
 800732c:	2941      	cmp	r1, #65	; 0x41
 800732e:	bf08      	it	eq
 8007330:	320f      	addeq	r2, #15
 8007332:	f105 33ff 	add.w	r3, r5, #4294967295
 8007336:	bf06      	itte	eq
 8007338:	b2d2      	uxtbeq	r2, r2
 800733a:	2101      	moveq	r1, #1
 800733c:	2100      	movne	r1, #0
 800733e:	2b00      	cmp	r3, #0
 8007340:	931c      	str	r3, [sp, #112]	; 0x70
 8007342:	bfb8      	it	lt
 8007344:	f1c5 0301 	rsblt	r3, r5, #1
 8007348:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800734c:	bfb4      	ite	lt
 800734e:	222d      	movlt	r2, #45	; 0x2d
 8007350:	222b      	movge	r2, #43	; 0x2b
 8007352:	2b09      	cmp	r3, #9
 8007354:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8007358:	f340 81a4 	ble.w	80076a4 <_svfprintf_r+0x90c>
 800735c:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8007360:	260a      	movs	r6, #10
 8007362:	4611      	mov	r1, r2
 8007364:	fb93 f5f6 	sdiv	r5, r3, r6
 8007368:	fb06 3015 	mls	r0, r6, r5, r3
 800736c:	3030      	adds	r0, #48	; 0x30
 800736e:	f801 0c01 	strb.w	r0, [r1, #-1]
 8007372:	4618      	mov	r0, r3
 8007374:	2863      	cmp	r0, #99	; 0x63
 8007376:	f102 32ff 	add.w	r2, r2, #4294967295
 800737a:	462b      	mov	r3, r5
 800737c:	dcf1      	bgt.n	8007362 <_svfprintf_r+0x5ca>
 800737e:	3330      	adds	r3, #48	; 0x30
 8007380:	1e88      	subs	r0, r1, #2
 8007382:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007386:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 800738a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800738e:	4603      	mov	r3, r0
 8007390:	42ab      	cmp	r3, r5
 8007392:	f0c0 8182 	bcc.w	800769a <_svfprintf_r+0x902>
 8007396:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 800739a:	1a52      	subs	r2, r2, r1
 800739c:	42a8      	cmp	r0, r5
 800739e:	bf88      	it	hi
 80073a0:	2200      	movhi	r2, #0
 80073a2:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 80073a6:	441a      	add	r2, r3
 80073a8:	ab1e      	add	r3, sp, #120	; 0x78
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	9a05      	ldr	r2, [sp, #20]
 80073ae:	9315      	str	r3, [sp, #84]	; 0x54
 80073b0:	2a01      	cmp	r2, #1
 80073b2:	4413      	add	r3, r2
 80073b4:	9304      	str	r3, [sp, #16]
 80073b6:	dc02      	bgt.n	80073be <_svfprintf_r+0x626>
 80073b8:	f018 0f01 	tst.w	r8, #1
 80073bc:	d003      	beq.n	80073c6 <_svfprintf_r+0x62e>
 80073be:	9b04      	ldr	r3, [sp, #16]
 80073c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073c2:	4413      	add	r3, r2
 80073c4:	9304      	str	r3, [sp, #16]
 80073c6:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 80073ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073ce:	9311      	str	r3, [sp, #68]	; 0x44
 80073d0:	2300      	movs	r3, #0
 80073d2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80073d6:	461d      	mov	r5, r3
 80073d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80073da:	b113      	cbz	r3, 80073e2 <_svfprintf_r+0x64a>
 80073dc:	232d      	movs	r3, #45	; 0x2d
 80073de:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80073e2:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 80073e6:	2600      	movs	r6, #0
 80073e8:	9b04      	ldr	r3, [sp, #16]
 80073ea:	42b3      	cmp	r3, r6
 80073ec:	bfb8      	it	lt
 80073ee:	4633      	movlt	r3, r6
 80073f0:	9311      	str	r3, [sp, #68]	; 0x44
 80073f2:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80073f6:	b113      	cbz	r3, 80073fe <_svfprintf_r+0x666>
 80073f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073fa:	3301      	adds	r3, #1
 80073fc:	9311      	str	r3, [sp, #68]	; 0x44
 80073fe:	f018 0302 	ands.w	r3, r8, #2
 8007402:	9317      	str	r3, [sp, #92]	; 0x5c
 8007404:	bf1e      	ittt	ne
 8007406:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8007408:	3302      	addne	r3, #2
 800740a:	9311      	strne	r3, [sp, #68]	; 0x44
 800740c:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8007410:	9318      	str	r3, [sp, #96]	; 0x60
 8007412:	d11f      	bne.n	8007454 <_svfprintf_r+0x6bc>
 8007414:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8007418:	1a9f      	subs	r7, r3, r2
 800741a:	2f00      	cmp	r7, #0
 800741c:	dd1a      	ble.n	8007454 <_svfprintf_r+0x6bc>
 800741e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007422:	4843      	ldr	r0, [pc, #268]	; (8007530 <_svfprintf_r+0x798>)
 8007424:	6020      	str	r0, [r4, #0]
 8007426:	2f10      	cmp	r7, #16
 8007428:	f103 0301 	add.w	r3, r3, #1
 800742c:	f104 0108 	add.w	r1, r4, #8
 8007430:	f300 82e6 	bgt.w	8007a00 <_svfprintf_r+0xc68>
 8007434:	6067      	str	r7, [r4, #4]
 8007436:	2b07      	cmp	r3, #7
 8007438:	4417      	add	r7, r2
 800743a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800743e:	f340 82f2 	ble.w	8007a26 <_svfprintf_r+0xc8e>
 8007442:	aa22      	add	r2, sp, #136	; 0x88
 8007444:	4649      	mov	r1, r9
 8007446:	4650      	mov	r0, sl
 8007448:	f004 f8ce 	bl	800b5e8 <__ssprint_r>
 800744c:	2800      	cmp	r0, #0
 800744e:	f040 861d 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007452:	ac25      	add	r4, sp, #148	; 0x94
 8007454:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8007458:	b173      	cbz	r3, 8007478 <_svfprintf_r+0x6e0>
 800745a:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 800745e:	6023      	str	r3, [r4, #0]
 8007460:	2301      	movs	r3, #1
 8007462:	6063      	str	r3, [r4, #4]
 8007464:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007466:	3301      	adds	r3, #1
 8007468:	9324      	str	r3, [sp, #144]	; 0x90
 800746a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800746c:	3301      	adds	r3, #1
 800746e:	2b07      	cmp	r3, #7
 8007470:	9323      	str	r3, [sp, #140]	; 0x8c
 8007472:	f300 82da 	bgt.w	8007a2a <_svfprintf_r+0xc92>
 8007476:	3408      	adds	r4, #8
 8007478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800747a:	b16b      	cbz	r3, 8007498 <_svfprintf_r+0x700>
 800747c:	ab1b      	add	r3, sp, #108	; 0x6c
 800747e:	6023      	str	r3, [r4, #0]
 8007480:	2302      	movs	r3, #2
 8007482:	6063      	str	r3, [r4, #4]
 8007484:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007486:	3302      	adds	r3, #2
 8007488:	9324      	str	r3, [sp, #144]	; 0x90
 800748a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800748c:	3301      	adds	r3, #1
 800748e:	2b07      	cmp	r3, #7
 8007490:	9323      	str	r3, [sp, #140]	; 0x8c
 8007492:	f300 82d4 	bgt.w	8007a3e <_svfprintf_r+0xca6>
 8007496:	3408      	adds	r4, #8
 8007498:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800749a:	2b80      	cmp	r3, #128	; 0x80
 800749c:	d11f      	bne.n	80074de <_svfprintf_r+0x746>
 800749e:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80074a2:	1a9f      	subs	r7, r3, r2
 80074a4:	2f00      	cmp	r7, #0
 80074a6:	dd1a      	ble.n	80074de <_svfprintf_r+0x746>
 80074a8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80074ac:	4821      	ldr	r0, [pc, #132]	; (8007534 <_svfprintf_r+0x79c>)
 80074ae:	6020      	str	r0, [r4, #0]
 80074b0:	2f10      	cmp	r7, #16
 80074b2:	f103 0301 	add.w	r3, r3, #1
 80074b6:	f104 0108 	add.w	r1, r4, #8
 80074ba:	f300 82ca 	bgt.w	8007a52 <_svfprintf_r+0xcba>
 80074be:	6067      	str	r7, [r4, #4]
 80074c0:	2b07      	cmp	r3, #7
 80074c2:	4417      	add	r7, r2
 80074c4:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80074c8:	f340 82d6 	ble.w	8007a78 <_svfprintf_r+0xce0>
 80074cc:	aa22      	add	r2, sp, #136	; 0x88
 80074ce:	4649      	mov	r1, r9
 80074d0:	4650      	mov	r0, sl
 80074d2:	f004 f889 	bl	800b5e8 <__ssprint_r>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f040 85d8 	bne.w	800808c <_svfprintf_r+0x12f4>
 80074dc:	ac25      	add	r4, sp, #148	; 0x94
 80074de:	9b04      	ldr	r3, [sp, #16]
 80074e0:	1af6      	subs	r6, r6, r3
 80074e2:	2e00      	cmp	r6, #0
 80074e4:	dd28      	ble.n	8007538 <_svfprintf_r+0x7a0>
 80074e6:	4f13      	ldr	r7, [pc, #76]	; (8007534 <_svfprintf_r+0x79c>)
 80074e8:	6027      	str	r7, [r4, #0]
 80074ea:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80074ee:	2e10      	cmp	r6, #16
 80074f0:	f103 0301 	add.w	r3, r3, #1
 80074f4:	f104 0108 	add.w	r1, r4, #8
 80074f8:	f300 82c0 	bgt.w	8007a7c <_svfprintf_r+0xce4>
 80074fc:	6066      	str	r6, [r4, #4]
 80074fe:	2b07      	cmp	r3, #7
 8007500:	4416      	add	r6, r2
 8007502:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8007506:	f340 82cc 	ble.w	8007aa2 <_svfprintf_r+0xd0a>
 800750a:	aa22      	add	r2, sp, #136	; 0x88
 800750c:	4649      	mov	r1, r9
 800750e:	4650      	mov	r0, sl
 8007510:	f004 f86a 	bl	800b5e8 <__ssprint_r>
 8007514:	2800      	cmp	r0, #0
 8007516:	f040 85b9 	bne.w	800808c <_svfprintf_r+0x12f4>
 800751a:	ac25      	add	r4, sp, #148	; 0x94
 800751c:	e00c      	b.n	8007538 <_svfprintf_r+0x7a0>
 800751e:	bf00      	nop
 8007520:	0800cd51 	.word	0x0800cd51
 8007524:	0800cd40 	.word	0x0800cd40
 8007528:	40300000 	.word	0x40300000
 800752c:	3fe00000 	.word	0x3fe00000
 8007530:	0800cd64 	.word	0x0800cd64
 8007534:	0800cd74 	.word	0x0800cd74
 8007538:	f418 7f80 	tst.w	r8, #256	; 0x100
 800753c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800753e:	f040 82b7 	bne.w	8007ab0 <_svfprintf_r+0xd18>
 8007542:	9b04      	ldr	r3, [sp, #16]
 8007544:	f8c4 b000 	str.w	fp, [r4]
 8007548:	441e      	add	r6, r3
 800754a:	6063      	str	r3, [r4, #4]
 800754c:	9624      	str	r6, [sp, #144]	; 0x90
 800754e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007550:	3301      	adds	r3, #1
 8007552:	2b07      	cmp	r3, #7
 8007554:	9323      	str	r3, [sp, #140]	; 0x8c
 8007556:	f300 82f0 	bgt.w	8007b3a <_svfprintf_r+0xda2>
 800755a:	3408      	adds	r4, #8
 800755c:	f018 0f04 	tst.w	r8, #4
 8007560:	f040 8576 	bne.w	8008050 <_svfprintf_r+0x12b8>
 8007564:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8007568:	9911      	ldr	r1, [sp, #68]	; 0x44
 800756a:	428a      	cmp	r2, r1
 800756c:	bfac      	ite	ge
 800756e:	189b      	addge	r3, r3, r2
 8007570:	185b      	addlt	r3, r3, r1
 8007572:	930f      	str	r3, [sp, #60]	; 0x3c
 8007574:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007576:	b13b      	cbz	r3, 8007588 <_svfprintf_r+0x7f0>
 8007578:	aa22      	add	r2, sp, #136	; 0x88
 800757a:	4649      	mov	r1, r9
 800757c:	4650      	mov	r0, sl
 800757e:	f004 f833 	bl	800b5e8 <__ssprint_r>
 8007582:	2800      	cmp	r0, #0
 8007584:	f040 8582 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007588:	2300      	movs	r3, #0
 800758a:	9323      	str	r3, [sp, #140]	; 0x8c
 800758c:	9b03      	ldr	r3, [sp, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	f040 8598 	bne.w	80080c4 <_svfprintf_r+0x132c>
 8007594:	ac25      	add	r4, sp, #148	; 0x94
 8007596:	e0ed      	b.n	8007774 <_svfprintf_r+0x9dc>
 8007598:	9003      	str	r0, [sp, #12]
 800759a:	e62c      	b.n	80071f6 <_svfprintf_r+0x45e>
 800759c:	9003      	str	r0, [sp, #12]
 800759e:	2306      	movs	r3, #6
 80075a0:	e619      	b.n	80071d6 <_svfprintf_r+0x43e>
 80075a2:	9003      	str	r0, [sp, #12]
 80075a4:	e627      	b.n	80071f6 <_svfprintf_r+0x45e>
 80075a6:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 80075aa:	2300      	movs	r3, #0
 80075ac:	eeb0 8a47 	vmov.f32	s16, s14
 80075b0:	eef0 8a67 	vmov.f32	s17, s15
 80075b4:	e62f      	b.n	8007216 <_svfprintf_r+0x47e>
 80075b6:	f802 0c01 	strb.w	r0, [r2, #-1]
 80075ba:	e691      	b.n	80072e0 <_svfprintf_r+0x548>
 80075bc:	f803 0b01 	strb.w	r0, [r3], #1
 80075c0:	1aca      	subs	r2, r1, r3
 80075c2:	2a00      	cmp	r2, #0
 80075c4:	dafa      	bge.n	80075bc <_svfprintf_r+0x824>
 80075c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ca:	3201      	adds	r2, #1
 80075cc:	f103 0301 	add.w	r3, r3, #1
 80075d0:	bfb8      	it	lt
 80075d2:	2300      	movlt	r3, #0
 80075d4:	441d      	add	r5, r3
 80075d6:	e693      	b.n	8007300 <_svfprintf_r+0x568>
 80075d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075da:	462b      	mov	r3, r5
 80075dc:	18a9      	adds	r1, r5, r2
 80075de:	2030      	movs	r0, #48	; 0x30
 80075e0:	e7ee      	b.n	80075c0 <_svfprintf_r+0x828>
 80075e2:	9b08      	ldr	r3, [sp, #32]
 80075e4:	2b46      	cmp	r3, #70	; 0x46
 80075e6:	d005      	beq.n	80075f4 <_svfprintf_r+0x85c>
 80075e8:	2b45      	cmp	r3, #69	; 0x45
 80075ea:	d11b      	bne.n	8007624 <_svfprintf_r+0x88c>
 80075ec:	9b04      	ldr	r3, [sp, #16]
 80075ee:	1c5d      	adds	r5, r3, #1
 80075f0:	2102      	movs	r1, #2
 80075f2:	e001      	b.n	80075f8 <_svfprintf_r+0x860>
 80075f4:	9d04      	ldr	r5, [sp, #16]
 80075f6:	2103      	movs	r1, #3
 80075f8:	ab20      	add	r3, sp, #128	; 0x80
 80075fa:	9301      	str	r3, [sp, #4]
 80075fc:	ab1d      	add	r3, sp, #116	; 0x74
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	462a      	mov	r2, r5
 8007602:	ab1c      	add	r3, sp, #112	; 0x70
 8007604:	4650      	mov	r0, sl
 8007606:	eeb0 0a48 	vmov.f32	s0, s16
 800760a:	eef0 0a68 	vmov.f32	s1, s17
 800760e:	f002 f90f 	bl	8009830 <_dtoa_r>
 8007612:	9b08      	ldr	r3, [sp, #32]
 8007614:	2b47      	cmp	r3, #71	; 0x47
 8007616:	4683      	mov	fp, r0
 8007618:	d106      	bne.n	8007628 <_svfprintf_r+0x890>
 800761a:	f018 0f01 	tst.w	r8, #1
 800761e:	d103      	bne.n	8007628 <_svfprintf_r+0x890>
 8007620:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8007622:	e66d      	b.n	8007300 <_svfprintf_r+0x568>
 8007624:	9d04      	ldr	r5, [sp, #16]
 8007626:	e7e3      	b.n	80075f0 <_svfprintf_r+0x858>
 8007628:	9b08      	ldr	r3, [sp, #32]
 800762a:	2b46      	cmp	r3, #70	; 0x46
 800762c:	eb0b 0605 	add.w	r6, fp, r5
 8007630:	d10f      	bne.n	8007652 <_svfprintf_r+0x8ba>
 8007632:	f89b 3000 	ldrb.w	r3, [fp]
 8007636:	2b30      	cmp	r3, #48	; 0x30
 8007638:	d109      	bne.n	800764e <_svfprintf_r+0x8b6>
 800763a:	ec51 0b18 	vmov	r0, r1, d8
 800763e:	2200      	movs	r2, #0
 8007640:	2300      	movs	r3, #0
 8007642:	f7f9 fa41 	bl	8000ac8 <__aeabi_dcmpeq>
 8007646:	b910      	cbnz	r0, 800764e <_svfprintf_r+0x8b6>
 8007648:	f1c5 0501 	rsb	r5, r5, #1
 800764c:	951c      	str	r5, [sp, #112]	; 0x70
 800764e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007650:	441e      	add	r6, r3
 8007652:	ec51 0b18 	vmov	r0, r1, d8
 8007656:	2200      	movs	r2, #0
 8007658:	2300      	movs	r3, #0
 800765a:	f7f9 fa35 	bl	8000ac8 <__aeabi_dcmpeq>
 800765e:	b100      	cbz	r0, 8007662 <_svfprintf_r+0x8ca>
 8007660:	9620      	str	r6, [sp, #128]	; 0x80
 8007662:	2230      	movs	r2, #48	; 0x30
 8007664:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007666:	429e      	cmp	r6, r3
 8007668:	d9da      	bls.n	8007620 <_svfprintf_r+0x888>
 800766a:	1c59      	adds	r1, r3, #1
 800766c:	9120      	str	r1, [sp, #128]	; 0x80
 800766e:	701a      	strb	r2, [r3, #0]
 8007670:	e7f8      	b.n	8007664 <_svfprintf_r+0x8cc>
 8007672:	9b08      	ldr	r3, [sp, #32]
 8007674:	2b46      	cmp	r3, #70	; 0x46
 8007676:	f47f ae54 	bne.w	8007322 <_svfprintf_r+0x58a>
 800767a:	9a04      	ldr	r2, [sp, #16]
 800767c:	f008 0301 	and.w	r3, r8, #1
 8007680:	2d00      	cmp	r5, #0
 8007682:	ea43 0302 	orr.w	r3, r3, r2
 8007686:	dd1a      	ble.n	80076be <_svfprintf_r+0x926>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d034      	beq.n	80076f6 <_svfprintf_r+0x95e>
 800768c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800768e:	18eb      	adds	r3, r5, r3
 8007690:	441a      	add	r2, r3
 8007692:	9204      	str	r2, [sp, #16]
 8007694:	2366      	movs	r3, #102	; 0x66
 8007696:	9307      	str	r3, [sp, #28]
 8007698:	e033      	b.n	8007702 <_svfprintf_r+0x96a>
 800769a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800769e:	f802 6b01 	strb.w	r6, [r2], #1
 80076a2:	e675      	b.n	8007390 <_svfprintf_r+0x5f8>
 80076a4:	b941      	cbnz	r1, 80076b8 <_svfprintf_r+0x920>
 80076a6:	2230      	movs	r2, #48	; 0x30
 80076a8:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 80076ac:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80076b0:	3330      	adds	r3, #48	; 0x30
 80076b2:	f802 3b01 	strb.w	r3, [r2], #1
 80076b6:	e677      	b.n	80073a8 <_svfprintf_r+0x610>
 80076b8:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80076bc:	e7f8      	b.n	80076b0 <_svfprintf_r+0x918>
 80076be:	b1e3      	cbz	r3, 80076fa <_svfprintf_r+0x962>
 80076c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076c2:	9a04      	ldr	r2, [sp, #16]
 80076c4:	3301      	adds	r3, #1
 80076c6:	e7e3      	b.n	8007690 <_svfprintf_r+0x8f8>
 80076c8:	9b05      	ldr	r3, [sp, #20]
 80076ca:	429d      	cmp	r5, r3
 80076cc:	db07      	blt.n	80076de <_svfprintf_r+0x946>
 80076ce:	f018 0f01 	tst.w	r8, #1
 80076d2:	d02d      	beq.n	8007730 <_svfprintf_r+0x998>
 80076d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076d6:	18eb      	adds	r3, r5, r3
 80076d8:	9304      	str	r3, [sp, #16]
 80076da:	2367      	movs	r3, #103	; 0x67
 80076dc:	e7db      	b.n	8007696 <_svfprintf_r+0x8fe>
 80076de:	9b05      	ldr	r3, [sp, #20]
 80076e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076e2:	2d00      	cmp	r5, #0
 80076e4:	4413      	add	r3, r2
 80076e6:	9304      	str	r3, [sp, #16]
 80076e8:	dcf7      	bgt.n	80076da <_svfprintf_r+0x942>
 80076ea:	9a04      	ldr	r2, [sp, #16]
 80076ec:	f1c5 0301 	rsb	r3, r5, #1
 80076f0:	441a      	add	r2, r3
 80076f2:	4613      	mov	r3, r2
 80076f4:	e7f0      	b.n	80076d8 <_svfprintf_r+0x940>
 80076f6:	9504      	str	r5, [sp, #16]
 80076f8:	e7cc      	b.n	8007694 <_svfprintf_r+0x8fc>
 80076fa:	2366      	movs	r3, #102	; 0x66
 80076fc:	9307      	str	r3, [sp, #28]
 80076fe:	2301      	movs	r3, #1
 8007700:	9304      	str	r3, [sp, #16]
 8007702:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 8007706:	9309      	str	r3, [sp, #36]	; 0x24
 8007708:	d025      	beq.n	8007756 <_svfprintf_r+0x9be>
 800770a:	2300      	movs	r3, #0
 800770c:	2d00      	cmp	r5, #0
 800770e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8007712:	f77f ae61 	ble.w	80073d8 <_svfprintf_r+0x640>
 8007716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2bff      	cmp	r3, #255	; 0xff
 800771c:	d10a      	bne.n	8007734 <_svfprintf_r+0x99c>
 800771e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007722:	9904      	ldr	r1, [sp, #16]
 8007724:	4413      	add	r3, r2
 8007726:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007728:	fb02 1303 	mla	r3, r2, r3, r1
 800772c:	9304      	str	r3, [sp, #16]
 800772e:	e653      	b.n	80073d8 <_svfprintf_r+0x640>
 8007730:	9504      	str	r5, [sp, #16]
 8007732:	e7d2      	b.n	80076da <_svfprintf_r+0x942>
 8007734:	42ab      	cmp	r3, r5
 8007736:	daf2      	bge.n	800771e <_svfprintf_r+0x986>
 8007738:	1aed      	subs	r5, r5, r3
 800773a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800773c:	785b      	ldrb	r3, [r3, #1]
 800773e:	b133      	cbz	r3, 800774e <_svfprintf_r+0x9b6>
 8007740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007742:	3301      	adds	r3, #1
 8007744:	9309      	str	r3, [sp, #36]	; 0x24
 8007746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007748:	3301      	adds	r3, #1
 800774a:	930a      	str	r3, [sp, #40]	; 0x28
 800774c:	e7e3      	b.n	8007716 <_svfprintf_r+0x97e>
 800774e:	9b08      	ldr	r3, [sp, #32]
 8007750:	3301      	adds	r3, #1
 8007752:	9308      	str	r3, [sp, #32]
 8007754:	e7df      	b.n	8007716 <_svfprintf_r+0x97e>
 8007756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007758:	9308      	str	r3, [sp, #32]
 800775a:	e63d      	b.n	80073d8 <_svfprintf_r+0x640>
 800775c:	4632      	mov	r2, r6
 800775e:	f018 0f20 	tst.w	r8, #32
 8007762:	f852 3b04 	ldr.w	r3, [r2], #4
 8007766:	9206      	str	r2, [sp, #24]
 8007768:	d009      	beq.n	800777e <_svfprintf_r+0x9e6>
 800776a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800776c:	4610      	mov	r0, r2
 800776e:	17d1      	asrs	r1, r2, #31
 8007770:	e9c3 0100 	strd	r0, r1, [r3]
 8007774:	9e06      	ldr	r6, [sp, #24]
 8007776:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800777a:	f7ff bb4d 	b.w	8006e18 <_svfprintf_r+0x80>
 800777e:	f018 0f10 	tst.w	r8, #16
 8007782:	d002      	beq.n	800778a <_svfprintf_r+0x9f2>
 8007784:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	e7f4      	b.n	8007774 <_svfprintf_r+0x9dc>
 800778a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800778e:	d002      	beq.n	8007796 <_svfprintf_r+0x9fe>
 8007790:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007792:	801a      	strh	r2, [r3, #0]
 8007794:	e7ee      	b.n	8007774 <_svfprintf_r+0x9dc>
 8007796:	f418 7f00 	tst.w	r8, #512	; 0x200
 800779a:	d0f3      	beq.n	8007784 <_svfprintf_r+0x9ec>
 800779c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800779e:	701a      	strb	r2, [r3, #0]
 80077a0:	e7e8      	b.n	8007774 <_svfprintf_r+0x9dc>
 80077a2:	f048 0810 	orr.w	r8, r8, #16
 80077a6:	f018 0f20 	tst.w	r8, #32
 80077aa:	d01e      	beq.n	80077ea <_svfprintf_r+0xa52>
 80077ac:	3607      	adds	r6, #7
 80077ae:	f026 0307 	bic.w	r3, r6, #7
 80077b2:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80077b6:	9306      	str	r3, [sp, #24]
 80077b8:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 80077bc:	2300      	movs	r3, #0
 80077be:	2200      	movs	r2, #0
 80077c0:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 80077c4:	9a04      	ldr	r2, [sp, #16]
 80077c6:	3201      	adds	r2, #1
 80077c8:	f000 848d 	beq.w	80080e6 <_svfprintf_r+0x134e>
 80077cc:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 80077d0:	9203      	str	r2, [sp, #12]
 80077d2:	ea56 0207 	orrs.w	r2, r6, r7
 80077d6:	f040 848c 	bne.w	80080f2 <_svfprintf_r+0x135a>
 80077da:	9a04      	ldr	r2, [sp, #16]
 80077dc:	2a00      	cmp	r2, #0
 80077de:	f000 80f5 	beq.w	80079cc <_svfprintf_r+0xc34>
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	f040 8488 	bne.w	80080f8 <_svfprintf_r+0x1360>
 80077e8:	e097      	b.n	800791a <_svfprintf_r+0xb82>
 80077ea:	1d33      	adds	r3, r6, #4
 80077ec:	f018 0f10 	tst.w	r8, #16
 80077f0:	9306      	str	r3, [sp, #24]
 80077f2:	d001      	beq.n	80077f8 <_svfprintf_r+0xa60>
 80077f4:	6836      	ldr	r6, [r6, #0]
 80077f6:	e003      	b.n	8007800 <_svfprintf_r+0xa68>
 80077f8:	f018 0f40 	tst.w	r8, #64	; 0x40
 80077fc:	d002      	beq.n	8007804 <_svfprintf_r+0xa6c>
 80077fe:	8836      	ldrh	r6, [r6, #0]
 8007800:	2700      	movs	r7, #0
 8007802:	e7d9      	b.n	80077b8 <_svfprintf_r+0xa20>
 8007804:	f418 7f00 	tst.w	r8, #512	; 0x200
 8007808:	d0f4      	beq.n	80077f4 <_svfprintf_r+0xa5c>
 800780a:	7836      	ldrb	r6, [r6, #0]
 800780c:	e7f8      	b.n	8007800 <_svfprintf_r+0xa68>
 800780e:	4633      	mov	r3, r6
 8007810:	2278      	movs	r2, #120	; 0x78
 8007812:	f853 6b04 	ldr.w	r6, [r3], #4
 8007816:	9306      	str	r3, [sp, #24]
 8007818:	f647 0330 	movw	r3, #30768	; 0x7830
 800781c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8007820:	4ba1      	ldr	r3, [pc, #644]	; (8007aa8 <_svfprintf_r+0xd10>)
 8007822:	9316      	str	r3, [sp, #88]	; 0x58
 8007824:	2700      	movs	r7, #0
 8007826:	f048 0802 	orr.w	r8, r8, #2
 800782a:	2302      	movs	r3, #2
 800782c:	9207      	str	r2, [sp, #28]
 800782e:	e7c6      	b.n	80077be <_svfprintf_r+0xa26>
 8007830:	4633      	mov	r3, r6
 8007832:	2500      	movs	r5, #0
 8007834:	f853 bb04 	ldr.w	fp, [r3], #4
 8007838:	9306      	str	r3, [sp, #24]
 800783a:	9b04      	ldr	r3, [sp, #16]
 800783c:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8007840:	1c59      	adds	r1, r3, #1
 8007842:	d010      	beq.n	8007866 <_svfprintf_r+0xace>
 8007844:	461a      	mov	r2, r3
 8007846:	4629      	mov	r1, r5
 8007848:	4658      	mov	r0, fp
 800784a:	f7f8 fcc9 	bl	80001e0 <memchr>
 800784e:	9003      	str	r0, [sp, #12]
 8007850:	2800      	cmp	r0, #0
 8007852:	f000 80d2 	beq.w	80079fa <_svfprintf_r+0xc62>
 8007856:	eba0 030b 	sub.w	r3, r0, fp
 800785a:	e9cd 5303 	strd	r5, r3, [sp, #12]
 800785e:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8007862:	462e      	mov	r6, r5
 8007864:	e5c0      	b.n	80073e8 <_svfprintf_r+0x650>
 8007866:	4658      	mov	r0, fp
 8007868:	f7f8 fcb2 	bl	80001d0 <strlen>
 800786c:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8007870:	e463      	b.n	800713a <_svfprintf_r+0x3a2>
 8007872:	f048 0810 	orr.w	r8, r8, #16
 8007876:	f018 0f20 	tst.w	r8, #32
 800787a:	d007      	beq.n	800788c <_svfprintf_r+0xaf4>
 800787c:	3607      	adds	r6, #7
 800787e:	f026 0307 	bic.w	r3, r6, #7
 8007882:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8007886:	9306      	str	r3, [sp, #24]
 8007888:	2301      	movs	r3, #1
 800788a:	e798      	b.n	80077be <_svfprintf_r+0xa26>
 800788c:	1d33      	adds	r3, r6, #4
 800788e:	f018 0f10 	tst.w	r8, #16
 8007892:	9306      	str	r3, [sp, #24]
 8007894:	d001      	beq.n	800789a <_svfprintf_r+0xb02>
 8007896:	6836      	ldr	r6, [r6, #0]
 8007898:	e003      	b.n	80078a2 <_svfprintf_r+0xb0a>
 800789a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800789e:	d002      	beq.n	80078a6 <_svfprintf_r+0xb0e>
 80078a0:	8836      	ldrh	r6, [r6, #0]
 80078a2:	2700      	movs	r7, #0
 80078a4:	e7f0      	b.n	8007888 <_svfprintf_r+0xaf0>
 80078a6:	f418 7f00 	tst.w	r8, #512	; 0x200
 80078aa:	d0f4      	beq.n	8007896 <_svfprintf_r+0xafe>
 80078ac:	7836      	ldrb	r6, [r6, #0]
 80078ae:	e7f8      	b.n	80078a2 <_svfprintf_r+0xb0a>
 80078b0:	4b7e      	ldr	r3, [pc, #504]	; (8007aac <_svfprintf_r+0xd14>)
 80078b2:	9316      	str	r3, [sp, #88]	; 0x58
 80078b4:	f018 0f20 	tst.w	r8, #32
 80078b8:	d019      	beq.n	80078ee <_svfprintf_r+0xb56>
 80078ba:	3607      	adds	r6, #7
 80078bc:	f026 0307 	bic.w	r3, r6, #7
 80078c0:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80078c4:	9306      	str	r3, [sp, #24]
 80078c6:	f018 0f01 	tst.w	r8, #1
 80078ca:	d00a      	beq.n	80078e2 <_svfprintf_r+0xb4a>
 80078cc:	ea56 0307 	orrs.w	r3, r6, r7
 80078d0:	d007      	beq.n	80078e2 <_svfprintf_r+0xb4a>
 80078d2:	2330      	movs	r3, #48	; 0x30
 80078d4:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80078d8:	9b07      	ldr	r3, [sp, #28]
 80078da:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80078de:	f048 0802 	orr.w	r8, r8, #2
 80078e2:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 80078e6:	2302      	movs	r3, #2
 80078e8:	e769      	b.n	80077be <_svfprintf_r+0xa26>
 80078ea:	4b6f      	ldr	r3, [pc, #444]	; (8007aa8 <_svfprintf_r+0xd10>)
 80078ec:	e7e1      	b.n	80078b2 <_svfprintf_r+0xb1a>
 80078ee:	1d33      	adds	r3, r6, #4
 80078f0:	f018 0f10 	tst.w	r8, #16
 80078f4:	9306      	str	r3, [sp, #24]
 80078f6:	d001      	beq.n	80078fc <_svfprintf_r+0xb64>
 80078f8:	6836      	ldr	r6, [r6, #0]
 80078fa:	e003      	b.n	8007904 <_svfprintf_r+0xb6c>
 80078fc:	f018 0f40 	tst.w	r8, #64	; 0x40
 8007900:	d002      	beq.n	8007908 <_svfprintf_r+0xb70>
 8007902:	8836      	ldrh	r6, [r6, #0]
 8007904:	2700      	movs	r7, #0
 8007906:	e7de      	b.n	80078c6 <_svfprintf_r+0xb2e>
 8007908:	f418 7f00 	tst.w	r8, #512	; 0x200
 800790c:	d0f4      	beq.n	80078f8 <_svfprintf_r+0xb60>
 800790e:	7836      	ldrb	r6, [r6, #0]
 8007910:	e7f8      	b.n	8007904 <_svfprintf_r+0xb6c>
 8007912:	2f00      	cmp	r7, #0
 8007914:	bf08      	it	eq
 8007916:	2e0a      	cmpeq	r6, #10
 8007918:	d206      	bcs.n	8007928 <_svfprintf_r+0xb90>
 800791a:	3630      	adds	r6, #48	; 0x30
 800791c:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8007920:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 8007924:	f000 bc06 	b.w	8008134 <_svfprintf_r+0x139c>
 8007928:	2300      	movs	r3, #0
 800792a:	9305      	str	r3, [sp, #20]
 800792c:	9b03      	ldr	r3, [sp, #12]
 800792e:	ad4e      	add	r5, sp, #312	; 0x138
 8007930:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 8007934:	220a      	movs	r2, #10
 8007936:	2300      	movs	r3, #0
 8007938:	4630      	mov	r0, r6
 800793a:	4639      	mov	r1, r7
 800793c:	f7f9 f984 	bl	8000c48 <__aeabi_uldivmod>
 8007940:	9b05      	ldr	r3, [sp, #20]
 8007942:	3230      	adds	r2, #48	; 0x30
 8007944:	3301      	adds	r3, #1
 8007946:	f105 3bff 	add.w	fp, r5, #4294967295
 800794a:	f805 2c01 	strb.w	r2, [r5, #-1]
 800794e:	9305      	str	r3, [sp, #20]
 8007950:	f1b8 0f00 	cmp.w	r8, #0
 8007954:	d019      	beq.n	800798a <_svfprintf_r+0xbf2>
 8007956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007958:	9a05      	ldr	r2, [sp, #20]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	429a      	cmp	r2, r3
 800795e:	d114      	bne.n	800798a <_svfprintf_r+0xbf2>
 8007960:	2aff      	cmp	r2, #255	; 0xff
 8007962:	d012      	beq.n	800798a <_svfprintf_r+0xbf2>
 8007964:	2f00      	cmp	r7, #0
 8007966:	bf08      	it	eq
 8007968:	2e0a      	cmpeq	r6, #10
 800796a:	d30e      	bcc.n	800798a <_svfprintf_r+0xbf2>
 800796c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800796e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007970:	ebab 0b03 	sub.w	fp, fp, r3
 8007974:	461a      	mov	r2, r3
 8007976:	4658      	mov	r0, fp
 8007978:	f003 fe23 	bl	800b5c2 <strncpy>
 800797c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800797e:	785d      	ldrb	r5, [r3, #1]
 8007980:	b195      	cbz	r5, 80079a8 <_svfprintf_r+0xc10>
 8007982:	3301      	adds	r3, #1
 8007984:	930a      	str	r3, [sp, #40]	; 0x28
 8007986:	2300      	movs	r3, #0
 8007988:	9305      	str	r3, [sp, #20]
 800798a:	220a      	movs	r2, #10
 800798c:	2300      	movs	r3, #0
 800798e:	4630      	mov	r0, r6
 8007990:	4639      	mov	r1, r7
 8007992:	f7f9 f959 	bl	8000c48 <__aeabi_uldivmod>
 8007996:	2f00      	cmp	r7, #0
 8007998:	bf08      	it	eq
 800799a:	2e0a      	cmpeq	r6, #10
 800799c:	f0c0 83ca 	bcc.w	8008134 <_svfprintf_r+0x139c>
 80079a0:	4606      	mov	r6, r0
 80079a2:	460f      	mov	r7, r1
 80079a4:	465d      	mov	r5, fp
 80079a6:	e7c5      	b.n	8007934 <_svfprintf_r+0xb9c>
 80079a8:	9505      	str	r5, [sp, #20]
 80079aa:	e7ee      	b.n	800798a <_svfprintf_r+0xbf2>
 80079ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80079ae:	f006 030f 	and.w	r3, r6, #15
 80079b2:	5cd3      	ldrb	r3, [r2, r3]
 80079b4:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80079b8:	0933      	lsrs	r3, r6, #4
 80079ba:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80079be:	093a      	lsrs	r2, r7, #4
 80079c0:	461e      	mov	r6, r3
 80079c2:	4617      	mov	r7, r2
 80079c4:	ea56 0307 	orrs.w	r3, r6, r7
 80079c8:	d1f0      	bne.n	80079ac <_svfprintf_r+0xc14>
 80079ca:	e3b3      	b.n	8008134 <_svfprintf_r+0x139c>
 80079cc:	b933      	cbnz	r3, 80079dc <_svfprintf_r+0xc44>
 80079ce:	f018 0f01 	tst.w	r8, #1
 80079d2:	d003      	beq.n	80079dc <_svfprintf_r+0xc44>
 80079d4:	2330      	movs	r3, #48	; 0x30
 80079d6:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 80079da:	e7a1      	b.n	8007920 <_svfprintf_r+0xb88>
 80079dc:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 80079e0:	e3a8      	b.n	8008134 <_svfprintf_r+0x139c>
 80079e2:	9b07      	ldr	r3, [sp, #28]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 8373 	beq.w	80080d0 <_svfprintf_r+0x1338>
 80079ea:	2000      	movs	r0, #0
 80079ec:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80079f0:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 80079f4:	9606      	str	r6, [sp, #24]
 80079f6:	f7ff bb34 	b.w	8007062 <_svfprintf_r+0x2ca>
 80079fa:	9e03      	ldr	r6, [sp, #12]
 80079fc:	f7ff bb9e 	b.w	800713c <_svfprintf_r+0x3a4>
 8007a00:	2010      	movs	r0, #16
 8007a02:	4402      	add	r2, r0
 8007a04:	2b07      	cmp	r3, #7
 8007a06:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007a0a:	6060      	str	r0, [r4, #4]
 8007a0c:	dd08      	ble.n	8007a20 <_svfprintf_r+0xc88>
 8007a0e:	aa22      	add	r2, sp, #136	; 0x88
 8007a10:	4649      	mov	r1, r9
 8007a12:	4650      	mov	r0, sl
 8007a14:	f003 fde8 	bl	800b5e8 <__ssprint_r>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	f040 8337 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007a1e:	a925      	add	r1, sp, #148	; 0x94
 8007a20:	3f10      	subs	r7, #16
 8007a22:	460c      	mov	r4, r1
 8007a24:	e4fb      	b.n	800741e <_svfprintf_r+0x686>
 8007a26:	460c      	mov	r4, r1
 8007a28:	e514      	b.n	8007454 <_svfprintf_r+0x6bc>
 8007a2a:	aa22      	add	r2, sp, #136	; 0x88
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	4650      	mov	r0, sl
 8007a30:	f003 fdda 	bl	800b5e8 <__ssprint_r>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	f040 8329 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007a3a:	ac25      	add	r4, sp, #148	; 0x94
 8007a3c:	e51c      	b.n	8007478 <_svfprintf_r+0x6e0>
 8007a3e:	aa22      	add	r2, sp, #136	; 0x88
 8007a40:	4649      	mov	r1, r9
 8007a42:	4650      	mov	r0, sl
 8007a44:	f003 fdd0 	bl	800b5e8 <__ssprint_r>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	f040 831f 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007a4e:	ac25      	add	r4, sp, #148	; 0x94
 8007a50:	e522      	b.n	8007498 <_svfprintf_r+0x700>
 8007a52:	2010      	movs	r0, #16
 8007a54:	4402      	add	r2, r0
 8007a56:	2b07      	cmp	r3, #7
 8007a58:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007a5c:	6060      	str	r0, [r4, #4]
 8007a5e:	dd08      	ble.n	8007a72 <_svfprintf_r+0xcda>
 8007a60:	aa22      	add	r2, sp, #136	; 0x88
 8007a62:	4649      	mov	r1, r9
 8007a64:	4650      	mov	r0, sl
 8007a66:	f003 fdbf 	bl	800b5e8 <__ssprint_r>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	f040 830e 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007a70:	a925      	add	r1, sp, #148	; 0x94
 8007a72:	3f10      	subs	r7, #16
 8007a74:	460c      	mov	r4, r1
 8007a76:	e517      	b.n	80074a8 <_svfprintf_r+0x710>
 8007a78:	460c      	mov	r4, r1
 8007a7a:	e530      	b.n	80074de <_svfprintf_r+0x746>
 8007a7c:	2010      	movs	r0, #16
 8007a7e:	4402      	add	r2, r0
 8007a80:	2b07      	cmp	r3, #7
 8007a82:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007a86:	6060      	str	r0, [r4, #4]
 8007a88:	dd08      	ble.n	8007a9c <_svfprintf_r+0xd04>
 8007a8a:	aa22      	add	r2, sp, #136	; 0x88
 8007a8c:	4649      	mov	r1, r9
 8007a8e:	4650      	mov	r0, sl
 8007a90:	f003 fdaa 	bl	800b5e8 <__ssprint_r>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	f040 82f9 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007a9a:	a925      	add	r1, sp, #148	; 0x94
 8007a9c:	3e10      	subs	r6, #16
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	e522      	b.n	80074e8 <_svfprintf_r+0x750>
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	e548      	b.n	8007538 <_svfprintf_r+0x7a0>
 8007aa6:	bf00      	nop
 8007aa8:	0800cd40 	.word	0x0800cd40
 8007aac:	0800cd51 	.word	0x0800cd51
 8007ab0:	9b07      	ldr	r3, [sp, #28]
 8007ab2:	2b65      	cmp	r3, #101	; 0x65
 8007ab4:	f340 8232 	ble.w	8007f1c <_svfprintf_r+0x1184>
 8007ab8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007abc:	2200      	movs	r2, #0
 8007abe:	2300      	movs	r3, #0
 8007ac0:	f7f9 f802 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d068      	beq.n	8007b9a <_svfprintf_r+0xe02>
 8007ac8:	4b6d      	ldr	r3, [pc, #436]	; (8007c80 <_svfprintf_r+0xee8>)
 8007aca:	6023      	str	r3, [r4, #0]
 8007acc:	2301      	movs	r3, #1
 8007ace:	441e      	add	r6, r3
 8007ad0:	6063      	str	r3, [r4, #4]
 8007ad2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ad4:	9624      	str	r6, [sp, #144]	; 0x90
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	2b07      	cmp	r3, #7
 8007ada:	9323      	str	r3, [sp, #140]	; 0x8c
 8007adc:	dc37      	bgt.n	8007b4e <_svfprintf_r+0xdb6>
 8007ade:	3408      	adds	r4, #8
 8007ae0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007ae2:	9a05      	ldr	r2, [sp, #20]
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	db03      	blt.n	8007af0 <_svfprintf_r+0xd58>
 8007ae8:	f018 0f01 	tst.w	r8, #1
 8007aec:	f43f ad36 	beq.w	800755c <_svfprintf_r+0x7c4>
 8007af0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007af2:	6023      	str	r3, [r4, #0]
 8007af4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007af8:	6063      	str	r3, [r4, #4]
 8007afa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007afc:	4413      	add	r3, r2
 8007afe:	9324      	str	r3, [sp, #144]	; 0x90
 8007b00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b02:	3301      	adds	r3, #1
 8007b04:	2b07      	cmp	r3, #7
 8007b06:	9323      	str	r3, [sp, #140]	; 0x8c
 8007b08:	dc2b      	bgt.n	8007b62 <_svfprintf_r+0xdca>
 8007b0a:	3408      	adds	r4, #8
 8007b0c:	9b05      	ldr	r3, [sp, #20]
 8007b0e:	1e5d      	subs	r5, r3, #1
 8007b10:	2d00      	cmp	r5, #0
 8007b12:	f77f ad23 	ble.w	800755c <_svfprintf_r+0x7c4>
 8007b16:	4e5b      	ldr	r6, [pc, #364]	; (8007c84 <_svfprintf_r+0xeec>)
 8007b18:	2710      	movs	r7, #16
 8007b1a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007b1e:	2d10      	cmp	r5, #16
 8007b20:	f103 0301 	add.w	r3, r3, #1
 8007b24:	f104 0108 	add.w	r1, r4, #8
 8007b28:	6026      	str	r6, [r4, #0]
 8007b2a:	dc24      	bgt.n	8007b76 <_svfprintf_r+0xdde>
 8007b2c:	6065      	str	r5, [r4, #4]
 8007b2e:	2b07      	cmp	r3, #7
 8007b30:	4415      	add	r5, r2
 8007b32:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8007b36:	f340 8288 	ble.w	800804a <_svfprintf_r+0x12b2>
 8007b3a:	aa22      	add	r2, sp, #136	; 0x88
 8007b3c:	4649      	mov	r1, r9
 8007b3e:	4650      	mov	r0, sl
 8007b40:	f003 fd52 	bl	800b5e8 <__ssprint_r>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	f040 82a1 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007b4a:	ac25      	add	r4, sp, #148	; 0x94
 8007b4c:	e506      	b.n	800755c <_svfprintf_r+0x7c4>
 8007b4e:	aa22      	add	r2, sp, #136	; 0x88
 8007b50:	4649      	mov	r1, r9
 8007b52:	4650      	mov	r0, sl
 8007b54:	f003 fd48 	bl	800b5e8 <__ssprint_r>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	f040 8297 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007b5e:	ac25      	add	r4, sp, #148	; 0x94
 8007b60:	e7be      	b.n	8007ae0 <_svfprintf_r+0xd48>
 8007b62:	aa22      	add	r2, sp, #136	; 0x88
 8007b64:	4649      	mov	r1, r9
 8007b66:	4650      	mov	r0, sl
 8007b68:	f003 fd3e 	bl	800b5e8 <__ssprint_r>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	f040 828d 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007b72:	ac25      	add	r4, sp, #148	; 0x94
 8007b74:	e7ca      	b.n	8007b0c <_svfprintf_r+0xd74>
 8007b76:	3210      	adds	r2, #16
 8007b78:	2b07      	cmp	r3, #7
 8007b7a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007b7e:	6067      	str	r7, [r4, #4]
 8007b80:	dd08      	ble.n	8007b94 <_svfprintf_r+0xdfc>
 8007b82:	aa22      	add	r2, sp, #136	; 0x88
 8007b84:	4649      	mov	r1, r9
 8007b86:	4650      	mov	r0, sl
 8007b88:	f003 fd2e 	bl	800b5e8 <__ssprint_r>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	f040 827d 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007b92:	a925      	add	r1, sp, #148	; 0x94
 8007b94:	3d10      	subs	r5, #16
 8007b96:	460c      	mov	r4, r1
 8007b98:	e7bf      	b.n	8007b1a <_svfprintf_r+0xd82>
 8007b9a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	dc73      	bgt.n	8007c88 <_svfprintf_r+0xef0>
 8007ba0:	4b37      	ldr	r3, [pc, #220]	; (8007c80 <_svfprintf_r+0xee8>)
 8007ba2:	6023      	str	r3, [r4, #0]
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	441e      	add	r6, r3
 8007ba8:	6063      	str	r3, [r4, #4]
 8007baa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007bac:	9624      	str	r6, [sp, #144]	; 0x90
 8007bae:	3301      	adds	r3, #1
 8007bb0:	2b07      	cmp	r3, #7
 8007bb2:	9323      	str	r3, [sp, #140]	; 0x8c
 8007bb4:	dc3d      	bgt.n	8007c32 <_svfprintf_r+0xe9a>
 8007bb6:	3408      	adds	r4, #8
 8007bb8:	9905      	ldr	r1, [sp, #20]
 8007bba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007bbc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	f008 0101 	and.w	r1, r8, #1
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	f43f acc9 	beq.w	800755c <_svfprintf_r+0x7c4>
 8007bca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bcc:	6022      	str	r2, [r4, #0]
 8007bce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bd0:	6062      	str	r2, [r4, #4]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	9324      	str	r3, [sp, #144]	; 0x90
 8007bd6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007bd8:	3301      	adds	r3, #1
 8007bda:	2b07      	cmp	r3, #7
 8007bdc:	9323      	str	r3, [sp, #140]	; 0x8c
 8007bde:	dc32      	bgt.n	8007c46 <_svfprintf_r+0xeae>
 8007be0:	3408      	adds	r4, #8
 8007be2:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007be4:	2d00      	cmp	r5, #0
 8007be6:	da1b      	bge.n	8007c20 <_svfprintf_r+0xe88>
 8007be8:	4e26      	ldr	r6, [pc, #152]	; (8007c84 <_svfprintf_r+0xeec>)
 8007bea:	426d      	negs	r5, r5
 8007bec:	4623      	mov	r3, r4
 8007bee:	2710      	movs	r7, #16
 8007bf0:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8007bf4:	2d10      	cmp	r5, #16
 8007bf6:	f102 0201 	add.w	r2, r2, #1
 8007bfa:	f104 0408 	add.w	r4, r4, #8
 8007bfe:	601e      	str	r6, [r3, #0]
 8007c00:	dc2b      	bgt.n	8007c5a <_svfprintf_r+0xec2>
 8007c02:	605d      	str	r5, [r3, #4]
 8007c04:	2a07      	cmp	r2, #7
 8007c06:	440d      	add	r5, r1
 8007c08:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8007c0c:	dd08      	ble.n	8007c20 <_svfprintf_r+0xe88>
 8007c0e:	aa22      	add	r2, sp, #136	; 0x88
 8007c10:	4649      	mov	r1, r9
 8007c12:	4650      	mov	r0, sl
 8007c14:	f003 fce8 	bl	800b5e8 <__ssprint_r>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	f040 8237 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007c1e:	ac25      	add	r4, sp, #148	; 0x94
 8007c20:	9b05      	ldr	r3, [sp, #20]
 8007c22:	9a05      	ldr	r2, [sp, #20]
 8007c24:	6063      	str	r3, [r4, #4]
 8007c26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007c28:	f8c4 b000 	str.w	fp, [r4]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	9324      	str	r3, [sp, #144]	; 0x90
 8007c30:	e48d      	b.n	800754e <_svfprintf_r+0x7b6>
 8007c32:	aa22      	add	r2, sp, #136	; 0x88
 8007c34:	4649      	mov	r1, r9
 8007c36:	4650      	mov	r0, sl
 8007c38:	f003 fcd6 	bl	800b5e8 <__ssprint_r>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	f040 8225 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007c42:	ac25      	add	r4, sp, #148	; 0x94
 8007c44:	e7b8      	b.n	8007bb8 <_svfprintf_r+0xe20>
 8007c46:	aa22      	add	r2, sp, #136	; 0x88
 8007c48:	4649      	mov	r1, r9
 8007c4a:	4650      	mov	r0, sl
 8007c4c:	f003 fccc 	bl	800b5e8 <__ssprint_r>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	f040 821b 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007c56:	ac25      	add	r4, sp, #148	; 0x94
 8007c58:	e7c3      	b.n	8007be2 <_svfprintf_r+0xe4a>
 8007c5a:	3110      	adds	r1, #16
 8007c5c:	2a07      	cmp	r2, #7
 8007c5e:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8007c62:	605f      	str	r7, [r3, #4]
 8007c64:	dd08      	ble.n	8007c78 <_svfprintf_r+0xee0>
 8007c66:	aa22      	add	r2, sp, #136	; 0x88
 8007c68:	4649      	mov	r1, r9
 8007c6a:	4650      	mov	r0, sl
 8007c6c:	f003 fcbc 	bl	800b5e8 <__ssprint_r>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	f040 820b 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007c76:	ac25      	add	r4, sp, #148	; 0x94
 8007c78:	3d10      	subs	r5, #16
 8007c7a:	4623      	mov	r3, r4
 8007c7c:	e7b8      	b.n	8007bf0 <_svfprintf_r+0xe58>
 8007c7e:	bf00      	nop
 8007c80:	0800cd62 	.word	0x0800cd62
 8007c84:	0800cd74 	.word	0x0800cd74
 8007c88:	9b05      	ldr	r3, [sp, #20]
 8007c8a:	42ab      	cmp	r3, r5
 8007c8c:	bfa8      	it	ge
 8007c8e:	462b      	movge	r3, r5
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	461f      	mov	r7, r3
 8007c94:	dd0a      	ble.n	8007cac <_svfprintf_r+0xf14>
 8007c96:	441e      	add	r6, r3
 8007c98:	e9c4 b300 	strd	fp, r3, [r4]
 8007c9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c9e:	9624      	str	r6, [sp, #144]	; 0x90
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	2b07      	cmp	r3, #7
 8007ca4:	9323      	str	r3, [sp, #140]	; 0x8c
 8007ca6:	f300 8086 	bgt.w	8007db6 <_svfprintf_r+0x101e>
 8007caa:	3408      	adds	r4, #8
 8007cac:	2f00      	cmp	r7, #0
 8007cae:	bfac      	ite	ge
 8007cb0:	1bee      	subge	r6, r5, r7
 8007cb2:	462e      	movlt	r6, r5
 8007cb4:	2e00      	cmp	r6, #0
 8007cb6:	dd19      	ble.n	8007cec <_svfprintf_r+0xf54>
 8007cb8:	4f97      	ldr	r7, [pc, #604]	; (8007f18 <_svfprintf_r+0x1180>)
 8007cba:	6027      	str	r7, [r4, #0]
 8007cbc:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007cc0:	2e10      	cmp	r6, #16
 8007cc2:	f103 0301 	add.w	r3, r3, #1
 8007cc6:	f104 0108 	add.w	r1, r4, #8
 8007cca:	dc7e      	bgt.n	8007dca <_svfprintf_r+0x1032>
 8007ccc:	6066      	str	r6, [r4, #4]
 8007cce:	2b07      	cmp	r3, #7
 8007cd0:	4416      	add	r6, r2
 8007cd2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8007cd6:	f340 808b 	ble.w	8007df0 <_svfprintf_r+0x1058>
 8007cda:	aa22      	add	r2, sp, #136	; 0x88
 8007cdc:	4649      	mov	r1, r9
 8007cde:	4650      	mov	r0, sl
 8007ce0:	f003 fc82 	bl	800b5e8 <__ssprint_r>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	f040 81d1 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007cea:	ac25      	add	r4, sp, #148	; 0x94
 8007cec:	f418 6f80 	tst.w	r8, #1024	; 0x400
 8007cf0:	445d      	add	r5, fp
 8007cf2:	d00b      	beq.n	8007d0c <_svfprintf_r+0xf74>
 8007cf4:	4e88      	ldr	r6, [pc, #544]	; (8007f18 <_svfprintf_r+0x1180>)
 8007cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d17b      	bne.n	8007df4 <_svfprintf_r+0x105c>
 8007cfc:	9b08      	ldr	r3, [sp, #32]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d17b      	bne.n	8007dfa <_svfprintf_r+0x1062>
 8007d02:	9b05      	ldr	r3, [sp, #20]
 8007d04:	445b      	add	r3, fp
 8007d06:	429d      	cmp	r5, r3
 8007d08:	bf28      	it	cs
 8007d0a:	461d      	movcs	r5, r3
 8007d0c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007d0e:	9a05      	ldr	r2, [sp, #20]
 8007d10:	4293      	cmp	r3, r2
 8007d12:	db02      	blt.n	8007d1a <_svfprintf_r+0xf82>
 8007d14:	f018 0f01 	tst.w	r8, #1
 8007d18:	d00e      	beq.n	8007d38 <_svfprintf_r+0xfa0>
 8007d1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d22:	6063      	str	r3, [r4, #4]
 8007d24:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007d26:	4413      	add	r3, r2
 8007d28:	9324      	str	r3, [sp, #144]	; 0x90
 8007d2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	2b07      	cmp	r3, #7
 8007d30:	9323      	str	r3, [sp, #140]	; 0x8c
 8007d32:	f300 80dd 	bgt.w	8007ef0 <_svfprintf_r+0x1158>
 8007d36:	3408      	adds	r4, #8
 8007d38:	9b05      	ldr	r3, [sp, #20]
 8007d3a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8007d3c:	eb0b 0203 	add.w	r2, fp, r3
 8007d40:	1b9e      	subs	r6, r3, r6
 8007d42:	1b52      	subs	r2, r2, r5
 8007d44:	4296      	cmp	r6, r2
 8007d46:	bfa8      	it	ge
 8007d48:	4616      	movge	r6, r2
 8007d4a:	2e00      	cmp	r6, #0
 8007d4c:	dd0b      	ble.n	8007d66 <_svfprintf_r+0xfce>
 8007d4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007d50:	4433      	add	r3, r6
 8007d52:	9324      	str	r3, [sp, #144]	; 0x90
 8007d54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d56:	3301      	adds	r3, #1
 8007d58:	2b07      	cmp	r3, #7
 8007d5a:	e9c4 5600 	strd	r5, r6, [r4]
 8007d5e:	9323      	str	r3, [sp, #140]	; 0x8c
 8007d60:	f300 80d0 	bgt.w	8007f04 <_svfprintf_r+0x116c>
 8007d64:	3408      	adds	r4, #8
 8007d66:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007d68:	9b05      	ldr	r3, [sp, #20]
 8007d6a:	2e00      	cmp	r6, #0
 8007d6c:	eba3 0505 	sub.w	r5, r3, r5
 8007d70:	bfa8      	it	ge
 8007d72:	1bad      	subge	r5, r5, r6
 8007d74:	2d00      	cmp	r5, #0
 8007d76:	f77f abf1 	ble.w	800755c <_svfprintf_r+0x7c4>
 8007d7a:	4e67      	ldr	r6, [pc, #412]	; (8007f18 <_svfprintf_r+0x1180>)
 8007d7c:	2710      	movs	r7, #16
 8007d7e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007d82:	2d10      	cmp	r5, #16
 8007d84:	f103 0301 	add.w	r3, r3, #1
 8007d88:	f104 0108 	add.w	r1, r4, #8
 8007d8c:	6026      	str	r6, [r4, #0]
 8007d8e:	f77f aecd 	ble.w	8007b2c <_svfprintf_r+0xd94>
 8007d92:	3210      	adds	r2, #16
 8007d94:	2b07      	cmp	r3, #7
 8007d96:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007d9a:	6067      	str	r7, [r4, #4]
 8007d9c:	dd08      	ble.n	8007db0 <_svfprintf_r+0x1018>
 8007d9e:	aa22      	add	r2, sp, #136	; 0x88
 8007da0:	4649      	mov	r1, r9
 8007da2:	4650      	mov	r0, sl
 8007da4:	f003 fc20 	bl	800b5e8 <__ssprint_r>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	f040 816f 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007dae:	a925      	add	r1, sp, #148	; 0x94
 8007db0:	3d10      	subs	r5, #16
 8007db2:	460c      	mov	r4, r1
 8007db4:	e7e3      	b.n	8007d7e <_svfprintf_r+0xfe6>
 8007db6:	aa22      	add	r2, sp, #136	; 0x88
 8007db8:	4649      	mov	r1, r9
 8007dba:	4650      	mov	r0, sl
 8007dbc:	f003 fc14 	bl	800b5e8 <__ssprint_r>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	f040 8163 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007dc6:	ac25      	add	r4, sp, #148	; 0x94
 8007dc8:	e770      	b.n	8007cac <_svfprintf_r+0xf14>
 8007dca:	2010      	movs	r0, #16
 8007dcc:	4402      	add	r2, r0
 8007dce:	2b07      	cmp	r3, #7
 8007dd0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007dd4:	6060      	str	r0, [r4, #4]
 8007dd6:	dd08      	ble.n	8007dea <_svfprintf_r+0x1052>
 8007dd8:	aa22      	add	r2, sp, #136	; 0x88
 8007dda:	4649      	mov	r1, r9
 8007ddc:	4650      	mov	r0, sl
 8007dde:	f003 fc03 	bl	800b5e8 <__ssprint_r>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	f040 8152 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007de8:	a925      	add	r1, sp, #148	; 0x94
 8007dea:	3e10      	subs	r6, #16
 8007dec:	460c      	mov	r4, r1
 8007dee:	e764      	b.n	8007cba <_svfprintf_r+0xf22>
 8007df0:	460c      	mov	r4, r1
 8007df2:	e77b      	b.n	8007cec <_svfprintf_r+0xf54>
 8007df4:	9b08      	ldr	r3, [sp, #32]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d04a      	beq.n	8007e90 <_svfprintf_r+0x10f8>
 8007dfa:	9b08      	ldr	r3, [sp, #32]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	9308      	str	r3, [sp, #32]
 8007e00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e02:	6023      	str	r3, [r4, #0]
 8007e04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e08:	6063      	str	r3, [r4, #4]
 8007e0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007e0c:	4413      	add	r3, r2
 8007e0e:	9324      	str	r3, [sp, #144]	; 0x90
 8007e10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e12:	3301      	adds	r3, #1
 8007e14:	2b07      	cmp	r3, #7
 8007e16:	9323      	str	r3, [sp, #140]	; 0x8c
 8007e18:	dc41      	bgt.n	8007e9e <_svfprintf_r+0x1106>
 8007e1a:	3408      	adds	r4, #8
 8007e1c:	9b05      	ldr	r3, [sp, #20]
 8007e1e:	445b      	add	r3, fp
 8007e20:	1b5a      	subs	r2, r3, r5
 8007e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	4293      	cmp	r3, r2
 8007e28:	bfa8      	it	ge
 8007e2a:	4613      	movge	r3, r2
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	461f      	mov	r7, r3
 8007e30:	dd0a      	ble.n	8007e48 <_svfprintf_r+0x10b0>
 8007e32:	e9c4 5300 	strd	r5, r3, [r4]
 8007e36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007e38:	443b      	add	r3, r7
 8007e3a:	9324      	str	r3, [sp, #144]	; 0x90
 8007e3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e3e:	3301      	adds	r3, #1
 8007e40:	2b07      	cmp	r3, #7
 8007e42:	9323      	str	r3, [sp, #140]	; 0x8c
 8007e44:	dc35      	bgt.n	8007eb2 <_svfprintf_r+0x111a>
 8007e46:	3408      	adds	r4, #8
 8007e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2f00      	cmp	r7, #0
 8007e4e:	bfac      	ite	ge
 8007e50:	1bdf      	subge	r7, r3, r7
 8007e52:	461f      	movlt	r7, r3
 8007e54:	2f00      	cmp	r7, #0
 8007e56:	dd17      	ble.n	8007e88 <_svfprintf_r+0x10f0>
 8007e58:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8007e5c:	2f10      	cmp	r7, #16
 8007e5e:	f102 0201 	add.w	r2, r2, #1
 8007e62:	f104 0108 	add.w	r1, r4, #8
 8007e66:	6026      	str	r6, [r4, #0]
 8007e68:	dc2d      	bgt.n	8007ec6 <_svfprintf_r+0x112e>
 8007e6a:	443b      	add	r3, r7
 8007e6c:	2a07      	cmp	r2, #7
 8007e6e:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8007e72:	6067      	str	r7, [r4, #4]
 8007e74:	dd3a      	ble.n	8007eec <_svfprintf_r+0x1154>
 8007e76:	aa22      	add	r2, sp, #136	; 0x88
 8007e78:	4649      	mov	r1, r9
 8007e7a:	4650      	mov	r0, sl
 8007e7c:	f003 fbb4 	bl	800b5e8 <__ssprint_r>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	f040 8103 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007e86:	ac25      	add	r4, sp, #148	; 0x94
 8007e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	441d      	add	r5, r3
 8007e8e:	e732      	b.n	8007cf6 <_svfprintf_r+0xf5e>
 8007e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e92:	3b01      	subs	r3, #1
 8007e94:	930a      	str	r3, [sp, #40]	; 0x28
 8007e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e9c:	e7b0      	b.n	8007e00 <_svfprintf_r+0x1068>
 8007e9e:	aa22      	add	r2, sp, #136	; 0x88
 8007ea0:	4649      	mov	r1, r9
 8007ea2:	4650      	mov	r0, sl
 8007ea4:	f003 fba0 	bl	800b5e8 <__ssprint_r>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	f040 80ef 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007eae:	ac25      	add	r4, sp, #148	; 0x94
 8007eb0:	e7b4      	b.n	8007e1c <_svfprintf_r+0x1084>
 8007eb2:	aa22      	add	r2, sp, #136	; 0x88
 8007eb4:	4649      	mov	r1, r9
 8007eb6:	4650      	mov	r0, sl
 8007eb8:	f003 fb96 	bl	800b5e8 <__ssprint_r>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	f040 80e5 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007ec2:	ac25      	add	r4, sp, #148	; 0x94
 8007ec4:	e7c0      	b.n	8007e48 <_svfprintf_r+0x10b0>
 8007ec6:	2010      	movs	r0, #16
 8007ec8:	4403      	add	r3, r0
 8007eca:	2a07      	cmp	r2, #7
 8007ecc:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8007ed0:	6060      	str	r0, [r4, #4]
 8007ed2:	dd08      	ble.n	8007ee6 <_svfprintf_r+0x114e>
 8007ed4:	aa22      	add	r2, sp, #136	; 0x88
 8007ed6:	4649      	mov	r1, r9
 8007ed8:	4650      	mov	r0, sl
 8007eda:	f003 fb85 	bl	800b5e8 <__ssprint_r>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	f040 80d4 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007ee4:	a925      	add	r1, sp, #148	; 0x94
 8007ee6:	3f10      	subs	r7, #16
 8007ee8:	460c      	mov	r4, r1
 8007eea:	e7b5      	b.n	8007e58 <_svfprintf_r+0x10c0>
 8007eec:	460c      	mov	r4, r1
 8007eee:	e7cb      	b.n	8007e88 <_svfprintf_r+0x10f0>
 8007ef0:	aa22      	add	r2, sp, #136	; 0x88
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	4650      	mov	r0, sl
 8007ef6:	f003 fb77 	bl	800b5e8 <__ssprint_r>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	f040 80c6 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007f00:	ac25      	add	r4, sp, #148	; 0x94
 8007f02:	e719      	b.n	8007d38 <_svfprintf_r+0xfa0>
 8007f04:	aa22      	add	r2, sp, #136	; 0x88
 8007f06:	4649      	mov	r1, r9
 8007f08:	4650      	mov	r0, sl
 8007f0a:	f003 fb6d 	bl	800b5e8 <__ssprint_r>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	f040 80bc 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007f14:	ac25      	add	r4, sp, #148	; 0x94
 8007f16:	e726      	b.n	8007d66 <_svfprintf_r+0xfce>
 8007f18:	0800cd74 	.word	0x0800cd74
 8007f1c:	9a05      	ldr	r2, [sp, #20]
 8007f1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f20:	2a01      	cmp	r2, #1
 8007f22:	f106 0601 	add.w	r6, r6, #1
 8007f26:	f103 0301 	add.w	r3, r3, #1
 8007f2a:	f104 0508 	add.w	r5, r4, #8
 8007f2e:	dc02      	bgt.n	8007f36 <_svfprintf_r+0x119e>
 8007f30:	f018 0f01 	tst.w	r8, #1
 8007f34:	d07e      	beq.n	8008034 <_svfprintf_r+0x129c>
 8007f36:	2201      	movs	r2, #1
 8007f38:	2b07      	cmp	r3, #7
 8007f3a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8007f3e:	f8c4 b000 	str.w	fp, [r4]
 8007f42:	6062      	str	r2, [r4, #4]
 8007f44:	dd08      	ble.n	8007f58 <_svfprintf_r+0x11c0>
 8007f46:	aa22      	add	r2, sp, #136	; 0x88
 8007f48:	4649      	mov	r1, r9
 8007f4a:	4650      	mov	r0, sl
 8007f4c:	f003 fb4c 	bl	800b5e8 <__ssprint_r>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	f040 809b 	bne.w	800808c <_svfprintf_r+0x12f4>
 8007f56:	ad25      	add	r5, sp, #148	; 0x94
 8007f58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f5a:	602b      	str	r3, [r5, #0]
 8007f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f60:	606b      	str	r3, [r5, #4]
 8007f62:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007f64:	4413      	add	r3, r2
 8007f66:	9324      	str	r3, [sp, #144]	; 0x90
 8007f68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	2b07      	cmp	r3, #7
 8007f6e:	9323      	str	r3, [sp, #140]	; 0x8c
 8007f70:	dc32      	bgt.n	8007fd8 <_svfprintf_r+0x1240>
 8007f72:	3508      	adds	r5, #8
 8007f74:	9b05      	ldr	r3, [sp, #20]
 8007f76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f7a:	1e5c      	subs	r4, r3, #1
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f7f8 fda2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d130      	bne.n	8007fea <_svfprintf_r+0x1252>
 8007f88:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8007f8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007f8c:	9a05      	ldr	r2, [sp, #20]
 8007f8e:	3101      	adds	r1, #1
 8007f90:	3b01      	subs	r3, #1
 8007f92:	f10b 0001 	add.w	r0, fp, #1
 8007f96:	4413      	add	r3, r2
 8007f98:	2907      	cmp	r1, #7
 8007f9a:	e9c5 0400 	strd	r0, r4, [r5]
 8007f9e:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8007fa2:	dd50      	ble.n	8008046 <_svfprintf_r+0x12ae>
 8007fa4:	aa22      	add	r2, sp, #136	; 0x88
 8007fa6:	4649      	mov	r1, r9
 8007fa8:	4650      	mov	r0, sl
 8007faa:	f003 fb1d 	bl	800b5e8 <__ssprint_r>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d16c      	bne.n	800808c <_svfprintf_r+0x12f4>
 8007fb2:	ad25      	add	r5, sp, #148	; 0x94
 8007fb4:	ab1e      	add	r3, sp, #120	; 0x78
 8007fb6:	602b      	str	r3, [r5, #0]
 8007fb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007fbc:	606b      	str	r3, [r5, #4]
 8007fbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007fc0:	4413      	add	r3, r2
 8007fc2:	9324      	str	r3, [sp, #144]	; 0x90
 8007fc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	2b07      	cmp	r3, #7
 8007fca:	9323      	str	r3, [sp, #140]	; 0x8c
 8007fcc:	f73f adb5 	bgt.w	8007b3a <_svfprintf_r+0xda2>
 8007fd0:	f105 0408 	add.w	r4, r5, #8
 8007fd4:	f7ff bac2 	b.w	800755c <_svfprintf_r+0x7c4>
 8007fd8:	aa22      	add	r2, sp, #136	; 0x88
 8007fda:	4649      	mov	r1, r9
 8007fdc:	4650      	mov	r0, sl
 8007fde:	f003 fb03 	bl	800b5e8 <__ssprint_r>
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d152      	bne.n	800808c <_svfprintf_r+0x12f4>
 8007fe6:	ad25      	add	r5, sp, #148	; 0x94
 8007fe8:	e7c4      	b.n	8007f74 <_svfprintf_r+0x11dc>
 8007fea:	2c00      	cmp	r4, #0
 8007fec:	dde2      	ble.n	8007fb4 <_svfprintf_r+0x121c>
 8007fee:	4e58      	ldr	r6, [pc, #352]	; (8008150 <_svfprintf_r+0x13b8>)
 8007ff0:	2710      	movs	r7, #16
 8007ff2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007ff6:	2c10      	cmp	r4, #16
 8007ff8:	f103 0301 	add.w	r3, r3, #1
 8007ffc:	f105 0108 	add.w	r1, r5, #8
 8008000:	602e      	str	r6, [r5, #0]
 8008002:	dc07      	bgt.n	8008014 <_svfprintf_r+0x127c>
 8008004:	606c      	str	r4, [r5, #4]
 8008006:	2b07      	cmp	r3, #7
 8008008:	4414      	add	r4, r2
 800800a:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800800e:	dcc9      	bgt.n	8007fa4 <_svfprintf_r+0x120c>
 8008010:	460d      	mov	r5, r1
 8008012:	e7cf      	b.n	8007fb4 <_svfprintf_r+0x121c>
 8008014:	3210      	adds	r2, #16
 8008016:	2b07      	cmp	r3, #7
 8008018:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800801c:	606f      	str	r7, [r5, #4]
 800801e:	dd06      	ble.n	800802e <_svfprintf_r+0x1296>
 8008020:	aa22      	add	r2, sp, #136	; 0x88
 8008022:	4649      	mov	r1, r9
 8008024:	4650      	mov	r0, sl
 8008026:	f003 fadf 	bl	800b5e8 <__ssprint_r>
 800802a:	bb78      	cbnz	r0, 800808c <_svfprintf_r+0x12f4>
 800802c:	a925      	add	r1, sp, #148	; 0x94
 800802e:	3c10      	subs	r4, #16
 8008030:	460d      	mov	r5, r1
 8008032:	e7de      	b.n	8007ff2 <_svfprintf_r+0x125a>
 8008034:	2201      	movs	r2, #1
 8008036:	2b07      	cmp	r3, #7
 8008038:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800803c:	f8c4 b000 	str.w	fp, [r4]
 8008040:	6062      	str	r2, [r4, #4]
 8008042:	ddb7      	ble.n	8007fb4 <_svfprintf_r+0x121c>
 8008044:	e7ae      	b.n	8007fa4 <_svfprintf_r+0x120c>
 8008046:	3508      	adds	r5, #8
 8008048:	e7b4      	b.n	8007fb4 <_svfprintf_r+0x121c>
 800804a:	460c      	mov	r4, r1
 800804c:	f7ff ba86 	b.w	800755c <_svfprintf_r+0x7c4>
 8008050:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8008054:	1a9d      	subs	r5, r3, r2
 8008056:	2d00      	cmp	r5, #0
 8008058:	f77f aa84 	ble.w	8007564 <_svfprintf_r+0x7cc>
 800805c:	4e3d      	ldr	r6, [pc, #244]	; (8008154 <_svfprintf_r+0x13bc>)
 800805e:	2710      	movs	r7, #16
 8008060:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008064:	2d10      	cmp	r5, #16
 8008066:	f103 0301 	add.w	r3, r3, #1
 800806a:	6026      	str	r6, [r4, #0]
 800806c:	dc18      	bgt.n	80080a0 <_svfprintf_r+0x1308>
 800806e:	6065      	str	r5, [r4, #4]
 8008070:	2b07      	cmp	r3, #7
 8008072:	4415      	add	r5, r2
 8008074:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8008078:	f77f aa74 	ble.w	8007564 <_svfprintf_r+0x7cc>
 800807c:	aa22      	add	r2, sp, #136	; 0x88
 800807e:	4649      	mov	r1, r9
 8008080:	4650      	mov	r0, sl
 8008082:	f003 fab1 	bl	800b5e8 <__ssprint_r>
 8008086:	2800      	cmp	r0, #0
 8008088:	f43f aa6c 	beq.w	8007564 <_svfprintf_r+0x7cc>
 800808c:	9b03      	ldr	r3, [sp, #12]
 800808e:	2b00      	cmp	r3, #0
 8008090:	f43f a88a 	beq.w	80071a8 <_svfprintf_r+0x410>
 8008094:	4619      	mov	r1, r3
 8008096:	4650      	mov	r0, sl
 8008098:	f002 fb28 	bl	800a6ec <_free_r>
 800809c:	f7ff b884 	b.w	80071a8 <_svfprintf_r+0x410>
 80080a0:	3210      	adds	r2, #16
 80080a2:	2b07      	cmp	r3, #7
 80080a4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80080a8:	6067      	str	r7, [r4, #4]
 80080aa:	dc02      	bgt.n	80080b2 <_svfprintf_r+0x131a>
 80080ac:	3408      	adds	r4, #8
 80080ae:	3d10      	subs	r5, #16
 80080b0:	e7d6      	b.n	8008060 <_svfprintf_r+0x12c8>
 80080b2:	aa22      	add	r2, sp, #136	; 0x88
 80080b4:	4649      	mov	r1, r9
 80080b6:	4650      	mov	r0, sl
 80080b8:	f003 fa96 	bl	800b5e8 <__ssprint_r>
 80080bc:	2800      	cmp	r0, #0
 80080be:	d1e5      	bne.n	800808c <_svfprintf_r+0x12f4>
 80080c0:	ac25      	add	r4, sp, #148	; 0x94
 80080c2:	e7f4      	b.n	80080ae <_svfprintf_r+0x1316>
 80080c4:	9903      	ldr	r1, [sp, #12]
 80080c6:	4650      	mov	r0, sl
 80080c8:	f002 fb10 	bl	800a6ec <_free_r>
 80080cc:	f7ff ba62 	b.w	8007594 <_svfprintf_r+0x7fc>
 80080d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f43f a868 	beq.w	80071a8 <_svfprintf_r+0x410>
 80080d8:	aa22      	add	r2, sp, #136	; 0x88
 80080da:	4649      	mov	r1, r9
 80080dc:	4650      	mov	r0, sl
 80080de:	f003 fa83 	bl	800b5e8 <__ssprint_r>
 80080e2:	f7ff b861 	b.w	80071a8 <_svfprintf_r+0x410>
 80080e6:	ea56 0207 	orrs.w	r2, r6, r7
 80080ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80080ee:	f43f ab78 	beq.w	80077e2 <_svfprintf_r+0xa4a>
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	f43f ac0d 	beq.w	8007912 <_svfprintf_r+0xb7a>
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 80080fe:	f43f ac55 	beq.w	80079ac <_svfprintf_r+0xc14>
 8008102:	08f2      	lsrs	r2, r6, #3
 8008104:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8008108:	08f8      	lsrs	r0, r7, #3
 800810a:	f006 0307 	and.w	r3, r6, #7
 800810e:	4607      	mov	r7, r0
 8008110:	4616      	mov	r6, r2
 8008112:	3330      	adds	r3, #48	; 0x30
 8008114:	ea56 0207 	orrs.w	r2, r6, r7
 8008118:	4659      	mov	r1, fp
 800811a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800811e:	d1f0      	bne.n	8008102 <_svfprintf_r+0x136a>
 8008120:	9a03      	ldr	r2, [sp, #12]
 8008122:	07d2      	lsls	r2, r2, #31
 8008124:	d506      	bpl.n	8008134 <_svfprintf_r+0x139c>
 8008126:	2b30      	cmp	r3, #48	; 0x30
 8008128:	d004      	beq.n	8008134 <_svfprintf_r+0x139c>
 800812a:	2330      	movs	r3, #48	; 0x30
 800812c:	f80b 3c01 	strb.w	r3, [fp, #-1]
 8008130:	f1a1 0b02 	sub.w	fp, r1, #2
 8008134:	ab4e      	add	r3, sp, #312	; 0x138
 8008136:	eba3 030b 	sub.w	r3, r3, fp
 800813a:	9e04      	ldr	r6, [sp, #16]
 800813c:	9304      	str	r3, [sp, #16]
 800813e:	2300      	movs	r3, #0
 8008140:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008144:	9303      	str	r3, [sp, #12]
 8008146:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800814a:	461d      	mov	r5, r3
 800814c:	f7ff b94c 	b.w	80073e8 <_svfprintf_r+0x650>
 8008150:	0800cd74 	.word	0x0800cd74
 8008154:	0800cd64 	.word	0x0800cd64

08008158 <_vfprintf_r>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	ed2d 8b04 	vpush	{d8-d9}
 8008160:	b0cf      	sub	sp, #316	; 0x13c
 8008162:	4689      	mov	r9, r1
 8008164:	9203      	str	r2, [sp, #12]
 8008166:	461c      	mov	r4, r3
 8008168:	461e      	mov	r6, r3
 800816a:	4682      	mov	sl, r0
 800816c:	f002 fb9e 	bl	800a8ac <_localeconv_r>
 8008170:	6803      	ldr	r3, [r0, #0]
 8008172:	9313      	str	r3, [sp, #76]	; 0x4c
 8008174:	4618      	mov	r0, r3
 8008176:	f7f8 f82b 	bl	80001d0 <strlen>
 800817a:	900e      	str	r0, [sp, #56]	; 0x38
 800817c:	f1ba 0f00 	cmp.w	sl, #0
 8008180:	d005      	beq.n	800818e <_vfprintf_r+0x36>
 8008182:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 8008186:	b913      	cbnz	r3, 800818e <_vfprintf_r+0x36>
 8008188:	4650      	mov	r0, sl
 800818a:	f002 fa1f 	bl	800a5cc <__sinit>
 800818e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8008192:	07d8      	lsls	r0, r3, #31
 8008194:	d407      	bmi.n	80081a6 <_vfprintf_r+0x4e>
 8008196:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800819a:	0599      	lsls	r1, r3, #22
 800819c:	d403      	bmi.n	80081a6 <_vfprintf_r+0x4e>
 800819e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80081a2:	f002 fb89 	bl	800a8b8 <__retarget_lock_acquire_recursive>
 80081a6:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 80081aa:	049a      	lsls	r2, r3, #18
 80081ac:	d409      	bmi.n	80081c2 <_vfprintf_r+0x6a>
 80081ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80081b2:	f8a9 300c 	strh.w	r3, [r9, #12]
 80081b6:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80081ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081be:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 80081c2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80081c6:	071f      	lsls	r7, r3, #28
 80081c8:	d502      	bpl.n	80081d0 <_vfprintf_r+0x78>
 80081ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80081ce:	b9d3      	cbnz	r3, 8008206 <_vfprintf_r+0xae>
 80081d0:	4649      	mov	r1, r9
 80081d2:	4650      	mov	r0, sl
 80081d4:	f001 fa36 	bl	8009644 <__swsetup_r>
 80081d8:	b1a8      	cbz	r0, 8008206 <_vfprintf_r+0xae>
 80081da:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80081de:	07dd      	lsls	r5, r3, #31
 80081e0:	d508      	bpl.n	80081f4 <_vfprintf_r+0x9c>
 80081e2:	f04f 33ff 	mov.w	r3, #4294967295
 80081e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80081e8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80081ea:	b04f      	add	sp, #316	; 0x13c
 80081ec:	ecbd 8b04 	vpop	{d8-d9}
 80081f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80081f8:	059c      	lsls	r4, r3, #22
 80081fa:	d4f2      	bmi.n	80081e2 <_vfprintf_r+0x8a>
 80081fc:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8008200:	f002 fb5b 	bl	800a8ba <__retarget_lock_release_recursive>
 8008204:	e7ed      	b.n	80081e2 <_vfprintf_r+0x8a>
 8008206:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800820a:	f003 021a 	and.w	r2, r3, #26
 800820e:	2a0a      	cmp	r2, #10
 8008210:	d115      	bne.n	800823e <_vfprintf_r+0xe6>
 8008212:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 8008216:	2a00      	cmp	r2, #0
 8008218:	db11      	blt.n	800823e <_vfprintf_r+0xe6>
 800821a:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 800821e:	07d0      	lsls	r0, r2, #31
 8008220:	d405      	bmi.n	800822e <_vfprintf_r+0xd6>
 8008222:	0599      	lsls	r1, r3, #22
 8008224:	d403      	bmi.n	800822e <_vfprintf_r+0xd6>
 8008226:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 800822a:	f002 fb46 	bl	800a8ba <__retarget_lock_release_recursive>
 800822e:	9a03      	ldr	r2, [sp, #12]
 8008230:	4623      	mov	r3, r4
 8008232:	4649      	mov	r1, r9
 8008234:	4650      	mov	r0, sl
 8008236:	f001 f9c5 	bl	80095c4 <__sbprintf>
 800823a:	900f      	str	r0, [sp, #60]	; 0x3c
 800823c:	e7d4      	b.n	80081e8 <_vfprintf_r+0x90>
 800823e:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 80084a8 <_vfprintf_r+0x350>
 8008242:	2500      	movs	r5, #0
 8008244:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8008248:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800824c:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8008250:	ac25      	add	r4, sp, #148	; 0x94
 8008252:	9422      	str	r4, [sp, #136]	; 0x88
 8008254:	9505      	str	r5, [sp, #20]
 8008256:	950a      	str	r5, [sp, #40]	; 0x28
 8008258:	9512      	str	r5, [sp, #72]	; 0x48
 800825a:	9514      	str	r5, [sp, #80]	; 0x50
 800825c:	950f      	str	r5, [sp, #60]	; 0x3c
 800825e:	9b03      	ldr	r3, [sp, #12]
 8008260:	461d      	mov	r5, r3
 8008262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008266:	b10a      	cbz	r2, 800826c <_vfprintf_r+0x114>
 8008268:	2a25      	cmp	r2, #37	; 0x25
 800826a:	d1f9      	bne.n	8008260 <_vfprintf_r+0x108>
 800826c:	9b03      	ldr	r3, [sp, #12]
 800826e:	1aef      	subs	r7, r5, r3
 8008270:	d00d      	beq.n	800828e <_vfprintf_r+0x136>
 8008272:	e9c4 3700 	strd	r3, r7, [r4]
 8008276:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008278:	443b      	add	r3, r7
 800827a:	9324      	str	r3, [sp, #144]	; 0x90
 800827c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800827e:	3301      	adds	r3, #1
 8008280:	2b07      	cmp	r3, #7
 8008282:	9323      	str	r3, [sp, #140]	; 0x8c
 8008284:	dc79      	bgt.n	800837a <_vfprintf_r+0x222>
 8008286:	3408      	adds	r4, #8
 8008288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800828a:	443b      	add	r3, r7
 800828c:	930f      	str	r3, [sp, #60]	; 0x3c
 800828e:	782b      	ldrb	r3, [r5, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	f001 8156 	beq.w	8009542 <_vfprintf_r+0x13ea>
 8008296:	2300      	movs	r3, #0
 8008298:	3501      	adds	r5, #1
 800829a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800829e:	f04f 38ff 	mov.w	r8, #4294967295
 80082a2:	9310      	str	r3, [sp, #64]	; 0x40
 80082a4:	469b      	mov	fp, r3
 80082a6:	270a      	movs	r7, #10
 80082a8:	212b      	movs	r1, #43	; 0x2b
 80082aa:	462a      	mov	r2, r5
 80082ac:	f812 3b01 	ldrb.w	r3, [r2], #1
 80082b0:	9307      	str	r3, [sp, #28]
 80082b2:	4613      	mov	r3, r2
 80082b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80082b6:	9b07      	ldr	r3, [sp, #28]
 80082b8:	3b20      	subs	r3, #32
 80082ba:	2b5a      	cmp	r3, #90	; 0x5a
 80082bc:	f200 85c0 	bhi.w	8008e40 <_vfprintf_r+0xce8>
 80082c0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80082c4:	05be007e 	.word	0x05be007e
 80082c8:	008605be 	.word	0x008605be
 80082cc:	05be05be 	.word	0x05be05be
 80082d0:	006505be 	.word	0x006505be
 80082d4:	05be05be 	.word	0x05be05be
 80082d8:	00930089 	.word	0x00930089
 80082dc:	009005be 	.word	0x009005be
 80082e0:	05be0096 	.word	0x05be0096
 80082e4:	00b200af 	.word	0x00b200af
 80082e8:	00b200b2 	.word	0x00b200b2
 80082ec:	00b200b2 	.word	0x00b200b2
 80082f0:	00b200b2 	.word	0x00b200b2
 80082f4:	00b200b2 	.word	0x00b200b2
 80082f8:	05be05be 	.word	0x05be05be
 80082fc:	05be05be 	.word	0x05be05be
 8008300:	05be05be 	.word	0x05be05be
 8008304:	012105be 	.word	0x012105be
 8008308:	00df05be 	.word	0x00df05be
 800830c:	012100f6 	.word	0x012100f6
 8008310:	01210121 	.word	0x01210121
 8008314:	05be05be 	.word	0x05be05be
 8008318:	05be05be 	.word	0x05be05be
 800831c:	05be00c2 	.word	0x05be00c2
 8008320:	049005be 	.word	0x049005be
 8008324:	05be05be 	.word	0x05be05be
 8008328:	04d705be 	.word	0x04d705be
 800832c:	04fb05be 	.word	0x04fb05be
 8008330:	05be05be 	.word	0x05be05be
 8008334:	05be051a 	.word	0x05be051a
 8008338:	05be05be 	.word	0x05be05be
 800833c:	05be05be 	.word	0x05be05be
 8008340:	05be05be 	.word	0x05be05be
 8008344:	012105be 	.word	0x012105be
 8008348:	00df05be 	.word	0x00df05be
 800834c:	012100f8 	.word	0x012100f8
 8008350:	01210121 	.word	0x01210121
 8008354:	00f800c5 	.word	0x00f800c5
 8008358:	05be00d9 	.word	0x05be00d9
 800835c:	05be00d2 	.word	0x05be00d2
 8008360:	0492046d 	.word	0x0492046d
 8008364:	00d904c6 	.word	0x00d904c6
 8008368:	04d705be 	.word	0x04d705be
 800836c:	04fd007c 	.word	0x04fd007c
 8008370:	05be05be 	.word	0x05be05be
 8008374:	05be0537 	.word	0x05be0537
 8008378:	007c      	.short	0x007c
 800837a:	aa22      	add	r2, sp, #136	; 0x88
 800837c:	4649      	mov	r1, r9
 800837e:	4650      	mov	r0, sl
 8008380:	f003 f9ba 	bl	800b6f8 <__sprint_r>
 8008384:	2800      	cmp	r0, #0
 8008386:	f040 8130 	bne.w	80085ea <_vfprintf_r+0x492>
 800838a:	ac25      	add	r4, sp, #148	; 0x94
 800838c:	e77c      	b.n	8008288 <_vfprintf_r+0x130>
 800838e:	4650      	mov	r0, sl
 8008390:	f002 fa8c 	bl	800a8ac <_localeconv_r>
 8008394:	6843      	ldr	r3, [r0, #4]
 8008396:	9314      	str	r3, [sp, #80]	; 0x50
 8008398:	4618      	mov	r0, r3
 800839a:	f7f7 ff19 	bl	80001d0 <strlen>
 800839e:	9012      	str	r0, [sp, #72]	; 0x48
 80083a0:	4650      	mov	r0, sl
 80083a2:	f002 fa83 	bl	800a8ac <_localeconv_r>
 80083a6:	6883      	ldr	r3, [r0, #8]
 80083a8:	930a      	str	r3, [sp, #40]	; 0x28
 80083aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083ac:	212b      	movs	r1, #43	; 0x2b
 80083ae:	b12b      	cbz	r3, 80083bc <_vfprintf_r+0x264>
 80083b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b2:	b11b      	cbz	r3, 80083bc <_vfprintf_r+0x264>
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	b10b      	cbz	r3, 80083bc <_vfprintf_r+0x264>
 80083b8:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 80083bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80083be:	e774      	b.n	80082aa <_vfprintf_r+0x152>
 80083c0:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1f9      	bne.n	80083bc <_vfprintf_r+0x264>
 80083c8:	2320      	movs	r3, #32
 80083ca:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80083ce:	e7f5      	b.n	80083bc <_vfprintf_r+0x264>
 80083d0:	f04b 0b01 	orr.w	fp, fp, #1
 80083d4:	e7f2      	b.n	80083bc <_vfprintf_r+0x264>
 80083d6:	f856 3b04 	ldr.w	r3, [r6], #4
 80083da:	9310      	str	r3, [sp, #64]	; 0x40
 80083dc:	2b00      	cmp	r3, #0
 80083de:	daed      	bge.n	80083bc <_vfprintf_r+0x264>
 80083e0:	425b      	negs	r3, r3
 80083e2:	9310      	str	r3, [sp, #64]	; 0x40
 80083e4:	f04b 0b04 	orr.w	fp, fp, #4
 80083e8:	e7e8      	b.n	80083bc <_vfprintf_r+0x264>
 80083ea:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 80083ee:	e7e5      	b.n	80083bc <_vfprintf_r+0x264>
 80083f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083f6:	9207      	str	r2, [sp, #28]
 80083f8:	2a2a      	cmp	r2, #42	; 0x2a
 80083fa:	d10f      	bne.n	800841c <_vfprintf_r+0x2c4>
 80083fc:	f856 0b04 	ldr.w	r0, [r6], #4
 8008400:	930b      	str	r3, [sp, #44]	; 0x2c
 8008402:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 8008406:	e7d9      	b.n	80083bc <_vfprintf_r+0x264>
 8008408:	fb07 2808 	mla	r8, r7, r8, r2
 800840c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008410:	9207      	str	r2, [sp, #28]
 8008412:	9a07      	ldr	r2, [sp, #28]
 8008414:	3a30      	subs	r2, #48	; 0x30
 8008416:	2a09      	cmp	r2, #9
 8008418:	d9f6      	bls.n	8008408 <_vfprintf_r+0x2b0>
 800841a:	e74b      	b.n	80082b4 <_vfprintf_r+0x15c>
 800841c:	f04f 0800 	mov.w	r8, #0
 8008420:	e7f7      	b.n	8008412 <_vfprintf_r+0x2ba>
 8008422:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8008426:	e7c9      	b.n	80083bc <_vfprintf_r+0x264>
 8008428:	2200      	movs	r2, #0
 800842a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800842c:	9210      	str	r2, [sp, #64]	; 0x40
 800842e:	9a07      	ldr	r2, [sp, #28]
 8008430:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008432:	3a30      	subs	r2, #48	; 0x30
 8008434:	fb07 2200 	mla	r2, r7, r0, r2
 8008438:	9210      	str	r2, [sp, #64]	; 0x40
 800843a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800843e:	9207      	str	r2, [sp, #28]
 8008440:	3a30      	subs	r2, #48	; 0x30
 8008442:	2a09      	cmp	r2, #9
 8008444:	d9f3      	bls.n	800842e <_vfprintf_r+0x2d6>
 8008446:	e735      	b.n	80082b4 <_vfprintf_r+0x15c>
 8008448:	f04b 0b08 	orr.w	fp, fp, #8
 800844c:	e7b6      	b.n	80083bc <_vfprintf_r+0x264>
 800844e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	2b68      	cmp	r3, #104	; 0x68
 8008454:	bf01      	itttt	eq
 8008456:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8008458:	3301      	addeq	r3, #1
 800845a:	930b      	streq	r3, [sp, #44]	; 0x2c
 800845c:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8008460:	bf18      	it	ne
 8008462:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8008466:	e7a9      	b.n	80083bc <_vfprintf_r+0x264>
 8008468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b6c      	cmp	r3, #108	; 0x6c
 800846e:	d105      	bne.n	800847c <_vfprintf_r+0x324>
 8008470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008472:	3301      	adds	r3, #1
 8008474:	930b      	str	r3, [sp, #44]	; 0x2c
 8008476:	f04b 0b20 	orr.w	fp, fp, #32
 800847a:	e79f      	b.n	80083bc <_vfprintf_r+0x264>
 800847c:	f04b 0b10 	orr.w	fp, fp, #16
 8008480:	e79c      	b.n	80083bc <_vfprintf_r+0x264>
 8008482:	4632      	mov	r2, r6
 8008484:	2000      	movs	r0, #0
 8008486:	f852 3b04 	ldr.w	r3, [r2], #4
 800848a:	9206      	str	r2, [sp, #24]
 800848c:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8008490:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8008494:	ab35      	add	r3, sp, #212	; 0xd4
 8008496:	e9cd 0008 	strd	r0, r0, [sp, #32]
 800849a:	9004      	str	r0, [sp, #16]
 800849c:	f04f 0801 	mov.w	r8, #1
 80084a0:	4606      	mov	r6, r0
 80084a2:	4605      	mov	r5, r0
 80084a4:	9303      	str	r3, [sp, #12]
 80084a6:	e1c3      	b.n	8008830 <_vfprintf_r+0x6d8>
	...
 80084b0:	f04b 0b10 	orr.w	fp, fp, #16
 80084b4:	f01b 0f20 	tst.w	fp, #32
 80084b8:	d012      	beq.n	80084e0 <_vfprintf_r+0x388>
 80084ba:	3607      	adds	r6, #7
 80084bc:	f026 0307 	bic.w	r3, r6, #7
 80084c0:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80084c4:	9306      	str	r3, [sp, #24]
 80084c6:	2e00      	cmp	r6, #0
 80084c8:	f177 0300 	sbcs.w	r3, r7, #0
 80084cc:	da06      	bge.n	80084dc <_vfprintf_r+0x384>
 80084ce:	4276      	negs	r6, r6
 80084d0:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80084d4:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80084d8:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80084dc:	2301      	movs	r3, #1
 80084de:	e392      	b.n	8008c06 <_vfprintf_r+0xaae>
 80084e0:	1d33      	adds	r3, r6, #4
 80084e2:	f01b 0f10 	tst.w	fp, #16
 80084e6:	9306      	str	r3, [sp, #24]
 80084e8:	d002      	beq.n	80084f0 <_vfprintf_r+0x398>
 80084ea:	6836      	ldr	r6, [r6, #0]
 80084ec:	17f7      	asrs	r7, r6, #31
 80084ee:	e7ea      	b.n	80084c6 <_vfprintf_r+0x36e>
 80084f0:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80084f4:	6836      	ldr	r6, [r6, #0]
 80084f6:	d001      	beq.n	80084fc <_vfprintf_r+0x3a4>
 80084f8:	b236      	sxth	r6, r6
 80084fa:	e7f7      	b.n	80084ec <_vfprintf_r+0x394>
 80084fc:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8008500:	bf18      	it	ne
 8008502:	b276      	sxtbne	r6, r6
 8008504:	e7f2      	b.n	80084ec <_vfprintf_r+0x394>
 8008506:	3607      	adds	r6, #7
 8008508:	f026 0307 	bic.w	r3, r6, #7
 800850c:	ecb3 7b02 	vldmia	r3!, {d7}
 8008510:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008514:	9306      	str	r3, [sp, #24]
 8008516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008518:	ee09 3a10 	vmov	s18, r3
 800851c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800851e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008522:	ee09 3a90 	vmov	s19, r3
 8008526:	f04f 32ff 	mov.w	r2, #4294967295
 800852a:	4b39      	ldr	r3, [pc, #228]	; (8008610 <_vfprintf_r+0x4b8>)
 800852c:	ec51 0b19 	vmov	r0, r1, d9
 8008530:	f7f8 fafc 	bl	8000b2c <__aeabi_dcmpun>
 8008534:	bb20      	cbnz	r0, 8008580 <_vfprintf_r+0x428>
 8008536:	4b36      	ldr	r3, [pc, #216]	; (8008610 <_vfprintf_r+0x4b8>)
 8008538:	ec51 0b19 	vmov	r0, r1, d9
 800853c:	f04f 32ff 	mov.w	r2, #4294967295
 8008540:	f7f8 fad6 	bl	8000af0 <__aeabi_dcmple>
 8008544:	b9e0      	cbnz	r0, 8008580 <_vfprintf_r+0x428>
 8008546:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800854a:	2200      	movs	r2, #0
 800854c:	2300      	movs	r3, #0
 800854e:	f7f8 fac5 	bl	8000adc <__aeabi_dcmplt>
 8008552:	b110      	cbz	r0, 800855a <_vfprintf_r+0x402>
 8008554:	232d      	movs	r3, #45	; 0x2d
 8008556:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800855a:	4a2e      	ldr	r2, [pc, #184]	; (8008614 <_vfprintf_r+0x4bc>)
 800855c:	482e      	ldr	r0, [pc, #184]	; (8008618 <_vfprintf_r+0x4c0>)
 800855e:	9907      	ldr	r1, [sp, #28]
 8008560:	4613      	mov	r3, r2
 8008562:	2947      	cmp	r1, #71	; 0x47
 8008564:	bfc8      	it	gt
 8008566:	4603      	movgt	r3, r0
 8008568:	9303      	str	r3, [sp, #12]
 800856a:	2300      	movs	r3, #0
 800856c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8008570:	9304      	str	r3, [sp, #16]
 8008572:	f04f 0803 	mov.w	r8, #3
 8008576:	461e      	mov	r6, r3
 8008578:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800857c:	461d      	mov	r5, r3
 800857e:	e157      	b.n	8008830 <_vfprintf_r+0x6d8>
 8008580:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008584:	4610      	mov	r0, r2
 8008586:	4619      	mov	r1, r3
 8008588:	f7f8 fad0 	bl	8000b2c <__aeabi_dcmpun>
 800858c:	b140      	cbz	r0, 80085a0 <_vfprintf_r+0x448>
 800858e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008590:	4a22      	ldr	r2, [pc, #136]	; (800861c <_vfprintf_r+0x4c4>)
 8008592:	4823      	ldr	r0, [pc, #140]	; (8008620 <_vfprintf_r+0x4c8>)
 8008594:	2b00      	cmp	r3, #0
 8008596:	bfbc      	itt	lt
 8008598:	232d      	movlt	r3, #45	; 0x2d
 800859a:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 800859e:	e7de      	b.n	800855e <_vfprintf_r+0x406>
 80085a0:	9b07      	ldr	r3, [sp, #28]
 80085a2:	f023 0320 	bic.w	r3, r3, #32
 80085a6:	2b41      	cmp	r3, #65	; 0x41
 80085a8:	9308      	str	r3, [sp, #32]
 80085aa:	d13b      	bne.n	8008624 <_vfprintf_r+0x4cc>
 80085ac:	2330      	movs	r3, #48	; 0x30
 80085ae:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80085b2:	9b07      	ldr	r3, [sp, #28]
 80085b4:	2b61      	cmp	r3, #97	; 0x61
 80085b6:	bf0c      	ite	eq
 80085b8:	2378      	moveq	r3, #120	; 0x78
 80085ba:	2358      	movne	r3, #88	; 0x58
 80085bc:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 80085c0:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80085c4:	f04b 0b02 	orr.w	fp, fp, #2
 80085c8:	f340 8209 	ble.w	80089de <_vfprintf_r+0x886>
 80085cc:	f108 0101 	add.w	r1, r8, #1
 80085d0:	4650      	mov	r0, sl
 80085d2:	f002 f9df 	bl	800a994 <_malloc_r>
 80085d6:	9003      	str	r0, [sp, #12]
 80085d8:	2800      	cmp	r0, #0
 80085da:	f040 8204 	bne.w	80089e6 <_vfprintf_r+0x88e>
 80085de:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80085e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085e6:	f8a9 300c 	strh.w	r3, [r9, #12]
 80085ea:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80085ee:	07d9      	lsls	r1, r3, #31
 80085f0:	d407      	bmi.n	8008602 <_vfprintf_r+0x4aa>
 80085f2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80085f6:	059a      	lsls	r2, r3, #22
 80085f8:	d403      	bmi.n	8008602 <_vfprintf_r+0x4aa>
 80085fa:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80085fe:	f002 f95c 	bl	800a8ba <__retarget_lock_release_recursive>
 8008602:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008606:	065b      	lsls	r3, r3, #25
 8008608:	f57f adee 	bpl.w	80081e8 <_vfprintf_r+0x90>
 800860c:	e5e9      	b.n	80081e2 <_vfprintf_r+0x8a>
 800860e:	bf00      	nop
 8008610:	7fefffff 	.word	0x7fefffff
 8008614:	0800cd30 	.word	0x0800cd30
 8008618:	0800cd34 	.word	0x0800cd34
 800861c:	0800cd38 	.word	0x0800cd38
 8008620:	0800cd3c 	.word	0x0800cd3c
 8008624:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008628:	f000 81e0 	beq.w	80089ec <_vfprintf_r+0x894>
 800862c:	9b08      	ldr	r3, [sp, #32]
 800862e:	2b47      	cmp	r3, #71	; 0x47
 8008630:	f040 81e0 	bne.w	80089f4 <_vfprintf_r+0x89c>
 8008634:	f1b8 0f00 	cmp.w	r8, #0
 8008638:	f040 81dc 	bne.w	80089f4 <_vfprintf_r+0x89c>
 800863c:	f8cd 8010 	str.w	r8, [sp, #16]
 8008640:	f04f 0801 	mov.w	r8, #1
 8008644:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8008648:	9311      	str	r3, [sp, #68]	; 0x44
 800864a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800864c:	2b00      	cmp	r3, #0
 800864e:	f280 81d3 	bge.w	80089f8 <_vfprintf_r+0x8a0>
 8008652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008654:	ee08 3a10 	vmov	s16, r3
 8008658:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800865a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800865e:	ee08 3a90 	vmov	s17, r3
 8008662:	232d      	movs	r3, #45	; 0x2d
 8008664:	9318      	str	r3, [sp, #96]	; 0x60
 8008666:	9b08      	ldr	r3, [sp, #32]
 8008668:	2b41      	cmp	r3, #65	; 0x41
 800866a:	f040 81e3 	bne.w	8008a34 <_vfprintf_r+0x8dc>
 800866e:	eeb0 0a48 	vmov.f32	s0, s16
 8008672:	eef0 0a68 	vmov.f32	s1, s17
 8008676:	a81c      	add	r0, sp, #112	; 0x70
 8008678:	f002 ff18 	bl	800b4ac <frexp>
 800867c:	2200      	movs	r2, #0
 800867e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008682:	ec51 0b10 	vmov	r0, r1, d0
 8008686:	f7f7 ffb7 	bl	80005f8 <__aeabi_dmul>
 800868a:	2200      	movs	r2, #0
 800868c:	2300      	movs	r3, #0
 800868e:	4606      	mov	r6, r0
 8008690:	460f      	mov	r7, r1
 8008692:	f7f8 fa19 	bl	8000ac8 <__aeabi_dcmpeq>
 8008696:	b108      	cbz	r0, 800869c <_vfprintf_r+0x544>
 8008698:	2301      	movs	r3, #1
 800869a:	931c      	str	r3, [sp, #112]	; 0x70
 800869c:	4bb7      	ldr	r3, [pc, #732]	; (800897c <_vfprintf_r+0x824>)
 800869e:	4ab8      	ldr	r2, [pc, #736]	; (8008980 <_vfprintf_r+0x828>)
 80086a0:	9907      	ldr	r1, [sp, #28]
 80086a2:	9d03      	ldr	r5, [sp, #12]
 80086a4:	2961      	cmp	r1, #97	; 0x61
 80086a6:	bf18      	it	ne
 80086a8:	461a      	movne	r2, r3
 80086aa:	f108 33ff 	add.w	r3, r8, #4294967295
 80086ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80086b0:	9305      	str	r3, [sp, #20]
 80086b2:	4bb4      	ldr	r3, [pc, #720]	; (8008984 <_vfprintf_r+0x82c>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	4630      	mov	r0, r6
 80086b8:	4639      	mov	r1, r7
 80086ba:	f7f7 ff9d 	bl	80005f8 <__aeabi_dmul>
 80086be:	460f      	mov	r7, r1
 80086c0:	4606      	mov	r6, r0
 80086c2:	f7f8 fa49 	bl	8000b58 <__aeabi_d2iz>
 80086c6:	9019      	str	r0, [sp, #100]	; 0x64
 80086c8:	f7f7 ff2c 	bl	8000524 <__aeabi_i2d>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4630      	mov	r0, r6
 80086d2:	4639      	mov	r1, r7
 80086d4:	f7f7 fdd8 	bl	8000288 <__aeabi_dsub>
 80086d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80086da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086dc:	5c9b      	ldrb	r3, [r3, r2]
 80086de:	f805 3b01 	strb.w	r3, [r5], #1
 80086e2:	9b05      	ldr	r3, [sp, #20]
 80086e4:	9309      	str	r3, [sp, #36]	; 0x24
 80086e6:	1c5a      	adds	r2, r3, #1
 80086e8:	4606      	mov	r6, r0
 80086ea:	460f      	mov	r7, r1
 80086ec:	d007      	beq.n	80086fe <_vfprintf_r+0x5a6>
 80086ee:	3b01      	subs	r3, #1
 80086f0:	9305      	str	r3, [sp, #20]
 80086f2:	2200      	movs	r2, #0
 80086f4:	2300      	movs	r3, #0
 80086f6:	f7f8 f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d0d9      	beq.n	80086b2 <_vfprintf_r+0x55a>
 80086fe:	4ba2      	ldr	r3, [pc, #648]	; (8008988 <_vfprintf_r+0x830>)
 8008700:	2200      	movs	r2, #0
 8008702:	4630      	mov	r0, r6
 8008704:	4639      	mov	r1, r7
 8008706:	f7f8 fa07 	bl	8000b18 <__aeabi_dcmpgt>
 800870a:	b960      	cbnz	r0, 8008726 <_vfprintf_r+0x5ce>
 800870c:	4b9e      	ldr	r3, [pc, #632]	; (8008988 <_vfprintf_r+0x830>)
 800870e:	2200      	movs	r2, #0
 8008710:	4630      	mov	r0, r6
 8008712:	4639      	mov	r1, r7
 8008714:	f7f8 f9d8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008718:	2800      	cmp	r0, #0
 800871a:	f000 8186 	beq.w	8008a2a <_vfprintf_r+0x8d2>
 800871e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008720:	07df      	lsls	r7, r3, #31
 8008722:	f140 8182 	bpl.w	8008a2a <_vfprintf_r+0x8d2>
 8008726:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008728:	9520      	str	r5, [sp, #128]	; 0x80
 800872a:	7bd9      	ldrb	r1, [r3, #15]
 800872c:	2030      	movs	r0, #48	; 0x30
 800872e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008730:	1e53      	subs	r3, r2, #1
 8008732:	9320      	str	r3, [sp, #128]	; 0x80
 8008734:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8008738:	428b      	cmp	r3, r1
 800873a:	f000 8165 	beq.w	8008a08 <_vfprintf_r+0x8b0>
 800873e:	2b39      	cmp	r3, #57	; 0x39
 8008740:	bf0b      	itete	eq
 8008742:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8008744:	3301      	addne	r3, #1
 8008746:	7a9b      	ldrbeq	r3, [r3, #10]
 8008748:	b2db      	uxtbne	r3, r3
 800874a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800874e:	9b03      	ldr	r3, [sp, #12]
 8008750:	1aeb      	subs	r3, r5, r3
 8008752:	9305      	str	r3, [sp, #20]
 8008754:	9b08      	ldr	r3, [sp, #32]
 8008756:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8008758:	2b47      	cmp	r3, #71	; 0x47
 800875a:	f040 81b3 	bne.w	8008ac4 <_vfprintf_r+0x96c>
 800875e:	1cee      	adds	r6, r5, #3
 8008760:	db02      	blt.n	8008768 <_vfprintf_r+0x610>
 8008762:	4545      	cmp	r5, r8
 8008764:	f340 81d5 	ble.w	8008b12 <_vfprintf_r+0x9ba>
 8008768:	9b07      	ldr	r3, [sp, #28]
 800876a:	3b02      	subs	r3, #2
 800876c:	9307      	str	r3, [sp, #28]
 800876e:	9907      	ldr	r1, [sp, #28]
 8008770:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8008774:	f021 0120 	bic.w	r1, r1, #32
 8008778:	2941      	cmp	r1, #65	; 0x41
 800877a:	bf08      	it	eq
 800877c:	320f      	addeq	r2, #15
 800877e:	f105 33ff 	add.w	r3, r5, #4294967295
 8008782:	bf06      	itte	eq
 8008784:	b2d2      	uxtbeq	r2, r2
 8008786:	2101      	moveq	r1, #1
 8008788:	2100      	movne	r1, #0
 800878a:	2b00      	cmp	r3, #0
 800878c:	931c      	str	r3, [sp, #112]	; 0x70
 800878e:	bfb8      	it	lt
 8008790:	f1c5 0301 	rsblt	r3, r5, #1
 8008794:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8008798:	bfb4      	ite	lt
 800879a:	222d      	movlt	r2, #45	; 0x2d
 800879c:	222b      	movge	r2, #43	; 0x2b
 800879e:	2b09      	cmp	r3, #9
 80087a0:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 80087a4:	f340 81a4 	ble.w	8008af0 <_vfprintf_r+0x998>
 80087a8:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 80087ac:	260a      	movs	r6, #10
 80087ae:	4611      	mov	r1, r2
 80087b0:	fb93 f5f6 	sdiv	r5, r3, r6
 80087b4:	fb06 3015 	mls	r0, r6, r5, r3
 80087b8:	3030      	adds	r0, #48	; 0x30
 80087ba:	f801 0c01 	strb.w	r0, [r1, #-1]
 80087be:	4618      	mov	r0, r3
 80087c0:	2863      	cmp	r0, #99	; 0x63
 80087c2:	f102 32ff 	add.w	r2, r2, #4294967295
 80087c6:	462b      	mov	r3, r5
 80087c8:	dcf1      	bgt.n	80087ae <_vfprintf_r+0x656>
 80087ca:	3330      	adds	r3, #48	; 0x30
 80087cc:	1e88      	subs	r0, r1, #2
 80087ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80087d2:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 80087d6:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80087da:	4603      	mov	r3, r0
 80087dc:	42ab      	cmp	r3, r5
 80087de:	f0c0 8182 	bcc.w	8008ae6 <_vfprintf_r+0x98e>
 80087e2:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 80087e6:	1a52      	subs	r2, r2, r1
 80087e8:	42a8      	cmp	r0, r5
 80087ea:	bf88      	it	hi
 80087ec:	2200      	movhi	r2, #0
 80087ee:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 80087f2:	441a      	add	r2, r3
 80087f4:	ab1e      	add	r3, sp, #120	; 0x78
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	9a05      	ldr	r2, [sp, #20]
 80087fa:	9315      	str	r3, [sp, #84]	; 0x54
 80087fc:	2a01      	cmp	r2, #1
 80087fe:	eb03 0802 	add.w	r8, r3, r2
 8008802:	dc02      	bgt.n	800880a <_vfprintf_r+0x6b2>
 8008804:	f01b 0f01 	tst.w	fp, #1
 8008808:	d001      	beq.n	800880e <_vfprintf_r+0x6b6>
 800880a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800880c:	4498      	add	r8, r3
 800880e:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8008812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008816:	9311      	str	r3, [sp, #68]	; 0x44
 8008818:	2300      	movs	r3, #0
 800881a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800881e:	461d      	mov	r5, r3
 8008820:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008822:	b113      	cbz	r3, 800882a <_vfprintf_r+0x6d2>
 8008824:	232d      	movs	r3, #45	; 0x2d
 8008826:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800882a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800882e:	2600      	movs	r6, #0
 8008830:	4546      	cmp	r6, r8
 8008832:	4633      	mov	r3, r6
 8008834:	bfb8      	it	lt
 8008836:	4643      	movlt	r3, r8
 8008838:	9311      	str	r3, [sp, #68]	; 0x44
 800883a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800883e:	b113      	cbz	r3, 8008846 <_vfprintf_r+0x6ee>
 8008840:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008842:	3301      	adds	r3, #1
 8008844:	9311      	str	r3, [sp, #68]	; 0x44
 8008846:	f01b 0302 	ands.w	r3, fp, #2
 800884a:	9317      	str	r3, [sp, #92]	; 0x5c
 800884c:	bf1e      	ittt	ne
 800884e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8008850:	3302      	addne	r3, #2
 8008852:	9311      	strne	r3, [sp, #68]	; 0x44
 8008854:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8008858:	9318      	str	r3, [sp, #96]	; 0x60
 800885a:	d11f      	bne.n	800889c <_vfprintf_r+0x744>
 800885c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8008860:	1a9f      	subs	r7, r3, r2
 8008862:	2f00      	cmp	r7, #0
 8008864:	dd1a      	ble.n	800889c <_vfprintf_r+0x744>
 8008866:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800886a:	4848      	ldr	r0, [pc, #288]	; (800898c <_vfprintf_r+0x834>)
 800886c:	6020      	str	r0, [r4, #0]
 800886e:	2f10      	cmp	r7, #16
 8008870:	f103 0301 	add.w	r3, r3, #1
 8008874:	f104 0108 	add.w	r1, r4, #8
 8008878:	f300 82f0 	bgt.w	8008e5c <_vfprintf_r+0xd04>
 800887c:	6067      	str	r7, [r4, #4]
 800887e:	2b07      	cmp	r3, #7
 8008880:	4417      	add	r7, r2
 8008882:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8008886:	f340 82fc 	ble.w	8008e82 <_vfprintf_r+0xd2a>
 800888a:	aa22      	add	r2, sp, #136	; 0x88
 800888c:	4649      	mov	r1, r9
 800888e:	4650      	mov	r0, sl
 8008890:	f002 ff32 	bl	800b6f8 <__sprint_r>
 8008894:	2800      	cmp	r0, #0
 8008896:	f040 8632 	bne.w	80094fe <_vfprintf_r+0x13a6>
 800889a:	ac25      	add	r4, sp, #148	; 0x94
 800889c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80088a0:	b173      	cbz	r3, 80088c0 <_vfprintf_r+0x768>
 80088a2:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 80088a6:	6023      	str	r3, [r4, #0]
 80088a8:	2301      	movs	r3, #1
 80088aa:	6063      	str	r3, [r4, #4]
 80088ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80088ae:	3301      	adds	r3, #1
 80088b0:	9324      	str	r3, [sp, #144]	; 0x90
 80088b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088b4:	3301      	adds	r3, #1
 80088b6:	2b07      	cmp	r3, #7
 80088b8:	9323      	str	r3, [sp, #140]	; 0x8c
 80088ba:	f300 82e4 	bgt.w	8008e86 <_vfprintf_r+0xd2e>
 80088be:	3408      	adds	r4, #8
 80088c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80088c2:	b16b      	cbz	r3, 80088e0 <_vfprintf_r+0x788>
 80088c4:	ab1b      	add	r3, sp, #108	; 0x6c
 80088c6:	6023      	str	r3, [r4, #0]
 80088c8:	2302      	movs	r3, #2
 80088ca:	6063      	str	r3, [r4, #4]
 80088cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80088ce:	3302      	adds	r3, #2
 80088d0:	9324      	str	r3, [sp, #144]	; 0x90
 80088d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088d4:	3301      	adds	r3, #1
 80088d6:	2b07      	cmp	r3, #7
 80088d8:	9323      	str	r3, [sp, #140]	; 0x8c
 80088da:	f300 82de 	bgt.w	8008e9a <_vfprintf_r+0xd42>
 80088de:	3408      	adds	r4, #8
 80088e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80088e2:	2b80      	cmp	r3, #128	; 0x80
 80088e4:	d11f      	bne.n	8008926 <_vfprintf_r+0x7ce>
 80088e6:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80088ea:	1a9f      	subs	r7, r3, r2
 80088ec:	2f00      	cmp	r7, #0
 80088ee:	dd1a      	ble.n	8008926 <_vfprintf_r+0x7ce>
 80088f0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80088f4:	4826      	ldr	r0, [pc, #152]	; (8008990 <_vfprintf_r+0x838>)
 80088f6:	6020      	str	r0, [r4, #0]
 80088f8:	2f10      	cmp	r7, #16
 80088fa:	f103 0301 	add.w	r3, r3, #1
 80088fe:	f104 0108 	add.w	r1, r4, #8
 8008902:	f300 82d4 	bgt.w	8008eae <_vfprintf_r+0xd56>
 8008906:	6067      	str	r7, [r4, #4]
 8008908:	2b07      	cmp	r3, #7
 800890a:	4417      	add	r7, r2
 800890c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8008910:	f340 82e0 	ble.w	8008ed4 <_vfprintf_r+0xd7c>
 8008914:	aa22      	add	r2, sp, #136	; 0x88
 8008916:	4649      	mov	r1, r9
 8008918:	4650      	mov	r0, sl
 800891a:	f002 feed 	bl	800b6f8 <__sprint_r>
 800891e:	2800      	cmp	r0, #0
 8008920:	f040 85ed 	bne.w	80094fe <_vfprintf_r+0x13a6>
 8008924:	ac25      	add	r4, sp, #148	; 0x94
 8008926:	eba6 0608 	sub.w	r6, r6, r8
 800892a:	2e00      	cmp	r6, #0
 800892c:	dd1a      	ble.n	8008964 <_vfprintf_r+0x80c>
 800892e:	4f18      	ldr	r7, [pc, #96]	; (8008990 <_vfprintf_r+0x838>)
 8008930:	6027      	str	r7, [r4, #0]
 8008932:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008936:	2e10      	cmp	r6, #16
 8008938:	f103 0301 	add.w	r3, r3, #1
 800893c:	f104 0108 	add.w	r1, r4, #8
 8008940:	f300 82ca 	bgt.w	8008ed8 <_vfprintf_r+0xd80>
 8008944:	6066      	str	r6, [r4, #4]
 8008946:	2b07      	cmp	r3, #7
 8008948:	4416      	add	r6, r2
 800894a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800894e:	f340 82d6 	ble.w	8008efe <_vfprintf_r+0xda6>
 8008952:	aa22      	add	r2, sp, #136	; 0x88
 8008954:	4649      	mov	r1, r9
 8008956:	4650      	mov	r0, sl
 8008958:	f002 fece 	bl	800b6f8 <__sprint_r>
 800895c:	2800      	cmp	r0, #0
 800895e:	f040 85ce 	bne.w	80094fe <_vfprintf_r+0x13a6>
 8008962:	ac25      	add	r4, sp, #148	; 0x94
 8008964:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008968:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800896a:	f040 82cf 	bne.w	8008f0c <_vfprintf_r+0xdb4>
 800896e:	9b03      	ldr	r3, [sp, #12]
 8008970:	e9c4 3800 	strd	r3, r8, [r4]
 8008974:	4446      	add	r6, r8
 8008976:	9624      	str	r6, [sp, #144]	; 0x90
 8008978:	e00c      	b.n	8008994 <_vfprintf_r+0x83c>
 800897a:	bf00      	nop
 800897c:	0800cd51 	.word	0x0800cd51
 8008980:	0800cd40 	.word	0x0800cd40
 8008984:	40300000 	.word	0x40300000
 8008988:	3fe00000 	.word	0x3fe00000
 800898c:	0800cd84 	.word	0x0800cd84
 8008990:	0800cd94 	.word	0x0800cd94
 8008994:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008996:	3301      	adds	r3, #1
 8008998:	2b07      	cmp	r3, #7
 800899a:	9323      	str	r3, [sp, #140]	; 0x8c
 800899c:	f300 82fb 	bgt.w	8008f96 <_vfprintf_r+0xe3e>
 80089a0:	3408      	adds	r4, #8
 80089a2:	f01b 0f04 	tst.w	fp, #4
 80089a6:	f040 858c 	bne.w	80094c2 <_vfprintf_r+0x136a>
 80089aa:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 80089ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 80089b0:	428a      	cmp	r2, r1
 80089b2:	bfac      	ite	ge
 80089b4:	189b      	addge	r3, r3, r2
 80089b6:	185b      	addlt	r3, r3, r1
 80089b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80089ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80089bc:	b13b      	cbz	r3, 80089ce <_vfprintf_r+0x876>
 80089be:	aa22      	add	r2, sp, #136	; 0x88
 80089c0:	4649      	mov	r1, r9
 80089c2:	4650      	mov	r0, sl
 80089c4:	f002 fe98 	bl	800b6f8 <__sprint_r>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	f040 8598 	bne.w	80094fe <_vfprintf_r+0x13a6>
 80089ce:	2300      	movs	r3, #0
 80089d0:	9323      	str	r3, [sp, #140]	; 0x8c
 80089d2:	9b04      	ldr	r3, [sp, #16]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f040 85ae 	bne.w	8009536 <_vfprintf_r+0x13de>
 80089da:	ac25      	add	r4, sp, #148	; 0x94
 80089dc:	e0eb      	b.n	8008bb6 <_vfprintf_r+0xa5e>
 80089de:	ab35      	add	r3, sp, #212	; 0xd4
 80089e0:	9004      	str	r0, [sp, #16]
 80089e2:	9303      	str	r3, [sp, #12]
 80089e4:	e62e      	b.n	8008644 <_vfprintf_r+0x4ec>
 80089e6:	9b03      	ldr	r3, [sp, #12]
 80089e8:	9304      	str	r3, [sp, #16]
 80089ea:	e62b      	b.n	8008644 <_vfprintf_r+0x4ec>
 80089ec:	9004      	str	r0, [sp, #16]
 80089ee:	f04f 0806 	mov.w	r8, #6
 80089f2:	e627      	b.n	8008644 <_vfprintf_r+0x4ec>
 80089f4:	9004      	str	r0, [sp, #16]
 80089f6:	e625      	b.n	8008644 <_vfprintf_r+0x4ec>
 80089f8:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 80089fc:	2300      	movs	r3, #0
 80089fe:	eeb0 8a47 	vmov.f32	s16, s14
 8008a02:	eef0 8a67 	vmov.f32	s17, s15
 8008a06:	e62d      	b.n	8008664 <_vfprintf_r+0x50c>
 8008a08:	f802 0c01 	strb.w	r0, [r2, #-1]
 8008a0c:	e68f      	b.n	800872e <_vfprintf_r+0x5d6>
 8008a0e:	f803 0b01 	strb.w	r0, [r3], #1
 8008a12:	1aca      	subs	r2, r1, r3
 8008a14:	2a00      	cmp	r2, #0
 8008a16:	dafa      	bge.n	8008a0e <_vfprintf_r+0x8b6>
 8008a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a1c:	3201      	adds	r2, #1
 8008a1e:	f103 0301 	add.w	r3, r3, #1
 8008a22:	bfb8      	it	lt
 8008a24:	2300      	movlt	r3, #0
 8008a26:	441d      	add	r5, r3
 8008a28:	e691      	b.n	800874e <_vfprintf_r+0x5f6>
 8008a2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a2c:	462b      	mov	r3, r5
 8008a2e:	18a9      	adds	r1, r5, r2
 8008a30:	2030      	movs	r0, #48	; 0x30
 8008a32:	e7ee      	b.n	8008a12 <_vfprintf_r+0x8ba>
 8008a34:	9b08      	ldr	r3, [sp, #32]
 8008a36:	2b46      	cmp	r3, #70	; 0x46
 8008a38:	d005      	beq.n	8008a46 <_vfprintf_r+0x8ee>
 8008a3a:	2b45      	cmp	r3, #69	; 0x45
 8008a3c:	d11b      	bne.n	8008a76 <_vfprintf_r+0x91e>
 8008a3e:	f108 0501 	add.w	r5, r8, #1
 8008a42:	2102      	movs	r1, #2
 8008a44:	e001      	b.n	8008a4a <_vfprintf_r+0x8f2>
 8008a46:	4645      	mov	r5, r8
 8008a48:	2103      	movs	r1, #3
 8008a4a:	ab20      	add	r3, sp, #128	; 0x80
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	ab1d      	add	r3, sp, #116	; 0x74
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	462a      	mov	r2, r5
 8008a54:	ab1c      	add	r3, sp, #112	; 0x70
 8008a56:	4650      	mov	r0, sl
 8008a58:	eeb0 0a48 	vmov.f32	s0, s16
 8008a5c:	eef0 0a68 	vmov.f32	s1, s17
 8008a60:	f000 fee6 	bl	8009830 <_dtoa_r>
 8008a64:	9b08      	ldr	r3, [sp, #32]
 8008a66:	9003      	str	r0, [sp, #12]
 8008a68:	2b47      	cmp	r3, #71	; 0x47
 8008a6a:	d106      	bne.n	8008a7a <_vfprintf_r+0x922>
 8008a6c:	f01b 0f01 	tst.w	fp, #1
 8008a70:	d103      	bne.n	8008a7a <_vfprintf_r+0x922>
 8008a72:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8008a74:	e66b      	b.n	800874e <_vfprintf_r+0x5f6>
 8008a76:	4645      	mov	r5, r8
 8008a78:	e7e3      	b.n	8008a42 <_vfprintf_r+0x8ea>
 8008a7a:	9b03      	ldr	r3, [sp, #12]
 8008a7c:	195e      	adds	r6, r3, r5
 8008a7e:	9b08      	ldr	r3, [sp, #32]
 8008a80:	2b46      	cmp	r3, #70	; 0x46
 8008a82:	d10f      	bne.n	8008aa4 <_vfprintf_r+0x94c>
 8008a84:	9b03      	ldr	r3, [sp, #12]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	2b30      	cmp	r3, #48	; 0x30
 8008a8a:	d109      	bne.n	8008aa0 <_vfprintf_r+0x948>
 8008a8c:	ec51 0b18 	vmov	r0, r1, d8
 8008a90:	2200      	movs	r2, #0
 8008a92:	2300      	movs	r3, #0
 8008a94:	f7f8 f818 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a98:	b910      	cbnz	r0, 8008aa0 <_vfprintf_r+0x948>
 8008a9a:	f1c5 0501 	rsb	r5, r5, #1
 8008a9e:	951c      	str	r5, [sp, #112]	; 0x70
 8008aa0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008aa2:	441e      	add	r6, r3
 8008aa4:	ec51 0b18 	vmov	r0, r1, d8
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f7f8 f80c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ab0:	b100      	cbz	r0, 8008ab4 <_vfprintf_r+0x95c>
 8008ab2:	9620      	str	r6, [sp, #128]	; 0x80
 8008ab4:	2230      	movs	r2, #48	; 0x30
 8008ab6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ab8:	429e      	cmp	r6, r3
 8008aba:	d9da      	bls.n	8008a72 <_vfprintf_r+0x91a>
 8008abc:	1c59      	adds	r1, r3, #1
 8008abe:	9120      	str	r1, [sp, #128]	; 0x80
 8008ac0:	701a      	strb	r2, [r3, #0]
 8008ac2:	e7f8      	b.n	8008ab6 <_vfprintf_r+0x95e>
 8008ac4:	9b08      	ldr	r3, [sp, #32]
 8008ac6:	2b46      	cmp	r3, #70	; 0x46
 8008ac8:	f47f ae51 	bne.w	800876e <_vfprintf_r+0x616>
 8008acc:	f00b 0301 	and.w	r3, fp, #1
 8008ad0:	2d00      	cmp	r5, #0
 8008ad2:	ea43 0308 	orr.w	r3, r3, r8
 8008ad6:	dd18      	ble.n	8008b0a <_vfprintf_r+0x9b2>
 8008ad8:	b383      	cbz	r3, 8008b3c <_vfprintf_r+0x9e4>
 8008ada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008adc:	18eb      	adds	r3, r5, r3
 8008ade:	4498      	add	r8, r3
 8008ae0:	2366      	movs	r3, #102	; 0x66
 8008ae2:	9307      	str	r3, [sp, #28]
 8008ae4:	e030      	b.n	8008b48 <_vfprintf_r+0x9f0>
 8008ae6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008aea:	f802 6b01 	strb.w	r6, [r2], #1
 8008aee:	e675      	b.n	80087dc <_vfprintf_r+0x684>
 8008af0:	b941      	cbnz	r1, 8008b04 <_vfprintf_r+0x9ac>
 8008af2:	2230      	movs	r2, #48	; 0x30
 8008af4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8008af8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8008afc:	3330      	adds	r3, #48	; 0x30
 8008afe:	f802 3b01 	strb.w	r3, [r2], #1
 8008b02:	e677      	b.n	80087f4 <_vfprintf_r+0x69c>
 8008b04:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8008b08:	e7f8      	b.n	8008afc <_vfprintf_r+0x9a4>
 8008b0a:	b1cb      	cbz	r3, 8008b40 <_vfprintf_r+0x9e8>
 8008b0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b0e:	3301      	adds	r3, #1
 8008b10:	e7e5      	b.n	8008ade <_vfprintf_r+0x986>
 8008b12:	9b05      	ldr	r3, [sp, #20]
 8008b14:	429d      	cmp	r5, r3
 8008b16:	db07      	blt.n	8008b28 <_vfprintf_r+0x9d0>
 8008b18:	f01b 0f01 	tst.w	fp, #1
 8008b1c:	d029      	beq.n	8008b72 <_vfprintf_r+0xa1a>
 8008b1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b20:	eb05 0803 	add.w	r8, r5, r3
 8008b24:	2367      	movs	r3, #103	; 0x67
 8008b26:	e7dc      	b.n	8008ae2 <_vfprintf_r+0x98a>
 8008b28:	9b05      	ldr	r3, [sp, #20]
 8008b2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b2c:	2d00      	cmp	r5, #0
 8008b2e:	eb03 0802 	add.w	r8, r3, r2
 8008b32:	dcf7      	bgt.n	8008b24 <_vfprintf_r+0x9cc>
 8008b34:	f1c5 0301 	rsb	r3, r5, #1
 8008b38:	4498      	add	r8, r3
 8008b3a:	e7f3      	b.n	8008b24 <_vfprintf_r+0x9cc>
 8008b3c:	46a8      	mov	r8, r5
 8008b3e:	e7cf      	b.n	8008ae0 <_vfprintf_r+0x988>
 8008b40:	2366      	movs	r3, #102	; 0x66
 8008b42:	9307      	str	r3, [sp, #28]
 8008b44:	f04f 0801 	mov.w	r8, #1
 8008b48:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8008b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b4e:	d023      	beq.n	8008b98 <_vfprintf_r+0xa40>
 8008b50:	2300      	movs	r3, #0
 8008b52:	2d00      	cmp	r5, #0
 8008b54:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8008b58:	f77f ae62 	ble.w	8008820 <_vfprintf_r+0x6c8>
 8008b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	2bff      	cmp	r3, #255	; 0xff
 8008b62:	d108      	bne.n	8008b76 <_vfprintf_r+0xa1e>
 8008b64:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008b68:	4413      	add	r3, r2
 8008b6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b6c:	fb02 8803 	mla	r8, r2, r3, r8
 8008b70:	e656      	b.n	8008820 <_vfprintf_r+0x6c8>
 8008b72:	46a8      	mov	r8, r5
 8008b74:	e7d6      	b.n	8008b24 <_vfprintf_r+0x9cc>
 8008b76:	42ab      	cmp	r3, r5
 8008b78:	daf4      	bge.n	8008b64 <_vfprintf_r+0xa0c>
 8008b7a:	1aed      	subs	r5, r5, r3
 8008b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b7e:	785b      	ldrb	r3, [r3, #1]
 8008b80:	b133      	cbz	r3, 8008b90 <_vfprintf_r+0xa38>
 8008b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b84:	3301      	adds	r3, #1
 8008b86:	9309      	str	r3, [sp, #36]	; 0x24
 8008b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	930a      	str	r3, [sp, #40]	; 0x28
 8008b8e:	e7e5      	b.n	8008b5c <_vfprintf_r+0xa04>
 8008b90:	9b08      	ldr	r3, [sp, #32]
 8008b92:	3301      	adds	r3, #1
 8008b94:	9308      	str	r3, [sp, #32]
 8008b96:	e7e1      	b.n	8008b5c <_vfprintf_r+0xa04>
 8008b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b9a:	9308      	str	r3, [sp, #32]
 8008b9c:	e640      	b.n	8008820 <_vfprintf_r+0x6c8>
 8008b9e:	4632      	mov	r2, r6
 8008ba0:	f01b 0f20 	tst.w	fp, #32
 8008ba4:	f852 3b04 	ldr.w	r3, [r2], #4
 8008ba8:	9206      	str	r2, [sp, #24]
 8008baa:	d009      	beq.n	8008bc0 <_vfprintf_r+0xa68>
 8008bac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bae:	4610      	mov	r0, r2
 8008bb0:	17d1      	asrs	r1, r2, #31
 8008bb2:	e9c3 0100 	strd	r0, r1, [r3]
 8008bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bb8:	9e06      	ldr	r6, [sp, #24]
 8008bba:	9303      	str	r3, [sp, #12]
 8008bbc:	f7ff bb4f 	b.w	800825e <_vfprintf_r+0x106>
 8008bc0:	f01b 0f10 	tst.w	fp, #16
 8008bc4:	d002      	beq.n	8008bcc <_vfprintf_r+0xa74>
 8008bc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	e7f4      	b.n	8008bb6 <_vfprintf_r+0xa5e>
 8008bcc:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8008bd0:	d002      	beq.n	8008bd8 <_vfprintf_r+0xa80>
 8008bd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bd4:	801a      	strh	r2, [r3, #0]
 8008bd6:	e7ee      	b.n	8008bb6 <_vfprintf_r+0xa5e>
 8008bd8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8008bdc:	d0f3      	beq.n	8008bc6 <_vfprintf_r+0xa6e>
 8008bde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008be0:	701a      	strb	r2, [r3, #0]
 8008be2:	e7e8      	b.n	8008bb6 <_vfprintf_r+0xa5e>
 8008be4:	f04b 0b10 	orr.w	fp, fp, #16
 8008be8:	f01b 0f20 	tst.w	fp, #32
 8008bec:	d01e      	beq.n	8008c2c <_vfprintf_r+0xad4>
 8008bee:	3607      	adds	r6, #7
 8008bf0:	f026 0307 	bic.w	r3, r6, #7
 8008bf4:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8008bf8:	9306      	str	r3, [sp, #24]
 8008bfa:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8008bfe:	2300      	movs	r3, #0
 8008c00:	2200      	movs	r2, #0
 8008c02:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8008c06:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008c0a:	f000 84a9 	beq.w	8009560 <_vfprintf_r+0x1408>
 8008c0e:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8008c12:	9204      	str	r2, [sp, #16]
 8008c14:	ea56 0207 	orrs.w	r2, r6, r7
 8008c18:	f040 84a8 	bne.w	800956c <_vfprintf_r+0x1414>
 8008c1c:	f1b8 0f00 	cmp.w	r8, #0
 8008c20:	f000 8104 	beq.w	8008e2c <_vfprintf_r+0xcd4>
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	f040 84a4 	bne.w	8009572 <_vfprintf_r+0x141a>
 8008c2a:	e09a      	b.n	8008d62 <_vfprintf_r+0xc0a>
 8008c2c:	1d33      	adds	r3, r6, #4
 8008c2e:	f01b 0f10 	tst.w	fp, #16
 8008c32:	9306      	str	r3, [sp, #24]
 8008c34:	d001      	beq.n	8008c3a <_vfprintf_r+0xae2>
 8008c36:	6836      	ldr	r6, [r6, #0]
 8008c38:	e003      	b.n	8008c42 <_vfprintf_r+0xaea>
 8008c3a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8008c3e:	d002      	beq.n	8008c46 <_vfprintf_r+0xaee>
 8008c40:	8836      	ldrh	r6, [r6, #0]
 8008c42:	2700      	movs	r7, #0
 8008c44:	e7d9      	b.n	8008bfa <_vfprintf_r+0xaa2>
 8008c46:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8008c4a:	d0f4      	beq.n	8008c36 <_vfprintf_r+0xade>
 8008c4c:	7836      	ldrb	r6, [r6, #0]
 8008c4e:	e7f8      	b.n	8008c42 <_vfprintf_r+0xaea>
 8008c50:	4633      	mov	r3, r6
 8008c52:	2278      	movs	r2, #120	; 0x78
 8008c54:	f853 6b04 	ldr.w	r6, [r3], #4
 8008c58:	9306      	str	r3, [sp, #24]
 8008c5a:	f647 0330 	movw	r3, #30768	; 0x7830
 8008c5e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8008c62:	4ba8      	ldr	r3, [pc, #672]	; (8008f04 <_vfprintf_r+0xdac>)
 8008c64:	9316      	str	r3, [sp, #88]	; 0x58
 8008c66:	2700      	movs	r7, #0
 8008c68:	f04b 0b02 	orr.w	fp, fp, #2
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	9207      	str	r2, [sp, #28]
 8008c70:	e7c6      	b.n	8008c00 <_vfprintf_r+0xaa8>
 8008c72:	4632      	mov	r2, r6
 8008c74:	2500      	movs	r5, #0
 8008c76:	f852 3b04 	ldr.w	r3, [r2], #4
 8008c7a:	9303      	str	r3, [sp, #12]
 8008c7c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008c80:	9206      	str	r2, [sp, #24]
 8008c82:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8008c86:	d010      	beq.n	8008caa <_vfprintf_r+0xb52>
 8008c88:	9803      	ldr	r0, [sp, #12]
 8008c8a:	4642      	mov	r2, r8
 8008c8c:	4629      	mov	r1, r5
 8008c8e:	f7f7 faa7 	bl	80001e0 <memchr>
 8008c92:	9004      	str	r0, [sp, #16]
 8008c94:	2800      	cmp	r0, #0
 8008c96:	f000 80df 	beq.w	8008e58 <_vfprintf_r+0xd00>
 8008c9a:	9a03      	ldr	r2, [sp, #12]
 8008c9c:	9504      	str	r5, [sp, #16]
 8008c9e:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8008ca2:	eba0 0802 	sub.w	r8, r0, r2
 8008ca6:	462e      	mov	r6, r5
 8008ca8:	e5c2      	b.n	8008830 <_vfprintf_r+0x6d8>
 8008caa:	9803      	ldr	r0, [sp, #12]
 8008cac:	f7f7 fa90 	bl	80001d0 <strlen>
 8008cb0:	462e      	mov	r6, r5
 8008cb2:	4680      	mov	r8, r0
 8008cb4:	9504      	str	r5, [sp, #16]
 8008cb6:	4633      	mov	r3, r6
 8008cb8:	e45e      	b.n	8008578 <_vfprintf_r+0x420>
 8008cba:	f04b 0b10 	orr.w	fp, fp, #16
 8008cbe:	f01b 0f20 	tst.w	fp, #32
 8008cc2:	d007      	beq.n	8008cd4 <_vfprintf_r+0xb7c>
 8008cc4:	3607      	adds	r6, #7
 8008cc6:	f026 0307 	bic.w	r3, r6, #7
 8008cca:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8008cce:	9306      	str	r3, [sp, #24]
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e795      	b.n	8008c00 <_vfprintf_r+0xaa8>
 8008cd4:	1d33      	adds	r3, r6, #4
 8008cd6:	f01b 0f10 	tst.w	fp, #16
 8008cda:	9306      	str	r3, [sp, #24]
 8008cdc:	d001      	beq.n	8008ce2 <_vfprintf_r+0xb8a>
 8008cde:	6836      	ldr	r6, [r6, #0]
 8008ce0:	e003      	b.n	8008cea <_vfprintf_r+0xb92>
 8008ce2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8008ce6:	d002      	beq.n	8008cee <_vfprintf_r+0xb96>
 8008ce8:	8836      	ldrh	r6, [r6, #0]
 8008cea:	2700      	movs	r7, #0
 8008cec:	e7f0      	b.n	8008cd0 <_vfprintf_r+0xb78>
 8008cee:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8008cf2:	d0f4      	beq.n	8008cde <_vfprintf_r+0xb86>
 8008cf4:	7836      	ldrb	r6, [r6, #0]
 8008cf6:	e7f8      	b.n	8008cea <_vfprintf_r+0xb92>
 8008cf8:	4b83      	ldr	r3, [pc, #524]	; (8008f08 <_vfprintf_r+0xdb0>)
 8008cfa:	9316      	str	r3, [sp, #88]	; 0x58
 8008cfc:	f01b 0f20 	tst.w	fp, #32
 8008d00:	d019      	beq.n	8008d36 <_vfprintf_r+0xbde>
 8008d02:	3607      	adds	r6, #7
 8008d04:	f026 0307 	bic.w	r3, r6, #7
 8008d08:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8008d0c:	9306      	str	r3, [sp, #24]
 8008d0e:	f01b 0f01 	tst.w	fp, #1
 8008d12:	d00a      	beq.n	8008d2a <_vfprintf_r+0xbd2>
 8008d14:	ea56 0307 	orrs.w	r3, r6, r7
 8008d18:	d007      	beq.n	8008d2a <_vfprintf_r+0xbd2>
 8008d1a:	2330      	movs	r3, #48	; 0x30
 8008d1c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8008d20:	9b07      	ldr	r3, [sp, #28]
 8008d22:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8008d26:	f04b 0b02 	orr.w	fp, fp, #2
 8008d2a:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8008d2e:	2302      	movs	r3, #2
 8008d30:	e766      	b.n	8008c00 <_vfprintf_r+0xaa8>
 8008d32:	4b74      	ldr	r3, [pc, #464]	; (8008f04 <_vfprintf_r+0xdac>)
 8008d34:	e7e1      	b.n	8008cfa <_vfprintf_r+0xba2>
 8008d36:	1d33      	adds	r3, r6, #4
 8008d38:	f01b 0f10 	tst.w	fp, #16
 8008d3c:	9306      	str	r3, [sp, #24]
 8008d3e:	d001      	beq.n	8008d44 <_vfprintf_r+0xbec>
 8008d40:	6836      	ldr	r6, [r6, #0]
 8008d42:	e003      	b.n	8008d4c <_vfprintf_r+0xbf4>
 8008d44:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8008d48:	d002      	beq.n	8008d50 <_vfprintf_r+0xbf8>
 8008d4a:	8836      	ldrh	r6, [r6, #0]
 8008d4c:	2700      	movs	r7, #0
 8008d4e:	e7de      	b.n	8008d0e <_vfprintf_r+0xbb6>
 8008d50:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8008d54:	d0f4      	beq.n	8008d40 <_vfprintf_r+0xbe8>
 8008d56:	7836      	ldrb	r6, [r6, #0]
 8008d58:	e7f8      	b.n	8008d4c <_vfprintf_r+0xbf4>
 8008d5a:	2f00      	cmp	r7, #0
 8008d5c:	bf08      	it	eq
 8008d5e:	2e0a      	cmpeq	r6, #10
 8008d60:	d206      	bcs.n	8008d70 <_vfprintf_r+0xc18>
 8008d62:	3630      	adds	r6, #48	; 0x30
 8008d64:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8008d68:	f20d 1337 	addw	r3, sp, #311	; 0x137
 8008d6c:	f000 bc23 	b.w	80095b6 <_vfprintf_r+0x145e>
 8008d70:	2300      	movs	r3, #0
 8008d72:	9305      	str	r3, [sp, #20]
 8008d74:	9b04      	ldr	r3, [sp, #16]
 8008d76:	ad4e      	add	r5, sp, #312	; 0x138
 8008d78:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 8008d7c:	1e6b      	subs	r3, r5, #1
 8008d7e:	9303      	str	r3, [sp, #12]
 8008d80:	220a      	movs	r2, #10
 8008d82:	2300      	movs	r3, #0
 8008d84:	4630      	mov	r0, r6
 8008d86:	4639      	mov	r1, r7
 8008d88:	f7f7 ff5e 	bl	8000c48 <__aeabi_uldivmod>
 8008d8c:	9b05      	ldr	r3, [sp, #20]
 8008d8e:	3230      	adds	r2, #48	; 0x30
 8008d90:	3301      	adds	r3, #1
 8008d92:	f805 2c01 	strb.w	r2, [r5, #-1]
 8008d96:	9305      	str	r3, [sp, #20]
 8008d98:	f1bb 0f00 	cmp.w	fp, #0
 8008d9c:	d019      	beq.n	8008dd2 <_vfprintf_r+0xc7a>
 8008d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da0:	9a05      	ldr	r2, [sp, #20]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d114      	bne.n	8008dd2 <_vfprintf_r+0xc7a>
 8008da8:	2aff      	cmp	r2, #255	; 0xff
 8008daa:	d012      	beq.n	8008dd2 <_vfprintf_r+0xc7a>
 8008dac:	2f00      	cmp	r7, #0
 8008dae:	bf08      	it	eq
 8008db0:	2e0a      	cmpeq	r6, #10
 8008db2:	d30e      	bcc.n	8008dd2 <_vfprintf_r+0xc7a>
 8008db4:	9b03      	ldr	r3, [sp, #12]
 8008db6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008db8:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008dba:	1a9b      	subs	r3, r3, r2
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	9303      	str	r3, [sp, #12]
 8008dc0:	f002 fbff 	bl	800b5c2 <strncpy>
 8008dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc6:	785d      	ldrb	r5, [r3, #1]
 8008dc8:	b1e5      	cbz	r5, 8008e04 <_vfprintf_r+0xcac>
 8008dca:	3301      	adds	r3, #1
 8008dcc:	930a      	str	r3, [sp, #40]	; 0x28
 8008dce:	2300      	movs	r3, #0
 8008dd0:	9305      	str	r3, [sp, #20]
 8008dd2:	220a      	movs	r2, #10
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	4639      	mov	r1, r7
 8008dda:	f7f7 ff35 	bl	8000c48 <__aeabi_uldivmod>
 8008dde:	2f00      	cmp	r7, #0
 8008de0:	bf08      	it	eq
 8008de2:	2e0a      	cmpeq	r6, #10
 8008de4:	d20a      	bcs.n	8008dfc <_vfprintf_r+0xca4>
 8008de6:	9b03      	ldr	r3, [sp, #12]
 8008de8:	f8dd b010 	ldr.w	fp, [sp, #16]
 8008dec:	aa4e      	add	r2, sp, #312	; 0x138
 8008dee:	4646      	mov	r6, r8
 8008df0:	eba2 0803 	sub.w	r8, r2, r3
 8008df4:	2300      	movs	r3, #0
 8008df6:	9304      	str	r3, [sp, #16]
 8008df8:	f7ff bbbe 	b.w	8008578 <_vfprintf_r+0x420>
 8008dfc:	9d03      	ldr	r5, [sp, #12]
 8008dfe:	4606      	mov	r6, r0
 8008e00:	460f      	mov	r7, r1
 8008e02:	e7bb      	b.n	8008d7c <_vfprintf_r+0xc24>
 8008e04:	9505      	str	r5, [sp, #20]
 8008e06:	e7e4      	b.n	8008dd2 <_vfprintf_r+0xc7a>
 8008e08:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008e0a:	f006 030f 	and.w	r3, r6, #15
 8008e0e:	5cd3      	ldrb	r3, [r2, r3]
 8008e10:	9a03      	ldr	r2, [sp, #12]
 8008e12:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8008e16:	0933      	lsrs	r3, r6, #4
 8008e18:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8008e1c:	9203      	str	r2, [sp, #12]
 8008e1e:	093a      	lsrs	r2, r7, #4
 8008e20:	461e      	mov	r6, r3
 8008e22:	4617      	mov	r7, r2
 8008e24:	ea56 0307 	orrs.w	r3, r6, r7
 8008e28:	d1ee      	bne.n	8008e08 <_vfprintf_r+0xcb0>
 8008e2a:	e7dc      	b.n	8008de6 <_vfprintf_r+0xc8e>
 8008e2c:	b933      	cbnz	r3, 8008e3c <_vfprintf_r+0xce4>
 8008e2e:	f01b 0f01 	tst.w	fp, #1
 8008e32:	d003      	beq.n	8008e3c <_vfprintf_r+0xce4>
 8008e34:	2330      	movs	r3, #48	; 0x30
 8008e36:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8008e3a:	e795      	b.n	8008d68 <_vfprintf_r+0xc10>
 8008e3c:	ab4e      	add	r3, sp, #312	; 0x138
 8008e3e:	e3ba      	b.n	80095b6 <_vfprintf_r+0x145e>
 8008e40:	9b07      	ldr	r3, [sp, #28]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 837d 	beq.w	8009542 <_vfprintf_r+0x13ea>
 8008e48:	2000      	movs	r0, #0
 8008e4a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8008e4e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8008e52:	9606      	str	r6, [sp, #24]
 8008e54:	f7ff bb1e 	b.w	8008494 <_vfprintf_r+0x33c>
 8008e58:	9e04      	ldr	r6, [sp, #16]
 8008e5a:	e72c      	b.n	8008cb6 <_vfprintf_r+0xb5e>
 8008e5c:	2010      	movs	r0, #16
 8008e5e:	4402      	add	r2, r0
 8008e60:	2b07      	cmp	r3, #7
 8008e62:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8008e66:	6060      	str	r0, [r4, #4]
 8008e68:	dd08      	ble.n	8008e7c <_vfprintf_r+0xd24>
 8008e6a:	aa22      	add	r2, sp, #136	; 0x88
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	4650      	mov	r0, sl
 8008e70:	f002 fc42 	bl	800b6f8 <__sprint_r>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	f040 8342 	bne.w	80094fe <_vfprintf_r+0x13a6>
 8008e7a:	a925      	add	r1, sp, #148	; 0x94
 8008e7c:	3f10      	subs	r7, #16
 8008e7e:	460c      	mov	r4, r1
 8008e80:	e4f1      	b.n	8008866 <_vfprintf_r+0x70e>
 8008e82:	460c      	mov	r4, r1
 8008e84:	e50a      	b.n	800889c <_vfprintf_r+0x744>
 8008e86:	aa22      	add	r2, sp, #136	; 0x88
 8008e88:	4649      	mov	r1, r9
 8008e8a:	4650      	mov	r0, sl
 8008e8c:	f002 fc34 	bl	800b6f8 <__sprint_r>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	f040 8334 	bne.w	80094fe <_vfprintf_r+0x13a6>
 8008e96:	ac25      	add	r4, sp, #148	; 0x94
 8008e98:	e512      	b.n	80088c0 <_vfprintf_r+0x768>
 8008e9a:	aa22      	add	r2, sp, #136	; 0x88
 8008e9c:	4649      	mov	r1, r9
 8008e9e:	4650      	mov	r0, sl
 8008ea0:	f002 fc2a 	bl	800b6f8 <__sprint_r>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	f040 832a 	bne.w	80094fe <_vfprintf_r+0x13a6>
 8008eaa:	ac25      	add	r4, sp, #148	; 0x94
 8008eac:	e518      	b.n	80088e0 <_vfprintf_r+0x788>
 8008eae:	2010      	movs	r0, #16
 8008eb0:	4402      	add	r2, r0
 8008eb2:	2b07      	cmp	r3, #7
 8008eb4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8008eb8:	6060      	str	r0, [r4, #4]
 8008eba:	dd08      	ble.n	8008ece <_vfprintf_r+0xd76>
 8008ebc:	aa22      	add	r2, sp, #136	; 0x88
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	4650      	mov	r0, sl
 8008ec2:	f002 fc19 	bl	800b6f8 <__sprint_r>
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	f040 8319 	bne.w	80094fe <_vfprintf_r+0x13a6>
 8008ecc:	a925      	add	r1, sp, #148	; 0x94
 8008ece:	3f10      	subs	r7, #16
 8008ed0:	460c      	mov	r4, r1
 8008ed2:	e50d      	b.n	80088f0 <_vfprintf_r+0x798>
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	e526      	b.n	8008926 <_vfprintf_r+0x7ce>
 8008ed8:	2010      	movs	r0, #16
 8008eda:	4402      	add	r2, r0
 8008edc:	2b07      	cmp	r3, #7
 8008ede:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8008ee2:	6060      	str	r0, [r4, #4]
 8008ee4:	dd08      	ble.n	8008ef8 <_vfprintf_r+0xda0>
 8008ee6:	aa22      	add	r2, sp, #136	; 0x88
 8008ee8:	4649      	mov	r1, r9
 8008eea:	4650      	mov	r0, sl
 8008eec:	f002 fc04 	bl	800b6f8 <__sprint_r>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	f040 8304 	bne.w	80094fe <_vfprintf_r+0x13a6>
 8008ef6:	a925      	add	r1, sp, #148	; 0x94
 8008ef8:	3e10      	subs	r6, #16
 8008efa:	460c      	mov	r4, r1
 8008efc:	e518      	b.n	8008930 <_vfprintf_r+0x7d8>
 8008efe:	460c      	mov	r4, r1
 8008f00:	e530      	b.n	8008964 <_vfprintf_r+0x80c>
 8008f02:	bf00      	nop
 8008f04:	0800cd40 	.word	0x0800cd40
 8008f08:	0800cd51 	.word	0x0800cd51
 8008f0c:	9b07      	ldr	r3, [sp, #28]
 8008f0e:	2b65      	cmp	r3, #101	; 0x65
 8008f10:	f340 8242 	ble.w	8009398 <_vfprintf_r+0x1240>
 8008f14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f18:	2200      	movs	r2, #0
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f7f7 fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d068      	beq.n	8008ff6 <_vfprintf_r+0xe9e>
 8008f24:	4b6d      	ldr	r3, [pc, #436]	; (80090dc <_vfprintf_r+0xf84>)
 8008f26:	6023      	str	r3, [r4, #0]
 8008f28:	2301      	movs	r3, #1
 8008f2a:	441e      	add	r6, r3
 8008f2c:	6063      	str	r3, [r4, #4]
 8008f2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f30:	9624      	str	r6, [sp, #144]	; 0x90
 8008f32:	3301      	adds	r3, #1
 8008f34:	2b07      	cmp	r3, #7
 8008f36:	9323      	str	r3, [sp, #140]	; 0x8c
 8008f38:	dc37      	bgt.n	8008faa <_vfprintf_r+0xe52>
 8008f3a:	3408      	adds	r4, #8
 8008f3c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008f3e:	9a05      	ldr	r2, [sp, #20]
 8008f40:	4293      	cmp	r3, r2
 8008f42:	db03      	blt.n	8008f4c <_vfprintf_r+0xdf4>
 8008f44:	f01b 0f01 	tst.w	fp, #1
 8008f48:	f43f ad2b 	beq.w	80089a2 <_vfprintf_r+0x84a>
 8008f4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f4e:	6023      	str	r3, [r4, #0]
 8008f50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f54:	6063      	str	r3, [r4, #4]
 8008f56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f58:	4413      	add	r3, r2
 8008f5a:	9324      	str	r3, [sp, #144]	; 0x90
 8008f5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f5e:	3301      	adds	r3, #1
 8008f60:	2b07      	cmp	r3, #7
 8008f62:	9323      	str	r3, [sp, #140]	; 0x8c
 8008f64:	dc2b      	bgt.n	8008fbe <_vfprintf_r+0xe66>
 8008f66:	3408      	adds	r4, #8
 8008f68:	9b05      	ldr	r3, [sp, #20]
 8008f6a:	1e5d      	subs	r5, r3, #1
 8008f6c:	2d00      	cmp	r5, #0
 8008f6e:	f77f ad18 	ble.w	80089a2 <_vfprintf_r+0x84a>
 8008f72:	4e5b      	ldr	r6, [pc, #364]	; (80090e0 <_vfprintf_r+0xf88>)
 8008f74:	2710      	movs	r7, #16
 8008f76:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008f7a:	2d10      	cmp	r5, #16
 8008f7c:	f103 0301 	add.w	r3, r3, #1
 8008f80:	f104 0108 	add.w	r1, r4, #8
 8008f84:	6026      	str	r6, [r4, #0]
 8008f86:	dc24      	bgt.n	8008fd2 <_vfprintf_r+0xe7a>
 8008f88:	6065      	str	r5, [r4, #4]
 8008f8a:	2b07      	cmp	r3, #7
 8008f8c:	4415      	add	r5, r2
 8008f8e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8008f92:	f340 8293 	ble.w	80094bc <_vfprintf_r+0x1364>
 8008f96:	aa22      	add	r2, sp, #136	; 0x88
 8008f98:	4649      	mov	r1, r9
 8008f9a:	4650      	mov	r0, sl
 8008f9c:	f002 fbac 	bl	800b6f8 <__sprint_r>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	f040 82ac 	bne.w	80094fe <_vfprintf_r+0x13a6>
 8008fa6:	ac25      	add	r4, sp, #148	; 0x94
 8008fa8:	e4fb      	b.n	80089a2 <_vfprintf_r+0x84a>
 8008faa:	aa22      	add	r2, sp, #136	; 0x88
 8008fac:	4649      	mov	r1, r9
 8008fae:	4650      	mov	r0, sl
 8008fb0:	f002 fba2 	bl	800b6f8 <__sprint_r>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	f040 82a2 	bne.w	80094fe <_vfprintf_r+0x13a6>
 8008fba:	ac25      	add	r4, sp, #148	; 0x94
 8008fbc:	e7be      	b.n	8008f3c <_vfprintf_r+0xde4>
 8008fbe:	aa22      	add	r2, sp, #136	; 0x88
 8008fc0:	4649      	mov	r1, r9
 8008fc2:	4650      	mov	r0, sl
 8008fc4:	f002 fb98 	bl	800b6f8 <__sprint_r>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	f040 8298 	bne.w	80094fe <_vfprintf_r+0x13a6>
 8008fce:	ac25      	add	r4, sp, #148	; 0x94
 8008fd0:	e7ca      	b.n	8008f68 <_vfprintf_r+0xe10>
 8008fd2:	3210      	adds	r2, #16
 8008fd4:	2b07      	cmp	r3, #7
 8008fd6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8008fda:	6067      	str	r7, [r4, #4]
 8008fdc:	dd08      	ble.n	8008ff0 <_vfprintf_r+0xe98>
 8008fde:	aa22      	add	r2, sp, #136	; 0x88
 8008fe0:	4649      	mov	r1, r9
 8008fe2:	4650      	mov	r0, sl
 8008fe4:	f002 fb88 	bl	800b6f8 <__sprint_r>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	f040 8288 	bne.w	80094fe <_vfprintf_r+0x13a6>
 8008fee:	a925      	add	r1, sp, #148	; 0x94
 8008ff0:	3d10      	subs	r5, #16
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	e7bf      	b.n	8008f76 <_vfprintf_r+0xe1e>
 8008ff6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	dc73      	bgt.n	80090e4 <_vfprintf_r+0xf8c>
 8008ffc:	4b37      	ldr	r3, [pc, #220]	; (80090dc <_vfprintf_r+0xf84>)
 8008ffe:	6023      	str	r3, [r4, #0]
 8009000:	2301      	movs	r3, #1
 8009002:	441e      	add	r6, r3
 8009004:	6063      	str	r3, [r4, #4]
 8009006:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009008:	9624      	str	r6, [sp, #144]	; 0x90
 800900a:	3301      	adds	r3, #1
 800900c:	2b07      	cmp	r3, #7
 800900e:	9323      	str	r3, [sp, #140]	; 0x8c
 8009010:	dc3d      	bgt.n	800908e <_vfprintf_r+0xf36>
 8009012:	3408      	adds	r4, #8
 8009014:	9905      	ldr	r1, [sp, #20]
 8009016:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009018:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800901a:	430a      	orrs	r2, r1
 800901c:	f00b 0101 	and.w	r1, fp, #1
 8009020:	430a      	orrs	r2, r1
 8009022:	f43f acbe 	beq.w	80089a2 <_vfprintf_r+0x84a>
 8009026:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009028:	6022      	str	r2, [r4, #0]
 800902a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800902c:	6062      	str	r2, [r4, #4]
 800902e:	4413      	add	r3, r2
 8009030:	9324      	str	r3, [sp, #144]	; 0x90
 8009032:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009034:	3301      	adds	r3, #1
 8009036:	2b07      	cmp	r3, #7
 8009038:	9323      	str	r3, [sp, #140]	; 0x8c
 800903a:	dc32      	bgt.n	80090a2 <_vfprintf_r+0xf4a>
 800903c:	3408      	adds	r4, #8
 800903e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8009040:	2d00      	cmp	r5, #0
 8009042:	da1b      	bge.n	800907c <_vfprintf_r+0xf24>
 8009044:	4e26      	ldr	r6, [pc, #152]	; (80090e0 <_vfprintf_r+0xf88>)
 8009046:	426d      	negs	r5, r5
 8009048:	4623      	mov	r3, r4
 800904a:	2710      	movs	r7, #16
 800904c:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8009050:	2d10      	cmp	r5, #16
 8009052:	f102 0201 	add.w	r2, r2, #1
 8009056:	f104 0408 	add.w	r4, r4, #8
 800905a:	601e      	str	r6, [r3, #0]
 800905c:	dc2b      	bgt.n	80090b6 <_vfprintf_r+0xf5e>
 800905e:	605d      	str	r5, [r3, #4]
 8009060:	2a07      	cmp	r2, #7
 8009062:	440d      	add	r5, r1
 8009064:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8009068:	dd08      	ble.n	800907c <_vfprintf_r+0xf24>
 800906a:	aa22      	add	r2, sp, #136	; 0x88
 800906c:	4649      	mov	r1, r9
 800906e:	4650      	mov	r0, sl
 8009070:	f002 fb42 	bl	800b6f8 <__sprint_r>
 8009074:	2800      	cmp	r0, #0
 8009076:	f040 8242 	bne.w	80094fe <_vfprintf_r+0x13a6>
 800907a:	ac25      	add	r4, sp, #148	; 0x94
 800907c:	9b03      	ldr	r3, [sp, #12]
 800907e:	6023      	str	r3, [r4, #0]
 8009080:	9b05      	ldr	r3, [sp, #20]
 8009082:	9a05      	ldr	r2, [sp, #20]
 8009084:	6063      	str	r3, [r4, #4]
 8009086:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009088:	4413      	add	r3, r2
 800908a:	9324      	str	r3, [sp, #144]	; 0x90
 800908c:	e482      	b.n	8008994 <_vfprintf_r+0x83c>
 800908e:	aa22      	add	r2, sp, #136	; 0x88
 8009090:	4649      	mov	r1, r9
 8009092:	4650      	mov	r0, sl
 8009094:	f002 fb30 	bl	800b6f8 <__sprint_r>
 8009098:	2800      	cmp	r0, #0
 800909a:	f040 8230 	bne.w	80094fe <_vfprintf_r+0x13a6>
 800909e:	ac25      	add	r4, sp, #148	; 0x94
 80090a0:	e7b8      	b.n	8009014 <_vfprintf_r+0xebc>
 80090a2:	aa22      	add	r2, sp, #136	; 0x88
 80090a4:	4649      	mov	r1, r9
 80090a6:	4650      	mov	r0, sl
 80090a8:	f002 fb26 	bl	800b6f8 <__sprint_r>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	f040 8226 	bne.w	80094fe <_vfprintf_r+0x13a6>
 80090b2:	ac25      	add	r4, sp, #148	; 0x94
 80090b4:	e7c3      	b.n	800903e <_vfprintf_r+0xee6>
 80090b6:	3110      	adds	r1, #16
 80090b8:	2a07      	cmp	r2, #7
 80090ba:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 80090be:	605f      	str	r7, [r3, #4]
 80090c0:	dd08      	ble.n	80090d4 <_vfprintf_r+0xf7c>
 80090c2:	aa22      	add	r2, sp, #136	; 0x88
 80090c4:	4649      	mov	r1, r9
 80090c6:	4650      	mov	r0, sl
 80090c8:	f002 fb16 	bl	800b6f8 <__sprint_r>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	f040 8216 	bne.w	80094fe <_vfprintf_r+0x13a6>
 80090d2:	ac25      	add	r4, sp, #148	; 0x94
 80090d4:	3d10      	subs	r5, #16
 80090d6:	4623      	mov	r3, r4
 80090d8:	e7b8      	b.n	800904c <_vfprintf_r+0xef4>
 80090da:	bf00      	nop
 80090dc:	0800cd62 	.word	0x0800cd62
 80090e0:	0800cd94 	.word	0x0800cd94
 80090e4:	9b05      	ldr	r3, [sp, #20]
 80090e6:	42ab      	cmp	r3, r5
 80090e8:	bfa8      	it	ge
 80090ea:	462b      	movge	r3, r5
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	461f      	mov	r7, r3
 80090f0:	dd0b      	ble.n	800910a <_vfprintf_r+0xfb2>
 80090f2:	9b03      	ldr	r3, [sp, #12]
 80090f4:	e9c4 3700 	strd	r3, r7, [r4]
 80090f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090fa:	3301      	adds	r3, #1
 80090fc:	443e      	add	r6, r7
 80090fe:	2b07      	cmp	r3, #7
 8009100:	9624      	str	r6, [sp, #144]	; 0x90
 8009102:	9323      	str	r3, [sp, #140]	; 0x8c
 8009104:	f300 808c 	bgt.w	8009220 <_vfprintf_r+0x10c8>
 8009108:	3408      	adds	r4, #8
 800910a:	2f00      	cmp	r7, #0
 800910c:	bfac      	ite	ge
 800910e:	1bee      	subge	r6, r5, r7
 8009110:	462e      	movlt	r6, r5
 8009112:	2e00      	cmp	r6, #0
 8009114:	dd1c      	ble.n	8009150 <_vfprintf_r+0xff8>
 8009116:	4f9f      	ldr	r7, [pc, #636]	; (8009394 <_vfprintf_r+0x123c>)
 8009118:	f04f 0810 	mov.w	r8, #16
 800911c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009120:	2e10      	cmp	r6, #16
 8009122:	f103 0301 	add.w	r3, r3, #1
 8009126:	f104 0108 	add.w	r1, r4, #8
 800912a:	6027      	str	r7, [r4, #0]
 800912c:	f300 8082 	bgt.w	8009234 <_vfprintf_r+0x10dc>
 8009130:	6066      	str	r6, [r4, #4]
 8009132:	2b07      	cmp	r3, #7
 8009134:	4416      	add	r6, r2
 8009136:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800913a:	f340 808e 	ble.w	800925a <_vfprintf_r+0x1102>
 800913e:	aa22      	add	r2, sp, #136	; 0x88
 8009140:	4649      	mov	r1, r9
 8009142:	4650      	mov	r0, sl
 8009144:	f002 fad8 	bl	800b6f8 <__sprint_r>
 8009148:	2800      	cmp	r0, #0
 800914a:	f040 81d8 	bne.w	80094fe <_vfprintf_r+0x13a6>
 800914e:	ac25      	add	r4, sp, #148	; 0x94
 8009150:	9b03      	ldr	r3, [sp, #12]
 8009152:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8009156:	441d      	add	r5, r3
 8009158:	d00d      	beq.n	8009176 <_vfprintf_r+0x101e>
 800915a:	4e8e      	ldr	r6, [pc, #568]	; (8009394 <_vfprintf_r+0x123c>)
 800915c:	2710      	movs	r7, #16
 800915e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009160:	2b00      	cmp	r3, #0
 8009162:	d17c      	bne.n	800925e <_vfprintf_r+0x1106>
 8009164:	9b08      	ldr	r3, [sp, #32]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d17c      	bne.n	8009264 <_vfprintf_r+0x110c>
 800916a:	9b03      	ldr	r3, [sp, #12]
 800916c:	9a05      	ldr	r2, [sp, #20]
 800916e:	4413      	add	r3, r2
 8009170:	429d      	cmp	r5, r3
 8009172:	bf28      	it	cs
 8009174:	461d      	movcs	r5, r3
 8009176:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009178:	9a05      	ldr	r2, [sp, #20]
 800917a:	4293      	cmp	r3, r2
 800917c:	db02      	blt.n	8009184 <_vfprintf_r+0x102c>
 800917e:	f01b 0f01 	tst.w	fp, #1
 8009182:	d00e      	beq.n	80091a2 <_vfprintf_r+0x104a>
 8009184:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009186:	6023      	str	r3, [r4, #0]
 8009188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800918a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800918c:	6063      	str	r3, [r4, #4]
 800918e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009190:	4413      	add	r3, r2
 8009192:	9324      	str	r3, [sp, #144]	; 0x90
 8009194:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009196:	3301      	adds	r3, #1
 8009198:	2b07      	cmp	r3, #7
 800919a:	9323      	str	r3, [sp, #140]	; 0x8c
 800919c:	f300 80e5 	bgt.w	800936a <_vfprintf_r+0x1212>
 80091a0:	3408      	adds	r4, #8
 80091a2:	9905      	ldr	r1, [sp, #20]
 80091a4:	9b03      	ldr	r3, [sp, #12]
 80091a6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80091a8:	440b      	add	r3, r1
 80091aa:	1b8e      	subs	r6, r1, r6
 80091ac:	1b5a      	subs	r2, r3, r5
 80091ae:	4296      	cmp	r6, r2
 80091b0:	bfa8      	it	ge
 80091b2:	4616      	movge	r6, r2
 80091b4:	2e00      	cmp	r6, #0
 80091b6:	dd0b      	ble.n	80091d0 <_vfprintf_r+0x1078>
 80091b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80091ba:	4433      	add	r3, r6
 80091bc:	9324      	str	r3, [sp, #144]	; 0x90
 80091be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091c0:	3301      	adds	r3, #1
 80091c2:	2b07      	cmp	r3, #7
 80091c4:	e9c4 5600 	strd	r5, r6, [r4]
 80091c8:	9323      	str	r3, [sp, #140]	; 0x8c
 80091ca:	f300 80d8 	bgt.w	800937e <_vfprintf_r+0x1226>
 80091ce:	3408      	adds	r4, #8
 80091d0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80091d2:	9b05      	ldr	r3, [sp, #20]
 80091d4:	2e00      	cmp	r6, #0
 80091d6:	eba3 0505 	sub.w	r5, r3, r5
 80091da:	bfa8      	it	ge
 80091dc:	1bad      	subge	r5, r5, r6
 80091de:	2d00      	cmp	r5, #0
 80091e0:	f77f abdf 	ble.w	80089a2 <_vfprintf_r+0x84a>
 80091e4:	4e6b      	ldr	r6, [pc, #428]	; (8009394 <_vfprintf_r+0x123c>)
 80091e6:	2710      	movs	r7, #16
 80091e8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80091ec:	2d10      	cmp	r5, #16
 80091ee:	f103 0301 	add.w	r3, r3, #1
 80091f2:	f104 0108 	add.w	r1, r4, #8
 80091f6:	6026      	str	r6, [r4, #0]
 80091f8:	f77f aec6 	ble.w	8008f88 <_vfprintf_r+0xe30>
 80091fc:	3210      	adds	r2, #16
 80091fe:	2b07      	cmp	r3, #7
 8009200:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009204:	6067      	str	r7, [r4, #4]
 8009206:	dd08      	ble.n	800921a <_vfprintf_r+0x10c2>
 8009208:	aa22      	add	r2, sp, #136	; 0x88
 800920a:	4649      	mov	r1, r9
 800920c:	4650      	mov	r0, sl
 800920e:	f002 fa73 	bl	800b6f8 <__sprint_r>
 8009212:	2800      	cmp	r0, #0
 8009214:	f040 8173 	bne.w	80094fe <_vfprintf_r+0x13a6>
 8009218:	a925      	add	r1, sp, #148	; 0x94
 800921a:	3d10      	subs	r5, #16
 800921c:	460c      	mov	r4, r1
 800921e:	e7e3      	b.n	80091e8 <_vfprintf_r+0x1090>
 8009220:	aa22      	add	r2, sp, #136	; 0x88
 8009222:	4649      	mov	r1, r9
 8009224:	4650      	mov	r0, sl
 8009226:	f002 fa67 	bl	800b6f8 <__sprint_r>
 800922a:	2800      	cmp	r0, #0
 800922c:	f040 8167 	bne.w	80094fe <_vfprintf_r+0x13a6>
 8009230:	ac25      	add	r4, sp, #148	; 0x94
 8009232:	e76a      	b.n	800910a <_vfprintf_r+0xfb2>
 8009234:	3210      	adds	r2, #16
 8009236:	2b07      	cmp	r3, #7
 8009238:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800923c:	f8c4 8004 	str.w	r8, [r4, #4]
 8009240:	dd08      	ble.n	8009254 <_vfprintf_r+0x10fc>
 8009242:	aa22      	add	r2, sp, #136	; 0x88
 8009244:	4649      	mov	r1, r9
 8009246:	4650      	mov	r0, sl
 8009248:	f002 fa56 	bl	800b6f8 <__sprint_r>
 800924c:	2800      	cmp	r0, #0
 800924e:	f040 8156 	bne.w	80094fe <_vfprintf_r+0x13a6>
 8009252:	a925      	add	r1, sp, #148	; 0x94
 8009254:	3e10      	subs	r6, #16
 8009256:	460c      	mov	r4, r1
 8009258:	e760      	b.n	800911c <_vfprintf_r+0xfc4>
 800925a:	460c      	mov	r4, r1
 800925c:	e778      	b.n	8009150 <_vfprintf_r+0xff8>
 800925e:	9b08      	ldr	r3, [sp, #32]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d052      	beq.n	800930a <_vfprintf_r+0x11b2>
 8009264:	9b08      	ldr	r3, [sp, #32]
 8009266:	3b01      	subs	r3, #1
 8009268:	9308      	str	r3, [sp, #32]
 800926a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009270:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009272:	6063      	str	r3, [r4, #4]
 8009274:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009276:	4413      	add	r3, r2
 8009278:	9324      	str	r3, [sp, #144]	; 0x90
 800927a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800927c:	3301      	adds	r3, #1
 800927e:	2b07      	cmp	r3, #7
 8009280:	9323      	str	r3, [sp, #140]	; 0x8c
 8009282:	dc49      	bgt.n	8009318 <_vfprintf_r+0x11c0>
 8009284:	3408      	adds	r4, #8
 8009286:	9b03      	ldr	r3, [sp, #12]
 8009288:	9a05      	ldr	r2, [sp, #20]
 800928a:	eb03 0802 	add.w	r8, r3, r2
 800928e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	eba8 0805 	sub.w	r8, r8, r5
 8009296:	4598      	cmp	r8, r3
 8009298:	bfa8      	it	ge
 800929a:	4698      	movge	r8, r3
 800929c:	f1b8 0f00 	cmp.w	r8, #0
 80092a0:	dd0a      	ble.n	80092b8 <_vfprintf_r+0x1160>
 80092a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80092a4:	4443      	add	r3, r8
 80092a6:	9324      	str	r3, [sp, #144]	; 0x90
 80092a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80092aa:	3301      	adds	r3, #1
 80092ac:	2b07      	cmp	r3, #7
 80092ae:	e9c4 5800 	strd	r5, r8, [r4]
 80092b2:	9323      	str	r3, [sp, #140]	; 0x8c
 80092b4:	dc3a      	bgt.n	800932c <_vfprintf_r+0x11d4>
 80092b6:	3408      	adds	r4, #8
 80092b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	f1b8 0f00 	cmp.w	r8, #0
 80092c0:	bfac      	ite	ge
 80092c2:	eba3 0808 	subge.w	r8, r3, r8
 80092c6:	4698      	movlt	r8, r3
 80092c8:	f1b8 0f00 	cmp.w	r8, #0
 80092cc:	dd19      	ble.n	8009302 <_vfprintf_r+0x11aa>
 80092ce:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 80092d2:	f1b8 0f10 	cmp.w	r8, #16
 80092d6:	f102 0201 	add.w	r2, r2, #1
 80092da:	f104 0108 	add.w	r1, r4, #8
 80092de:	6026      	str	r6, [r4, #0]
 80092e0:	dc2e      	bgt.n	8009340 <_vfprintf_r+0x11e8>
 80092e2:	4443      	add	r3, r8
 80092e4:	2a07      	cmp	r2, #7
 80092e6:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 80092ea:	f8c4 8004 	str.w	r8, [r4, #4]
 80092ee:	dd3a      	ble.n	8009366 <_vfprintf_r+0x120e>
 80092f0:	aa22      	add	r2, sp, #136	; 0x88
 80092f2:	4649      	mov	r1, r9
 80092f4:	4650      	mov	r0, sl
 80092f6:	f002 f9ff 	bl	800b6f8 <__sprint_r>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	f040 80ff 	bne.w	80094fe <_vfprintf_r+0x13a6>
 8009300:	ac25      	add	r4, sp, #148	; 0x94
 8009302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	441d      	add	r5, r3
 8009308:	e729      	b.n	800915e <_vfprintf_r+0x1006>
 800930a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800930c:	3b01      	subs	r3, #1
 800930e:	930a      	str	r3, [sp, #40]	; 0x28
 8009310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009312:	3b01      	subs	r3, #1
 8009314:	9309      	str	r3, [sp, #36]	; 0x24
 8009316:	e7a8      	b.n	800926a <_vfprintf_r+0x1112>
 8009318:	aa22      	add	r2, sp, #136	; 0x88
 800931a:	4649      	mov	r1, r9
 800931c:	4650      	mov	r0, sl
 800931e:	f002 f9eb 	bl	800b6f8 <__sprint_r>
 8009322:	2800      	cmp	r0, #0
 8009324:	f040 80eb 	bne.w	80094fe <_vfprintf_r+0x13a6>
 8009328:	ac25      	add	r4, sp, #148	; 0x94
 800932a:	e7ac      	b.n	8009286 <_vfprintf_r+0x112e>
 800932c:	aa22      	add	r2, sp, #136	; 0x88
 800932e:	4649      	mov	r1, r9
 8009330:	4650      	mov	r0, sl
 8009332:	f002 f9e1 	bl	800b6f8 <__sprint_r>
 8009336:	2800      	cmp	r0, #0
 8009338:	f040 80e1 	bne.w	80094fe <_vfprintf_r+0x13a6>
 800933c:	ac25      	add	r4, sp, #148	; 0x94
 800933e:	e7bb      	b.n	80092b8 <_vfprintf_r+0x1160>
 8009340:	3310      	adds	r3, #16
 8009342:	2a07      	cmp	r2, #7
 8009344:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8009348:	6067      	str	r7, [r4, #4]
 800934a:	dd08      	ble.n	800935e <_vfprintf_r+0x1206>
 800934c:	aa22      	add	r2, sp, #136	; 0x88
 800934e:	4649      	mov	r1, r9
 8009350:	4650      	mov	r0, sl
 8009352:	f002 f9d1 	bl	800b6f8 <__sprint_r>
 8009356:	2800      	cmp	r0, #0
 8009358:	f040 80d1 	bne.w	80094fe <_vfprintf_r+0x13a6>
 800935c:	a925      	add	r1, sp, #148	; 0x94
 800935e:	f1a8 0810 	sub.w	r8, r8, #16
 8009362:	460c      	mov	r4, r1
 8009364:	e7b3      	b.n	80092ce <_vfprintf_r+0x1176>
 8009366:	460c      	mov	r4, r1
 8009368:	e7cb      	b.n	8009302 <_vfprintf_r+0x11aa>
 800936a:	aa22      	add	r2, sp, #136	; 0x88
 800936c:	4649      	mov	r1, r9
 800936e:	4650      	mov	r0, sl
 8009370:	f002 f9c2 	bl	800b6f8 <__sprint_r>
 8009374:	2800      	cmp	r0, #0
 8009376:	f040 80c2 	bne.w	80094fe <_vfprintf_r+0x13a6>
 800937a:	ac25      	add	r4, sp, #148	; 0x94
 800937c:	e711      	b.n	80091a2 <_vfprintf_r+0x104a>
 800937e:	aa22      	add	r2, sp, #136	; 0x88
 8009380:	4649      	mov	r1, r9
 8009382:	4650      	mov	r0, sl
 8009384:	f002 f9b8 	bl	800b6f8 <__sprint_r>
 8009388:	2800      	cmp	r0, #0
 800938a:	f040 80b8 	bne.w	80094fe <_vfprintf_r+0x13a6>
 800938e:	ac25      	add	r4, sp, #148	; 0x94
 8009390:	e71e      	b.n	80091d0 <_vfprintf_r+0x1078>
 8009392:	bf00      	nop
 8009394:	0800cd94 	.word	0x0800cd94
 8009398:	9a05      	ldr	r2, [sp, #20]
 800939a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800939c:	2a01      	cmp	r2, #1
 800939e:	9a03      	ldr	r2, [sp, #12]
 80093a0:	6022      	str	r2, [r4, #0]
 80093a2:	f106 0601 	add.w	r6, r6, #1
 80093a6:	f103 0301 	add.w	r3, r3, #1
 80093aa:	f04f 0201 	mov.w	r2, #1
 80093ae:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80093b2:	f104 0508 	add.w	r5, r4, #8
 80093b6:	6062      	str	r2, [r4, #4]
 80093b8:	dc02      	bgt.n	80093c0 <_vfprintf_r+0x1268>
 80093ba:	f01b 0f01 	tst.w	fp, #1
 80093be:	d078      	beq.n	80094b2 <_vfprintf_r+0x135a>
 80093c0:	2b07      	cmp	r3, #7
 80093c2:	dd08      	ble.n	80093d6 <_vfprintf_r+0x127e>
 80093c4:	aa22      	add	r2, sp, #136	; 0x88
 80093c6:	4649      	mov	r1, r9
 80093c8:	4650      	mov	r0, sl
 80093ca:	f002 f995 	bl	800b6f8 <__sprint_r>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	f040 8095 	bne.w	80094fe <_vfprintf_r+0x13a6>
 80093d4:	ad25      	add	r5, sp, #148	; 0x94
 80093d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093d8:	602b      	str	r3, [r5, #0]
 80093da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093de:	606b      	str	r3, [r5, #4]
 80093e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80093e2:	4413      	add	r3, r2
 80093e4:	9324      	str	r3, [sp, #144]	; 0x90
 80093e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093e8:	3301      	adds	r3, #1
 80093ea:	2b07      	cmp	r3, #7
 80093ec:	9323      	str	r3, [sp, #140]	; 0x8c
 80093ee:	dc32      	bgt.n	8009456 <_vfprintf_r+0x12fe>
 80093f0:	3508      	adds	r5, #8
 80093f2:	9b05      	ldr	r3, [sp, #20]
 80093f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093f8:	1e5c      	subs	r4, r3, #1
 80093fa:	2200      	movs	r2, #0
 80093fc:	2300      	movs	r3, #0
 80093fe:	f7f7 fb63 	bl	8000ac8 <__aeabi_dcmpeq>
 8009402:	2800      	cmp	r0, #0
 8009404:	d130      	bne.n	8009468 <_vfprintf_r+0x1310>
 8009406:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8009408:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800940a:	9803      	ldr	r0, [sp, #12]
 800940c:	9a05      	ldr	r2, [sp, #20]
 800940e:	3101      	adds	r1, #1
 8009410:	3b01      	subs	r3, #1
 8009412:	3001      	adds	r0, #1
 8009414:	4413      	add	r3, r2
 8009416:	2907      	cmp	r1, #7
 8009418:	e9c5 0400 	strd	r0, r4, [r5]
 800941c:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8009420:	dd4a      	ble.n	80094b8 <_vfprintf_r+0x1360>
 8009422:	aa22      	add	r2, sp, #136	; 0x88
 8009424:	4649      	mov	r1, r9
 8009426:	4650      	mov	r0, sl
 8009428:	f002 f966 	bl	800b6f8 <__sprint_r>
 800942c:	2800      	cmp	r0, #0
 800942e:	d166      	bne.n	80094fe <_vfprintf_r+0x13a6>
 8009430:	ad25      	add	r5, sp, #148	; 0x94
 8009432:	ab1e      	add	r3, sp, #120	; 0x78
 8009434:	602b      	str	r3, [r5, #0]
 8009436:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009438:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800943a:	606b      	str	r3, [r5, #4]
 800943c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800943e:	4413      	add	r3, r2
 8009440:	9324      	str	r3, [sp, #144]	; 0x90
 8009442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009444:	3301      	adds	r3, #1
 8009446:	2b07      	cmp	r3, #7
 8009448:	9323      	str	r3, [sp, #140]	; 0x8c
 800944a:	f73f ada4 	bgt.w	8008f96 <_vfprintf_r+0xe3e>
 800944e:	f105 0408 	add.w	r4, r5, #8
 8009452:	f7ff baa6 	b.w	80089a2 <_vfprintf_r+0x84a>
 8009456:	aa22      	add	r2, sp, #136	; 0x88
 8009458:	4649      	mov	r1, r9
 800945a:	4650      	mov	r0, sl
 800945c:	f002 f94c 	bl	800b6f8 <__sprint_r>
 8009460:	2800      	cmp	r0, #0
 8009462:	d14c      	bne.n	80094fe <_vfprintf_r+0x13a6>
 8009464:	ad25      	add	r5, sp, #148	; 0x94
 8009466:	e7c4      	b.n	80093f2 <_vfprintf_r+0x129a>
 8009468:	2c00      	cmp	r4, #0
 800946a:	dde2      	ble.n	8009432 <_vfprintf_r+0x12da>
 800946c:	4e53      	ldr	r6, [pc, #332]	; (80095bc <_vfprintf_r+0x1464>)
 800946e:	2710      	movs	r7, #16
 8009470:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009474:	2c10      	cmp	r4, #16
 8009476:	f103 0301 	add.w	r3, r3, #1
 800947a:	f105 0108 	add.w	r1, r5, #8
 800947e:	602e      	str	r6, [r5, #0]
 8009480:	dc07      	bgt.n	8009492 <_vfprintf_r+0x133a>
 8009482:	606c      	str	r4, [r5, #4]
 8009484:	2b07      	cmp	r3, #7
 8009486:	4414      	add	r4, r2
 8009488:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800948c:	dcc9      	bgt.n	8009422 <_vfprintf_r+0x12ca>
 800948e:	460d      	mov	r5, r1
 8009490:	e7cf      	b.n	8009432 <_vfprintf_r+0x12da>
 8009492:	3210      	adds	r2, #16
 8009494:	2b07      	cmp	r3, #7
 8009496:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800949a:	606f      	str	r7, [r5, #4]
 800949c:	dd06      	ble.n	80094ac <_vfprintf_r+0x1354>
 800949e:	aa22      	add	r2, sp, #136	; 0x88
 80094a0:	4649      	mov	r1, r9
 80094a2:	4650      	mov	r0, sl
 80094a4:	f002 f928 	bl	800b6f8 <__sprint_r>
 80094a8:	bb48      	cbnz	r0, 80094fe <_vfprintf_r+0x13a6>
 80094aa:	a925      	add	r1, sp, #148	; 0x94
 80094ac:	3c10      	subs	r4, #16
 80094ae:	460d      	mov	r5, r1
 80094b0:	e7de      	b.n	8009470 <_vfprintf_r+0x1318>
 80094b2:	2b07      	cmp	r3, #7
 80094b4:	ddbd      	ble.n	8009432 <_vfprintf_r+0x12da>
 80094b6:	e7b4      	b.n	8009422 <_vfprintf_r+0x12ca>
 80094b8:	3508      	adds	r5, #8
 80094ba:	e7ba      	b.n	8009432 <_vfprintf_r+0x12da>
 80094bc:	460c      	mov	r4, r1
 80094be:	f7ff ba70 	b.w	80089a2 <_vfprintf_r+0x84a>
 80094c2:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80094c6:	1a9d      	subs	r5, r3, r2
 80094c8:	2d00      	cmp	r5, #0
 80094ca:	f77f aa6e 	ble.w	80089aa <_vfprintf_r+0x852>
 80094ce:	4e3c      	ldr	r6, [pc, #240]	; (80095c0 <_vfprintf_r+0x1468>)
 80094d0:	2710      	movs	r7, #16
 80094d2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80094d6:	2d10      	cmp	r5, #16
 80094d8:	f103 0301 	add.w	r3, r3, #1
 80094dc:	6026      	str	r6, [r4, #0]
 80094de:	dc18      	bgt.n	8009512 <_vfprintf_r+0x13ba>
 80094e0:	6065      	str	r5, [r4, #4]
 80094e2:	2b07      	cmp	r3, #7
 80094e4:	4415      	add	r5, r2
 80094e6:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 80094ea:	f77f aa5e 	ble.w	80089aa <_vfprintf_r+0x852>
 80094ee:	aa22      	add	r2, sp, #136	; 0x88
 80094f0:	4649      	mov	r1, r9
 80094f2:	4650      	mov	r0, sl
 80094f4:	f002 f900 	bl	800b6f8 <__sprint_r>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	f43f aa56 	beq.w	80089aa <_vfprintf_r+0x852>
 80094fe:	9b04      	ldr	r3, [sp, #16]
 8009500:	2b00      	cmp	r3, #0
 8009502:	f43f a872 	beq.w	80085ea <_vfprintf_r+0x492>
 8009506:	4619      	mov	r1, r3
 8009508:	4650      	mov	r0, sl
 800950a:	f001 f8ef 	bl	800a6ec <_free_r>
 800950e:	f7ff b86c 	b.w	80085ea <_vfprintf_r+0x492>
 8009512:	3210      	adds	r2, #16
 8009514:	2b07      	cmp	r3, #7
 8009516:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800951a:	6067      	str	r7, [r4, #4]
 800951c:	dc02      	bgt.n	8009524 <_vfprintf_r+0x13cc>
 800951e:	3408      	adds	r4, #8
 8009520:	3d10      	subs	r5, #16
 8009522:	e7d6      	b.n	80094d2 <_vfprintf_r+0x137a>
 8009524:	aa22      	add	r2, sp, #136	; 0x88
 8009526:	4649      	mov	r1, r9
 8009528:	4650      	mov	r0, sl
 800952a:	f002 f8e5 	bl	800b6f8 <__sprint_r>
 800952e:	2800      	cmp	r0, #0
 8009530:	d1e5      	bne.n	80094fe <_vfprintf_r+0x13a6>
 8009532:	ac25      	add	r4, sp, #148	; 0x94
 8009534:	e7f4      	b.n	8009520 <_vfprintf_r+0x13c8>
 8009536:	9904      	ldr	r1, [sp, #16]
 8009538:	4650      	mov	r0, sl
 800953a:	f001 f8d7 	bl	800a6ec <_free_r>
 800953e:	f7ff ba4c 	b.w	80089da <_vfprintf_r+0x882>
 8009542:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009544:	b91b      	cbnz	r3, 800954e <_vfprintf_r+0x13f6>
 8009546:	2300      	movs	r3, #0
 8009548:	9323      	str	r3, [sp, #140]	; 0x8c
 800954a:	f7ff b84e 	b.w	80085ea <_vfprintf_r+0x492>
 800954e:	aa22      	add	r2, sp, #136	; 0x88
 8009550:	4649      	mov	r1, r9
 8009552:	4650      	mov	r0, sl
 8009554:	f002 f8d0 	bl	800b6f8 <__sprint_r>
 8009558:	2800      	cmp	r0, #0
 800955a:	d0f4      	beq.n	8009546 <_vfprintf_r+0x13ee>
 800955c:	f7ff b845 	b.w	80085ea <_vfprintf_r+0x492>
 8009560:	ea56 0207 	orrs.w	r2, r6, r7
 8009564:	f8cd b010 	str.w	fp, [sp, #16]
 8009568:	f43f ab5c 	beq.w	8008c24 <_vfprintf_r+0xacc>
 800956c:	2b01      	cmp	r3, #1
 800956e:	f43f abf4 	beq.w	8008d5a <_vfprintf_r+0xc02>
 8009572:	2b02      	cmp	r3, #2
 8009574:	ab4e      	add	r3, sp, #312	; 0x138
 8009576:	9303      	str	r3, [sp, #12]
 8009578:	f43f ac46 	beq.w	8008e08 <_vfprintf_r+0xcb0>
 800957c:	9903      	ldr	r1, [sp, #12]
 800957e:	f006 0307 	and.w	r3, r6, #7
 8009582:	460a      	mov	r2, r1
 8009584:	3330      	adds	r3, #48	; 0x30
 8009586:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800958a:	9203      	str	r2, [sp, #12]
 800958c:	08f2      	lsrs	r2, r6, #3
 800958e:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8009592:	08f8      	lsrs	r0, r7, #3
 8009594:	4616      	mov	r6, r2
 8009596:	4607      	mov	r7, r0
 8009598:	ea56 0207 	orrs.w	r2, r6, r7
 800959c:	d1ee      	bne.n	800957c <_vfprintf_r+0x1424>
 800959e:	9a04      	ldr	r2, [sp, #16]
 80095a0:	07d0      	lsls	r0, r2, #31
 80095a2:	f57f ac20 	bpl.w	8008de6 <_vfprintf_r+0xc8e>
 80095a6:	2b30      	cmp	r3, #48	; 0x30
 80095a8:	f43f ac1d 	beq.w	8008de6 <_vfprintf_r+0xc8e>
 80095ac:	9a03      	ldr	r2, [sp, #12]
 80095ae:	2330      	movs	r3, #48	; 0x30
 80095b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80095b4:	1e8b      	subs	r3, r1, #2
 80095b6:	9303      	str	r3, [sp, #12]
 80095b8:	e415      	b.n	8008de6 <_vfprintf_r+0xc8e>
 80095ba:	bf00      	nop
 80095bc:	0800cd94 	.word	0x0800cd94
 80095c0:	0800cd84 	.word	0x0800cd84

080095c4 <__sbprintf>:
 80095c4:	b570      	push	{r4, r5, r6, lr}
 80095c6:	460c      	mov	r4, r1
 80095c8:	8989      	ldrh	r1, [r1, #12]
 80095ca:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 80095ce:	f021 0102 	bic.w	r1, r1, #2
 80095d2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80095d6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80095d8:	911b      	str	r1, [sp, #108]	; 0x6c
 80095da:	89e1      	ldrh	r1, [r4, #14]
 80095dc:	f8ad 1016 	strh.w	r1, [sp, #22]
 80095e0:	69e1      	ldr	r1, [r4, #28]
 80095e2:	9109      	str	r1, [sp, #36]	; 0x24
 80095e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80095e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80095e8:	a91c      	add	r1, sp, #112	; 0x70
 80095ea:	9102      	str	r1, [sp, #8]
 80095ec:	9106      	str	r1, [sp, #24]
 80095ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80095f2:	4606      	mov	r6, r0
 80095f4:	9104      	str	r1, [sp, #16]
 80095f6:	9107      	str	r1, [sp, #28]
 80095f8:	a818      	add	r0, sp, #96	; 0x60
 80095fa:	2100      	movs	r1, #0
 80095fc:	e9cd 3200 	strd	r3, r2, [sp]
 8009600:	9108      	str	r1, [sp, #32]
 8009602:	f001 f957 	bl	800a8b4 <__retarget_lock_init_recursive>
 8009606:	e9dd 3200 	ldrd	r3, r2, [sp]
 800960a:	a902      	add	r1, sp, #8
 800960c:	4630      	mov	r0, r6
 800960e:	f7fe fda3 	bl	8008158 <_vfprintf_r>
 8009612:	1e05      	subs	r5, r0, #0
 8009614:	db07      	blt.n	8009626 <__sbprintf+0x62>
 8009616:	a902      	add	r1, sp, #8
 8009618:	4630      	mov	r0, r6
 800961a:	f000 ff6b 	bl	800a4f4 <_fflush_r>
 800961e:	2800      	cmp	r0, #0
 8009620:	bf18      	it	ne
 8009622:	f04f 35ff 	movne.w	r5, #4294967295
 8009626:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800962a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800962c:	065b      	lsls	r3, r3, #25
 800962e:	bf42      	ittt	mi
 8009630:	89a3      	ldrhmi	r3, [r4, #12]
 8009632:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8009636:	81a3      	strhmi	r3, [r4, #12]
 8009638:	f001 f93d 	bl	800a8b6 <__retarget_lock_close_recursive>
 800963c:	4628      	mov	r0, r5
 800963e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8009642:	bd70      	pop	{r4, r5, r6, pc}

08009644 <__swsetup_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	4b2a      	ldr	r3, [pc, #168]	; (80096f0 <__swsetup_r+0xac>)
 8009648:	4605      	mov	r5, r0
 800964a:	6818      	ldr	r0, [r3, #0]
 800964c:	460c      	mov	r4, r1
 800964e:	b118      	cbz	r0, 8009658 <__swsetup_r+0x14>
 8009650:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009652:	b90b      	cbnz	r3, 8009658 <__swsetup_r+0x14>
 8009654:	f000 ffba 	bl	800a5cc <__sinit>
 8009658:	89a3      	ldrh	r3, [r4, #12]
 800965a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800965e:	0718      	lsls	r0, r3, #28
 8009660:	d422      	bmi.n	80096a8 <__swsetup_r+0x64>
 8009662:	06d9      	lsls	r1, r3, #27
 8009664:	d407      	bmi.n	8009676 <__swsetup_r+0x32>
 8009666:	2309      	movs	r3, #9
 8009668:	602b      	str	r3, [r5, #0]
 800966a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800966e:	81a3      	strh	r3, [r4, #12]
 8009670:	f04f 30ff 	mov.w	r0, #4294967295
 8009674:	e034      	b.n	80096e0 <__swsetup_r+0x9c>
 8009676:	0758      	lsls	r0, r3, #29
 8009678:	d512      	bpl.n	80096a0 <__swsetup_r+0x5c>
 800967a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800967c:	b141      	cbz	r1, 8009690 <__swsetup_r+0x4c>
 800967e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009682:	4299      	cmp	r1, r3
 8009684:	d002      	beq.n	800968c <__swsetup_r+0x48>
 8009686:	4628      	mov	r0, r5
 8009688:	f001 f830 	bl	800a6ec <_free_r>
 800968c:	2300      	movs	r3, #0
 800968e:	6323      	str	r3, [r4, #48]	; 0x30
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009696:	81a3      	strh	r3, [r4, #12]
 8009698:	2300      	movs	r3, #0
 800969a:	6063      	str	r3, [r4, #4]
 800969c:	6923      	ldr	r3, [r4, #16]
 800969e:	6023      	str	r3, [r4, #0]
 80096a0:	89a3      	ldrh	r3, [r4, #12]
 80096a2:	f043 0308 	orr.w	r3, r3, #8
 80096a6:	81a3      	strh	r3, [r4, #12]
 80096a8:	6923      	ldr	r3, [r4, #16]
 80096aa:	b94b      	cbnz	r3, 80096c0 <__swsetup_r+0x7c>
 80096ac:	89a3      	ldrh	r3, [r4, #12]
 80096ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096b6:	d003      	beq.n	80096c0 <__swsetup_r+0x7c>
 80096b8:	4621      	mov	r1, r4
 80096ba:	4628      	mov	r0, r5
 80096bc:	f001 f92a 	bl	800a914 <__smakebuf_r>
 80096c0:	89a0      	ldrh	r0, [r4, #12]
 80096c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096c6:	f010 0301 	ands.w	r3, r0, #1
 80096ca:	d00a      	beq.n	80096e2 <__swsetup_r+0x9e>
 80096cc:	2300      	movs	r3, #0
 80096ce:	60a3      	str	r3, [r4, #8]
 80096d0:	6963      	ldr	r3, [r4, #20]
 80096d2:	425b      	negs	r3, r3
 80096d4:	61a3      	str	r3, [r4, #24]
 80096d6:	6923      	ldr	r3, [r4, #16]
 80096d8:	b943      	cbnz	r3, 80096ec <__swsetup_r+0xa8>
 80096da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096de:	d1c4      	bne.n	800966a <__swsetup_r+0x26>
 80096e0:	bd38      	pop	{r3, r4, r5, pc}
 80096e2:	0781      	lsls	r1, r0, #30
 80096e4:	bf58      	it	pl
 80096e6:	6963      	ldrpl	r3, [r4, #20]
 80096e8:	60a3      	str	r3, [r4, #8]
 80096ea:	e7f4      	b.n	80096d6 <__swsetup_r+0x92>
 80096ec:	2000      	movs	r0, #0
 80096ee:	e7f7      	b.n	80096e0 <__swsetup_r+0x9c>
 80096f0:	2000003c 	.word	0x2000003c

080096f4 <register_fini>:
 80096f4:	4b02      	ldr	r3, [pc, #8]	; (8009700 <register_fini+0xc>)
 80096f6:	b113      	cbz	r3, 80096fe <register_fini+0xa>
 80096f8:	4802      	ldr	r0, [pc, #8]	; (8009704 <register_fini+0x10>)
 80096fa:	f000 b805 	b.w	8009708 <atexit>
 80096fe:	4770      	bx	lr
 8009700:	00000000 	.word	0x00000000
 8009704:	0800a61d 	.word	0x0800a61d

08009708 <atexit>:
 8009708:	2300      	movs	r3, #0
 800970a:	4601      	mov	r1, r0
 800970c:	461a      	mov	r2, r3
 800970e:	4618      	mov	r0, r3
 8009710:	f002 bcfe 	b.w	800c110 <__register_exitproc>

08009714 <quorem>:
 8009714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009718:	6903      	ldr	r3, [r0, #16]
 800971a:	690c      	ldr	r4, [r1, #16]
 800971c:	42a3      	cmp	r3, r4
 800971e:	4607      	mov	r7, r0
 8009720:	f2c0 8081 	blt.w	8009826 <quorem+0x112>
 8009724:	3c01      	subs	r4, #1
 8009726:	f101 0814 	add.w	r8, r1, #20
 800972a:	f100 0514 	add.w	r5, r0, #20
 800972e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009732:	9301      	str	r3, [sp, #4]
 8009734:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009738:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800973c:	3301      	adds	r3, #1
 800973e:	429a      	cmp	r2, r3
 8009740:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009744:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009748:	fbb2 f6f3 	udiv	r6, r2, r3
 800974c:	d331      	bcc.n	80097b2 <quorem+0x9e>
 800974e:	f04f 0e00 	mov.w	lr, #0
 8009752:	4640      	mov	r0, r8
 8009754:	46ac      	mov	ip, r5
 8009756:	46f2      	mov	sl, lr
 8009758:	f850 2b04 	ldr.w	r2, [r0], #4
 800975c:	b293      	uxth	r3, r2
 800975e:	fb06 e303 	mla	r3, r6, r3, lr
 8009762:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009766:	b29b      	uxth	r3, r3
 8009768:	ebaa 0303 	sub.w	r3, sl, r3
 800976c:	0c12      	lsrs	r2, r2, #16
 800976e:	f8dc a000 	ldr.w	sl, [ip]
 8009772:	fb06 e202 	mla	r2, r6, r2, lr
 8009776:	fa13 f38a 	uxtah	r3, r3, sl
 800977a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800977e:	fa1f fa82 	uxth.w	sl, r2
 8009782:	f8dc 2000 	ldr.w	r2, [ip]
 8009786:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800978a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800978e:	b29b      	uxth	r3, r3
 8009790:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009794:	4581      	cmp	r9, r0
 8009796:	f84c 3b04 	str.w	r3, [ip], #4
 800979a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800979e:	d2db      	bcs.n	8009758 <quorem+0x44>
 80097a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80097a4:	b92b      	cbnz	r3, 80097b2 <quorem+0x9e>
 80097a6:	9b01      	ldr	r3, [sp, #4]
 80097a8:	3b04      	subs	r3, #4
 80097aa:	429d      	cmp	r5, r3
 80097ac:	461a      	mov	r2, r3
 80097ae:	d32e      	bcc.n	800980e <quorem+0xfa>
 80097b0:	613c      	str	r4, [r7, #16]
 80097b2:	4638      	mov	r0, r7
 80097b4:	f001 fd7a 	bl	800b2ac <__mcmp>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	db24      	blt.n	8009806 <quorem+0xf2>
 80097bc:	3601      	adds	r6, #1
 80097be:	4628      	mov	r0, r5
 80097c0:	f04f 0c00 	mov.w	ip, #0
 80097c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80097c8:	f8d0 e000 	ldr.w	lr, [r0]
 80097cc:	b293      	uxth	r3, r2
 80097ce:	ebac 0303 	sub.w	r3, ip, r3
 80097d2:	0c12      	lsrs	r2, r2, #16
 80097d4:	fa13 f38e 	uxtah	r3, r3, lr
 80097d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097e6:	45c1      	cmp	r9, r8
 80097e8:	f840 3b04 	str.w	r3, [r0], #4
 80097ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097f0:	d2e8      	bcs.n	80097c4 <quorem+0xb0>
 80097f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097fa:	b922      	cbnz	r2, 8009806 <quorem+0xf2>
 80097fc:	3b04      	subs	r3, #4
 80097fe:	429d      	cmp	r5, r3
 8009800:	461a      	mov	r2, r3
 8009802:	d30a      	bcc.n	800981a <quorem+0x106>
 8009804:	613c      	str	r4, [r7, #16]
 8009806:	4630      	mov	r0, r6
 8009808:	b003      	add	sp, #12
 800980a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980e:	6812      	ldr	r2, [r2, #0]
 8009810:	3b04      	subs	r3, #4
 8009812:	2a00      	cmp	r2, #0
 8009814:	d1cc      	bne.n	80097b0 <quorem+0x9c>
 8009816:	3c01      	subs	r4, #1
 8009818:	e7c7      	b.n	80097aa <quorem+0x96>
 800981a:	6812      	ldr	r2, [r2, #0]
 800981c:	3b04      	subs	r3, #4
 800981e:	2a00      	cmp	r2, #0
 8009820:	d1f0      	bne.n	8009804 <quorem+0xf0>
 8009822:	3c01      	subs	r4, #1
 8009824:	e7eb      	b.n	80097fe <quorem+0xea>
 8009826:	2000      	movs	r0, #0
 8009828:	e7ee      	b.n	8009808 <quorem+0xf4>
 800982a:	0000      	movs	r0, r0
 800982c:	0000      	movs	r0, r0
	...

08009830 <_dtoa_r>:
 8009830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	ed2d 8b02 	vpush	{d8}
 8009838:	b095      	sub	sp, #84	; 0x54
 800983a:	ec57 6b10 	vmov	r6, r7, d0
 800983e:	9105      	str	r1, [sp, #20]
 8009840:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8009842:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8009844:	9209      	str	r2, [sp, #36]	; 0x24
 8009846:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800984a:	4604      	mov	r4, r0
 800984c:	930f      	str	r3, [sp, #60]	; 0x3c
 800984e:	b141      	cbz	r1, 8009862 <_dtoa_r+0x32>
 8009850:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009852:	604a      	str	r2, [r1, #4]
 8009854:	2301      	movs	r3, #1
 8009856:	4093      	lsls	r3, r2
 8009858:	608b      	str	r3, [r1, #8]
 800985a:	f001 fb1c 	bl	800ae96 <_Bfree>
 800985e:	2300      	movs	r3, #0
 8009860:	6423      	str	r3, [r4, #64]	; 0x40
 8009862:	1e3b      	subs	r3, r7, #0
 8009864:	bfb9      	ittee	lt
 8009866:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800986a:	9303      	strlt	r3, [sp, #12]
 800986c:	2300      	movge	r3, #0
 800986e:	602b      	strge	r3, [r5, #0]
 8009870:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009874:	4ba2      	ldr	r3, [pc, #648]	; (8009b00 <_dtoa_r+0x2d0>)
 8009876:	bfbc      	itt	lt
 8009878:	2201      	movlt	r2, #1
 800987a:	602a      	strlt	r2, [r5, #0]
 800987c:	ea33 0309 	bics.w	r3, r3, r9
 8009880:	d11b      	bne.n	80098ba <_dtoa_r+0x8a>
 8009882:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009884:	f242 730f 	movw	r3, #9999	; 0x270f
 8009888:	6013      	str	r3, [r2, #0]
 800988a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800988e:	4333      	orrs	r3, r6
 8009890:	f000 8578 	beq.w	800a384 <_dtoa_r+0xb54>
 8009894:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009896:	b90b      	cbnz	r3, 800989c <_dtoa_r+0x6c>
 8009898:	4b9a      	ldr	r3, [pc, #616]	; (8009b04 <_dtoa_r+0x2d4>)
 800989a:	e024      	b.n	80098e6 <_dtoa_r+0xb6>
 800989c:	4b99      	ldr	r3, [pc, #612]	; (8009b04 <_dtoa_r+0x2d4>)
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	3303      	adds	r3, #3
 80098a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098a4:	6013      	str	r3, [r2, #0]
 80098a6:	9800      	ldr	r0, [sp, #0]
 80098a8:	b015      	add	sp, #84	; 0x54
 80098aa:	ecbd 8b02 	vpop	{d8}
 80098ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b2:	4b95      	ldr	r3, [pc, #596]	; (8009b08 <_dtoa_r+0x2d8>)
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	3308      	adds	r3, #8
 80098b8:	e7f3      	b.n	80098a2 <_dtoa_r+0x72>
 80098ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098be:	2200      	movs	r2, #0
 80098c0:	ec51 0b17 	vmov	r0, r1, d7
 80098c4:	2300      	movs	r3, #0
 80098c6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80098ca:	f7f7 f8fd 	bl	8000ac8 <__aeabi_dcmpeq>
 80098ce:	4680      	mov	r8, r0
 80098d0:	b158      	cbz	r0, 80098ea <_dtoa_r+0xba>
 80098d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098d4:	2301      	movs	r3, #1
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 854f 	beq.w	800a37e <_dtoa_r+0xb4e>
 80098e0:	488a      	ldr	r0, [pc, #552]	; (8009b0c <_dtoa_r+0x2dc>)
 80098e2:	6018      	str	r0, [r3, #0]
 80098e4:	1e43      	subs	r3, r0, #1
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	e7dd      	b.n	80098a6 <_dtoa_r+0x76>
 80098ea:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80098ee:	aa12      	add	r2, sp, #72	; 0x48
 80098f0:	a913      	add	r1, sp, #76	; 0x4c
 80098f2:	4620      	mov	r0, r4
 80098f4:	f001 fd7e 	bl	800b3f4 <__d2b>
 80098f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80098fc:	4683      	mov	fp, r0
 80098fe:	2d00      	cmp	r5, #0
 8009900:	d07c      	beq.n	80099fc <_dtoa_r+0x1cc>
 8009902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009904:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009908:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800990c:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009910:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009914:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009918:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800991c:	4b7c      	ldr	r3, [pc, #496]	; (8009b10 <_dtoa_r+0x2e0>)
 800991e:	2200      	movs	r2, #0
 8009920:	4630      	mov	r0, r6
 8009922:	4639      	mov	r1, r7
 8009924:	f7f6 fcb0 	bl	8000288 <__aeabi_dsub>
 8009928:	a36f      	add	r3, pc, #444	; (adr r3, 8009ae8 <_dtoa_r+0x2b8>)
 800992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992e:	f7f6 fe63 	bl	80005f8 <__aeabi_dmul>
 8009932:	a36f      	add	r3, pc, #444	; (adr r3, 8009af0 <_dtoa_r+0x2c0>)
 8009934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009938:	f7f6 fca8 	bl	800028c <__adddf3>
 800993c:	4606      	mov	r6, r0
 800993e:	4628      	mov	r0, r5
 8009940:	460f      	mov	r7, r1
 8009942:	f7f6 fdef 	bl	8000524 <__aeabi_i2d>
 8009946:	a36c      	add	r3, pc, #432	; (adr r3, 8009af8 <_dtoa_r+0x2c8>)
 8009948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994c:	f7f6 fe54 	bl	80005f8 <__aeabi_dmul>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	4630      	mov	r0, r6
 8009956:	4639      	mov	r1, r7
 8009958:	f7f6 fc98 	bl	800028c <__adddf3>
 800995c:	4606      	mov	r6, r0
 800995e:	460f      	mov	r7, r1
 8009960:	f7f7 f8fa 	bl	8000b58 <__aeabi_d2iz>
 8009964:	2200      	movs	r2, #0
 8009966:	4682      	mov	sl, r0
 8009968:	2300      	movs	r3, #0
 800996a:	4630      	mov	r0, r6
 800996c:	4639      	mov	r1, r7
 800996e:	f7f7 f8b5 	bl	8000adc <__aeabi_dcmplt>
 8009972:	b148      	cbz	r0, 8009988 <_dtoa_r+0x158>
 8009974:	4650      	mov	r0, sl
 8009976:	f7f6 fdd5 	bl	8000524 <__aeabi_i2d>
 800997a:	4632      	mov	r2, r6
 800997c:	463b      	mov	r3, r7
 800997e:	f7f7 f8a3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009982:	b908      	cbnz	r0, 8009988 <_dtoa_r+0x158>
 8009984:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009988:	f1ba 0f16 	cmp.w	sl, #22
 800998c:	d854      	bhi.n	8009a38 <_dtoa_r+0x208>
 800998e:	4b61      	ldr	r3, [pc, #388]	; (8009b14 <_dtoa_r+0x2e4>)
 8009990:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800999c:	f7f7 f89e 	bl	8000adc <__aeabi_dcmplt>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d04b      	beq.n	8009a3c <_dtoa_r+0x20c>
 80099a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099a8:	2300      	movs	r3, #0
 80099aa:	930e      	str	r3, [sp, #56]	; 0x38
 80099ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099ae:	1b5d      	subs	r5, r3, r5
 80099b0:	1e6b      	subs	r3, r5, #1
 80099b2:	9304      	str	r3, [sp, #16]
 80099b4:	bf43      	ittte	mi
 80099b6:	2300      	movmi	r3, #0
 80099b8:	f1c5 0801 	rsbmi	r8, r5, #1
 80099bc:	9304      	strmi	r3, [sp, #16]
 80099be:	f04f 0800 	movpl.w	r8, #0
 80099c2:	f1ba 0f00 	cmp.w	sl, #0
 80099c6:	db3b      	blt.n	8009a40 <_dtoa_r+0x210>
 80099c8:	9b04      	ldr	r3, [sp, #16]
 80099ca:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80099ce:	4453      	add	r3, sl
 80099d0:	9304      	str	r3, [sp, #16]
 80099d2:	2300      	movs	r3, #0
 80099d4:	9306      	str	r3, [sp, #24]
 80099d6:	9b05      	ldr	r3, [sp, #20]
 80099d8:	2b09      	cmp	r3, #9
 80099da:	d86a      	bhi.n	8009ab2 <_dtoa_r+0x282>
 80099dc:	2b05      	cmp	r3, #5
 80099de:	bfc4      	itt	gt
 80099e0:	3b04      	subgt	r3, #4
 80099e2:	9305      	strgt	r3, [sp, #20]
 80099e4:	9b05      	ldr	r3, [sp, #20]
 80099e6:	f1a3 0302 	sub.w	r3, r3, #2
 80099ea:	bfcc      	ite	gt
 80099ec:	2500      	movgt	r5, #0
 80099ee:	2501      	movle	r5, #1
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d86a      	bhi.n	8009aca <_dtoa_r+0x29a>
 80099f4:	e8df f003 	tbb	[pc, r3]
 80099f8:	5b4d4f2c 	.word	0x5b4d4f2c
 80099fc:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009a00:	441d      	add	r5, r3
 8009a02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a06:	2b20      	cmp	r3, #32
 8009a08:	bfc1      	itttt	gt
 8009a0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a12:	fa09 f303 	lslgt.w	r3, r9, r3
 8009a16:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a1a:	bfda      	itte	le
 8009a1c:	f1c3 0320 	rsble	r3, r3, #32
 8009a20:	fa06 f003 	lslle.w	r0, r6, r3
 8009a24:	4318      	orrgt	r0, r3
 8009a26:	f7f6 fd6d 	bl	8000504 <__aeabi_ui2d>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a32:	3d01      	subs	r5, #1
 8009a34:	9310      	str	r3, [sp, #64]	; 0x40
 8009a36:	e771      	b.n	800991c <_dtoa_r+0xec>
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e7b6      	b.n	80099aa <_dtoa_r+0x17a>
 8009a3c:	900e      	str	r0, [sp, #56]	; 0x38
 8009a3e:	e7b5      	b.n	80099ac <_dtoa_r+0x17c>
 8009a40:	f1ca 0300 	rsb	r3, sl, #0
 8009a44:	9306      	str	r3, [sp, #24]
 8009a46:	2300      	movs	r3, #0
 8009a48:	eba8 080a 	sub.w	r8, r8, sl
 8009a4c:	930d      	str	r3, [sp, #52]	; 0x34
 8009a4e:	e7c2      	b.n	80099d6 <_dtoa_r+0x1a6>
 8009a50:	2300      	movs	r3, #0
 8009a52:	9308      	str	r3, [sp, #32]
 8009a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	dc3a      	bgt.n	8009ad0 <_dtoa_r+0x2a0>
 8009a5a:	f04f 0901 	mov.w	r9, #1
 8009a5e:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a62:	464b      	mov	r3, r9
 8009a64:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009a68:	2200      	movs	r2, #0
 8009a6a:	6462      	str	r2, [r4, #68]	; 0x44
 8009a6c:	2204      	movs	r2, #4
 8009a6e:	f102 0014 	add.w	r0, r2, #20
 8009a72:	4298      	cmp	r0, r3
 8009a74:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009a76:	d931      	bls.n	8009adc <_dtoa_r+0x2ac>
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f001 f9e7 	bl	800ae4c <_Balloc>
 8009a7e:	9000      	str	r0, [sp, #0]
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d14d      	bne.n	8009b20 <_dtoa_r+0x2f0>
 8009a84:	4b24      	ldr	r3, [pc, #144]	; (8009b18 <_dtoa_r+0x2e8>)
 8009a86:	4602      	mov	r2, r0
 8009a88:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a8c:	4823      	ldr	r0, [pc, #140]	; (8009b1c <_dtoa_r+0x2ec>)
 8009a8e:	f002 fb7f 	bl	800c190 <__assert_func>
 8009a92:	2301      	movs	r3, #1
 8009a94:	e7dd      	b.n	8009a52 <_dtoa_r+0x222>
 8009a96:	2300      	movs	r3, #0
 8009a98:	9308      	str	r3, [sp, #32]
 8009a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a9c:	eb0a 0903 	add.w	r9, sl, r3
 8009aa0:	f109 0301 	add.w	r3, r9, #1
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	9301      	str	r3, [sp, #4]
 8009aa8:	bfb8      	it	lt
 8009aaa:	2301      	movlt	r3, #1
 8009aac:	e7dc      	b.n	8009a68 <_dtoa_r+0x238>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e7f2      	b.n	8009a98 <_dtoa_r+0x268>
 8009ab2:	2501      	movs	r5, #1
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	9305      	str	r3, [sp, #20]
 8009ab8:	9508      	str	r5, [sp, #32]
 8009aba:	f04f 39ff 	mov.w	r9, #4294967295
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ac4:	2312      	movs	r3, #18
 8009ac6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ac8:	e7ce      	b.n	8009a68 <_dtoa_r+0x238>
 8009aca:	2301      	movs	r3, #1
 8009acc:	9308      	str	r3, [sp, #32]
 8009ace:	e7f4      	b.n	8009aba <_dtoa_r+0x28a>
 8009ad0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009ad4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ad8:	464b      	mov	r3, r9
 8009ada:	e7c5      	b.n	8009a68 <_dtoa_r+0x238>
 8009adc:	3101      	adds	r1, #1
 8009ade:	6461      	str	r1, [r4, #68]	; 0x44
 8009ae0:	0052      	lsls	r2, r2, #1
 8009ae2:	e7c4      	b.n	8009a6e <_dtoa_r+0x23e>
 8009ae4:	f3af 8000 	nop.w
 8009ae8:	636f4361 	.word	0x636f4361
 8009aec:	3fd287a7 	.word	0x3fd287a7
 8009af0:	8b60c8b3 	.word	0x8b60c8b3
 8009af4:	3fc68a28 	.word	0x3fc68a28
 8009af8:	509f79fb 	.word	0x509f79fb
 8009afc:	3fd34413 	.word	0x3fd34413
 8009b00:	7ff00000 	.word	0x7ff00000
 8009b04:	0800cda4 	.word	0x0800cda4
 8009b08:	0800cda8 	.word	0x0800cda8
 8009b0c:	0800cd63 	.word	0x0800cd63
 8009b10:	3ff80000 	.word	0x3ff80000
 8009b14:	0800ceb0 	.word	0x0800ceb0
 8009b18:	0800cdb1 	.word	0x0800cdb1
 8009b1c:	0800cdc2 	.word	0x0800cdc2
 8009b20:	9b00      	ldr	r3, [sp, #0]
 8009b22:	6423      	str	r3, [r4, #64]	; 0x40
 8009b24:	9b01      	ldr	r3, [sp, #4]
 8009b26:	2b0e      	cmp	r3, #14
 8009b28:	f200 80ad 	bhi.w	8009c86 <_dtoa_r+0x456>
 8009b2c:	2d00      	cmp	r5, #0
 8009b2e:	f000 80aa 	beq.w	8009c86 <_dtoa_r+0x456>
 8009b32:	f1ba 0f00 	cmp.w	sl, #0
 8009b36:	dd36      	ble.n	8009ba6 <_dtoa_r+0x376>
 8009b38:	4ac2      	ldr	r2, [pc, #776]	; (8009e44 <_dtoa_r+0x614>)
 8009b3a:	f00a 030f 	and.w	r3, sl, #15
 8009b3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b42:	ed93 7b00 	vldr	d7, [r3]
 8009b46:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009b4a:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009b4e:	eeb0 8a47 	vmov.f32	s16, s14
 8009b52:	eef0 8a67 	vmov.f32	s17, s15
 8009b56:	d016      	beq.n	8009b86 <_dtoa_r+0x356>
 8009b58:	4bbb      	ldr	r3, [pc, #748]	; (8009e48 <_dtoa_r+0x618>)
 8009b5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b62:	f7f6 fe73 	bl	800084c <__aeabi_ddiv>
 8009b66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b6a:	f007 070f 	and.w	r7, r7, #15
 8009b6e:	2503      	movs	r5, #3
 8009b70:	4eb5      	ldr	r6, [pc, #724]	; (8009e48 <_dtoa_r+0x618>)
 8009b72:	b957      	cbnz	r7, 8009b8a <_dtoa_r+0x35a>
 8009b74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b78:	ec53 2b18 	vmov	r2, r3, d8
 8009b7c:	f7f6 fe66 	bl	800084c <__aeabi_ddiv>
 8009b80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b84:	e029      	b.n	8009bda <_dtoa_r+0x3aa>
 8009b86:	2502      	movs	r5, #2
 8009b88:	e7f2      	b.n	8009b70 <_dtoa_r+0x340>
 8009b8a:	07f9      	lsls	r1, r7, #31
 8009b8c:	d508      	bpl.n	8009ba0 <_dtoa_r+0x370>
 8009b8e:	ec51 0b18 	vmov	r0, r1, d8
 8009b92:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b96:	f7f6 fd2f 	bl	80005f8 <__aeabi_dmul>
 8009b9a:	ec41 0b18 	vmov	d8, r0, r1
 8009b9e:	3501      	adds	r5, #1
 8009ba0:	107f      	asrs	r7, r7, #1
 8009ba2:	3608      	adds	r6, #8
 8009ba4:	e7e5      	b.n	8009b72 <_dtoa_r+0x342>
 8009ba6:	f000 80a6 	beq.w	8009cf6 <_dtoa_r+0x4c6>
 8009baa:	f1ca 0600 	rsb	r6, sl, #0
 8009bae:	4ba5      	ldr	r3, [pc, #660]	; (8009e44 <_dtoa_r+0x614>)
 8009bb0:	4fa5      	ldr	r7, [pc, #660]	; (8009e48 <_dtoa_r+0x618>)
 8009bb2:	f006 020f 	and.w	r2, r6, #15
 8009bb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009bc2:	f7f6 fd19 	bl	80005f8 <__aeabi_dmul>
 8009bc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bca:	1136      	asrs	r6, r6, #4
 8009bcc:	2300      	movs	r3, #0
 8009bce:	2502      	movs	r5, #2
 8009bd0:	2e00      	cmp	r6, #0
 8009bd2:	f040 8085 	bne.w	8009ce0 <_dtoa_r+0x4b0>
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d1d2      	bne.n	8009b80 <_dtoa_r+0x350>
 8009bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 808c 	beq.w	8009cfa <_dtoa_r+0x4ca>
 8009be2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009be6:	4b99      	ldr	r3, [pc, #612]	; (8009e4c <_dtoa_r+0x61c>)
 8009be8:	2200      	movs	r2, #0
 8009bea:	4630      	mov	r0, r6
 8009bec:	4639      	mov	r1, r7
 8009bee:	f7f6 ff75 	bl	8000adc <__aeabi_dcmplt>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	f000 8081 	beq.w	8009cfa <_dtoa_r+0x4ca>
 8009bf8:	9b01      	ldr	r3, [sp, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d07d      	beq.n	8009cfa <_dtoa_r+0x4ca>
 8009bfe:	f1b9 0f00 	cmp.w	r9, #0
 8009c02:	dd3c      	ble.n	8009c7e <_dtoa_r+0x44e>
 8009c04:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009c08:	9307      	str	r3, [sp, #28]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	4b90      	ldr	r3, [pc, #576]	; (8009e50 <_dtoa_r+0x620>)
 8009c0e:	4630      	mov	r0, r6
 8009c10:	4639      	mov	r1, r7
 8009c12:	f7f6 fcf1 	bl	80005f8 <__aeabi_dmul>
 8009c16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c1a:	3501      	adds	r5, #1
 8009c1c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009c20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c24:	4628      	mov	r0, r5
 8009c26:	f7f6 fc7d 	bl	8000524 <__aeabi_i2d>
 8009c2a:	4632      	mov	r2, r6
 8009c2c:	463b      	mov	r3, r7
 8009c2e:	f7f6 fce3 	bl	80005f8 <__aeabi_dmul>
 8009c32:	4b88      	ldr	r3, [pc, #544]	; (8009e54 <_dtoa_r+0x624>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	f7f6 fb29 	bl	800028c <__adddf3>
 8009c3a:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c42:	9303      	str	r3, [sp, #12]
 8009c44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d15c      	bne.n	8009d04 <_dtoa_r+0x4d4>
 8009c4a:	4b83      	ldr	r3, [pc, #524]	; (8009e58 <_dtoa_r+0x628>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	4630      	mov	r0, r6
 8009c50:	4639      	mov	r1, r7
 8009c52:	f7f6 fb19 	bl	8000288 <__aeabi_dsub>
 8009c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	460f      	mov	r7, r1
 8009c5e:	f7f6 ff5b 	bl	8000b18 <__aeabi_dcmpgt>
 8009c62:	2800      	cmp	r0, #0
 8009c64:	f040 8295 	bne.w	800a192 <_dtoa_r+0x962>
 8009c68:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c72:	4639      	mov	r1, r7
 8009c74:	f7f6 ff32 	bl	8000adc <__aeabi_dcmplt>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	f040 8287 	bne.w	800a18c <_dtoa_r+0x95c>
 8009c7e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f2c0 8157 	blt.w	8009f3c <_dtoa_r+0x70c>
 8009c8e:	f1ba 0f0e 	cmp.w	sl, #14
 8009c92:	f300 8153 	bgt.w	8009f3c <_dtoa_r+0x70c>
 8009c96:	4b6b      	ldr	r3, [pc, #428]	; (8009e44 <_dtoa_r+0x614>)
 8009c98:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f280 80e2 	bge.w	8009e6c <_dtoa_r+0x63c>
 8009ca8:	9b01      	ldr	r3, [sp, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f300 80de 	bgt.w	8009e6c <_dtoa_r+0x63c>
 8009cb0:	f040 826c 	bne.w	800a18c <_dtoa_r+0x95c>
 8009cb4:	4b68      	ldr	r3, [pc, #416]	; (8009e58 <_dtoa_r+0x628>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	4640      	mov	r0, r8
 8009cba:	4649      	mov	r1, r9
 8009cbc:	f7f6 fc9c 	bl	80005f8 <__aeabi_dmul>
 8009cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cc4:	f7f6 ff1e 	bl	8000b04 <__aeabi_dcmpge>
 8009cc8:	9e01      	ldr	r6, [sp, #4]
 8009cca:	4637      	mov	r7, r6
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	f040 8242 	bne.w	800a156 <_dtoa_r+0x926>
 8009cd2:	9d00      	ldr	r5, [sp, #0]
 8009cd4:	2331      	movs	r3, #49	; 0x31
 8009cd6:	f805 3b01 	strb.w	r3, [r5], #1
 8009cda:	f10a 0a01 	add.w	sl, sl, #1
 8009cde:	e23e      	b.n	800a15e <_dtoa_r+0x92e>
 8009ce0:	07f2      	lsls	r2, r6, #31
 8009ce2:	d505      	bpl.n	8009cf0 <_dtoa_r+0x4c0>
 8009ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ce8:	f7f6 fc86 	bl	80005f8 <__aeabi_dmul>
 8009cec:	3501      	adds	r5, #1
 8009cee:	2301      	movs	r3, #1
 8009cf0:	1076      	asrs	r6, r6, #1
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	e76c      	b.n	8009bd0 <_dtoa_r+0x3a0>
 8009cf6:	2502      	movs	r5, #2
 8009cf8:	e76f      	b.n	8009bda <_dtoa_r+0x3aa>
 8009cfa:	9b01      	ldr	r3, [sp, #4]
 8009cfc:	f8cd a01c 	str.w	sl, [sp, #28]
 8009d00:	930c      	str	r3, [sp, #48]	; 0x30
 8009d02:	e78d      	b.n	8009c20 <_dtoa_r+0x3f0>
 8009d04:	9900      	ldr	r1, [sp, #0]
 8009d06:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009d08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d0a:	4b4e      	ldr	r3, [pc, #312]	; (8009e44 <_dtoa_r+0x614>)
 8009d0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d10:	4401      	add	r1, r0
 8009d12:	9102      	str	r1, [sp, #8]
 8009d14:	9908      	ldr	r1, [sp, #32]
 8009d16:	eeb0 8a47 	vmov.f32	s16, s14
 8009d1a:	eef0 8a67 	vmov.f32	s17, s15
 8009d1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d26:	2900      	cmp	r1, #0
 8009d28:	d045      	beq.n	8009db6 <_dtoa_r+0x586>
 8009d2a:	494c      	ldr	r1, [pc, #304]	; (8009e5c <_dtoa_r+0x62c>)
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	f7f6 fd8d 	bl	800084c <__aeabi_ddiv>
 8009d32:	ec53 2b18 	vmov	r2, r3, d8
 8009d36:	f7f6 faa7 	bl	8000288 <__aeabi_dsub>
 8009d3a:	9d00      	ldr	r5, [sp, #0]
 8009d3c:	ec41 0b18 	vmov	d8, r0, r1
 8009d40:	4639      	mov	r1, r7
 8009d42:	4630      	mov	r0, r6
 8009d44:	f7f6 ff08 	bl	8000b58 <__aeabi_d2iz>
 8009d48:	900c      	str	r0, [sp, #48]	; 0x30
 8009d4a:	f7f6 fbeb 	bl	8000524 <__aeabi_i2d>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	460b      	mov	r3, r1
 8009d52:	4630      	mov	r0, r6
 8009d54:	4639      	mov	r1, r7
 8009d56:	f7f6 fa97 	bl	8000288 <__aeabi_dsub>
 8009d5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d5c:	3330      	adds	r3, #48	; 0x30
 8009d5e:	f805 3b01 	strb.w	r3, [r5], #1
 8009d62:	ec53 2b18 	vmov	r2, r3, d8
 8009d66:	4606      	mov	r6, r0
 8009d68:	460f      	mov	r7, r1
 8009d6a:	f7f6 feb7 	bl	8000adc <__aeabi_dcmplt>
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	d165      	bne.n	8009e3e <_dtoa_r+0x60e>
 8009d72:	4632      	mov	r2, r6
 8009d74:	463b      	mov	r3, r7
 8009d76:	4935      	ldr	r1, [pc, #212]	; (8009e4c <_dtoa_r+0x61c>)
 8009d78:	2000      	movs	r0, #0
 8009d7a:	f7f6 fa85 	bl	8000288 <__aeabi_dsub>
 8009d7e:	ec53 2b18 	vmov	r2, r3, d8
 8009d82:	f7f6 feab 	bl	8000adc <__aeabi_dcmplt>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	f040 80b8 	bne.w	8009efc <_dtoa_r+0x6cc>
 8009d8c:	9b02      	ldr	r3, [sp, #8]
 8009d8e:	429d      	cmp	r5, r3
 8009d90:	f43f af75 	beq.w	8009c7e <_dtoa_r+0x44e>
 8009d94:	4b2e      	ldr	r3, [pc, #184]	; (8009e50 <_dtoa_r+0x620>)
 8009d96:	ec51 0b18 	vmov	r0, r1, d8
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f7f6 fc2c 	bl	80005f8 <__aeabi_dmul>
 8009da0:	4b2b      	ldr	r3, [pc, #172]	; (8009e50 <_dtoa_r+0x620>)
 8009da2:	ec41 0b18 	vmov	d8, r0, r1
 8009da6:	2200      	movs	r2, #0
 8009da8:	4630      	mov	r0, r6
 8009daa:	4639      	mov	r1, r7
 8009dac:	f7f6 fc24 	bl	80005f8 <__aeabi_dmul>
 8009db0:	4606      	mov	r6, r0
 8009db2:	460f      	mov	r7, r1
 8009db4:	e7c4      	b.n	8009d40 <_dtoa_r+0x510>
 8009db6:	ec51 0b17 	vmov	r0, r1, d7
 8009dba:	f7f6 fc1d 	bl	80005f8 <__aeabi_dmul>
 8009dbe:	9b02      	ldr	r3, [sp, #8]
 8009dc0:	9d00      	ldr	r5, [sp, #0]
 8009dc2:	930c      	str	r3, [sp, #48]	; 0x30
 8009dc4:	ec41 0b18 	vmov	d8, r0, r1
 8009dc8:	4639      	mov	r1, r7
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f7f6 fec4 	bl	8000b58 <__aeabi_d2iz>
 8009dd0:	9011      	str	r0, [sp, #68]	; 0x44
 8009dd2:	f7f6 fba7 	bl	8000524 <__aeabi_i2d>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4630      	mov	r0, r6
 8009ddc:	4639      	mov	r1, r7
 8009dde:	f7f6 fa53 	bl	8000288 <__aeabi_dsub>
 8009de2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009de4:	3330      	adds	r3, #48	; 0x30
 8009de6:	f805 3b01 	strb.w	r3, [r5], #1
 8009dea:	9b02      	ldr	r3, [sp, #8]
 8009dec:	429d      	cmp	r5, r3
 8009dee:	4606      	mov	r6, r0
 8009df0:	460f      	mov	r7, r1
 8009df2:	f04f 0200 	mov.w	r2, #0
 8009df6:	d133      	bne.n	8009e60 <_dtoa_r+0x630>
 8009df8:	4b18      	ldr	r3, [pc, #96]	; (8009e5c <_dtoa_r+0x62c>)
 8009dfa:	ec51 0b18 	vmov	r0, r1, d8
 8009dfe:	f7f6 fa45 	bl	800028c <__adddf3>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4630      	mov	r0, r6
 8009e08:	4639      	mov	r1, r7
 8009e0a:	f7f6 fe85 	bl	8000b18 <__aeabi_dcmpgt>
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	d174      	bne.n	8009efc <_dtoa_r+0x6cc>
 8009e12:	ec53 2b18 	vmov	r2, r3, d8
 8009e16:	4911      	ldr	r1, [pc, #68]	; (8009e5c <_dtoa_r+0x62c>)
 8009e18:	2000      	movs	r0, #0
 8009e1a:	f7f6 fa35 	bl	8000288 <__aeabi_dsub>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	460b      	mov	r3, r1
 8009e22:	4630      	mov	r0, r6
 8009e24:	4639      	mov	r1, r7
 8009e26:	f7f6 fe59 	bl	8000adc <__aeabi_dcmplt>
 8009e2a:	2800      	cmp	r0, #0
 8009e2c:	f43f af27 	beq.w	8009c7e <_dtoa_r+0x44e>
 8009e30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e32:	1e6b      	subs	r3, r5, #1
 8009e34:	930c      	str	r3, [sp, #48]	; 0x30
 8009e36:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e3a:	2b30      	cmp	r3, #48	; 0x30
 8009e3c:	d0f8      	beq.n	8009e30 <_dtoa_r+0x600>
 8009e3e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009e42:	e049      	b.n	8009ed8 <_dtoa_r+0x6a8>
 8009e44:	0800ceb0 	.word	0x0800ceb0
 8009e48:	0800ce88 	.word	0x0800ce88
 8009e4c:	3ff00000 	.word	0x3ff00000
 8009e50:	40240000 	.word	0x40240000
 8009e54:	401c0000 	.word	0x401c0000
 8009e58:	40140000 	.word	0x40140000
 8009e5c:	3fe00000 	.word	0x3fe00000
 8009e60:	4baf      	ldr	r3, [pc, #700]	; (800a120 <_dtoa_r+0x8f0>)
 8009e62:	f7f6 fbc9 	bl	80005f8 <__aeabi_dmul>
 8009e66:	4606      	mov	r6, r0
 8009e68:	460f      	mov	r7, r1
 8009e6a:	e7ad      	b.n	8009dc8 <_dtoa_r+0x598>
 8009e6c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e70:	9d00      	ldr	r5, [sp, #0]
 8009e72:	4642      	mov	r2, r8
 8009e74:	464b      	mov	r3, r9
 8009e76:	4630      	mov	r0, r6
 8009e78:	4639      	mov	r1, r7
 8009e7a:	f7f6 fce7 	bl	800084c <__aeabi_ddiv>
 8009e7e:	f7f6 fe6b 	bl	8000b58 <__aeabi_d2iz>
 8009e82:	9002      	str	r0, [sp, #8]
 8009e84:	f7f6 fb4e 	bl	8000524 <__aeabi_i2d>
 8009e88:	4642      	mov	r2, r8
 8009e8a:	464b      	mov	r3, r9
 8009e8c:	f7f6 fbb4 	bl	80005f8 <__aeabi_dmul>
 8009e90:	4602      	mov	r2, r0
 8009e92:	460b      	mov	r3, r1
 8009e94:	4630      	mov	r0, r6
 8009e96:	4639      	mov	r1, r7
 8009e98:	f7f6 f9f6 	bl	8000288 <__aeabi_dsub>
 8009e9c:	9e02      	ldr	r6, [sp, #8]
 8009e9e:	9f01      	ldr	r7, [sp, #4]
 8009ea0:	3630      	adds	r6, #48	; 0x30
 8009ea2:	f805 6b01 	strb.w	r6, [r5], #1
 8009ea6:	9e00      	ldr	r6, [sp, #0]
 8009ea8:	1bae      	subs	r6, r5, r6
 8009eaa:	42b7      	cmp	r7, r6
 8009eac:	4602      	mov	r2, r0
 8009eae:	460b      	mov	r3, r1
 8009eb0:	d137      	bne.n	8009f22 <_dtoa_r+0x6f2>
 8009eb2:	f7f6 f9eb 	bl	800028c <__adddf3>
 8009eb6:	4642      	mov	r2, r8
 8009eb8:	464b      	mov	r3, r9
 8009eba:	4606      	mov	r6, r0
 8009ebc:	460f      	mov	r7, r1
 8009ebe:	f7f6 fe2b 	bl	8000b18 <__aeabi_dcmpgt>
 8009ec2:	b9c8      	cbnz	r0, 8009ef8 <_dtoa_r+0x6c8>
 8009ec4:	4642      	mov	r2, r8
 8009ec6:	464b      	mov	r3, r9
 8009ec8:	4630      	mov	r0, r6
 8009eca:	4639      	mov	r1, r7
 8009ecc:	f7f6 fdfc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ed0:	b110      	cbz	r0, 8009ed8 <_dtoa_r+0x6a8>
 8009ed2:	9b02      	ldr	r3, [sp, #8]
 8009ed4:	07d9      	lsls	r1, r3, #31
 8009ed6:	d40f      	bmi.n	8009ef8 <_dtoa_r+0x6c8>
 8009ed8:	4620      	mov	r0, r4
 8009eda:	4659      	mov	r1, fp
 8009edc:	f000 ffdb 	bl	800ae96 <_Bfree>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	702b      	strb	r3, [r5, #0]
 8009ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ee6:	f10a 0001 	add.w	r0, sl, #1
 8009eea:	6018      	str	r0, [r3, #0]
 8009eec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f43f acd9 	beq.w	80098a6 <_dtoa_r+0x76>
 8009ef4:	601d      	str	r5, [r3, #0]
 8009ef6:	e4d6      	b.n	80098a6 <_dtoa_r+0x76>
 8009ef8:	f8cd a01c 	str.w	sl, [sp, #28]
 8009efc:	462b      	mov	r3, r5
 8009efe:	461d      	mov	r5, r3
 8009f00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f04:	2a39      	cmp	r2, #57	; 0x39
 8009f06:	d108      	bne.n	8009f1a <_dtoa_r+0x6ea>
 8009f08:	9a00      	ldr	r2, [sp, #0]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d1f7      	bne.n	8009efe <_dtoa_r+0x6ce>
 8009f0e:	9a07      	ldr	r2, [sp, #28]
 8009f10:	9900      	ldr	r1, [sp, #0]
 8009f12:	3201      	adds	r2, #1
 8009f14:	9207      	str	r2, [sp, #28]
 8009f16:	2230      	movs	r2, #48	; 0x30
 8009f18:	700a      	strb	r2, [r1, #0]
 8009f1a:	781a      	ldrb	r2, [r3, #0]
 8009f1c:	3201      	adds	r2, #1
 8009f1e:	701a      	strb	r2, [r3, #0]
 8009f20:	e78d      	b.n	8009e3e <_dtoa_r+0x60e>
 8009f22:	4b7f      	ldr	r3, [pc, #508]	; (800a120 <_dtoa_r+0x8f0>)
 8009f24:	2200      	movs	r2, #0
 8009f26:	f7f6 fb67 	bl	80005f8 <__aeabi_dmul>
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	4606      	mov	r6, r0
 8009f30:	460f      	mov	r7, r1
 8009f32:	f7f6 fdc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d09b      	beq.n	8009e72 <_dtoa_r+0x642>
 8009f3a:	e7cd      	b.n	8009ed8 <_dtoa_r+0x6a8>
 8009f3c:	9a08      	ldr	r2, [sp, #32]
 8009f3e:	2a00      	cmp	r2, #0
 8009f40:	f000 80c4 	beq.w	800a0cc <_dtoa_r+0x89c>
 8009f44:	9a05      	ldr	r2, [sp, #20]
 8009f46:	2a01      	cmp	r2, #1
 8009f48:	f300 80a8 	bgt.w	800a09c <_dtoa_r+0x86c>
 8009f4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f4e:	2a00      	cmp	r2, #0
 8009f50:	f000 80a0 	beq.w	800a094 <_dtoa_r+0x864>
 8009f54:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f58:	9e06      	ldr	r6, [sp, #24]
 8009f5a:	4645      	mov	r5, r8
 8009f5c:	9a04      	ldr	r2, [sp, #16]
 8009f5e:	2101      	movs	r1, #1
 8009f60:	441a      	add	r2, r3
 8009f62:	4620      	mov	r0, r4
 8009f64:	4498      	add	r8, r3
 8009f66:	9204      	str	r2, [sp, #16]
 8009f68:	f001 f838 	bl	800afdc <__i2b>
 8009f6c:	4607      	mov	r7, r0
 8009f6e:	2d00      	cmp	r5, #0
 8009f70:	dd0b      	ble.n	8009f8a <_dtoa_r+0x75a>
 8009f72:	9b04      	ldr	r3, [sp, #16]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	dd08      	ble.n	8009f8a <_dtoa_r+0x75a>
 8009f78:	42ab      	cmp	r3, r5
 8009f7a:	9a04      	ldr	r2, [sp, #16]
 8009f7c:	bfa8      	it	ge
 8009f7e:	462b      	movge	r3, r5
 8009f80:	eba8 0803 	sub.w	r8, r8, r3
 8009f84:	1aed      	subs	r5, r5, r3
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	9304      	str	r3, [sp, #16]
 8009f8a:	9b06      	ldr	r3, [sp, #24]
 8009f8c:	b1fb      	cbz	r3, 8009fce <_dtoa_r+0x79e>
 8009f8e:	9b08      	ldr	r3, [sp, #32]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	f000 809f 	beq.w	800a0d4 <_dtoa_r+0x8a4>
 8009f96:	2e00      	cmp	r6, #0
 8009f98:	dd11      	ble.n	8009fbe <_dtoa_r+0x78e>
 8009f9a:	4639      	mov	r1, r7
 8009f9c:	4632      	mov	r2, r6
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	f001 f8d8 	bl	800b154 <__pow5mult>
 8009fa4:	465a      	mov	r2, fp
 8009fa6:	4601      	mov	r1, r0
 8009fa8:	4607      	mov	r7, r0
 8009faa:	4620      	mov	r0, r4
 8009fac:	f001 f82c 	bl	800b008 <__multiply>
 8009fb0:	4659      	mov	r1, fp
 8009fb2:	9007      	str	r0, [sp, #28]
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	f000 ff6e 	bl	800ae96 <_Bfree>
 8009fba:	9b07      	ldr	r3, [sp, #28]
 8009fbc:	469b      	mov	fp, r3
 8009fbe:	9b06      	ldr	r3, [sp, #24]
 8009fc0:	1b9a      	subs	r2, r3, r6
 8009fc2:	d004      	beq.n	8009fce <_dtoa_r+0x79e>
 8009fc4:	4659      	mov	r1, fp
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f001 f8c4 	bl	800b154 <__pow5mult>
 8009fcc:	4683      	mov	fp, r0
 8009fce:	2101      	movs	r1, #1
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f001 f803 	bl	800afdc <__i2b>
 8009fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	4606      	mov	r6, r0
 8009fdc:	dd7c      	ble.n	800a0d8 <_dtoa_r+0x8a8>
 8009fde:	461a      	mov	r2, r3
 8009fe0:	4601      	mov	r1, r0
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f001 f8b6 	bl	800b154 <__pow5mult>
 8009fe8:	9b05      	ldr	r3, [sp, #20]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	4606      	mov	r6, r0
 8009fee:	dd76      	ble.n	800a0de <_dtoa_r+0x8ae>
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	9306      	str	r3, [sp, #24]
 8009ff4:	6933      	ldr	r3, [r6, #16]
 8009ff6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ffa:	6918      	ldr	r0, [r3, #16]
 8009ffc:	f000 ff9e 	bl	800af3c <__hi0bits>
 800a000:	f1c0 0020 	rsb	r0, r0, #32
 800a004:	9b04      	ldr	r3, [sp, #16]
 800a006:	4418      	add	r0, r3
 800a008:	f010 001f 	ands.w	r0, r0, #31
 800a00c:	f000 8086 	beq.w	800a11c <_dtoa_r+0x8ec>
 800a010:	f1c0 0320 	rsb	r3, r0, #32
 800a014:	2b04      	cmp	r3, #4
 800a016:	dd7f      	ble.n	800a118 <_dtoa_r+0x8e8>
 800a018:	f1c0 001c 	rsb	r0, r0, #28
 800a01c:	9b04      	ldr	r3, [sp, #16]
 800a01e:	4403      	add	r3, r0
 800a020:	4480      	add	r8, r0
 800a022:	4405      	add	r5, r0
 800a024:	9304      	str	r3, [sp, #16]
 800a026:	f1b8 0f00 	cmp.w	r8, #0
 800a02a:	dd05      	ble.n	800a038 <_dtoa_r+0x808>
 800a02c:	4659      	mov	r1, fp
 800a02e:	4642      	mov	r2, r8
 800a030:	4620      	mov	r0, r4
 800a032:	f001 f8cf 	bl	800b1d4 <__lshift>
 800a036:	4683      	mov	fp, r0
 800a038:	9b04      	ldr	r3, [sp, #16]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	dd05      	ble.n	800a04a <_dtoa_r+0x81a>
 800a03e:	4631      	mov	r1, r6
 800a040:	461a      	mov	r2, r3
 800a042:	4620      	mov	r0, r4
 800a044:	f001 f8c6 	bl	800b1d4 <__lshift>
 800a048:	4606      	mov	r6, r0
 800a04a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d069      	beq.n	800a124 <_dtoa_r+0x8f4>
 800a050:	4631      	mov	r1, r6
 800a052:	4658      	mov	r0, fp
 800a054:	f001 f92a 	bl	800b2ac <__mcmp>
 800a058:	2800      	cmp	r0, #0
 800a05a:	da63      	bge.n	800a124 <_dtoa_r+0x8f4>
 800a05c:	2300      	movs	r3, #0
 800a05e:	4659      	mov	r1, fp
 800a060:	220a      	movs	r2, #10
 800a062:	4620      	mov	r0, r4
 800a064:	f000 ff20 	bl	800aea8 <__multadd>
 800a068:	9b08      	ldr	r3, [sp, #32]
 800a06a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a06e:	4683      	mov	fp, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	f000 818e 	beq.w	800a392 <_dtoa_r+0xb62>
 800a076:	4639      	mov	r1, r7
 800a078:	2300      	movs	r3, #0
 800a07a:	220a      	movs	r2, #10
 800a07c:	4620      	mov	r0, r4
 800a07e:	f000 ff13 	bl	800aea8 <__multadd>
 800a082:	f1b9 0f00 	cmp.w	r9, #0
 800a086:	4607      	mov	r7, r0
 800a088:	f300 808e 	bgt.w	800a1a8 <_dtoa_r+0x978>
 800a08c:	9b05      	ldr	r3, [sp, #20]
 800a08e:	2b02      	cmp	r3, #2
 800a090:	dc50      	bgt.n	800a134 <_dtoa_r+0x904>
 800a092:	e089      	b.n	800a1a8 <_dtoa_r+0x978>
 800a094:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a096:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a09a:	e75d      	b.n	8009f58 <_dtoa_r+0x728>
 800a09c:	9b01      	ldr	r3, [sp, #4]
 800a09e:	1e5e      	subs	r6, r3, #1
 800a0a0:	9b06      	ldr	r3, [sp, #24]
 800a0a2:	42b3      	cmp	r3, r6
 800a0a4:	bfbf      	itttt	lt
 800a0a6:	9b06      	ldrlt	r3, [sp, #24]
 800a0a8:	9606      	strlt	r6, [sp, #24]
 800a0aa:	1af2      	sublt	r2, r6, r3
 800a0ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a0ae:	bfb6      	itet	lt
 800a0b0:	189b      	addlt	r3, r3, r2
 800a0b2:	1b9e      	subge	r6, r3, r6
 800a0b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a0b6:	9b01      	ldr	r3, [sp, #4]
 800a0b8:	bfb8      	it	lt
 800a0ba:	2600      	movlt	r6, #0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	bfb5      	itete	lt
 800a0c0:	eba8 0503 	sublt.w	r5, r8, r3
 800a0c4:	9b01      	ldrge	r3, [sp, #4]
 800a0c6:	2300      	movlt	r3, #0
 800a0c8:	4645      	movge	r5, r8
 800a0ca:	e747      	b.n	8009f5c <_dtoa_r+0x72c>
 800a0cc:	9e06      	ldr	r6, [sp, #24]
 800a0ce:	9f08      	ldr	r7, [sp, #32]
 800a0d0:	4645      	mov	r5, r8
 800a0d2:	e74c      	b.n	8009f6e <_dtoa_r+0x73e>
 800a0d4:	9a06      	ldr	r2, [sp, #24]
 800a0d6:	e775      	b.n	8009fc4 <_dtoa_r+0x794>
 800a0d8:	9b05      	ldr	r3, [sp, #20]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	dc18      	bgt.n	800a110 <_dtoa_r+0x8e0>
 800a0de:	9b02      	ldr	r3, [sp, #8]
 800a0e0:	b9b3      	cbnz	r3, 800a110 <_dtoa_r+0x8e0>
 800a0e2:	9b03      	ldr	r3, [sp, #12]
 800a0e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0e8:	b9a3      	cbnz	r3, 800a114 <_dtoa_r+0x8e4>
 800a0ea:	9b03      	ldr	r3, [sp, #12]
 800a0ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0f0:	0d1b      	lsrs	r3, r3, #20
 800a0f2:	051b      	lsls	r3, r3, #20
 800a0f4:	b12b      	cbz	r3, 800a102 <_dtoa_r+0x8d2>
 800a0f6:	9b04      	ldr	r3, [sp, #16]
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	9304      	str	r3, [sp, #16]
 800a0fc:	f108 0801 	add.w	r8, r8, #1
 800a100:	2301      	movs	r3, #1
 800a102:	9306      	str	r3, [sp, #24]
 800a104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a106:	2b00      	cmp	r3, #0
 800a108:	f47f af74 	bne.w	8009ff4 <_dtoa_r+0x7c4>
 800a10c:	2001      	movs	r0, #1
 800a10e:	e779      	b.n	800a004 <_dtoa_r+0x7d4>
 800a110:	2300      	movs	r3, #0
 800a112:	e7f6      	b.n	800a102 <_dtoa_r+0x8d2>
 800a114:	9b02      	ldr	r3, [sp, #8]
 800a116:	e7f4      	b.n	800a102 <_dtoa_r+0x8d2>
 800a118:	d085      	beq.n	800a026 <_dtoa_r+0x7f6>
 800a11a:	4618      	mov	r0, r3
 800a11c:	301c      	adds	r0, #28
 800a11e:	e77d      	b.n	800a01c <_dtoa_r+0x7ec>
 800a120:	40240000 	.word	0x40240000
 800a124:	9b01      	ldr	r3, [sp, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	dc38      	bgt.n	800a19c <_dtoa_r+0x96c>
 800a12a:	9b05      	ldr	r3, [sp, #20]
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	dd35      	ble.n	800a19c <_dtoa_r+0x96c>
 800a130:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a134:	f1b9 0f00 	cmp.w	r9, #0
 800a138:	d10d      	bne.n	800a156 <_dtoa_r+0x926>
 800a13a:	4631      	mov	r1, r6
 800a13c:	464b      	mov	r3, r9
 800a13e:	2205      	movs	r2, #5
 800a140:	4620      	mov	r0, r4
 800a142:	f000 feb1 	bl	800aea8 <__multadd>
 800a146:	4601      	mov	r1, r0
 800a148:	4606      	mov	r6, r0
 800a14a:	4658      	mov	r0, fp
 800a14c:	f001 f8ae 	bl	800b2ac <__mcmp>
 800a150:	2800      	cmp	r0, #0
 800a152:	f73f adbe 	bgt.w	8009cd2 <_dtoa_r+0x4a2>
 800a156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a158:	9d00      	ldr	r5, [sp, #0]
 800a15a:	ea6f 0a03 	mvn.w	sl, r3
 800a15e:	f04f 0800 	mov.w	r8, #0
 800a162:	4631      	mov	r1, r6
 800a164:	4620      	mov	r0, r4
 800a166:	f000 fe96 	bl	800ae96 <_Bfree>
 800a16a:	2f00      	cmp	r7, #0
 800a16c:	f43f aeb4 	beq.w	8009ed8 <_dtoa_r+0x6a8>
 800a170:	f1b8 0f00 	cmp.w	r8, #0
 800a174:	d005      	beq.n	800a182 <_dtoa_r+0x952>
 800a176:	45b8      	cmp	r8, r7
 800a178:	d003      	beq.n	800a182 <_dtoa_r+0x952>
 800a17a:	4641      	mov	r1, r8
 800a17c:	4620      	mov	r0, r4
 800a17e:	f000 fe8a 	bl	800ae96 <_Bfree>
 800a182:	4639      	mov	r1, r7
 800a184:	4620      	mov	r0, r4
 800a186:	f000 fe86 	bl	800ae96 <_Bfree>
 800a18a:	e6a5      	b.n	8009ed8 <_dtoa_r+0x6a8>
 800a18c:	2600      	movs	r6, #0
 800a18e:	4637      	mov	r7, r6
 800a190:	e7e1      	b.n	800a156 <_dtoa_r+0x926>
 800a192:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a194:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a198:	4637      	mov	r7, r6
 800a19a:	e59a      	b.n	8009cd2 <_dtoa_r+0x4a2>
 800a19c:	9b08      	ldr	r3, [sp, #32]
 800a19e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	f000 80fc 	beq.w	800a3a0 <_dtoa_r+0xb70>
 800a1a8:	2d00      	cmp	r5, #0
 800a1aa:	dd05      	ble.n	800a1b8 <_dtoa_r+0x988>
 800a1ac:	4639      	mov	r1, r7
 800a1ae:	462a      	mov	r2, r5
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f001 f80f 	bl	800b1d4 <__lshift>
 800a1b6:	4607      	mov	r7, r0
 800a1b8:	9b06      	ldr	r3, [sp, #24]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d05b      	beq.n	800a276 <_dtoa_r+0xa46>
 800a1be:	6879      	ldr	r1, [r7, #4]
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f000 fe43 	bl	800ae4c <_Balloc>
 800a1c6:	4605      	mov	r5, r0
 800a1c8:	b920      	cbnz	r0, 800a1d4 <_dtoa_r+0x9a4>
 800a1ca:	4b80      	ldr	r3, [pc, #512]	; (800a3cc <_dtoa_r+0xb9c>)
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1d2:	e45b      	b.n	8009a8c <_dtoa_r+0x25c>
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	3202      	adds	r2, #2
 800a1d8:	0092      	lsls	r2, r2, #2
 800a1da:	f107 010c 	add.w	r1, r7, #12
 800a1de:	300c      	adds	r0, #12
 800a1e0:	f000 fe1a 	bl	800ae18 <memcpy>
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	4629      	mov	r1, r5
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f000 fff3 	bl	800b1d4 <__lshift>
 800a1ee:	9b00      	ldr	r3, [sp, #0]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	9301      	str	r3, [sp, #4]
 800a1f4:	9b00      	ldr	r3, [sp, #0]
 800a1f6:	444b      	add	r3, r9
 800a1f8:	9307      	str	r3, [sp, #28]
 800a1fa:	9b02      	ldr	r3, [sp, #8]
 800a1fc:	f003 0301 	and.w	r3, r3, #1
 800a200:	46b8      	mov	r8, r7
 800a202:	9306      	str	r3, [sp, #24]
 800a204:	4607      	mov	r7, r0
 800a206:	9b01      	ldr	r3, [sp, #4]
 800a208:	4631      	mov	r1, r6
 800a20a:	3b01      	subs	r3, #1
 800a20c:	4658      	mov	r0, fp
 800a20e:	9302      	str	r3, [sp, #8]
 800a210:	f7ff fa80 	bl	8009714 <quorem>
 800a214:	4603      	mov	r3, r0
 800a216:	3330      	adds	r3, #48	; 0x30
 800a218:	9004      	str	r0, [sp, #16]
 800a21a:	4641      	mov	r1, r8
 800a21c:	4658      	mov	r0, fp
 800a21e:	9308      	str	r3, [sp, #32]
 800a220:	f001 f844 	bl	800b2ac <__mcmp>
 800a224:	463a      	mov	r2, r7
 800a226:	4681      	mov	r9, r0
 800a228:	4631      	mov	r1, r6
 800a22a:	4620      	mov	r0, r4
 800a22c:	f001 f85a 	bl	800b2e4 <__mdiff>
 800a230:	68c2      	ldr	r2, [r0, #12]
 800a232:	9b08      	ldr	r3, [sp, #32]
 800a234:	4605      	mov	r5, r0
 800a236:	bb02      	cbnz	r2, 800a27a <_dtoa_r+0xa4a>
 800a238:	4601      	mov	r1, r0
 800a23a:	4658      	mov	r0, fp
 800a23c:	f001 f836 	bl	800b2ac <__mcmp>
 800a240:	9b08      	ldr	r3, [sp, #32]
 800a242:	4602      	mov	r2, r0
 800a244:	4629      	mov	r1, r5
 800a246:	4620      	mov	r0, r4
 800a248:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a24c:	f000 fe23 	bl	800ae96 <_Bfree>
 800a250:	9b05      	ldr	r3, [sp, #20]
 800a252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a254:	9d01      	ldr	r5, [sp, #4]
 800a256:	ea43 0102 	orr.w	r1, r3, r2
 800a25a:	9b06      	ldr	r3, [sp, #24]
 800a25c:	430b      	orrs	r3, r1
 800a25e:	9b08      	ldr	r3, [sp, #32]
 800a260:	d10d      	bne.n	800a27e <_dtoa_r+0xa4e>
 800a262:	2b39      	cmp	r3, #57	; 0x39
 800a264:	d029      	beq.n	800a2ba <_dtoa_r+0xa8a>
 800a266:	f1b9 0f00 	cmp.w	r9, #0
 800a26a:	dd01      	ble.n	800a270 <_dtoa_r+0xa40>
 800a26c:	9b04      	ldr	r3, [sp, #16]
 800a26e:	3331      	adds	r3, #49	; 0x31
 800a270:	9a02      	ldr	r2, [sp, #8]
 800a272:	7013      	strb	r3, [r2, #0]
 800a274:	e775      	b.n	800a162 <_dtoa_r+0x932>
 800a276:	4638      	mov	r0, r7
 800a278:	e7b9      	b.n	800a1ee <_dtoa_r+0x9be>
 800a27a:	2201      	movs	r2, #1
 800a27c:	e7e2      	b.n	800a244 <_dtoa_r+0xa14>
 800a27e:	f1b9 0f00 	cmp.w	r9, #0
 800a282:	db06      	blt.n	800a292 <_dtoa_r+0xa62>
 800a284:	9905      	ldr	r1, [sp, #20]
 800a286:	ea41 0909 	orr.w	r9, r1, r9
 800a28a:	9906      	ldr	r1, [sp, #24]
 800a28c:	ea59 0101 	orrs.w	r1, r9, r1
 800a290:	d120      	bne.n	800a2d4 <_dtoa_r+0xaa4>
 800a292:	2a00      	cmp	r2, #0
 800a294:	ddec      	ble.n	800a270 <_dtoa_r+0xa40>
 800a296:	4659      	mov	r1, fp
 800a298:	2201      	movs	r2, #1
 800a29a:	4620      	mov	r0, r4
 800a29c:	9301      	str	r3, [sp, #4]
 800a29e:	f000 ff99 	bl	800b1d4 <__lshift>
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	4683      	mov	fp, r0
 800a2a6:	f001 f801 	bl	800b2ac <__mcmp>
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	9b01      	ldr	r3, [sp, #4]
 800a2ae:	dc02      	bgt.n	800a2b6 <_dtoa_r+0xa86>
 800a2b0:	d1de      	bne.n	800a270 <_dtoa_r+0xa40>
 800a2b2:	07da      	lsls	r2, r3, #31
 800a2b4:	d5dc      	bpl.n	800a270 <_dtoa_r+0xa40>
 800a2b6:	2b39      	cmp	r3, #57	; 0x39
 800a2b8:	d1d8      	bne.n	800a26c <_dtoa_r+0xa3c>
 800a2ba:	9a02      	ldr	r2, [sp, #8]
 800a2bc:	2339      	movs	r3, #57	; 0x39
 800a2be:	7013      	strb	r3, [r2, #0]
 800a2c0:	462b      	mov	r3, r5
 800a2c2:	461d      	mov	r5, r3
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2ca:	2a39      	cmp	r2, #57	; 0x39
 800a2cc:	d050      	beq.n	800a370 <_dtoa_r+0xb40>
 800a2ce:	3201      	adds	r2, #1
 800a2d0:	701a      	strb	r2, [r3, #0]
 800a2d2:	e746      	b.n	800a162 <_dtoa_r+0x932>
 800a2d4:	2a00      	cmp	r2, #0
 800a2d6:	dd03      	ble.n	800a2e0 <_dtoa_r+0xab0>
 800a2d8:	2b39      	cmp	r3, #57	; 0x39
 800a2da:	d0ee      	beq.n	800a2ba <_dtoa_r+0xa8a>
 800a2dc:	3301      	adds	r3, #1
 800a2de:	e7c7      	b.n	800a270 <_dtoa_r+0xa40>
 800a2e0:	9a01      	ldr	r2, [sp, #4]
 800a2e2:	9907      	ldr	r1, [sp, #28]
 800a2e4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a2e8:	428a      	cmp	r2, r1
 800a2ea:	d02a      	beq.n	800a342 <_dtoa_r+0xb12>
 800a2ec:	4659      	mov	r1, fp
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	220a      	movs	r2, #10
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f000 fdd8 	bl	800aea8 <__multadd>
 800a2f8:	45b8      	cmp	r8, r7
 800a2fa:	4683      	mov	fp, r0
 800a2fc:	f04f 0300 	mov.w	r3, #0
 800a300:	f04f 020a 	mov.w	r2, #10
 800a304:	4641      	mov	r1, r8
 800a306:	4620      	mov	r0, r4
 800a308:	d107      	bne.n	800a31a <_dtoa_r+0xaea>
 800a30a:	f000 fdcd 	bl	800aea8 <__multadd>
 800a30e:	4680      	mov	r8, r0
 800a310:	4607      	mov	r7, r0
 800a312:	9b01      	ldr	r3, [sp, #4]
 800a314:	3301      	adds	r3, #1
 800a316:	9301      	str	r3, [sp, #4]
 800a318:	e775      	b.n	800a206 <_dtoa_r+0x9d6>
 800a31a:	f000 fdc5 	bl	800aea8 <__multadd>
 800a31e:	4639      	mov	r1, r7
 800a320:	4680      	mov	r8, r0
 800a322:	2300      	movs	r3, #0
 800a324:	220a      	movs	r2, #10
 800a326:	4620      	mov	r0, r4
 800a328:	f000 fdbe 	bl	800aea8 <__multadd>
 800a32c:	4607      	mov	r7, r0
 800a32e:	e7f0      	b.n	800a312 <_dtoa_r+0xae2>
 800a330:	f1b9 0f00 	cmp.w	r9, #0
 800a334:	9a00      	ldr	r2, [sp, #0]
 800a336:	bfcc      	ite	gt
 800a338:	464d      	movgt	r5, r9
 800a33a:	2501      	movle	r5, #1
 800a33c:	4415      	add	r5, r2
 800a33e:	f04f 0800 	mov.w	r8, #0
 800a342:	4659      	mov	r1, fp
 800a344:	2201      	movs	r2, #1
 800a346:	4620      	mov	r0, r4
 800a348:	9301      	str	r3, [sp, #4]
 800a34a:	f000 ff43 	bl	800b1d4 <__lshift>
 800a34e:	4631      	mov	r1, r6
 800a350:	4683      	mov	fp, r0
 800a352:	f000 ffab 	bl	800b2ac <__mcmp>
 800a356:	2800      	cmp	r0, #0
 800a358:	dcb2      	bgt.n	800a2c0 <_dtoa_r+0xa90>
 800a35a:	d102      	bne.n	800a362 <_dtoa_r+0xb32>
 800a35c:	9b01      	ldr	r3, [sp, #4]
 800a35e:	07db      	lsls	r3, r3, #31
 800a360:	d4ae      	bmi.n	800a2c0 <_dtoa_r+0xa90>
 800a362:	462b      	mov	r3, r5
 800a364:	461d      	mov	r5, r3
 800a366:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a36a:	2a30      	cmp	r2, #48	; 0x30
 800a36c:	d0fa      	beq.n	800a364 <_dtoa_r+0xb34>
 800a36e:	e6f8      	b.n	800a162 <_dtoa_r+0x932>
 800a370:	9a00      	ldr	r2, [sp, #0]
 800a372:	429a      	cmp	r2, r3
 800a374:	d1a5      	bne.n	800a2c2 <_dtoa_r+0xa92>
 800a376:	f10a 0a01 	add.w	sl, sl, #1
 800a37a:	2331      	movs	r3, #49	; 0x31
 800a37c:	e779      	b.n	800a272 <_dtoa_r+0xa42>
 800a37e:	4b14      	ldr	r3, [pc, #80]	; (800a3d0 <_dtoa_r+0xba0>)
 800a380:	f7ff bab1 	b.w	80098e6 <_dtoa_r+0xb6>
 800a384:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a386:	2b00      	cmp	r3, #0
 800a388:	f47f aa93 	bne.w	80098b2 <_dtoa_r+0x82>
 800a38c:	4b11      	ldr	r3, [pc, #68]	; (800a3d4 <_dtoa_r+0xba4>)
 800a38e:	f7ff baaa 	b.w	80098e6 <_dtoa_r+0xb6>
 800a392:	f1b9 0f00 	cmp.w	r9, #0
 800a396:	dc03      	bgt.n	800a3a0 <_dtoa_r+0xb70>
 800a398:	9b05      	ldr	r3, [sp, #20]
 800a39a:	2b02      	cmp	r3, #2
 800a39c:	f73f aeca 	bgt.w	800a134 <_dtoa_r+0x904>
 800a3a0:	9d00      	ldr	r5, [sp, #0]
 800a3a2:	4631      	mov	r1, r6
 800a3a4:	4658      	mov	r0, fp
 800a3a6:	f7ff f9b5 	bl	8009714 <quorem>
 800a3aa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a3ae:	f805 3b01 	strb.w	r3, [r5], #1
 800a3b2:	9a00      	ldr	r2, [sp, #0]
 800a3b4:	1aaa      	subs	r2, r5, r2
 800a3b6:	4591      	cmp	r9, r2
 800a3b8:	ddba      	ble.n	800a330 <_dtoa_r+0xb00>
 800a3ba:	4659      	mov	r1, fp
 800a3bc:	2300      	movs	r3, #0
 800a3be:	220a      	movs	r2, #10
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f000 fd71 	bl	800aea8 <__multadd>
 800a3c6:	4683      	mov	fp, r0
 800a3c8:	e7eb      	b.n	800a3a2 <_dtoa_r+0xb72>
 800a3ca:	bf00      	nop
 800a3cc:	0800cdb1 	.word	0x0800cdb1
 800a3d0:	0800cd62 	.word	0x0800cd62
 800a3d4:	0800cda8 	.word	0x0800cda8

0800a3d8 <__sflush_r>:
 800a3d8:	898b      	ldrh	r3, [r1, #12]
 800a3da:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e2:	4605      	mov	r5, r0
 800a3e4:	0718      	lsls	r0, r3, #28
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	d45f      	bmi.n	800a4aa <__sflush_r+0xd2>
 800a3ea:	684b      	ldr	r3, [r1, #4]
 800a3ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	818a      	strh	r2, [r1, #12]
 800a3f4:	dc05      	bgt.n	800a402 <__sflush_r+0x2a>
 800a3f6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	dc02      	bgt.n	800a402 <__sflush_r+0x2a>
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a402:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a404:	2e00      	cmp	r6, #0
 800a406:	d0f9      	beq.n	800a3fc <__sflush_r+0x24>
 800a408:	2300      	movs	r3, #0
 800a40a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a40e:	682f      	ldr	r7, [r5, #0]
 800a410:	602b      	str	r3, [r5, #0]
 800a412:	d036      	beq.n	800a482 <__sflush_r+0xaa>
 800a414:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a416:	89a3      	ldrh	r3, [r4, #12]
 800a418:	075a      	lsls	r2, r3, #29
 800a41a:	d505      	bpl.n	800a428 <__sflush_r+0x50>
 800a41c:	6863      	ldr	r3, [r4, #4]
 800a41e:	1ac0      	subs	r0, r0, r3
 800a420:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a422:	b10b      	cbz	r3, 800a428 <__sflush_r+0x50>
 800a424:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a426:	1ac0      	subs	r0, r0, r3
 800a428:	2300      	movs	r3, #0
 800a42a:	4602      	mov	r2, r0
 800a42c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a42e:	69e1      	ldr	r1, [r4, #28]
 800a430:	4628      	mov	r0, r5
 800a432:	47b0      	blx	r6
 800a434:	1c43      	adds	r3, r0, #1
 800a436:	89a3      	ldrh	r3, [r4, #12]
 800a438:	d106      	bne.n	800a448 <__sflush_r+0x70>
 800a43a:	6829      	ldr	r1, [r5, #0]
 800a43c:	291d      	cmp	r1, #29
 800a43e:	d830      	bhi.n	800a4a2 <__sflush_r+0xca>
 800a440:	4a2b      	ldr	r2, [pc, #172]	; (800a4f0 <__sflush_r+0x118>)
 800a442:	40ca      	lsrs	r2, r1
 800a444:	07d6      	lsls	r6, r2, #31
 800a446:	d52c      	bpl.n	800a4a2 <__sflush_r+0xca>
 800a448:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a44c:	b21b      	sxth	r3, r3
 800a44e:	2200      	movs	r2, #0
 800a450:	6062      	str	r2, [r4, #4]
 800a452:	04d9      	lsls	r1, r3, #19
 800a454:	6922      	ldr	r2, [r4, #16]
 800a456:	81a3      	strh	r3, [r4, #12]
 800a458:	6022      	str	r2, [r4, #0]
 800a45a:	d504      	bpl.n	800a466 <__sflush_r+0x8e>
 800a45c:	1c42      	adds	r2, r0, #1
 800a45e:	d101      	bne.n	800a464 <__sflush_r+0x8c>
 800a460:	682b      	ldr	r3, [r5, #0]
 800a462:	b903      	cbnz	r3, 800a466 <__sflush_r+0x8e>
 800a464:	6520      	str	r0, [r4, #80]	; 0x50
 800a466:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a468:	602f      	str	r7, [r5, #0]
 800a46a:	2900      	cmp	r1, #0
 800a46c:	d0c6      	beq.n	800a3fc <__sflush_r+0x24>
 800a46e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a472:	4299      	cmp	r1, r3
 800a474:	d002      	beq.n	800a47c <__sflush_r+0xa4>
 800a476:	4628      	mov	r0, r5
 800a478:	f000 f938 	bl	800a6ec <_free_r>
 800a47c:	2000      	movs	r0, #0
 800a47e:	6320      	str	r0, [r4, #48]	; 0x30
 800a480:	e7bd      	b.n	800a3fe <__sflush_r+0x26>
 800a482:	69e1      	ldr	r1, [r4, #28]
 800a484:	2301      	movs	r3, #1
 800a486:	4628      	mov	r0, r5
 800a488:	47b0      	blx	r6
 800a48a:	1c41      	adds	r1, r0, #1
 800a48c:	d1c3      	bne.n	800a416 <__sflush_r+0x3e>
 800a48e:	682b      	ldr	r3, [r5, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d0c0      	beq.n	800a416 <__sflush_r+0x3e>
 800a494:	2b1d      	cmp	r3, #29
 800a496:	d001      	beq.n	800a49c <__sflush_r+0xc4>
 800a498:	2b16      	cmp	r3, #22
 800a49a:	d101      	bne.n	800a4a0 <__sflush_r+0xc8>
 800a49c:	602f      	str	r7, [r5, #0]
 800a49e:	e7ad      	b.n	800a3fc <__sflush_r+0x24>
 800a4a0:	89a3      	ldrh	r3, [r4, #12]
 800a4a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4a6:	81a3      	strh	r3, [r4, #12]
 800a4a8:	e7a9      	b.n	800a3fe <__sflush_r+0x26>
 800a4aa:	690f      	ldr	r7, [r1, #16]
 800a4ac:	2f00      	cmp	r7, #0
 800a4ae:	d0a5      	beq.n	800a3fc <__sflush_r+0x24>
 800a4b0:	079b      	lsls	r3, r3, #30
 800a4b2:	680e      	ldr	r6, [r1, #0]
 800a4b4:	bf08      	it	eq
 800a4b6:	694b      	ldreq	r3, [r1, #20]
 800a4b8:	600f      	str	r7, [r1, #0]
 800a4ba:	bf18      	it	ne
 800a4bc:	2300      	movne	r3, #0
 800a4be:	eba6 0807 	sub.w	r8, r6, r7
 800a4c2:	608b      	str	r3, [r1, #8]
 800a4c4:	f1b8 0f00 	cmp.w	r8, #0
 800a4c8:	dd98      	ble.n	800a3fc <__sflush_r+0x24>
 800a4ca:	69e1      	ldr	r1, [r4, #28]
 800a4cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a4ce:	4643      	mov	r3, r8
 800a4d0:	463a      	mov	r2, r7
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	47b0      	blx	r6
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	dc06      	bgt.n	800a4e8 <__sflush_r+0x110>
 800a4da:	89a3      	ldrh	r3, [r4, #12]
 800a4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e0:	81a3      	strh	r3, [r4, #12]
 800a4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e6:	e78a      	b.n	800a3fe <__sflush_r+0x26>
 800a4e8:	4407      	add	r7, r0
 800a4ea:	eba8 0800 	sub.w	r8, r8, r0
 800a4ee:	e7e9      	b.n	800a4c4 <__sflush_r+0xec>
 800a4f0:	20400001 	.word	0x20400001

0800a4f4 <_fflush_r>:
 800a4f4:	b538      	push	{r3, r4, r5, lr}
 800a4f6:	460c      	mov	r4, r1
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	b118      	cbz	r0, 800a504 <_fflush_r+0x10>
 800a4fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a4fe:	b90b      	cbnz	r3, 800a504 <_fflush_r+0x10>
 800a500:	f000 f864 	bl	800a5cc <__sinit>
 800a504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a508:	b1bb      	cbz	r3, 800a53a <_fflush_r+0x46>
 800a50a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a50c:	07d0      	lsls	r0, r2, #31
 800a50e:	d404      	bmi.n	800a51a <_fflush_r+0x26>
 800a510:	0599      	lsls	r1, r3, #22
 800a512:	d402      	bmi.n	800a51a <_fflush_r+0x26>
 800a514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a516:	f000 f9cf 	bl	800a8b8 <__retarget_lock_acquire_recursive>
 800a51a:	4628      	mov	r0, r5
 800a51c:	4621      	mov	r1, r4
 800a51e:	f7ff ff5b 	bl	800a3d8 <__sflush_r>
 800a522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a524:	07da      	lsls	r2, r3, #31
 800a526:	4605      	mov	r5, r0
 800a528:	d405      	bmi.n	800a536 <_fflush_r+0x42>
 800a52a:	89a3      	ldrh	r3, [r4, #12]
 800a52c:	059b      	lsls	r3, r3, #22
 800a52e:	d402      	bmi.n	800a536 <_fflush_r+0x42>
 800a530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a532:	f000 f9c2 	bl	800a8ba <__retarget_lock_release_recursive>
 800a536:	4628      	mov	r0, r5
 800a538:	bd38      	pop	{r3, r4, r5, pc}
 800a53a:	461d      	mov	r5, r3
 800a53c:	e7fb      	b.n	800a536 <_fflush_r+0x42>
	...

0800a540 <std>:
 800a540:	2300      	movs	r3, #0
 800a542:	b510      	push	{r4, lr}
 800a544:	4604      	mov	r4, r0
 800a546:	e9c0 3300 	strd	r3, r3, [r0]
 800a54a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a54e:	6083      	str	r3, [r0, #8]
 800a550:	8181      	strh	r1, [r0, #12]
 800a552:	6643      	str	r3, [r0, #100]	; 0x64
 800a554:	81c2      	strh	r2, [r0, #14]
 800a556:	6183      	str	r3, [r0, #24]
 800a558:	4619      	mov	r1, r3
 800a55a:	2208      	movs	r2, #8
 800a55c:	305c      	adds	r0, #92	; 0x5c
 800a55e:	f7fc fbe1 	bl	8006d24 <memset>
 800a562:	4b07      	ldr	r3, [pc, #28]	; (800a580 <std+0x40>)
 800a564:	6223      	str	r3, [r4, #32]
 800a566:	4b07      	ldr	r3, [pc, #28]	; (800a584 <std+0x44>)
 800a568:	6263      	str	r3, [r4, #36]	; 0x24
 800a56a:	4b07      	ldr	r3, [pc, #28]	; (800a588 <std+0x48>)
 800a56c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a56e:	4b07      	ldr	r3, [pc, #28]	; (800a58c <std+0x4c>)
 800a570:	61e4      	str	r4, [r4, #28]
 800a572:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a574:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a57c:	f000 b99a 	b.w	800a8b4 <__retarget_lock_init_recursive>
 800a580:	0800b53d 	.word	0x0800b53d
 800a584:	0800b55f 	.word	0x0800b55f
 800a588:	0800b597 	.word	0x0800b597
 800a58c:	0800b5bb 	.word	0x0800b5bb

0800a590 <_cleanup_r>:
 800a590:	4901      	ldr	r1, [pc, #4]	; (800a598 <_cleanup_r+0x8>)
 800a592:	f000 b96b 	b.w	800a86c <_fwalk_reent>
 800a596:	bf00      	nop
 800a598:	0800c249 	.word	0x0800c249

0800a59c <__sfp_lock_acquire>:
 800a59c:	4801      	ldr	r0, [pc, #4]	; (800a5a4 <__sfp_lock_acquire+0x8>)
 800a59e:	f000 b98b 	b.w	800a8b8 <__retarget_lock_acquire_recursive>
 800a5a2:	bf00      	nop
 800a5a4:	20000c38 	.word	0x20000c38

0800a5a8 <__sfp_lock_release>:
 800a5a8:	4801      	ldr	r0, [pc, #4]	; (800a5b0 <__sfp_lock_release+0x8>)
 800a5aa:	f000 b986 	b.w	800a8ba <__retarget_lock_release_recursive>
 800a5ae:	bf00      	nop
 800a5b0:	20000c38 	.word	0x20000c38

0800a5b4 <__sinit_lock_acquire>:
 800a5b4:	4801      	ldr	r0, [pc, #4]	; (800a5bc <__sinit_lock_acquire+0x8>)
 800a5b6:	f000 b97f 	b.w	800a8b8 <__retarget_lock_acquire_recursive>
 800a5ba:	bf00      	nop
 800a5bc:	20000c33 	.word	0x20000c33

0800a5c0 <__sinit_lock_release>:
 800a5c0:	4801      	ldr	r0, [pc, #4]	; (800a5c8 <__sinit_lock_release+0x8>)
 800a5c2:	f000 b97a 	b.w	800a8ba <__retarget_lock_release_recursive>
 800a5c6:	bf00      	nop
 800a5c8:	20000c33 	.word	0x20000c33

0800a5cc <__sinit>:
 800a5cc:	b510      	push	{r4, lr}
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	f7ff fff0 	bl	800a5b4 <__sinit_lock_acquire>
 800a5d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a5d6:	b11a      	cbz	r2, 800a5e0 <__sinit+0x14>
 800a5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5dc:	f7ff bff0 	b.w	800a5c0 <__sinit_lock_release>
 800a5e0:	4b0d      	ldr	r3, [pc, #52]	; (800a618 <__sinit+0x4c>)
 800a5e2:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800a5ea:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800a5ee:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800a5f2:	6860      	ldr	r0, [r4, #4]
 800a5f4:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800a5f8:	2104      	movs	r1, #4
 800a5fa:	f7ff ffa1 	bl	800a540 <std>
 800a5fe:	68a0      	ldr	r0, [r4, #8]
 800a600:	2201      	movs	r2, #1
 800a602:	2109      	movs	r1, #9
 800a604:	f7ff ff9c 	bl	800a540 <std>
 800a608:	68e0      	ldr	r0, [r4, #12]
 800a60a:	2202      	movs	r2, #2
 800a60c:	2112      	movs	r1, #18
 800a60e:	f7ff ff97 	bl	800a540 <std>
 800a612:	2301      	movs	r3, #1
 800a614:	63a3      	str	r3, [r4, #56]	; 0x38
 800a616:	e7df      	b.n	800a5d8 <__sinit+0xc>
 800a618:	0800a591 	.word	0x0800a591

0800a61c <__libc_fini_array>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4d07      	ldr	r5, [pc, #28]	; (800a63c <__libc_fini_array+0x20>)
 800a620:	4c07      	ldr	r4, [pc, #28]	; (800a640 <__libc_fini_array+0x24>)
 800a622:	1b64      	subs	r4, r4, r5
 800a624:	10a4      	asrs	r4, r4, #2
 800a626:	b91c      	cbnz	r4, 800a630 <__libc_fini_array+0x14>
 800a628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a62c:	f002 bb0a 	b.w	800cc44 <_fini>
 800a630:	3c01      	subs	r4, #1
 800a632:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800a636:	4798      	blx	r3
 800a638:	e7f5      	b.n	800a626 <__libc_fini_array+0xa>
 800a63a:	bf00      	nop
 800a63c:	0800d0fc 	.word	0x0800d0fc
 800a640:	0800d100 	.word	0x0800d100

0800a644 <_malloc_trim_r>:
 800a644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a648:	4606      	mov	r6, r0
 800a64a:	2008      	movs	r0, #8
 800a64c:	460c      	mov	r4, r1
 800a64e:	f001 f846 	bl	800b6de <sysconf>
 800a652:	4f23      	ldr	r7, [pc, #140]	; (800a6e0 <_malloc_trim_r+0x9c>)
 800a654:	4680      	mov	r8, r0
 800a656:	4630      	mov	r0, r6
 800a658:	f000 fbec 	bl	800ae34 <__malloc_lock>
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	685d      	ldr	r5, [r3, #4]
 800a660:	f025 0503 	bic.w	r5, r5, #3
 800a664:	1b2c      	subs	r4, r5, r4
 800a666:	3c11      	subs	r4, #17
 800a668:	4444      	add	r4, r8
 800a66a:	fbb4 f4f8 	udiv	r4, r4, r8
 800a66e:	3c01      	subs	r4, #1
 800a670:	fb08 f404 	mul.w	r4, r8, r4
 800a674:	45a0      	cmp	r8, r4
 800a676:	dd05      	ble.n	800a684 <_malloc_trim_r+0x40>
 800a678:	4630      	mov	r0, r6
 800a67a:	f000 fbe1 	bl	800ae40 <__malloc_unlock>
 800a67e:	2000      	movs	r0, #0
 800a680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a684:	2100      	movs	r1, #0
 800a686:	4630      	mov	r0, r6
 800a688:	f000 ff48 	bl	800b51c <_sbrk_r>
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	442b      	add	r3, r5
 800a690:	4298      	cmp	r0, r3
 800a692:	d1f1      	bne.n	800a678 <_malloc_trim_r+0x34>
 800a694:	4261      	negs	r1, r4
 800a696:	4630      	mov	r0, r6
 800a698:	f000 ff40 	bl	800b51c <_sbrk_r>
 800a69c:	3001      	adds	r0, #1
 800a69e:	d110      	bne.n	800a6c2 <_malloc_trim_r+0x7e>
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f000 ff3a 	bl	800b51c <_sbrk_r>
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	1a83      	subs	r3, r0, r2
 800a6ac:	2b0f      	cmp	r3, #15
 800a6ae:	dde3      	ble.n	800a678 <_malloc_trim_r+0x34>
 800a6b0:	490c      	ldr	r1, [pc, #48]	; (800a6e4 <_malloc_trim_r+0xa0>)
 800a6b2:	6809      	ldr	r1, [r1, #0]
 800a6b4:	1a40      	subs	r0, r0, r1
 800a6b6:	490c      	ldr	r1, [pc, #48]	; (800a6e8 <_malloc_trim_r+0xa4>)
 800a6b8:	f043 0301 	orr.w	r3, r3, #1
 800a6bc:	6008      	str	r0, [r1, #0]
 800a6be:	6053      	str	r3, [r2, #4]
 800a6c0:	e7da      	b.n	800a678 <_malloc_trim_r+0x34>
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	4a08      	ldr	r2, [pc, #32]	; (800a6e8 <_malloc_trim_r+0xa4>)
 800a6c6:	1b2d      	subs	r5, r5, r4
 800a6c8:	f045 0501 	orr.w	r5, r5, #1
 800a6cc:	605d      	str	r5, [r3, #4]
 800a6ce:	6813      	ldr	r3, [r2, #0]
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	1b1c      	subs	r4, r3, r4
 800a6d4:	6014      	str	r4, [r2, #0]
 800a6d6:	f000 fbb3 	bl	800ae40 <__malloc_unlock>
 800a6da:	2001      	movs	r0, #1
 800a6dc:	e7d0      	b.n	800a680 <_malloc_trim_r+0x3c>
 800a6de:	bf00      	nop
 800a6e0:	2000046c 	.word	0x2000046c
 800a6e4:	20000874 	.word	0x20000874
 800a6e8:	20000a10 	.word	0x20000a10

0800a6ec <_free_r>:
 800a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ee:	4605      	mov	r5, r0
 800a6f0:	460f      	mov	r7, r1
 800a6f2:	2900      	cmp	r1, #0
 800a6f4:	f000 80b1 	beq.w	800a85a <_free_r+0x16e>
 800a6f8:	f000 fb9c 	bl	800ae34 <__malloc_lock>
 800a6fc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a700:	4856      	ldr	r0, [pc, #344]	; (800a85c <_free_r+0x170>)
 800a702:	f022 0401 	bic.w	r4, r2, #1
 800a706:	f1a7 0308 	sub.w	r3, r7, #8
 800a70a:	eb03 0c04 	add.w	ip, r3, r4
 800a70e:	6881      	ldr	r1, [r0, #8]
 800a710:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800a714:	4561      	cmp	r1, ip
 800a716:	f026 0603 	bic.w	r6, r6, #3
 800a71a:	f002 0201 	and.w	r2, r2, #1
 800a71e:	d11b      	bne.n	800a758 <_free_r+0x6c>
 800a720:	4434      	add	r4, r6
 800a722:	b93a      	cbnz	r2, 800a734 <_free_r+0x48>
 800a724:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800a728:	1a9b      	subs	r3, r3, r2
 800a72a:	4414      	add	r4, r2
 800a72c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800a730:	60ca      	str	r2, [r1, #12]
 800a732:	6091      	str	r1, [r2, #8]
 800a734:	f044 0201 	orr.w	r2, r4, #1
 800a738:	605a      	str	r2, [r3, #4]
 800a73a:	6083      	str	r3, [r0, #8]
 800a73c:	4b48      	ldr	r3, [pc, #288]	; (800a860 <_free_r+0x174>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	42a3      	cmp	r3, r4
 800a742:	d804      	bhi.n	800a74e <_free_r+0x62>
 800a744:	4b47      	ldr	r3, [pc, #284]	; (800a864 <_free_r+0x178>)
 800a746:	4628      	mov	r0, r5
 800a748:	6819      	ldr	r1, [r3, #0]
 800a74a:	f7ff ff7b 	bl	800a644 <_malloc_trim_r>
 800a74e:	4628      	mov	r0, r5
 800a750:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a754:	f000 bb74 	b.w	800ae40 <__malloc_unlock>
 800a758:	f8cc 6004 	str.w	r6, [ip, #4]
 800a75c:	2a00      	cmp	r2, #0
 800a75e:	d138      	bne.n	800a7d2 <_free_r+0xe6>
 800a760:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800a764:	1a5b      	subs	r3, r3, r1
 800a766:	440c      	add	r4, r1
 800a768:	6899      	ldr	r1, [r3, #8]
 800a76a:	f100 0708 	add.w	r7, r0, #8
 800a76e:	42b9      	cmp	r1, r7
 800a770:	d031      	beq.n	800a7d6 <_free_r+0xea>
 800a772:	68df      	ldr	r7, [r3, #12]
 800a774:	60cf      	str	r7, [r1, #12]
 800a776:	60b9      	str	r1, [r7, #8]
 800a778:	eb0c 0106 	add.w	r1, ip, r6
 800a77c:	6849      	ldr	r1, [r1, #4]
 800a77e:	07c9      	lsls	r1, r1, #31
 800a780:	d40b      	bmi.n	800a79a <_free_r+0xae>
 800a782:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800a786:	4434      	add	r4, r6
 800a788:	bb3a      	cbnz	r2, 800a7da <_free_r+0xee>
 800a78a:	4e37      	ldr	r6, [pc, #220]	; (800a868 <_free_r+0x17c>)
 800a78c:	42b1      	cmp	r1, r6
 800a78e:	d124      	bne.n	800a7da <_free_r+0xee>
 800a790:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a794:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800a798:	2201      	movs	r2, #1
 800a79a:	f044 0101 	orr.w	r1, r4, #1
 800a79e:	6059      	str	r1, [r3, #4]
 800a7a0:	511c      	str	r4, [r3, r4]
 800a7a2:	2a00      	cmp	r2, #0
 800a7a4:	d1d3      	bne.n	800a74e <_free_r+0x62>
 800a7a6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800a7aa:	d21b      	bcs.n	800a7e4 <_free_r+0xf8>
 800a7ac:	0961      	lsrs	r1, r4, #5
 800a7ae:	08e2      	lsrs	r2, r4, #3
 800a7b0:	2401      	movs	r4, #1
 800a7b2:	408c      	lsls	r4, r1
 800a7b4:	6841      	ldr	r1, [r0, #4]
 800a7b6:	3201      	adds	r2, #1
 800a7b8:	430c      	orrs	r4, r1
 800a7ba:	6044      	str	r4, [r0, #4]
 800a7bc:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800a7c0:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800a7c4:	3908      	subs	r1, #8
 800a7c6:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800a7ca:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800a7ce:	60e3      	str	r3, [r4, #12]
 800a7d0:	e7bd      	b.n	800a74e <_free_r+0x62>
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	e7d0      	b.n	800a778 <_free_r+0x8c>
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	e7ce      	b.n	800a778 <_free_r+0x8c>
 800a7da:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800a7de:	60ce      	str	r6, [r1, #12]
 800a7e0:	60b1      	str	r1, [r6, #8]
 800a7e2:	e7da      	b.n	800a79a <_free_r+0xae>
 800a7e4:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800a7e8:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800a7ec:	d214      	bcs.n	800a818 <_free_r+0x12c>
 800a7ee:	09a2      	lsrs	r2, r4, #6
 800a7f0:	3238      	adds	r2, #56	; 0x38
 800a7f2:	1c51      	adds	r1, r2, #1
 800a7f4:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800a7f8:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800a7fc:	428e      	cmp	r6, r1
 800a7fe:	d125      	bne.n	800a84c <_free_r+0x160>
 800a800:	2401      	movs	r4, #1
 800a802:	1092      	asrs	r2, r2, #2
 800a804:	fa04 f202 	lsl.w	r2, r4, r2
 800a808:	6844      	ldr	r4, [r0, #4]
 800a80a:	4322      	orrs	r2, r4
 800a80c:	6042      	str	r2, [r0, #4]
 800a80e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800a812:	60b3      	str	r3, [r6, #8]
 800a814:	60cb      	str	r3, [r1, #12]
 800a816:	e79a      	b.n	800a74e <_free_r+0x62>
 800a818:	2a14      	cmp	r2, #20
 800a81a:	d801      	bhi.n	800a820 <_free_r+0x134>
 800a81c:	325b      	adds	r2, #91	; 0x5b
 800a81e:	e7e8      	b.n	800a7f2 <_free_r+0x106>
 800a820:	2a54      	cmp	r2, #84	; 0x54
 800a822:	d802      	bhi.n	800a82a <_free_r+0x13e>
 800a824:	0b22      	lsrs	r2, r4, #12
 800a826:	326e      	adds	r2, #110	; 0x6e
 800a828:	e7e3      	b.n	800a7f2 <_free_r+0x106>
 800a82a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a82e:	d802      	bhi.n	800a836 <_free_r+0x14a>
 800a830:	0be2      	lsrs	r2, r4, #15
 800a832:	3277      	adds	r2, #119	; 0x77
 800a834:	e7dd      	b.n	800a7f2 <_free_r+0x106>
 800a836:	f240 5154 	movw	r1, #1364	; 0x554
 800a83a:	428a      	cmp	r2, r1
 800a83c:	bf9a      	itte	ls
 800a83e:	0ca2      	lsrls	r2, r4, #18
 800a840:	327c      	addls	r2, #124	; 0x7c
 800a842:	227e      	movhi	r2, #126	; 0x7e
 800a844:	e7d5      	b.n	800a7f2 <_free_r+0x106>
 800a846:	6889      	ldr	r1, [r1, #8]
 800a848:	428e      	cmp	r6, r1
 800a84a:	d004      	beq.n	800a856 <_free_r+0x16a>
 800a84c:	684a      	ldr	r2, [r1, #4]
 800a84e:	f022 0203 	bic.w	r2, r2, #3
 800a852:	42a2      	cmp	r2, r4
 800a854:	d8f7      	bhi.n	800a846 <_free_r+0x15a>
 800a856:	68ce      	ldr	r6, [r1, #12]
 800a858:	e7d9      	b.n	800a80e <_free_r+0x122>
 800a85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a85c:	2000046c 	.word	0x2000046c
 800a860:	20000878 	.word	0x20000878
 800a864:	20000a40 	.word	0x20000a40
 800a868:	20000474 	.word	0x20000474

0800a86c <_fwalk_reent>:
 800a86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a870:	4606      	mov	r6, r0
 800a872:	4688      	mov	r8, r1
 800a874:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800a878:	2700      	movs	r7, #0
 800a87a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a87e:	f1b9 0901 	subs.w	r9, r9, #1
 800a882:	d505      	bpl.n	800a890 <_fwalk_reent+0x24>
 800a884:	6824      	ldr	r4, [r4, #0]
 800a886:	2c00      	cmp	r4, #0
 800a888:	d1f7      	bne.n	800a87a <_fwalk_reent+0xe>
 800a88a:	4638      	mov	r0, r7
 800a88c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a890:	89ab      	ldrh	r3, [r5, #12]
 800a892:	2b01      	cmp	r3, #1
 800a894:	d907      	bls.n	800a8a6 <_fwalk_reent+0x3a>
 800a896:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a89a:	3301      	adds	r3, #1
 800a89c:	d003      	beq.n	800a8a6 <_fwalk_reent+0x3a>
 800a89e:	4629      	mov	r1, r5
 800a8a0:	4630      	mov	r0, r6
 800a8a2:	47c0      	blx	r8
 800a8a4:	4307      	orrs	r7, r0
 800a8a6:	3568      	adds	r5, #104	; 0x68
 800a8a8:	e7e9      	b.n	800a87e <_fwalk_reent+0x12>
	...

0800a8ac <_localeconv_r>:
 800a8ac:	4800      	ldr	r0, [pc, #0]	; (800a8b0 <_localeconv_r+0x4>)
 800a8ae:	4770      	bx	lr
 800a8b0:	2000096c 	.word	0x2000096c

0800a8b4 <__retarget_lock_init_recursive>:
 800a8b4:	4770      	bx	lr

0800a8b6 <__retarget_lock_close_recursive>:
 800a8b6:	4770      	bx	lr

0800a8b8 <__retarget_lock_acquire_recursive>:
 800a8b8:	4770      	bx	lr

0800a8ba <__retarget_lock_release_recursive>:
 800a8ba:	4770      	bx	lr

0800a8bc <__swhatbuf_r>:
 800a8bc:	b570      	push	{r4, r5, r6, lr}
 800a8be:	460e      	mov	r6, r1
 800a8c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c4:	2900      	cmp	r1, #0
 800a8c6:	b096      	sub	sp, #88	; 0x58
 800a8c8:	4614      	mov	r4, r2
 800a8ca:	461d      	mov	r5, r3
 800a8cc:	da09      	bge.n	800a8e2 <__swhatbuf_r+0x26>
 800a8ce:	89b3      	ldrh	r3, [r6, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a8d6:	602a      	str	r2, [r5, #0]
 800a8d8:	d116      	bne.n	800a908 <__swhatbuf_r+0x4c>
 800a8da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8de:	6023      	str	r3, [r4, #0]
 800a8e0:	e015      	b.n	800a90e <__swhatbuf_r+0x52>
 800a8e2:	466a      	mov	r2, sp
 800a8e4:	f001 fd86 	bl	800c3f4 <_fstat_r>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	dbf0      	blt.n	800a8ce <__swhatbuf_r+0x12>
 800a8ec:	9a01      	ldr	r2, [sp, #4]
 800a8ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a8f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a8f6:	425a      	negs	r2, r3
 800a8f8:	415a      	adcs	r2, r3
 800a8fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8fe:	602a      	str	r2, [r5, #0]
 800a900:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	e002      	b.n	800a90e <__swhatbuf_r+0x52>
 800a908:	2340      	movs	r3, #64	; 0x40
 800a90a:	6023      	str	r3, [r4, #0]
 800a90c:	4610      	mov	r0, r2
 800a90e:	b016      	add	sp, #88	; 0x58
 800a910:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a914 <__smakebuf_r>:
 800a914:	898b      	ldrh	r3, [r1, #12]
 800a916:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a918:	079d      	lsls	r5, r3, #30
 800a91a:	4606      	mov	r6, r0
 800a91c:	460c      	mov	r4, r1
 800a91e:	d507      	bpl.n	800a930 <__smakebuf_r+0x1c>
 800a920:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800a924:	6023      	str	r3, [r4, #0]
 800a926:	6123      	str	r3, [r4, #16]
 800a928:	2301      	movs	r3, #1
 800a92a:	6163      	str	r3, [r4, #20]
 800a92c:	b002      	add	sp, #8
 800a92e:	bd70      	pop	{r4, r5, r6, pc}
 800a930:	ab01      	add	r3, sp, #4
 800a932:	466a      	mov	r2, sp
 800a934:	f7ff ffc2 	bl	800a8bc <__swhatbuf_r>
 800a938:	9900      	ldr	r1, [sp, #0]
 800a93a:	4605      	mov	r5, r0
 800a93c:	4630      	mov	r0, r6
 800a93e:	f000 f829 	bl	800a994 <_malloc_r>
 800a942:	b948      	cbnz	r0, 800a958 <__smakebuf_r+0x44>
 800a944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a948:	059a      	lsls	r2, r3, #22
 800a94a:	d4ef      	bmi.n	800a92c <__smakebuf_r+0x18>
 800a94c:	f023 0303 	bic.w	r3, r3, #3
 800a950:	f043 0302 	orr.w	r3, r3, #2
 800a954:	81a3      	strh	r3, [r4, #12]
 800a956:	e7e3      	b.n	800a920 <__smakebuf_r+0xc>
 800a958:	4b0d      	ldr	r3, [pc, #52]	; (800a990 <__smakebuf_r+0x7c>)
 800a95a:	63f3      	str	r3, [r6, #60]	; 0x3c
 800a95c:	89a3      	ldrh	r3, [r4, #12]
 800a95e:	6020      	str	r0, [r4, #0]
 800a960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a964:	81a3      	strh	r3, [r4, #12]
 800a966:	9b00      	ldr	r3, [sp, #0]
 800a968:	6163      	str	r3, [r4, #20]
 800a96a:	9b01      	ldr	r3, [sp, #4]
 800a96c:	6120      	str	r0, [r4, #16]
 800a96e:	b15b      	cbz	r3, 800a988 <__smakebuf_r+0x74>
 800a970:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a974:	4630      	mov	r0, r6
 800a976:	f001 fe99 	bl	800c6ac <_isatty_r>
 800a97a:	b128      	cbz	r0, 800a988 <__smakebuf_r+0x74>
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	f023 0303 	bic.w	r3, r3, #3
 800a982:	f043 0301 	orr.w	r3, r3, #1
 800a986:	81a3      	strh	r3, [r4, #12]
 800a988:	89a0      	ldrh	r0, [r4, #12]
 800a98a:	4305      	orrs	r5, r0
 800a98c:	81a5      	strh	r5, [r4, #12]
 800a98e:	e7cd      	b.n	800a92c <__smakebuf_r+0x18>
 800a990:	0800a591 	.word	0x0800a591

0800a994 <_malloc_r>:
 800a994:	f101 030b 	add.w	r3, r1, #11
 800a998:	2b16      	cmp	r3, #22
 800a99a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a99e:	4605      	mov	r5, r0
 800a9a0:	d906      	bls.n	800a9b0 <_malloc_r+0x1c>
 800a9a2:	f033 0707 	bics.w	r7, r3, #7
 800a9a6:	d504      	bpl.n	800a9b2 <_malloc_r+0x1e>
 800a9a8:	230c      	movs	r3, #12
 800a9aa:	602b      	str	r3, [r5, #0]
 800a9ac:	2400      	movs	r4, #0
 800a9ae:	e1ae      	b.n	800ad0e <_malloc_r+0x37a>
 800a9b0:	2710      	movs	r7, #16
 800a9b2:	42b9      	cmp	r1, r7
 800a9b4:	d8f8      	bhi.n	800a9a8 <_malloc_r+0x14>
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f000 fa3c 	bl	800ae34 <__malloc_lock>
 800a9bc:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800a9c0:	4ec3      	ldr	r6, [pc, #780]	; (800acd0 <_malloc_r+0x33c>)
 800a9c2:	d238      	bcs.n	800aa36 <_malloc_r+0xa2>
 800a9c4:	f107 0208 	add.w	r2, r7, #8
 800a9c8:	4432      	add	r2, r6
 800a9ca:	f1a2 0108 	sub.w	r1, r2, #8
 800a9ce:	6854      	ldr	r4, [r2, #4]
 800a9d0:	428c      	cmp	r4, r1
 800a9d2:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800a9d6:	d102      	bne.n	800a9de <_malloc_r+0x4a>
 800a9d8:	68d4      	ldr	r4, [r2, #12]
 800a9da:	42a2      	cmp	r2, r4
 800a9dc:	d010      	beq.n	800aa00 <_malloc_r+0x6c>
 800a9de:	6863      	ldr	r3, [r4, #4]
 800a9e0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800a9e4:	f023 0303 	bic.w	r3, r3, #3
 800a9e8:	60ca      	str	r2, [r1, #12]
 800a9ea:	4423      	add	r3, r4
 800a9ec:	6091      	str	r1, [r2, #8]
 800a9ee:	685a      	ldr	r2, [r3, #4]
 800a9f0:	f042 0201 	orr.w	r2, r2, #1
 800a9f4:	605a      	str	r2, [r3, #4]
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f000 fa22 	bl	800ae40 <__malloc_unlock>
 800a9fc:	3408      	adds	r4, #8
 800a9fe:	e186      	b.n	800ad0e <_malloc_r+0x37a>
 800aa00:	3302      	adds	r3, #2
 800aa02:	4ab4      	ldr	r2, [pc, #720]	; (800acd4 <_malloc_r+0x340>)
 800aa04:	6934      	ldr	r4, [r6, #16]
 800aa06:	4294      	cmp	r4, r2
 800aa08:	4611      	mov	r1, r2
 800aa0a:	d077      	beq.n	800aafc <_malloc_r+0x168>
 800aa0c:	6860      	ldr	r0, [r4, #4]
 800aa0e:	f020 0c03 	bic.w	ip, r0, #3
 800aa12:	ebac 0007 	sub.w	r0, ip, r7
 800aa16:	280f      	cmp	r0, #15
 800aa18:	dd48      	ble.n	800aaac <_malloc_r+0x118>
 800aa1a:	19e1      	adds	r1, r4, r7
 800aa1c:	f040 0301 	orr.w	r3, r0, #1
 800aa20:	f047 0701 	orr.w	r7, r7, #1
 800aa24:	6067      	str	r7, [r4, #4]
 800aa26:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800aa2a:	e9c1 2202 	strd	r2, r2, [r1, #8]
 800aa2e:	604b      	str	r3, [r1, #4]
 800aa30:	f844 000c 	str.w	r0, [r4, ip]
 800aa34:	e7df      	b.n	800a9f6 <_malloc_r+0x62>
 800aa36:	0a7b      	lsrs	r3, r7, #9
 800aa38:	d02a      	beq.n	800aa90 <_malloc_r+0xfc>
 800aa3a:	2b04      	cmp	r3, #4
 800aa3c:	d812      	bhi.n	800aa64 <_malloc_r+0xd0>
 800aa3e:	09bb      	lsrs	r3, r7, #6
 800aa40:	3338      	adds	r3, #56	; 0x38
 800aa42:	1c5a      	adds	r2, r3, #1
 800aa44:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800aa48:	f1a2 0c08 	sub.w	ip, r2, #8
 800aa4c:	6854      	ldr	r4, [r2, #4]
 800aa4e:	4564      	cmp	r4, ip
 800aa50:	d006      	beq.n	800aa60 <_malloc_r+0xcc>
 800aa52:	6862      	ldr	r2, [r4, #4]
 800aa54:	f022 0203 	bic.w	r2, r2, #3
 800aa58:	1bd0      	subs	r0, r2, r7
 800aa5a:	280f      	cmp	r0, #15
 800aa5c:	dd1c      	ble.n	800aa98 <_malloc_r+0x104>
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	3301      	adds	r3, #1
 800aa62:	e7ce      	b.n	800aa02 <_malloc_r+0x6e>
 800aa64:	2b14      	cmp	r3, #20
 800aa66:	d801      	bhi.n	800aa6c <_malloc_r+0xd8>
 800aa68:	335b      	adds	r3, #91	; 0x5b
 800aa6a:	e7ea      	b.n	800aa42 <_malloc_r+0xae>
 800aa6c:	2b54      	cmp	r3, #84	; 0x54
 800aa6e:	d802      	bhi.n	800aa76 <_malloc_r+0xe2>
 800aa70:	0b3b      	lsrs	r3, r7, #12
 800aa72:	336e      	adds	r3, #110	; 0x6e
 800aa74:	e7e5      	b.n	800aa42 <_malloc_r+0xae>
 800aa76:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800aa7a:	d802      	bhi.n	800aa82 <_malloc_r+0xee>
 800aa7c:	0bfb      	lsrs	r3, r7, #15
 800aa7e:	3377      	adds	r3, #119	; 0x77
 800aa80:	e7df      	b.n	800aa42 <_malloc_r+0xae>
 800aa82:	f240 5254 	movw	r2, #1364	; 0x554
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d804      	bhi.n	800aa94 <_malloc_r+0x100>
 800aa8a:	0cbb      	lsrs	r3, r7, #18
 800aa8c:	337c      	adds	r3, #124	; 0x7c
 800aa8e:	e7d8      	b.n	800aa42 <_malloc_r+0xae>
 800aa90:	233f      	movs	r3, #63	; 0x3f
 800aa92:	e7d6      	b.n	800aa42 <_malloc_r+0xae>
 800aa94:	237e      	movs	r3, #126	; 0x7e
 800aa96:	e7d4      	b.n	800aa42 <_malloc_r+0xae>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	68e1      	ldr	r1, [r4, #12]
 800aa9c:	db04      	blt.n	800aaa8 <_malloc_r+0x114>
 800aa9e:	68a3      	ldr	r3, [r4, #8]
 800aaa0:	60d9      	str	r1, [r3, #12]
 800aaa2:	608b      	str	r3, [r1, #8]
 800aaa4:	18a3      	adds	r3, r4, r2
 800aaa6:	e7a2      	b.n	800a9ee <_malloc_r+0x5a>
 800aaa8:	460c      	mov	r4, r1
 800aaaa:	e7d0      	b.n	800aa4e <_malloc_r+0xba>
 800aaac:	2800      	cmp	r0, #0
 800aaae:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800aab2:	db07      	blt.n	800aac4 <_malloc_r+0x130>
 800aab4:	44a4      	add	ip, r4
 800aab6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800aaba:	f043 0301 	orr.w	r3, r3, #1
 800aabe:	f8cc 3004 	str.w	r3, [ip, #4]
 800aac2:	e798      	b.n	800a9f6 <_malloc_r+0x62>
 800aac4:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800aac8:	6870      	ldr	r0, [r6, #4]
 800aaca:	f080 809e 	bcs.w	800ac0a <_malloc_r+0x276>
 800aace:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800aad2:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800aad6:	f04f 0c01 	mov.w	ip, #1
 800aada:	3201      	adds	r2, #1
 800aadc:	fa0c fc0e 	lsl.w	ip, ip, lr
 800aae0:	ea4c 0000 	orr.w	r0, ip, r0
 800aae4:	6070      	str	r0, [r6, #4]
 800aae6:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800aaea:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800aaee:	3808      	subs	r0, #8
 800aaf0:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800aaf4:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800aaf8:	f8cc 400c 	str.w	r4, [ip, #12]
 800aafc:	2001      	movs	r0, #1
 800aafe:	109a      	asrs	r2, r3, #2
 800ab00:	fa00 f202 	lsl.w	r2, r0, r2
 800ab04:	6870      	ldr	r0, [r6, #4]
 800ab06:	4290      	cmp	r0, r2
 800ab08:	d326      	bcc.n	800ab58 <_malloc_r+0x1c4>
 800ab0a:	4210      	tst	r0, r2
 800ab0c:	d106      	bne.n	800ab1c <_malloc_r+0x188>
 800ab0e:	f023 0303 	bic.w	r3, r3, #3
 800ab12:	0052      	lsls	r2, r2, #1
 800ab14:	4210      	tst	r0, r2
 800ab16:	f103 0304 	add.w	r3, r3, #4
 800ab1a:	d0fa      	beq.n	800ab12 <_malloc_r+0x17e>
 800ab1c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800ab20:	46c1      	mov	r9, r8
 800ab22:	469e      	mov	lr, r3
 800ab24:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800ab28:	454c      	cmp	r4, r9
 800ab2a:	f040 80b3 	bne.w	800ac94 <_malloc_r+0x300>
 800ab2e:	f10e 0e01 	add.w	lr, lr, #1
 800ab32:	f01e 0f03 	tst.w	lr, #3
 800ab36:	f109 0908 	add.w	r9, r9, #8
 800ab3a:	d1f3      	bne.n	800ab24 <_malloc_r+0x190>
 800ab3c:	0798      	lsls	r0, r3, #30
 800ab3e:	f040 80ec 	bne.w	800ad1a <_malloc_r+0x386>
 800ab42:	6873      	ldr	r3, [r6, #4]
 800ab44:	ea23 0302 	bic.w	r3, r3, r2
 800ab48:	6073      	str	r3, [r6, #4]
 800ab4a:	6870      	ldr	r0, [r6, #4]
 800ab4c:	0052      	lsls	r2, r2, #1
 800ab4e:	4290      	cmp	r0, r2
 800ab50:	d302      	bcc.n	800ab58 <_malloc_r+0x1c4>
 800ab52:	2a00      	cmp	r2, #0
 800ab54:	f040 80ee 	bne.w	800ad34 <_malloc_r+0x3a0>
 800ab58:	f8d6 b008 	ldr.w	fp, [r6, #8]
 800ab5c:	f8db 1004 	ldr.w	r1, [fp, #4]
 800ab60:	f021 0903 	bic.w	r9, r1, #3
 800ab64:	45b9      	cmp	r9, r7
 800ab66:	d304      	bcc.n	800ab72 <_malloc_r+0x1de>
 800ab68:	eba9 0207 	sub.w	r2, r9, r7
 800ab6c:	2a0f      	cmp	r2, #15
 800ab6e:	f300 8149 	bgt.w	800ae04 <_malloc_r+0x470>
 800ab72:	4a59      	ldr	r2, [pc, #356]	; (800acd8 <_malloc_r+0x344>)
 800ab74:	6811      	ldr	r1, [r2, #0]
 800ab76:	3110      	adds	r1, #16
 800ab78:	eb0b 0309 	add.w	r3, fp, r9
 800ab7c:	4439      	add	r1, r7
 800ab7e:	2008      	movs	r0, #8
 800ab80:	9301      	str	r3, [sp, #4]
 800ab82:	9100      	str	r1, [sp, #0]
 800ab84:	f000 fdab 	bl	800b6de <sysconf>
 800ab88:	4a54      	ldr	r2, [pc, #336]	; (800acdc <_malloc_r+0x348>)
 800ab8a:	e9dd 1300 	ldrd	r1, r3, [sp]
 800ab8e:	4680      	mov	r8, r0
 800ab90:	6810      	ldr	r0, [r2, #0]
 800ab92:	3001      	adds	r0, #1
 800ab94:	bf1f      	itttt	ne
 800ab96:	f101 31ff 	addne.w	r1, r1, #4294967295
 800ab9a:	4441      	addne	r1, r8
 800ab9c:	f1c8 0000 	rsbne	r0, r8, #0
 800aba0:	4001      	andne	r1, r0
 800aba2:	4628      	mov	r0, r5
 800aba4:	e9cd 1300 	strd	r1, r3, [sp]
 800aba8:	f000 fcb8 	bl	800b51c <_sbrk_r>
 800abac:	1c42      	adds	r2, r0, #1
 800abae:	4604      	mov	r4, r0
 800abb0:	f000 80fc 	beq.w	800adac <_malloc_r+0x418>
 800abb4:	9b01      	ldr	r3, [sp, #4]
 800abb6:	9900      	ldr	r1, [sp, #0]
 800abb8:	4a48      	ldr	r2, [pc, #288]	; (800acdc <_malloc_r+0x348>)
 800abba:	4283      	cmp	r3, r0
 800abbc:	d902      	bls.n	800abc4 <_malloc_r+0x230>
 800abbe:	45b3      	cmp	fp, r6
 800abc0:	f040 80f4 	bne.w	800adac <_malloc_r+0x418>
 800abc4:	f8df a120 	ldr.w	sl, [pc, #288]	; 800ace8 <_malloc_r+0x354>
 800abc8:	f8da 0000 	ldr.w	r0, [sl]
 800abcc:	42a3      	cmp	r3, r4
 800abce:	eb00 0e01 	add.w	lr, r0, r1
 800abd2:	f8ca e000 	str.w	lr, [sl]
 800abd6:	f108 3cff 	add.w	ip, r8, #4294967295
 800abda:	f040 80ad 	bne.w	800ad38 <_malloc_r+0x3a4>
 800abde:	ea13 0f0c 	tst.w	r3, ip
 800abe2:	f040 80a9 	bne.w	800ad38 <_malloc_r+0x3a4>
 800abe6:	68b3      	ldr	r3, [r6, #8]
 800abe8:	4449      	add	r1, r9
 800abea:	f041 0101 	orr.w	r1, r1, #1
 800abee:	6059      	str	r1, [r3, #4]
 800abf0:	4a3b      	ldr	r2, [pc, #236]	; (800ace0 <_malloc_r+0x34c>)
 800abf2:	f8da 3000 	ldr.w	r3, [sl]
 800abf6:	6811      	ldr	r1, [r2, #0]
 800abf8:	428b      	cmp	r3, r1
 800abfa:	bf88      	it	hi
 800abfc:	6013      	strhi	r3, [r2, #0]
 800abfe:	4a39      	ldr	r2, [pc, #228]	; (800ace4 <_malloc_r+0x350>)
 800ac00:	6811      	ldr	r1, [r2, #0]
 800ac02:	428b      	cmp	r3, r1
 800ac04:	bf88      	it	hi
 800ac06:	6013      	strhi	r3, [r2, #0]
 800ac08:	e0d0      	b.n	800adac <_malloc_r+0x418>
 800ac0a:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800ac0e:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800ac12:	d218      	bcs.n	800ac46 <_malloc_r+0x2b2>
 800ac14:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800ac18:	3238      	adds	r2, #56	; 0x38
 800ac1a:	f102 0e01 	add.w	lr, r2, #1
 800ac1e:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800ac22:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800ac26:	45f0      	cmp	r8, lr
 800ac28:	d12b      	bne.n	800ac82 <_malloc_r+0x2ee>
 800ac2a:	1092      	asrs	r2, r2, #2
 800ac2c:	f04f 0c01 	mov.w	ip, #1
 800ac30:	fa0c f202 	lsl.w	r2, ip, r2
 800ac34:	4310      	orrs	r0, r2
 800ac36:	6070      	str	r0, [r6, #4]
 800ac38:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800ac3c:	f8c8 4008 	str.w	r4, [r8, #8]
 800ac40:	f8ce 400c 	str.w	r4, [lr, #12]
 800ac44:	e75a      	b.n	800aafc <_malloc_r+0x168>
 800ac46:	2a14      	cmp	r2, #20
 800ac48:	d801      	bhi.n	800ac4e <_malloc_r+0x2ba>
 800ac4a:	325b      	adds	r2, #91	; 0x5b
 800ac4c:	e7e5      	b.n	800ac1a <_malloc_r+0x286>
 800ac4e:	2a54      	cmp	r2, #84	; 0x54
 800ac50:	d803      	bhi.n	800ac5a <_malloc_r+0x2c6>
 800ac52:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800ac56:	326e      	adds	r2, #110	; 0x6e
 800ac58:	e7df      	b.n	800ac1a <_malloc_r+0x286>
 800ac5a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800ac5e:	d803      	bhi.n	800ac68 <_malloc_r+0x2d4>
 800ac60:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800ac64:	3277      	adds	r2, #119	; 0x77
 800ac66:	e7d8      	b.n	800ac1a <_malloc_r+0x286>
 800ac68:	f240 5e54 	movw	lr, #1364	; 0x554
 800ac6c:	4572      	cmp	r2, lr
 800ac6e:	bf9a      	itte	ls
 800ac70:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800ac74:	327c      	addls	r2, #124	; 0x7c
 800ac76:	227e      	movhi	r2, #126	; 0x7e
 800ac78:	e7cf      	b.n	800ac1a <_malloc_r+0x286>
 800ac7a:	f8de e008 	ldr.w	lr, [lr, #8]
 800ac7e:	45f0      	cmp	r8, lr
 800ac80:	d005      	beq.n	800ac8e <_malloc_r+0x2fa>
 800ac82:	f8de 2004 	ldr.w	r2, [lr, #4]
 800ac86:	f022 0203 	bic.w	r2, r2, #3
 800ac8a:	4562      	cmp	r2, ip
 800ac8c:	d8f5      	bhi.n	800ac7a <_malloc_r+0x2e6>
 800ac8e:	f8de 800c 	ldr.w	r8, [lr, #12]
 800ac92:	e7d1      	b.n	800ac38 <_malloc_r+0x2a4>
 800ac94:	6860      	ldr	r0, [r4, #4]
 800ac96:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800ac9a:	f020 0003 	bic.w	r0, r0, #3
 800ac9e:	eba0 0a07 	sub.w	sl, r0, r7
 800aca2:	f1ba 0f0f 	cmp.w	sl, #15
 800aca6:	dd21      	ble.n	800acec <_malloc_r+0x358>
 800aca8:	68a3      	ldr	r3, [r4, #8]
 800acaa:	19e2      	adds	r2, r4, r7
 800acac:	f047 0701 	orr.w	r7, r7, #1
 800acb0:	6067      	str	r7, [r4, #4]
 800acb2:	f8c3 c00c 	str.w	ip, [r3, #12]
 800acb6:	f8cc 3008 	str.w	r3, [ip, #8]
 800acba:	f04a 0301 	orr.w	r3, sl, #1
 800acbe:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800acc2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800acc6:	6053      	str	r3, [r2, #4]
 800acc8:	f844 a000 	str.w	sl, [r4, r0]
 800accc:	e693      	b.n	800a9f6 <_malloc_r+0x62>
 800acce:	bf00      	nop
 800acd0:	2000046c 	.word	0x2000046c
 800acd4:	20000474 	.word	0x20000474
 800acd8:	20000a40 	.word	0x20000a40
 800acdc:	20000874 	.word	0x20000874
 800ace0:	20000a38 	.word	0x20000a38
 800ace4:	20000a3c 	.word	0x20000a3c
 800ace8:	20000a10 	.word	0x20000a10
 800acec:	f1ba 0f00 	cmp.w	sl, #0
 800acf0:	db11      	blt.n	800ad16 <_malloc_r+0x382>
 800acf2:	4420      	add	r0, r4
 800acf4:	6843      	ldr	r3, [r0, #4]
 800acf6:	f043 0301 	orr.w	r3, r3, #1
 800acfa:	6043      	str	r3, [r0, #4]
 800acfc:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800ad00:	4628      	mov	r0, r5
 800ad02:	f8c3 c00c 	str.w	ip, [r3, #12]
 800ad06:	f8cc 3008 	str.w	r3, [ip, #8]
 800ad0a:	f000 f899 	bl	800ae40 <__malloc_unlock>
 800ad0e:	4620      	mov	r0, r4
 800ad10:	b003      	add	sp, #12
 800ad12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad16:	4664      	mov	r4, ip
 800ad18:	e706      	b.n	800ab28 <_malloc_r+0x194>
 800ad1a:	f858 0908 	ldr.w	r0, [r8], #-8
 800ad1e:	4540      	cmp	r0, r8
 800ad20:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad24:	f43f af0a 	beq.w	800ab3c <_malloc_r+0x1a8>
 800ad28:	e70f      	b.n	800ab4a <_malloc_r+0x1b6>
 800ad2a:	3304      	adds	r3, #4
 800ad2c:	0052      	lsls	r2, r2, #1
 800ad2e:	4210      	tst	r0, r2
 800ad30:	d0fb      	beq.n	800ad2a <_malloc_r+0x396>
 800ad32:	e6f3      	b.n	800ab1c <_malloc_r+0x188>
 800ad34:	4673      	mov	r3, lr
 800ad36:	e7fa      	b.n	800ad2e <_malloc_r+0x39a>
 800ad38:	6810      	ldr	r0, [r2, #0]
 800ad3a:	3001      	adds	r0, #1
 800ad3c:	bf1b      	ittet	ne
 800ad3e:	1ae3      	subne	r3, r4, r3
 800ad40:	4473      	addne	r3, lr
 800ad42:	6014      	streq	r4, [r2, #0]
 800ad44:	f8ca 3000 	strne.w	r3, [sl]
 800ad48:	f014 0307 	ands.w	r3, r4, #7
 800ad4c:	bf1a      	itte	ne
 800ad4e:	f1c3 0008 	rsbne	r0, r3, #8
 800ad52:	1824      	addne	r4, r4, r0
 800ad54:	4618      	moveq	r0, r3
 800ad56:	1862      	adds	r2, r4, r1
 800ad58:	ea02 010c 	and.w	r1, r2, ip
 800ad5c:	4480      	add	r8, r0
 800ad5e:	eba8 0801 	sub.w	r8, r8, r1
 800ad62:	ea08 080c 	and.w	r8, r8, ip
 800ad66:	4641      	mov	r1, r8
 800ad68:	4628      	mov	r0, r5
 800ad6a:	9301      	str	r3, [sp, #4]
 800ad6c:	9200      	str	r2, [sp, #0]
 800ad6e:	f000 fbd5 	bl	800b51c <_sbrk_r>
 800ad72:	1c43      	adds	r3, r0, #1
 800ad74:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad78:	d105      	bne.n	800ad86 <_malloc_r+0x3f2>
 800ad7a:	b32b      	cbz	r3, 800adc8 <_malloc_r+0x434>
 800ad7c:	f1a3 0008 	sub.w	r0, r3, #8
 800ad80:	4410      	add	r0, r2
 800ad82:	f04f 0800 	mov.w	r8, #0
 800ad86:	f8da 2000 	ldr.w	r2, [sl]
 800ad8a:	60b4      	str	r4, [r6, #8]
 800ad8c:	1b00      	subs	r0, r0, r4
 800ad8e:	4440      	add	r0, r8
 800ad90:	4442      	add	r2, r8
 800ad92:	f040 0001 	orr.w	r0, r0, #1
 800ad96:	45b3      	cmp	fp, r6
 800ad98:	f8ca 2000 	str.w	r2, [sl]
 800ad9c:	6060      	str	r0, [r4, #4]
 800ad9e:	f43f af27 	beq.w	800abf0 <_malloc_r+0x25c>
 800ada2:	f1b9 0f0f 	cmp.w	r9, #15
 800ada6:	d812      	bhi.n	800adce <_malloc_r+0x43a>
 800ada8:	2301      	movs	r3, #1
 800adaa:	6063      	str	r3, [r4, #4]
 800adac:	68b3      	ldr	r3, [r6, #8]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	f023 0303 	bic.w	r3, r3, #3
 800adb4:	42bb      	cmp	r3, r7
 800adb6:	eba3 0207 	sub.w	r2, r3, r7
 800adba:	d301      	bcc.n	800adc0 <_malloc_r+0x42c>
 800adbc:	2a0f      	cmp	r2, #15
 800adbe:	dc21      	bgt.n	800ae04 <_malloc_r+0x470>
 800adc0:	4628      	mov	r0, r5
 800adc2:	f000 f83d 	bl	800ae40 <__malloc_unlock>
 800adc6:	e5f1      	b.n	800a9ac <_malloc_r+0x18>
 800adc8:	4610      	mov	r0, r2
 800adca:	4698      	mov	r8, r3
 800adcc:	e7db      	b.n	800ad86 <_malloc_r+0x3f2>
 800adce:	f8db 3004 	ldr.w	r3, [fp, #4]
 800add2:	f1a9 090c 	sub.w	r9, r9, #12
 800add6:	f029 0907 	bic.w	r9, r9, #7
 800adda:	f003 0301 	and.w	r3, r3, #1
 800adde:	ea43 0309 	orr.w	r3, r3, r9
 800ade2:	f8cb 3004 	str.w	r3, [fp, #4]
 800ade6:	2205      	movs	r2, #5
 800ade8:	eb0b 0309 	add.w	r3, fp, r9
 800adec:	f1b9 0f0f 	cmp.w	r9, #15
 800adf0:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800adf4:	f67f aefc 	bls.w	800abf0 <_malloc_r+0x25c>
 800adf8:	f10b 0108 	add.w	r1, fp, #8
 800adfc:	4628      	mov	r0, r5
 800adfe:	f7ff fc75 	bl	800a6ec <_free_r>
 800ae02:	e6f5      	b.n	800abf0 <_malloc_r+0x25c>
 800ae04:	68b4      	ldr	r4, [r6, #8]
 800ae06:	f047 0301 	orr.w	r3, r7, #1
 800ae0a:	4427      	add	r7, r4
 800ae0c:	f042 0201 	orr.w	r2, r2, #1
 800ae10:	6063      	str	r3, [r4, #4]
 800ae12:	60b7      	str	r7, [r6, #8]
 800ae14:	607a      	str	r2, [r7, #4]
 800ae16:	e5ee      	b.n	800a9f6 <_malloc_r+0x62>

0800ae18 <memcpy>:
 800ae18:	440a      	add	r2, r1
 800ae1a:	4291      	cmp	r1, r2
 800ae1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae20:	d100      	bne.n	800ae24 <memcpy+0xc>
 800ae22:	4770      	bx	lr
 800ae24:	b510      	push	{r4, lr}
 800ae26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae2e:	4291      	cmp	r1, r2
 800ae30:	d1f9      	bne.n	800ae26 <memcpy+0xe>
 800ae32:	bd10      	pop	{r4, pc}

0800ae34 <__malloc_lock>:
 800ae34:	4801      	ldr	r0, [pc, #4]	; (800ae3c <__malloc_lock+0x8>)
 800ae36:	f7ff bd3f 	b.w	800a8b8 <__retarget_lock_acquire_recursive>
 800ae3a:	bf00      	nop
 800ae3c:	20000c34 	.word	0x20000c34

0800ae40 <__malloc_unlock>:
 800ae40:	4801      	ldr	r0, [pc, #4]	; (800ae48 <__malloc_unlock+0x8>)
 800ae42:	f7ff bd3a 	b.w	800a8ba <__retarget_lock_release_recursive>
 800ae46:	bf00      	nop
 800ae48:	20000c34 	.word	0x20000c34

0800ae4c <_Balloc>:
 800ae4c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ae4e:	b570      	push	{r4, r5, r6, lr}
 800ae50:	4605      	mov	r5, r0
 800ae52:	460c      	mov	r4, r1
 800ae54:	b17b      	cbz	r3, 800ae76 <_Balloc+0x2a>
 800ae56:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800ae58:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ae5c:	b9a0      	cbnz	r0, 800ae88 <_Balloc+0x3c>
 800ae5e:	2101      	movs	r1, #1
 800ae60:	fa01 f604 	lsl.w	r6, r1, r4
 800ae64:	1d72      	adds	r2, r6, #5
 800ae66:	0092      	lsls	r2, r2, #2
 800ae68:	4628      	mov	r0, r5
 800ae6a:	f001 f9af 	bl	800c1cc <_calloc_r>
 800ae6e:	b148      	cbz	r0, 800ae84 <_Balloc+0x38>
 800ae70:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800ae74:	e00b      	b.n	800ae8e <_Balloc+0x42>
 800ae76:	2221      	movs	r2, #33	; 0x21
 800ae78:	2104      	movs	r1, #4
 800ae7a:	f001 f9a7 	bl	800c1cc <_calloc_r>
 800ae7e:	64e8      	str	r0, [r5, #76]	; 0x4c
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d1e8      	bne.n	800ae56 <_Balloc+0xa>
 800ae84:	2000      	movs	r0, #0
 800ae86:	bd70      	pop	{r4, r5, r6, pc}
 800ae88:	6802      	ldr	r2, [r0, #0]
 800ae8a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800ae8e:	2300      	movs	r3, #0
 800ae90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae94:	e7f7      	b.n	800ae86 <_Balloc+0x3a>

0800ae96 <_Bfree>:
 800ae96:	b131      	cbz	r1, 800aea6 <_Bfree+0x10>
 800ae98:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ae9a:	684a      	ldr	r2, [r1, #4]
 800ae9c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800aea0:	6008      	str	r0, [r1, #0]
 800aea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800aea6:	4770      	bx	lr

0800aea8 <__multadd>:
 800aea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeac:	690e      	ldr	r6, [r1, #16]
 800aeae:	4607      	mov	r7, r0
 800aeb0:	4698      	mov	r8, r3
 800aeb2:	460c      	mov	r4, r1
 800aeb4:	f101 0014 	add.w	r0, r1, #20
 800aeb8:	2300      	movs	r3, #0
 800aeba:	6805      	ldr	r5, [r0, #0]
 800aebc:	b2a9      	uxth	r1, r5
 800aebe:	fb02 8101 	mla	r1, r2, r1, r8
 800aec2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800aec6:	0c2d      	lsrs	r5, r5, #16
 800aec8:	fb02 c505 	mla	r5, r2, r5, ip
 800aecc:	b289      	uxth	r1, r1
 800aece:	3301      	adds	r3, #1
 800aed0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800aed4:	429e      	cmp	r6, r3
 800aed6:	f840 1b04 	str.w	r1, [r0], #4
 800aeda:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800aede:	dcec      	bgt.n	800aeba <__multadd+0x12>
 800aee0:	f1b8 0f00 	cmp.w	r8, #0
 800aee4:	d022      	beq.n	800af2c <__multadd+0x84>
 800aee6:	68a3      	ldr	r3, [r4, #8]
 800aee8:	42b3      	cmp	r3, r6
 800aeea:	dc19      	bgt.n	800af20 <__multadd+0x78>
 800aeec:	6861      	ldr	r1, [r4, #4]
 800aeee:	4638      	mov	r0, r7
 800aef0:	3101      	adds	r1, #1
 800aef2:	f7ff ffab 	bl	800ae4c <_Balloc>
 800aef6:	4605      	mov	r5, r0
 800aef8:	b928      	cbnz	r0, 800af06 <__multadd+0x5e>
 800aefa:	4602      	mov	r2, r0
 800aefc:	4b0d      	ldr	r3, [pc, #52]	; (800af34 <__multadd+0x8c>)
 800aefe:	480e      	ldr	r0, [pc, #56]	; (800af38 <__multadd+0x90>)
 800af00:	21b5      	movs	r1, #181	; 0xb5
 800af02:	f001 f945 	bl	800c190 <__assert_func>
 800af06:	6922      	ldr	r2, [r4, #16]
 800af08:	3202      	adds	r2, #2
 800af0a:	f104 010c 	add.w	r1, r4, #12
 800af0e:	0092      	lsls	r2, r2, #2
 800af10:	300c      	adds	r0, #12
 800af12:	f7ff ff81 	bl	800ae18 <memcpy>
 800af16:	4621      	mov	r1, r4
 800af18:	4638      	mov	r0, r7
 800af1a:	f7ff ffbc 	bl	800ae96 <_Bfree>
 800af1e:	462c      	mov	r4, r5
 800af20:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800af24:	3601      	adds	r6, #1
 800af26:	f8c3 8014 	str.w	r8, [r3, #20]
 800af2a:	6126      	str	r6, [r4, #16]
 800af2c:	4620      	mov	r0, r4
 800af2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af32:	bf00      	nop
 800af34:	0800cdb1 	.word	0x0800cdb1
 800af38:	0800ce21 	.word	0x0800ce21

0800af3c <__hi0bits>:
 800af3c:	0c03      	lsrs	r3, r0, #16
 800af3e:	041b      	lsls	r3, r3, #16
 800af40:	b9d3      	cbnz	r3, 800af78 <__hi0bits+0x3c>
 800af42:	0400      	lsls	r0, r0, #16
 800af44:	2310      	movs	r3, #16
 800af46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af4a:	bf04      	itt	eq
 800af4c:	0200      	lsleq	r0, r0, #8
 800af4e:	3308      	addeq	r3, #8
 800af50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af54:	bf04      	itt	eq
 800af56:	0100      	lsleq	r0, r0, #4
 800af58:	3304      	addeq	r3, #4
 800af5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af5e:	bf04      	itt	eq
 800af60:	0080      	lsleq	r0, r0, #2
 800af62:	3302      	addeq	r3, #2
 800af64:	2800      	cmp	r0, #0
 800af66:	db05      	blt.n	800af74 <__hi0bits+0x38>
 800af68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800af6c:	f103 0301 	add.w	r3, r3, #1
 800af70:	bf08      	it	eq
 800af72:	2320      	moveq	r3, #32
 800af74:	4618      	mov	r0, r3
 800af76:	4770      	bx	lr
 800af78:	2300      	movs	r3, #0
 800af7a:	e7e4      	b.n	800af46 <__hi0bits+0xa>

0800af7c <__lo0bits>:
 800af7c:	6803      	ldr	r3, [r0, #0]
 800af7e:	f013 0207 	ands.w	r2, r3, #7
 800af82:	4601      	mov	r1, r0
 800af84:	d00b      	beq.n	800af9e <__lo0bits+0x22>
 800af86:	07da      	lsls	r2, r3, #31
 800af88:	d424      	bmi.n	800afd4 <__lo0bits+0x58>
 800af8a:	0798      	lsls	r0, r3, #30
 800af8c:	bf49      	itett	mi
 800af8e:	085b      	lsrmi	r3, r3, #1
 800af90:	089b      	lsrpl	r3, r3, #2
 800af92:	2001      	movmi	r0, #1
 800af94:	600b      	strmi	r3, [r1, #0]
 800af96:	bf5c      	itt	pl
 800af98:	600b      	strpl	r3, [r1, #0]
 800af9a:	2002      	movpl	r0, #2
 800af9c:	4770      	bx	lr
 800af9e:	b298      	uxth	r0, r3
 800afa0:	b9b0      	cbnz	r0, 800afd0 <__lo0bits+0x54>
 800afa2:	0c1b      	lsrs	r3, r3, #16
 800afa4:	2010      	movs	r0, #16
 800afa6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800afaa:	bf04      	itt	eq
 800afac:	0a1b      	lsreq	r3, r3, #8
 800afae:	3008      	addeq	r0, #8
 800afb0:	071a      	lsls	r2, r3, #28
 800afb2:	bf04      	itt	eq
 800afb4:	091b      	lsreq	r3, r3, #4
 800afb6:	3004      	addeq	r0, #4
 800afb8:	079a      	lsls	r2, r3, #30
 800afba:	bf04      	itt	eq
 800afbc:	089b      	lsreq	r3, r3, #2
 800afbe:	3002      	addeq	r0, #2
 800afc0:	07da      	lsls	r2, r3, #31
 800afc2:	d403      	bmi.n	800afcc <__lo0bits+0x50>
 800afc4:	085b      	lsrs	r3, r3, #1
 800afc6:	f100 0001 	add.w	r0, r0, #1
 800afca:	d005      	beq.n	800afd8 <__lo0bits+0x5c>
 800afcc:	600b      	str	r3, [r1, #0]
 800afce:	4770      	bx	lr
 800afd0:	4610      	mov	r0, r2
 800afd2:	e7e8      	b.n	800afa6 <__lo0bits+0x2a>
 800afd4:	2000      	movs	r0, #0
 800afd6:	4770      	bx	lr
 800afd8:	2020      	movs	r0, #32
 800afda:	4770      	bx	lr

0800afdc <__i2b>:
 800afdc:	b510      	push	{r4, lr}
 800afde:	460c      	mov	r4, r1
 800afe0:	2101      	movs	r1, #1
 800afe2:	f7ff ff33 	bl	800ae4c <_Balloc>
 800afe6:	4602      	mov	r2, r0
 800afe8:	b928      	cbnz	r0, 800aff6 <__i2b+0x1a>
 800afea:	4b05      	ldr	r3, [pc, #20]	; (800b000 <__i2b+0x24>)
 800afec:	4805      	ldr	r0, [pc, #20]	; (800b004 <__i2b+0x28>)
 800afee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aff2:	f001 f8cd 	bl	800c190 <__assert_func>
 800aff6:	2301      	movs	r3, #1
 800aff8:	6144      	str	r4, [r0, #20]
 800affa:	6103      	str	r3, [r0, #16]
 800affc:	bd10      	pop	{r4, pc}
 800affe:	bf00      	nop
 800b000:	0800cdb1 	.word	0x0800cdb1
 800b004:	0800ce21 	.word	0x0800ce21

0800b008 <__multiply>:
 800b008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00c:	4614      	mov	r4, r2
 800b00e:	690a      	ldr	r2, [r1, #16]
 800b010:	6923      	ldr	r3, [r4, #16]
 800b012:	429a      	cmp	r2, r3
 800b014:	bfb8      	it	lt
 800b016:	460b      	movlt	r3, r1
 800b018:	460d      	mov	r5, r1
 800b01a:	bfbc      	itt	lt
 800b01c:	4625      	movlt	r5, r4
 800b01e:	461c      	movlt	r4, r3
 800b020:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b024:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b028:	68ab      	ldr	r3, [r5, #8]
 800b02a:	6869      	ldr	r1, [r5, #4]
 800b02c:	eb0a 0709 	add.w	r7, sl, r9
 800b030:	42bb      	cmp	r3, r7
 800b032:	b085      	sub	sp, #20
 800b034:	bfb8      	it	lt
 800b036:	3101      	addlt	r1, #1
 800b038:	f7ff ff08 	bl	800ae4c <_Balloc>
 800b03c:	b930      	cbnz	r0, 800b04c <__multiply+0x44>
 800b03e:	4602      	mov	r2, r0
 800b040:	4b42      	ldr	r3, [pc, #264]	; (800b14c <__multiply+0x144>)
 800b042:	4843      	ldr	r0, [pc, #268]	; (800b150 <__multiply+0x148>)
 800b044:	f240 115d 	movw	r1, #349	; 0x15d
 800b048:	f001 f8a2 	bl	800c190 <__assert_func>
 800b04c:	f100 0614 	add.w	r6, r0, #20
 800b050:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b054:	4633      	mov	r3, r6
 800b056:	2200      	movs	r2, #0
 800b058:	4543      	cmp	r3, r8
 800b05a:	d31e      	bcc.n	800b09a <__multiply+0x92>
 800b05c:	f105 0c14 	add.w	ip, r5, #20
 800b060:	f104 0314 	add.w	r3, r4, #20
 800b064:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b068:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b06c:	9202      	str	r2, [sp, #8]
 800b06e:	ebac 0205 	sub.w	r2, ip, r5
 800b072:	3a15      	subs	r2, #21
 800b074:	f022 0203 	bic.w	r2, r2, #3
 800b078:	3204      	adds	r2, #4
 800b07a:	f105 0115 	add.w	r1, r5, #21
 800b07e:	458c      	cmp	ip, r1
 800b080:	bf38      	it	cc
 800b082:	2204      	movcc	r2, #4
 800b084:	9201      	str	r2, [sp, #4]
 800b086:	9a02      	ldr	r2, [sp, #8]
 800b088:	9303      	str	r3, [sp, #12]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d808      	bhi.n	800b0a0 <__multiply+0x98>
 800b08e:	2f00      	cmp	r7, #0
 800b090:	dc55      	bgt.n	800b13e <__multiply+0x136>
 800b092:	6107      	str	r7, [r0, #16]
 800b094:	b005      	add	sp, #20
 800b096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b09a:	f843 2b04 	str.w	r2, [r3], #4
 800b09e:	e7db      	b.n	800b058 <__multiply+0x50>
 800b0a0:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0a4:	f1ba 0f00 	cmp.w	sl, #0
 800b0a8:	d020      	beq.n	800b0ec <__multiply+0xe4>
 800b0aa:	f105 0e14 	add.w	lr, r5, #20
 800b0ae:	46b1      	mov	r9, r6
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b0b6:	f8d9 b000 	ldr.w	fp, [r9]
 800b0ba:	b2a1      	uxth	r1, r4
 800b0bc:	fa1f fb8b 	uxth.w	fp, fp
 800b0c0:	fb0a b101 	mla	r1, sl, r1, fp
 800b0c4:	4411      	add	r1, r2
 800b0c6:	f8d9 2000 	ldr.w	r2, [r9]
 800b0ca:	0c24      	lsrs	r4, r4, #16
 800b0cc:	0c12      	lsrs	r2, r2, #16
 800b0ce:	fb0a 2404 	mla	r4, sl, r4, r2
 800b0d2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b0d6:	b289      	uxth	r1, r1
 800b0d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b0dc:	45f4      	cmp	ip, lr
 800b0de:	f849 1b04 	str.w	r1, [r9], #4
 800b0e2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b0e6:	d8e4      	bhi.n	800b0b2 <__multiply+0xaa>
 800b0e8:	9901      	ldr	r1, [sp, #4]
 800b0ea:	5072      	str	r2, [r6, r1]
 800b0ec:	9a03      	ldr	r2, [sp, #12]
 800b0ee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b0f2:	3304      	adds	r3, #4
 800b0f4:	f1b9 0f00 	cmp.w	r9, #0
 800b0f8:	d01f      	beq.n	800b13a <__multiply+0x132>
 800b0fa:	6834      	ldr	r4, [r6, #0]
 800b0fc:	f105 0114 	add.w	r1, r5, #20
 800b100:	46b6      	mov	lr, r6
 800b102:	f04f 0a00 	mov.w	sl, #0
 800b106:	880a      	ldrh	r2, [r1, #0]
 800b108:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b10c:	fb09 b202 	mla	r2, r9, r2, fp
 800b110:	4492      	add	sl, r2
 800b112:	b2a4      	uxth	r4, r4
 800b114:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b118:	f84e 4b04 	str.w	r4, [lr], #4
 800b11c:	f851 4b04 	ldr.w	r4, [r1], #4
 800b120:	f8be 2000 	ldrh.w	r2, [lr]
 800b124:	0c24      	lsrs	r4, r4, #16
 800b126:	fb09 2404 	mla	r4, r9, r4, r2
 800b12a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b12e:	458c      	cmp	ip, r1
 800b130:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b134:	d8e7      	bhi.n	800b106 <__multiply+0xfe>
 800b136:	9a01      	ldr	r2, [sp, #4]
 800b138:	50b4      	str	r4, [r6, r2]
 800b13a:	3604      	adds	r6, #4
 800b13c:	e7a3      	b.n	800b086 <__multiply+0x7e>
 800b13e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1a5      	bne.n	800b092 <__multiply+0x8a>
 800b146:	3f01      	subs	r7, #1
 800b148:	e7a1      	b.n	800b08e <__multiply+0x86>
 800b14a:	bf00      	nop
 800b14c:	0800cdb1 	.word	0x0800cdb1
 800b150:	0800ce21 	.word	0x0800ce21

0800b154 <__pow5mult>:
 800b154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b158:	4615      	mov	r5, r2
 800b15a:	f012 0203 	ands.w	r2, r2, #3
 800b15e:	4606      	mov	r6, r0
 800b160:	460f      	mov	r7, r1
 800b162:	d007      	beq.n	800b174 <__pow5mult+0x20>
 800b164:	4c1a      	ldr	r4, [pc, #104]	; (800b1d0 <__pow5mult+0x7c>)
 800b166:	3a01      	subs	r2, #1
 800b168:	2300      	movs	r3, #0
 800b16a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b16e:	f7ff fe9b 	bl	800aea8 <__multadd>
 800b172:	4607      	mov	r7, r0
 800b174:	10ad      	asrs	r5, r5, #2
 800b176:	d027      	beq.n	800b1c8 <__pow5mult+0x74>
 800b178:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800b17a:	b944      	cbnz	r4, 800b18e <__pow5mult+0x3a>
 800b17c:	f240 2171 	movw	r1, #625	; 0x271
 800b180:	4630      	mov	r0, r6
 800b182:	f7ff ff2b 	bl	800afdc <__i2b>
 800b186:	2300      	movs	r3, #0
 800b188:	64b0      	str	r0, [r6, #72]	; 0x48
 800b18a:	4604      	mov	r4, r0
 800b18c:	6003      	str	r3, [r0, #0]
 800b18e:	f04f 0900 	mov.w	r9, #0
 800b192:	07eb      	lsls	r3, r5, #31
 800b194:	d50a      	bpl.n	800b1ac <__pow5mult+0x58>
 800b196:	4639      	mov	r1, r7
 800b198:	4622      	mov	r2, r4
 800b19a:	4630      	mov	r0, r6
 800b19c:	f7ff ff34 	bl	800b008 <__multiply>
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	4680      	mov	r8, r0
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	f7ff fe76 	bl	800ae96 <_Bfree>
 800b1aa:	4647      	mov	r7, r8
 800b1ac:	106d      	asrs	r5, r5, #1
 800b1ae:	d00b      	beq.n	800b1c8 <__pow5mult+0x74>
 800b1b0:	6820      	ldr	r0, [r4, #0]
 800b1b2:	b938      	cbnz	r0, 800b1c4 <__pow5mult+0x70>
 800b1b4:	4622      	mov	r2, r4
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	f7ff ff25 	bl	800b008 <__multiply>
 800b1be:	6020      	str	r0, [r4, #0]
 800b1c0:	f8c0 9000 	str.w	r9, [r0]
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	e7e4      	b.n	800b192 <__pow5mult+0x3e>
 800b1c8:	4638      	mov	r0, r7
 800b1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ce:	bf00      	nop
 800b1d0:	0800cf78 	.word	0x0800cf78

0800b1d4 <__lshift>:
 800b1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d8:	460c      	mov	r4, r1
 800b1da:	6849      	ldr	r1, [r1, #4]
 800b1dc:	6923      	ldr	r3, [r4, #16]
 800b1de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b1e2:	68a3      	ldr	r3, [r4, #8]
 800b1e4:	4607      	mov	r7, r0
 800b1e6:	4691      	mov	r9, r2
 800b1e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b1ec:	f108 0601 	add.w	r6, r8, #1
 800b1f0:	42b3      	cmp	r3, r6
 800b1f2:	db0b      	blt.n	800b20c <__lshift+0x38>
 800b1f4:	4638      	mov	r0, r7
 800b1f6:	f7ff fe29 	bl	800ae4c <_Balloc>
 800b1fa:	4605      	mov	r5, r0
 800b1fc:	b948      	cbnz	r0, 800b212 <__lshift+0x3e>
 800b1fe:	4602      	mov	r2, r0
 800b200:	4b28      	ldr	r3, [pc, #160]	; (800b2a4 <__lshift+0xd0>)
 800b202:	4829      	ldr	r0, [pc, #164]	; (800b2a8 <__lshift+0xd4>)
 800b204:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b208:	f000 ffc2 	bl	800c190 <__assert_func>
 800b20c:	3101      	adds	r1, #1
 800b20e:	005b      	lsls	r3, r3, #1
 800b210:	e7ee      	b.n	800b1f0 <__lshift+0x1c>
 800b212:	2300      	movs	r3, #0
 800b214:	f100 0114 	add.w	r1, r0, #20
 800b218:	f100 0210 	add.w	r2, r0, #16
 800b21c:	4618      	mov	r0, r3
 800b21e:	4553      	cmp	r3, sl
 800b220:	db33      	blt.n	800b28a <__lshift+0xb6>
 800b222:	6920      	ldr	r0, [r4, #16]
 800b224:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b228:	f104 0314 	add.w	r3, r4, #20
 800b22c:	f019 091f 	ands.w	r9, r9, #31
 800b230:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b234:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b238:	d02b      	beq.n	800b292 <__lshift+0xbe>
 800b23a:	f1c9 0e20 	rsb	lr, r9, #32
 800b23e:	468a      	mov	sl, r1
 800b240:	2200      	movs	r2, #0
 800b242:	6818      	ldr	r0, [r3, #0]
 800b244:	fa00 f009 	lsl.w	r0, r0, r9
 800b248:	4302      	orrs	r2, r0
 800b24a:	f84a 2b04 	str.w	r2, [sl], #4
 800b24e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b252:	459c      	cmp	ip, r3
 800b254:	fa22 f20e 	lsr.w	r2, r2, lr
 800b258:	d8f3      	bhi.n	800b242 <__lshift+0x6e>
 800b25a:	ebac 0304 	sub.w	r3, ip, r4
 800b25e:	3b15      	subs	r3, #21
 800b260:	f023 0303 	bic.w	r3, r3, #3
 800b264:	3304      	adds	r3, #4
 800b266:	f104 0015 	add.w	r0, r4, #21
 800b26a:	4584      	cmp	ip, r0
 800b26c:	bf38      	it	cc
 800b26e:	2304      	movcc	r3, #4
 800b270:	50ca      	str	r2, [r1, r3]
 800b272:	b10a      	cbz	r2, 800b278 <__lshift+0xa4>
 800b274:	f108 0602 	add.w	r6, r8, #2
 800b278:	3e01      	subs	r6, #1
 800b27a:	4638      	mov	r0, r7
 800b27c:	612e      	str	r6, [r5, #16]
 800b27e:	4621      	mov	r1, r4
 800b280:	f7ff fe09 	bl	800ae96 <_Bfree>
 800b284:	4628      	mov	r0, r5
 800b286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b28a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b28e:	3301      	adds	r3, #1
 800b290:	e7c5      	b.n	800b21e <__lshift+0x4a>
 800b292:	3904      	subs	r1, #4
 800b294:	f853 2b04 	ldr.w	r2, [r3], #4
 800b298:	f841 2f04 	str.w	r2, [r1, #4]!
 800b29c:	459c      	cmp	ip, r3
 800b29e:	d8f9      	bhi.n	800b294 <__lshift+0xc0>
 800b2a0:	e7ea      	b.n	800b278 <__lshift+0xa4>
 800b2a2:	bf00      	nop
 800b2a4:	0800cdb1 	.word	0x0800cdb1
 800b2a8:	0800ce21 	.word	0x0800ce21

0800b2ac <__mcmp>:
 800b2ac:	b530      	push	{r4, r5, lr}
 800b2ae:	6902      	ldr	r2, [r0, #16]
 800b2b0:	690c      	ldr	r4, [r1, #16]
 800b2b2:	1b12      	subs	r2, r2, r4
 800b2b4:	d10e      	bne.n	800b2d4 <__mcmp+0x28>
 800b2b6:	f100 0314 	add.w	r3, r0, #20
 800b2ba:	3114      	adds	r1, #20
 800b2bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b2c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b2c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b2c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b2cc:	42a5      	cmp	r5, r4
 800b2ce:	d003      	beq.n	800b2d8 <__mcmp+0x2c>
 800b2d0:	d305      	bcc.n	800b2de <__mcmp+0x32>
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	4610      	mov	r0, r2
 800b2d6:	bd30      	pop	{r4, r5, pc}
 800b2d8:	4283      	cmp	r3, r0
 800b2da:	d3f3      	bcc.n	800b2c4 <__mcmp+0x18>
 800b2dc:	e7fa      	b.n	800b2d4 <__mcmp+0x28>
 800b2de:	f04f 32ff 	mov.w	r2, #4294967295
 800b2e2:	e7f7      	b.n	800b2d4 <__mcmp+0x28>

0800b2e4 <__mdiff>:
 800b2e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e8:	460c      	mov	r4, r1
 800b2ea:	4606      	mov	r6, r0
 800b2ec:	4611      	mov	r1, r2
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	4617      	mov	r7, r2
 800b2f2:	f7ff ffdb 	bl	800b2ac <__mcmp>
 800b2f6:	1e05      	subs	r5, r0, #0
 800b2f8:	d110      	bne.n	800b31c <__mdiff+0x38>
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	f7ff fda5 	bl	800ae4c <_Balloc>
 800b302:	b930      	cbnz	r0, 800b312 <__mdiff+0x2e>
 800b304:	4b39      	ldr	r3, [pc, #228]	; (800b3ec <__mdiff+0x108>)
 800b306:	4602      	mov	r2, r0
 800b308:	f240 2132 	movw	r1, #562	; 0x232
 800b30c:	4838      	ldr	r0, [pc, #224]	; (800b3f0 <__mdiff+0x10c>)
 800b30e:	f000 ff3f 	bl	800c190 <__assert_func>
 800b312:	2301      	movs	r3, #1
 800b314:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b31c:	bfa4      	itt	ge
 800b31e:	463b      	movge	r3, r7
 800b320:	4627      	movge	r7, r4
 800b322:	4630      	mov	r0, r6
 800b324:	6879      	ldr	r1, [r7, #4]
 800b326:	bfa6      	itte	ge
 800b328:	461c      	movge	r4, r3
 800b32a:	2500      	movge	r5, #0
 800b32c:	2501      	movlt	r5, #1
 800b32e:	f7ff fd8d 	bl	800ae4c <_Balloc>
 800b332:	b920      	cbnz	r0, 800b33e <__mdiff+0x5a>
 800b334:	4b2d      	ldr	r3, [pc, #180]	; (800b3ec <__mdiff+0x108>)
 800b336:	4602      	mov	r2, r0
 800b338:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b33c:	e7e6      	b.n	800b30c <__mdiff+0x28>
 800b33e:	693e      	ldr	r6, [r7, #16]
 800b340:	60c5      	str	r5, [r0, #12]
 800b342:	6925      	ldr	r5, [r4, #16]
 800b344:	f107 0114 	add.w	r1, r7, #20
 800b348:	f104 0914 	add.w	r9, r4, #20
 800b34c:	f100 0e14 	add.w	lr, r0, #20
 800b350:	f107 0210 	add.w	r2, r7, #16
 800b354:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b358:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b35c:	46f2      	mov	sl, lr
 800b35e:	2700      	movs	r7, #0
 800b360:	f859 3b04 	ldr.w	r3, [r9], #4
 800b364:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b368:	fa1f f883 	uxth.w	r8, r3
 800b36c:	fa17 f78b 	uxtah	r7, r7, fp
 800b370:	0c1b      	lsrs	r3, r3, #16
 800b372:	eba7 0808 	sub.w	r8, r7, r8
 800b376:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b37a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b37e:	fa1f f888 	uxth.w	r8, r8
 800b382:	141f      	asrs	r7, r3, #16
 800b384:	454d      	cmp	r5, r9
 800b386:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b38a:	f84a 3b04 	str.w	r3, [sl], #4
 800b38e:	d8e7      	bhi.n	800b360 <__mdiff+0x7c>
 800b390:	1b2b      	subs	r3, r5, r4
 800b392:	3b15      	subs	r3, #21
 800b394:	f023 0303 	bic.w	r3, r3, #3
 800b398:	3304      	adds	r3, #4
 800b39a:	3415      	adds	r4, #21
 800b39c:	42a5      	cmp	r5, r4
 800b39e:	bf38      	it	cc
 800b3a0:	2304      	movcc	r3, #4
 800b3a2:	4419      	add	r1, r3
 800b3a4:	4473      	add	r3, lr
 800b3a6:	469e      	mov	lr, r3
 800b3a8:	460d      	mov	r5, r1
 800b3aa:	4565      	cmp	r5, ip
 800b3ac:	d30e      	bcc.n	800b3cc <__mdiff+0xe8>
 800b3ae:	f10c 0203 	add.w	r2, ip, #3
 800b3b2:	1a52      	subs	r2, r2, r1
 800b3b4:	f022 0203 	bic.w	r2, r2, #3
 800b3b8:	3903      	subs	r1, #3
 800b3ba:	458c      	cmp	ip, r1
 800b3bc:	bf38      	it	cc
 800b3be:	2200      	movcc	r2, #0
 800b3c0:	441a      	add	r2, r3
 800b3c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b3c6:	b17b      	cbz	r3, 800b3e8 <__mdiff+0x104>
 800b3c8:	6106      	str	r6, [r0, #16]
 800b3ca:	e7a5      	b.n	800b318 <__mdiff+0x34>
 800b3cc:	f855 8b04 	ldr.w	r8, [r5], #4
 800b3d0:	fa17 f488 	uxtah	r4, r7, r8
 800b3d4:	1422      	asrs	r2, r4, #16
 800b3d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b3da:	b2a4      	uxth	r4, r4
 800b3dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b3e0:	f84e 4b04 	str.w	r4, [lr], #4
 800b3e4:	1417      	asrs	r7, r2, #16
 800b3e6:	e7e0      	b.n	800b3aa <__mdiff+0xc6>
 800b3e8:	3e01      	subs	r6, #1
 800b3ea:	e7ea      	b.n	800b3c2 <__mdiff+0xde>
 800b3ec:	0800cdb1 	.word	0x0800cdb1
 800b3f0:	0800ce21 	.word	0x0800ce21

0800b3f4 <__d2b>:
 800b3f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3f8:	4689      	mov	r9, r1
 800b3fa:	2101      	movs	r1, #1
 800b3fc:	ec57 6b10 	vmov	r6, r7, d0
 800b400:	4690      	mov	r8, r2
 800b402:	f7ff fd23 	bl	800ae4c <_Balloc>
 800b406:	4604      	mov	r4, r0
 800b408:	b930      	cbnz	r0, 800b418 <__d2b+0x24>
 800b40a:	4602      	mov	r2, r0
 800b40c:	4b25      	ldr	r3, [pc, #148]	; (800b4a4 <__d2b+0xb0>)
 800b40e:	4826      	ldr	r0, [pc, #152]	; (800b4a8 <__d2b+0xb4>)
 800b410:	f240 310a 	movw	r1, #778	; 0x30a
 800b414:	f000 febc 	bl	800c190 <__assert_func>
 800b418:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b41c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b420:	bb35      	cbnz	r5, 800b470 <__d2b+0x7c>
 800b422:	2e00      	cmp	r6, #0
 800b424:	9301      	str	r3, [sp, #4]
 800b426:	d028      	beq.n	800b47a <__d2b+0x86>
 800b428:	4668      	mov	r0, sp
 800b42a:	9600      	str	r6, [sp, #0]
 800b42c:	f7ff fda6 	bl	800af7c <__lo0bits>
 800b430:	9900      	ldr	r1, [sp, #0]
 800b432:	b300      	cbz	r0, 800b476 <__d2b+0x82>
 800b434:	9a01      	ldr	r2, [sp, #4]
 800b436:	f1c0 0320 	rsb	r3, r0, #32
 800b43a:	fa02 f303 	lsl.w	r3, r2, r3
 800b43e:	430b      	orrs	r3, r1
 800b440:	40c2      	lsrs	r2, r0
 800b442:	6163      	str	r3, [r4, #20]
 800b444:	9201      	str	r2, [sp, #4]
 800b446:	9b01      	ldr	r3, [sp, #4]
 800b448:	61a3      	str	r3, [r4, #24]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	bf14      	ite	ne
 800b44e:	2202      	movne	r2, #2
 800b450:	2201      	moveq	r2, #1
 800b452:	6122      	str	r2, [r4, #16]
 800b454:	b1d5      	cbz	r5, 800b48c <__d2b+0x98>
 800b456:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b45a:	4405      	add	r5, r0
 800b45c:	f8c9 5000 	str.w	r5, [r9]
 800b460:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b464:	f8c8 0000 	str.w	r0, [r8]
 800b468:	4620      	mov	r0, r4
 800b46a:	b003      	add	sp, #12
 800b46c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b470:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b474:	e7d5      	b.n	800b422 <__d2b+0x2e>
 800b476:	6161      	str	r1, [r4, #20]
 800b478:	e7e5      	b.n	800b446 <__d2b+0x52>
 800b47a:	a801      	add	r0, sp, #4
 800b47c:	f7ff fd7e 	bl	800af7c <__lo0bits>
 800b480:	9b01      	ldr	r3, [sp, #4]
 800b482:	6163      	str	r3, [r4, #20]
 800b484:	2201      	movs	r2, #1
 800b486:	6122      	str	r2, [r4, #16]
 800b488:	3020      	adds	r0, #32
 800b48a:	e7e3      	b.n	800b454 <__d2b+0x60>
 800b48c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b490:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b494:	f8c9 0000 	str.w	r0, [r9]
 800b498:	6918      	ldr	r0, [r3, #16]
 800b49a:	f7ff fd4f 	bl	800af3c <__hi0bits>
 800b49e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4a2:	e7df      	b.n	800b464 <__d2b+0x70>
 800b4a4:	0800cdb1 	.word	0x0800cdb1
 800b4a8:	0800ce21 	.word	0x0800ce21

0800b4ac <frexp>:
 800b4ac:	b570      	push	{r4, r5, r6, lr}
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	ec55 4b10 	vmov	r4, r5, d0
 800b4b4:	6001      	str	r1, [r0, #0]
 800b4b6:	4916      	ldr	r1, [pc, #88]	; (800b510 <frexp+0x64>)
 800b4b8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800b4bc:	428a      	cmp	r2, r1
 800b4be:	4606      	mov	r6, r0
 800b4c0:	462b      	mov	r3, r5
 800b4c2:	dc22      	bgt.n	800b50a <frexp+0x5e>
 800b4c4:	ee10 1a10 	vmov	r1, s0
 800b4c8:	4311      	orrs	r1, r2
 800b4ca:	d01e      	beq.n	800b50a <frexp+0x5e>
 800b4cc:	4911      	ldr	r1, [pc, #68]	; (800b514 <frexp+0x68>)
 800b4ce:	4029      	ands	r1, r5
 800b4d0:	b969      	cbnz	r1, 800b4ee <frexp+0x42>
 800b4d2:	4b11      	ldr	r3, [pc, #68]	; (800b518 <frexp+0x6c>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	ee10 0a10 	vmov	r0, s0
 800b4da:	4629      	mov	r1, r5
 800b4dc:	f7f5 f88c 	bl	80005f8 <__aeabi_dmul>
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b4e6:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	6031      	str	r1, [r6, #0]
 800b4ee:	6831      	ldr	r1, [r6, #0]
 800b4f0:	1512      	asrs	r2, r2, #20
 800b4f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b4f6:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800b4fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b4fe:	440a      	add	r2, r1
 800b500:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800b504:	6032      	str	r2, [r6, #0]
 800b506:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800b50a:	ec45 4b10 	vmov	d0, r4, r5
 800b50e:	bd70      	pop	{r4, r5, r6, pc}
 800b510:	7fefffff 	.word	0x7fefffff
 800b514:	7ff00000 	.word	0x7ff00000
 800b518:	43500000 	.word	0x43500000

0800b51c <_sbrk_r>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	4d06      	ldr	r5, [pc, #24]	; (800b538 <_sbrk_r+0x1c>)
 800b520:	2300      	movs	r3, #0
 800b522:	4604      	mov	r4, r0
 800b524:	4608      	mov	r0, r1
 800b526:	602b      	str	r3, [r5, #0]
 800b528:	f7f6 fdf8 	bl	800211c <_sbrk>
 800b52c:	1c43      	adds	r3, r0, #1
 800b52e:	d102      	bne.n	800b536 <_sbrk_r+0x1a>
 800b530:	682b      	ldr	r3, [r5, #0]
 800b532:	b103      	cbz	r3, 800b536 <_sbrk_r+0x1a>
 800b534:	6023      	str	r3, [r4, #0]
 800b536:	bd38      	pop	{r3, r4, r5, pc}
 800b538:	20000c3c 	.word	0x20000c3c

0800b53c <__sread>:
 800b53c:	b510      	push	{r4, lr}
 800b53e:	460c      	mov	r4, r1
 800b540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b544:	f001 f906 	bl	800c754 <_read_r>
 800b548:	2800      	cmp	r0, #0
 800b54a:	bfab      	itete	ge
 800b54c:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800b54e:	89a3      	ldrhlt	r3, [r4, #12]
 800b550:	181b      	addge	r3, r3, r0
 800b552:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b556:	bfac      	ite	ge
 800b558:	6523      	strge	r3, [r4, #80]	; 0x50
 800b55a:	81a3      	strhlt	r3, [r4, #12]
 800b55c:	bd10      	pop	{r4, pc}

0800b55e <__swrite>:
 800b55e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b562:	461f      	mov	r7, r3
 800b564:	898b      	ldrh	r3, [r1, #12]
 800b566:	05db      	lsls	r3, r3, #23
 800b568:	4605      	mov	r5, r0
 800b56a:	460c      	mov	r4, r1
 800b56c:	4616      	mov	r6, r2
 800b56e:	d505      	bpl.n	800b57c <__swrite+0x1e>
 800b570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b574:	2302      	movs	r3, #2
 800b576:	2200      	movs	r2, #0
 800b578:	f001 f8ae 	bl	800c6d8 <_lseek_r>
 800b57c:	89a3      	ldrh	r3, [r4, #12]
 800b57e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b586:	81a3      	strh	r3, [r4, #12]
 800b588:	4632      	mov	r2, r6
 800b58a:	463b      	mov	r3, r7
 800b58c:	4628      	mov	r0, r5
 800b58e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b592:	f000 bdab 	b.w	800c0ec <_write_r>

0800b596 <__sseek>:
 800b596:	b510      	push	{r4, lr}
 800b598:	460c      	mov	r4, r1
 800b59a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b59e:	f001 f89b 	bl	800c6d8 <_lseek_r>
 800b5a2:	1c43      	adds	r3, r0, #1
 800b5a4:	89a3      	ldrh	r3, [r4, #12]
 800b5a6:	bf15      	itete	ne
 800b5a8:	6520      	strne	r0, [r4, #80]	; 0x50
 800b5aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5b2:	81a3      	strheq	r3, [r4, #12]
 800b5b4:	bf18      	it	ne
 800b5b6:	81a3      	strhne	r3, [r4, #12]
 800b5b8:	bd10      	pop	{r4, pc}

0800b5ba <__sclose>:
 800b5ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5be:	f000 be33 	b.w	800c228 <_close_r>

0800b5c2 <strncpy>:
 800b5c2:	b510      	push	{r4, lr}
 800b5c4:	3901      	subs	r1, #1
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	b132      	cbz	r2, 800b5d8 <strncpy+0x16>
 800b5ca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b5ce:	f803 4b01 	strb.w	r4, [r3], #1
 800b5d2:	3a01      	subs	r2, #1
 800b5d4:	2c00      	cmp	r4, #0
 800b5d6:	d1f7      	bne.n	800b5c8 <strncpy+0x6>
 800b5d8:	441a      	add	r2, r3
 800b5da:	2100      	movs	r1, #0
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d100      	bne.n	800b5e2 <strncpy+0x20>
 800b5e0:	bd10      	pop	{r4, pc}
 800b5e2:	f803 1b01 	strb.w	r1, [r3], #1
 800b5e6:	e7f9      	b.n	800b5dc <strncpy+0x1a>

0800b5e8 <__ssprint_r>:
 800b5e8:	6893      	ldr	r3, [r2, #8]
 800b5ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ee:	4680      	mov	r8, r0
 800b5f0:	460c      	mov	r4, r1
 800b5f2:	4617      	mov	r7, r2
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d061      	beq.n	800b6bc <__ssprint_r+0xd4>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f8d2 a000 	ldr.w	sl, [r2]
 800b5fe:	9301      	str	r3, [sp, #4]
 800b600:	469b      	mov	fp, r3
 800b602:	f1bb 0f00 	cmp.w	fp, #0
 800b606:	d02b      	beq.n	800b660 <__ssprint_r+0x78>
 800b608:	68a6      	ldr	r6, [r4, #8]
 800b60a:	45b3      	cmp	fp, r6
 800b60c:	d342      	bcc.n	800b694 <__ssprint_r+0xac>
 800b60e:	89a2      	ldrh	r2, [r4, #12]
 800b610:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b614:	d03e      	beq.n	800b694 <__ssprint_r+0xac>
 800b616:	6825      	ldr	r5, [r4, #0]
 800b618:	6921      	ldr	r1, [r4, #16]
 800b61a:	eba5 0901 	sub.w	r9, r5, r1
 800b61e:	6965      	ldr	r5, [r4, #20]
 800b620:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b624:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b628:	f109 0001 	add.w	r0, r9, #1
 800b62c:	106d      	asrs	r5, r5, #1
 800b62e:	4458      	add	r0, fp
 800b630:	4285      	cmp	r5, r0
 800b632:	bf38      	it	cc
 800b634:	4605      	movcc	r5, r0
 800b636:	0553      	lsls	r3, r2, #21
 800b638:	d545      	bpl.n	800b6c6 <__ssprint_r+0xde>
 800b63a:	4629      	mov	r1, r5
 800b63c:	4640      	mov	r0, r8
 800b63e:	f7ff f9a9 	bl	800a994 <_malloc_r>
 800b642:	4606      	mov	r6, r0
 800b644:	b9a0      	cbnz	r0, 800b670 <__ssprint_r+0x88>
 800b646:	230c      	movs	r3, #12
 800b648:	f8c8 3000 	str.w	r3, [r8]
 800b64c:	89a3      	ldrh	r3, [r4, #12]
 800b64e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b652:	81a3      	strh	r3, [r4, #12]
 800b654:	2300      	movs	r3, #0
 800b656:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800b65a:	f04f 30ff 	mov.w	r0, #4294967295
 800b65e:	e02f      	b.n	800b6c0 <__ssprint_r+0xd8>
 800b660:	f8da 3000 	ldr.w	r3, [sl]
 800b664:	f8da b004 	ldr.w	fp, [sl, #4]
 800b668:	9301      	str	r3, [sp, #4]
 800b66a:	f10a 0a08 	add.w	sl, sl, #8
 800b66e:	e7c8      	b.n	800b602 <__ssprint_r+0x1a>
 800b670:	464a      	mov	r2, r9
 800b672:	6921      	ldr	r1, [r4, #16]
 800b674:	f7ff fbd0 	bl	800ae18 <memcpy>
 800b678:	89a2      	ldrh	r2, [r4, #12]
 800b67a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800b67e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b682:	81a2      	strh	r2, [r4, #12]
 800b684:	6126      	str	r6, [r4, #16]
 800b686:	6165      	str	r5, [r4, #20]
 800b688:	444e      	add	r6, r9
 800b68a:	eba5 0509 	sub.w	r5, r5, r9
 800b68e:	6026      	str	r6, [r4, #0]
 800b690:	60a5      	str	r5, [r4, #8]
 800b692:	465e      	mov	r6, fp
 800b694:	455e      	cmp	r6, fp
 800b696:	bf28      	it	cs
 800b698:	465e      	movcs	r6, fp
 800b69a:	4632      	mov	r2, r6
 800b69c:	9901      	ldr	r1, [sp, #4]
 800b69e:	6820      	ldr	r0, [r4, #0]
 800b6a0:	f001 f83e 	bl	800c720 <memmove>
 800b6a4:	68a2      	ldr	r2, [r4, #8]
 800b6a6:	1b92      	subs	r2, r2, r6
 800b6a8:	60a2      	str	r2, [r4, #8]
 800b6aa:	6822      	ldr	r2, [r4, #0]
 800b6ac:	4432      	add	r2, r6
 800b6ae:	6022      	str	r2, [r4, #0]
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	eba2 030b 	sub.w	r3, r2, fp
 800b6b6:	60bb      	str	r3, [r7, #8]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1d1      	bne.n	800b660 <__ssprint_r+0x78>
 800b6bc:	2000      	movs	r0, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	b003      	add	sp, #12
 800b6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c6:	462a      	mov	r2, r5
 800b6c8:	4640      	mov	r0, r8
 800b6ca:	f001 f855 	bl	800c778 <_realloc_r>
 800b6ce:	4606      	mov	r6, r0
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	d1d7      	bne.n	800b684 <__ssprint_r+0x9c>
 800b6d4:	6921      	ldr	r1, [r4, #16]
 800b6d6:	4640      	mov	r0, r8
 800b6d8:	f7ff f808 	bl	800a6ec <_free_r>
 800b6dc:	e7b3      	b.n	800b646 <__ssprint_r+0x5e>

0800b6de <sysconf>:
 800b6de:	2808      	cmp	r0, #8
 800b6e0:	b508      	push	{r3, lr}
 800b6e2:	d006      	beq.n	800b6f2 <sysconf+0x14>
 800b6e4:	f7fb faf4 	bl	8006cd0 <__errno>
 800b6e8:	2316      	movs	r3, #22
 800b6ea:	6003      	str	r3, [r0, #0]
 800b6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f0:	bd08      	pop	{r3, pc}
 800b6f2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b6f6:	e7fb      	b.n	800b6f0 <sysconf+0x12>

0800b6f8 <__sprint_r>:
 800b6f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fc:	6893      	ldr	r3, [r2, #8]
 800b6fe:	4680      	mov	r8, r0
 800b700:	460f      	mov	r7, r1
 800b702:	4614      	mov	r4, r2
 800b704:	b91b      	cbnz	r3, 800b70e <__sprint_r+0x16>
 800b706:	6053      	str	r3, [r2, #4]
 800b708:	4618      	mov	r0, r3
 800b70a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b710:	049d      	lsls	r5, r3, #18
 800b712:	d520      	bpl.n	800b756 <__sprint_r+0x5e>
 800b714:	6815      	ldr	r5, [r2, #0]
 800b716:	3508      	adds	r5, #8
 800b718:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800b71c:	f04f 0900 	mov.w	r9, #0
 800b720:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800b724:	45ca      	cmp	sl, r9
 800b726:	dc0b      	bgt.n	800b740 <__sprint_r+0x48>
 800b728:	68a3      	ldr	r3, [r4, #8]
 800b72a:	f026 0003 	bic.w	r0, r6, #3
 800b72e:	1a18      	subs	r0, r3, r0
 800b730:	60a0      	str	r0, [r4, #8]
 800b732:	3508      	adds	r5, #8
 800b734:	2800      	cmp	r0, #0
 800b736:	d1ef      	bne.n	800b718 <__sprint_r+0x20>
 800b738:	2300      	movs	r3, #0
 800b73a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800b73e:	e7e4      	b.n	800b70a <__sprint_r+0x12>
 800b740:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800b744:	463a      	mov	r2, r7
 800b746:	4640      	mov	r0, r8
 800b748:	f000 fe29 	bl	800c39e <_fputwc_r>
 800b74c:	1c43      	adds	r3, r0, #1
 800b74e:	d0f3      	beq.n	800b738 <__sprint_r+0x40>
 800b750:	f109 0901 	add.w	r9, r9, #1
 800b754:	e7e6      	b.n	800b724 <__sprint_r+0x2c>
 800b756:	f000 fe5f 	bl	800c418 <__sfvwrite_r>
 800b75a:	e7ed      	b.n	800b738 <__sprint_r+0x40>

0800b75c <_vfiprintf_r>:
 800b75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b760:	ed2d 8b02 	vpush	{d8}
 800b764:	b0b9      	sub	sp, #228	; 0xe4
 800b766:	460f      	mov	r7, r1
 800b768:	9201      	str	r2, [sp, #4]
 800b76a:	461d      	mov	r5, r3
 800b76c:	461c      	mov	r4, r3
 800b76e:	4681      	mov	r9, r0
 800b770:	b118      	cbz	r0, 800b77a <_vfiprintf_r+0x1e>
 800b772:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b774:	b90b      	cbnz	r3, 800b77a <_vfiprintf_r+0x1e>
 800b776:	f7fe ff29 	bl	800a5cc <__sinit>
 800b77a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b77c:	07d8      	lsls	r0, r3, #31
 800b77e:	d405      	bmi.n	800b78c <_vfiprintf_r+0x30>
 800b780:	89bb      	ldrh	r3, [r7, #12]
 800b782:	0599      	lsls	r1, r3, #22
 800b784:	d402      	bmi.n	800b78c <_vfiprintf_r+0x30>
 800b786:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b788:	f7ff f896 	bl	800a8b8 <__retarget_lock_acquire_recursive>
 800b78c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b790:	049a      	lsls	r2, r3, #18
 800b792:	d406      	bmi.n	800b7a2 <_vfiprintf_r+0x46>
 800b794:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b798:	81bb      	strh	r3, [r7, #12]
 800b79a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b79c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b7a0:	667b      	str	r3, [r7, #100]	; 0x64
 800b7a2:	89bb      	ldrh	r3, [r7, #12]
 800b7a4:	071e      	lsls	r6, r3, #28
 800b7a6:	d501      	bpl.n	800b7ac <_vfiprintf_r+0x50>
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	b9bb      	cbnz	r3, 800b7dc <_vfiprintf_r+0x80>
 800b7ac:	4639      	mov	r1, r7
 800b7ae:	4648      	mov	r0, r9
 800b7b0:	f7fd ff48 	bl	8009644 <__swsetup_r>
 800b7b4:	b190      	cbz	r0, 800b7dc <_vfiprintf_r+0x80>
 800b7b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7b8:	07d8      	lsls	r0, r3, #31
 800b7ba:	d508      	bpl.n	800b7ce <_vfiprintf_r+0x72>
 800b7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b7c0:	9302      	str	r3, [sp, #8]
 800b7c2:	9802      	ldr	r0, [sp, #8]
 800b7c4:	b039      	add	sp, #228	; 0xe4
 800b7c6:	ecbd 8b02 	vpop	{d8}
 800b7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ce:	89bb      	ldrh	r3, [r7, #12]
 800b7d0:	0599      	lsls	r1, r3, #22
 800b7d2:	d4f3      	bmi.n	800b7bc <_vfiprintf_r+0x60>
 800b7d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b7d6:	f7ff f870 	bl	800a8ba <__retarget_lock_release_recursive>
 800b7da:	e7ef      	b.n	800b7bc <_vfiprintf_r+0x60>
 800b7dc:	89bb      	ldrh	r3, [r7, #12]
 800b7de:	f003 021a 	and.w	r2, r3, #26
 800b7e2:	2a0a      	cmp	r2, #10
 800b7e4:	d113      	bne.n	800b80e <_vfiprintf_r+0xb2>
 800b7e6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b7ea:	2a00      	cmp	r2, #0
 800b7ec:	db0f      	blt.n	800b80e <_vfiprintf_r+0xb2>
 800b7ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b7f0:	07d2      	lsls	r2, r2, #31
 800b7f2:	d404      	bmi.n	800b7fe <_vfiprintf_r+0xa2>
 800b7f4:	059e      	lsls	r6, r3, #22
 800b7f6:	d402      	bmi.n	800b7fe <_vfiprintf_r+0xa2>
 800b7f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b7fa:	f7ff f85e 	bl	800a8ba <__retarget_lock_release_recursive>
 800b7fe:	9a01      	ldr	r2, [sp, #4]
 800b800:	462b      	mov	r3, r5
 800b802:	4639      	mov	r1, r7
 800b804:	4648      	mov	r0, r9
 800b806:	f000 fc31 	bl	800c06c <__sbprintf>
 800b80a:	9002      	str	r0, [sp, #8]
 800b80c:	e7d9      	b.n	800b7c2 <_vfiprintf_r+0x66>
 800b80e:	2300      	movs	r3, #0
 800b810:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800b814:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800b818:	ae0f      	add	r6, sp, #60	; 0x3c
 800b81a:	ee08 3a10 	vmov	s16, r3
 800b81e:	960c      	str	r6, [sp, #48]	; 0x30
 800b820:	9307      	str	r3, [sp, #28]
 800b822:	9302      	str	r3, [sp, #8]
 800b824:	9b01      	ldr	r3, [sp, #4]
 800b826:	461d      	mov	r5, r3
 800b828:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b82c:	b10a      	cbz	r2, 800b832 <_vfiprintf_r+0xd6>
 800b82e:	2a25      	cmp	r2, #37	; 0x25
 800b830:	d1f9      	bne.n	800b826 <_vfiprintf_r+0xca>
 800b832:	9b01      	ldr	r3, [sp, #4]
 800b834:	ebb5 0803 	subs.w	r8, r5, r3
 800b838:	d00d      	beq.n	800b856 <_vfiprintf_r+0xfa>
 800b83a:	e9c6 3800 	strd	r3, r8, [r6]
 800b83e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b840:	4443      	add	r3, r8
 800b842:	930e      	str	r3, [sp, #56]	; 0x38
 800b844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b846:	3301      	adds	r3, #1
 800b848:	2b07      	cmp	r3, #7
 800b84a:	930d      	str	r3, [sp, #52]	; 0x34
 800b84c:	dc75      	bgt.n	800b93a <_vfiprintf_r+0x1de>
 800b84e:	3608      	adds	r6, #8
 800b850:	9b02      	ldr	r3, [sp, #8]
 800b852:	4443      	add	r3, r8
 800b854:	9302      	str	r3, [sp, #8]
 800b856:	782b      	ldrb	r3, [r5, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f000 83c8 	beq.w	800bfee <_vfiprintf_r+0x892>
 800b85e:	2300      	movs	r3, #0
 800b860:	f04f 31ff 	mov.w	r1, #4294967295
 800b864:	1c6a      	adds	r2, r5, #1
 800b866:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800b86a:	9100      	str	r1, [sp, #0]
 800b86c:	9303      	str	r3, [sp, #12]
 800b86e:	469a      	mov	sl, r3
 800b870:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b874:	9201      	str	r2, [sp, #4]
 800b876:	f1a3 0220 	sub.w	r2, r3, #32
 800b87a:	2a5a      	cmp	r2, #90	; 0x5a
 800b87c:	f200 8310 	bhi.w	800bea0 <_vfiprintf_r+0x744>
 800b880:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b884:	030e0099 	.word	0x030e0099
 800b888:	00a1030e 	.word	0x00a1030e
 800b88c:	030e030e 	.word	0x030e030e
 800b890:	0080030e 	.word	0x0080030e
 800b894:	030e030e 	.word	0x030e030e
 800b898:	00ae00a4 	.word	0x00ae00a4
 800b89c:	00ab030e 	.word	0x00ab030e
 800b8a0:	030e00b0 	.word	0x030e00b0
 800b8a4:	00ce00cb 	.word	0x00ce00cb
 800b8a8:	00ce00ce 	.word	0x00ce00ce
 800b8ac:	00ce00ce 	.word	0x00ce00ce
 800b8b0:	00ce00ce 	.word	0x00ce00ce
 800b8b4:	00ce00ce 	.word	0x00ce00ce
 800b8b8:	030e030e 	.word	0x030e030e
 800b8bc:	030e030e 	.word	0x030e030e
 800b8c0:	030e030e 	.word	0x030e030e
 800b8c4:	030e030e 	.word	0x030e030e
 800b8c8:	00f8030e 	.word	0x00f8030e
 800b8cc:	030e0106 	.word	0x030e0106
 800b8d0:	030e030e 	.word	0x030e030e
 800b8d4:	030e030e 	.word	0x030e030e
 800b8d8:	030e030e 	.word	0x030e030e
 800b8dc:	030e030e 	.word	0x030e030e
 800b8e0:	014d030e 	.word	0x014d030e
 800b8e4:	030e030e 	.word	0x030e030e
 800b8e8:	0192030e 	.word	0x0192030e
 800b8ec:	0270030e 	.word	0x0270030e
 800b8f0:	030e030e 	.word	0x030e030e
 800b8f4:	030e028e 	.word	0x030e028e
 800b8f8:	030e030e 	.word	0x030e030e
 800b8fc:	030e030e 	.word	0x030e030e
 800b900:	030e030e 	.word	0x030e030e
 800b904:	030e030e 	.word	0x030e030e
 800b908:	00f8030e 	.word	0x00f8030e
 800b90c:	030e0108 	.word	0x030e0108
 800b910:	030e030e 	.word	0x030e030e
 800b914:	010800de 	.word	0x010800de
 800b918:	030e00f2 	.word	0x030e00f2
 800b91c:	030e00eb 	.word	0x030e00eb
 800b920:	014f0130 	.word	0x014f0130
 800b924:	00f20182 	.word	0x00f20182
 800b928:	0192030e 	.word	0x0192030e
 800b92c:	02720097 	.word	0x02720097
 800b930:	030e030e 	.word	0x030e030e
 800b934:	030e0065 	.word	0x030e0065
 800b938:	0097      	.short	0x0097
 800b93a:	aa0c      	add	r2, sp, #48	; 0x30
 800b93c:	4639      	mov	r1, r7
 800b93e:	4648      	mov	r0, r9
 800b940:	f7ff feda 	bl	800b6f8 <__sprint_r>
 800b944:	2800      	cmp	r0, #0
 800b946:	f040 8331 	bne.w	800bfac <_vfiprintf_r+0x850>
 800b94a:	ae0f      	add	r6, sp, #60	; 0x3c
 800b94c:	e780      	b.n	800b850 <_vfiprintf_r+0xf4>
 800b94e:	4a95      	ldr	r2, [pc, #596]	; (800bba4 <_vfiprintf_r+0x448>)
 800b950:	9205      	str	r2, [sp, #20]
 800b952:	f01a 0f20 	tst.w	sl, #32
 800b956:	f000 8225 	beq.w	800bda4 <_vfiprintf_r+0x648>
 800b95a:	3407      	adds	r4, #7
 800b95c:	f024 0b07 	bic.w	fp, r4, #7
 800b960:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800b964:	f01a 0f01 	tst.w	sl, #1
 800b968:	d009      	beq.n	800b97e <_vfiprintf_r+0x222>
 800b96a:	ea54 0205 	orrs.w	r2, r4, r5
 800b96e:	bf1f      	itttt	ne
 800b970:	2230      	movne	r2, #48	; 0x30
 800b972:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800b976:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800b97a:	f04a 0a02 	orrne.w	sl, sl, #2
 800b97e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800b982:	e10d      	b.n	800bba0 <_vfiprintf_r+0x444>
 800b984:	4648      	mov	r0, r9
 800b986:	f7fe ff91 	bl	800a8ac <_localeconv_r>
 800b98a:	6843      	ldr	r3, [r0, #4]
 800b98c:	4618      	mov	r0, r3
 800b98e:	ee08 3a10 	vmov	s16, r3
 800b992:	f7f4 fc1d 	bl	80001d0 <strlen>
 800b996:	9007      	str	r0, [sp, #28]
 800b998:	4648      	mov	r0, r9
 800b99a:	f7fe ff87 	bl	800a8ac <_localeconv_r>
 800b99e:	6883      	ldr	r3, [r0, #8]
 800b9a0:	9306      	str	r3, [sp, #24]
 800b9a2:	9b07      	ldr	r3, [sp, #28]
 800b9a4:	b12b      	cbz	r3, 800b9b2 <_vfiprintf_r+0x256>
 800b9a6:	9b06      	ldr	r3, [sp, #24]
 800b9a8:	b11b      	cbz	r3, 800b9b2 <_vfiprintf_r+0x256>
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	b10b      	cbz	r3, 800b9b2 <_vfiprintf_r+0x256>
 800b9ae:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800b9b2:	9a01      	ldr	r2, [sp, #4]
 800b9b4:	e75c      	b.n	800b870 <_vfiprintf_r+0x114>
 800b9b6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1f9      	bne.n	800b9b2 <_vfiprintf_r+0x256>
 800b9be:	2320      	movs	r3, #32
 800b9c0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800b9c4:	e7f5      	b.n	800b9b2 <_vfiprintf_r+0x256>
 800b9c6:	f04a 0a01 	orr.w	sl, sl, #1
 800b9ca:	e7f2      	b.n	800b9b2 <_vfiprintf_r+0x256>
 800b9cc:	f854 3b04 	ldr.w	r3, [r4], #4
 800b9d0:	9303      	str	r3, [sp, #12]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	daed      	bge.n	800b9b2 <_vfiprintf_r+0x256>
 800b9d6:	425b      	negs	r3, r3
 800b9d8:	9303      	str	r3, [sp, #12]
 800b9da:	f04a 0a04 	orr.w	sl, sl, #4
 800b9de:	e7e8      	b.n	800b9b2 <_vfiprintf_r+0x256>
 800b9e0:	232b      	movs	r3, #43	; 0x2b
 800b9e2:	e7ed      	b.n	800b9c0 <_vfiprintf_r+0x264>
 800b9e4:	9a01      	ldr	r2, [sp, #4]
 800b9e6:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b9ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b9ec:	d112      	bne.n	800ba14 <_vfiprintf_r+0x2b8>
 800b9ee:	f854 0b04 	ldr.w	r0, [r4], #4
 800b9f2:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800b9f6:	e9cd 3200 	strd	r3, r2, [sp]
 800b9fa:	e7da      	b.n	800b9b2 <_vfiprintf_r+0x256>
 800b9fc:	9b00      	ldr	r3, [sp, #0]
 800b9fe:	200a      	movs	r0, #10
 800ba00:	fb00 1303 	mla	r3, r0, r3, r1
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ba0a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ba0e:	2909      	cmp	r1, #9
 800ba10:	d9f4      	bls.n	800b9fc <_vfiprintf_r+0x2a0>
 800ba12:	e72f      	b.n	800b874 <_vfiprintf_r+0x118>
 800ba14:	2100      	movs	r1, #0
 800ba16:	9100      	str	r1, [sp, #0]
 800ba18:	e7f7      	b.n	800ba0a <_vfiprintf_r+0x2ae>
 800ba1a:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800ba1e:	e7c8      	b.n	800b9b2 <_vfiprintf_r+0x256>
 800ba20:	2100      	movs	r1, #0
 800ba22:	9a01      	ldr	r2, [sp, #4]
 800ba24:	9103      	str	r1, [sp, #12]
 800ba26:	9903      	ldr	r1, [sp, #12]
 800ba28:	3b30      	subs	r3, #48	; 0x30
 800ba2a:	200a      	movs	r0, #10
 800ba2c:	fb00 3301 	mla	r3, r0, r1, r3
 800ba30:	9303      	str	r3, [sp, #12]
 800ba32:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ba36:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ba3a:	2909      	cmp	r1, #9
 800ba3c:	d9f3      	bls.n	800ba26 <_vfiprintf_r+0x2ca>
 800ba3e:	e719      	b.n	800b874 <_vfiprintf_r+0x118>
 800ba40:	9b01      	ldr	r3, [sp, #4]
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	2b68      	cmp	r3, #104	; 0x68
 800ba46:	bf01      	itttt	eq
 800ba48:	9b01      	ldreq	r3, [sp, #4]
 800ba4a:	3301      	addeq	r3, #1
 800ba4c:	9301      	streq	r3, [sp, #4]
 800ba4e:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800ba52:	bf18      	it	ne
 800ba54:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800ba58:	e7ab      	b.n	800b9b2 <_vfiprintf_r+0x256>
 800ba5a:	9b01      	ldr	r3, [sp, #4]
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	2b6c      	cmp	r3, #108	; 0x6c
 800ba60:	d105      	bne.n	800ba6e <_vfiprintf_r+0x312>
 800ba62:	9b01      	ldr	r3, [sp, #4]
 800ba64:	3301      	adds	r3, #1
 800ba66:	9301      	str	r3, [sp, #4]
 800ba68:	f04a 0a20 	orr.w	sl, sl, #32
 800ba6c:	e7a1      	b.n	800b9b2 <_vfiprintf_r+0x256>
 800ba6e:	f04a 0a10 	orr.w	sl, sl, #16
 800ba72:	e79e      	b.n	800b9b2 <_vfiprintf_r+0x256>
 800ba74:	46a3      	mov	fp, r4
 800ba76:	2100      	movs	r1, #0
 800ba78:	f85b 3b04 	ldr.w	r3, [fp], #4
 800ba7c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800ba80:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800ba84:	2301      	movs	r3, #1
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	460d      	mov	r5, r1
 800ba8a:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800ba8e:	e0a0      	b.n	800bbd2 <_vfiprintf_r+0x476>
 800ba90:	f04a 0a10 	orr.w	sl, sl, #16
 800ba94:	f01a 0f20 	tst.w	sl, #32
 800ba98:	d011      	beq.n	800babe <_vfiprintf_r+0x362>
 800ba9a:	3407      	adds	r4, #7
 800ba9c:	f024 0b07 	bic.w	fp, r4, #7
 800baa0:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800baa4:	2c00      	cmp	r4, #0
 800baa6:	f175 0300 	sbcs.w	r3, r5, #0
 800baaa:	da06      	bge.n	800baba <_vfiprintf_r+0x35e>
 800baac:	4264      	negs	r4, r4
 800baae:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800bab2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800bab6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800baba:	2301      	movs	r3, #1
 800babc:	e03f      	b.n	800bb3e <_vfiprintf_r+0x3e2>
 800babe:	f01a 0f10 	tst.w	sl, #16
 800bac2:	f104 0b04 	add.w	fp, r4, #4
 800bac6:	d002      	beq.n	800bace <_vfiprintf_r+0x372>
 800bac8:	6824      	ldr	r4, [r4, #0]
 800baca:	17e5      	asrs	r5, r4, #31
 800bacc:	e7ea      	b.n	800baa4 <_vfiprintf_r+0x348>
 800bace:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800bad2:	6824      	ldr	r4, [r4, #0]
 800bad4:	d001      	beq.n	800bada <_vfiprintf_r+0x37e>
 800bad6:	b224      	sxth	r4, r4
 800bad8:	e7f7      	b.n	800baca <_vfiprintf_r+0x36e>
 800bada:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800bade:	bf18      	it	ne
 800bae0:	b264      	sxtbne	r4, r4
 800bae2:	e7f2      	b.n	800baca <_vfiprintf_r+0x36e>
 800bae4:	f01a 0f20 	tst.w	sl, #32
 800bae8:	f854 3b04 	ldr.w	r3, [r4], #4
 800baec:	d005      	beq.n	800bafa <_vfiprintf_r+0x39e>
 800baee:	9a02      	ldr	r2, [sp, #8]
 800baf0:	4610      	mov	r0, r2
 800baf2:	17d1      	asrs	r1, r2, #31
 800baf4:	e9c3 0100 	strd	r0, r1, [r3]
 800baf8:	e694      	b.n	800b824 <_vfiprintf_r+0xc8>
 800bafa:	f01a 0f10 	tst.w	sl, #16
 800bafe:	d002      	beq.n	800bb06 <_vfiprintf_r+0x3aa>
 800bb00:	9a02      	ldr	r2, [sp, #8]
 800bb02:	601a      	str	r2, [r3, #0]
 800bb04:	e68e      	b.n	800b824 <_vfiprintf_r+0xc8>
 800bb06:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800bb0a:	d002      	beq.n	800bb12 <_vfiprintf_r+0x3b6>
 800bb0c:	9a02      	ldr	r2, [sp, #8]
 800bb0e:	801a      	strh	r2, [r3, #0]
 800bb10:	e688      	b.n	800b824 <_vfiprintf_r+0xc8>
 800bb12:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800bb16:	d0f3      	beq.n	800bb00 <_vfiprintf_r+0x3a4>
 800bb18:	9a02      	ldr	r2, [sp, #8]
 800bb1a:	701a      	strb	r2, [r3, #0]
 800bb1c:	e682      	b.n	800b824 <_vfiprintf_r+0xc8>
 800bb1e:	f04a 0a10 	orr.w	sl, sl, #16
 800bb22:	f01a 0f20 	tst.w	sl, #32
 800bb26:	d01d      	beq.n	800bb64 <_vfiprintf_r+0x408>
 800bb28:	3407      	adds	r4, #7
 800bb2a:	f024 0b07 	bic.w	fp, r4, #7
 800bb2e:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800bb32:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800bb36:	2300      	movs	r3, #0
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800bb3e:	9a00      	ldr	r2, [sp, #0]
 800bb40:	3201      	adds	r2, #1
 800bb42:	f000 8261 	beq.w	800c008 <_vfiprintf_r+0x8ac>
 800bb46:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800bb4a:	9204      	str	r2, [sp, #16]
 800bb4c:	ea54 0205 	orrs.w	r2, r4, r5
 800bb50:	f040 8260 	bne.w	800c014 <_vfiprintf_r+0x8b8>
 800bb54:	9a00      	ldr	r2, [sp, #0]
 800bb56:	2a00      	cmp	r2, #0
 800bb58:	f000 8197 	beq.w	800be8a <_vfiprintf_r+0x72e>
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	f040 825c 	bne.w	800c01a <_vfiprintf_r+0x8be>
 800bb62:	e135      	b.n	800bdd0 <_vfiprintf_r+0x674>
 800bb64:	f01a 0f10 	tst.w	sl, #16
 800bb68:	f104 0b04 	add.w	fp, r4, #4
 800bb6c:	d001      	beq.n	800bb72 <_vfiprintf_r+0x416>
 800bb6e:	6824      	ldr	r4, [r4, #0]
 800bb70:	e003      	b.n	800bb7a <_vfiprintf_r+0x41e>
 800bb72:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800bb76:	d002      	beq.n	800bb7e <_vfiprintf_r+0x422>
 800bb78:	8824      	ldrh	r4, [r4, #0]
 800bb7a:	2500      	movs	r5, #0
 800bb7c:	e7d9      	b.n	800bb32 <_vfiprintf_r+0x3d6>
 800bb7e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800bb82:	d0f4      	beq.n	800bb6e <_vfiprintf_r+0x412>
 800bb84:	7824      	ldrb	r4, [r4, #0]
 800bb86:	e7f8      	b.n	800bb7a <_vfiprintf_r+0x41e>
 800bb88:	46a3      	mov	fp, r4
 800bb8a:	f647 0330 	movw	r3, #30768	; 0x7830
 800bb8e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800bb92:	f85b 4b04 	ldr.w	r4, [fp], #4
 800bb96:	4b03      	ldr	r3, [pc, #12]	; (800bba4 <_vfiprintf_r+0x448>)
 800bb98:	9305      	str	r3, [sp, #20]
 800bb9a:	2500      	movs	r5, #0
 800bb9c:	f04a 0a02 	orr.w	sl, sl, #2
 800bba0:	2302      	movs	r3, #2
 800bba2:	e7c9      	b.n	800bb38 <_vfiprintf_r+0x3dc>
 800bba4:	0800cd40 	.word	0x0800cd40
 800bba8:	9b00      	ldr	r3, [sp, #0]
 800bbaa:	46a3      	mov	fp, r4
 800bbac:	2500      	movs	r5, #0
 800bbae:	1c5c      	adds	r4, r3, #1
 800bbb0:	f85b 8b04 	ldr.w	r8, [fp], #4
 800bbb4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800bbb8:	f000 80cf 	beq.w	800bd5a <_vfiprintf_r+0x5fe>
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	4629      	mov	r1, r5
 800bbc0:	4640      	mov	r0, r8
 800bbc2:	f7f4 fb0d 	bl	80001e0 <memchr>
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	f000 8174 	beq.w	800beb4 <_vfiprintf_r+0x758>
 800bbcc:	eba0 0308 	sub.w	r3, r0, r8
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	9b00      	ldr	r3, [sp, #0]
 800bbd4:	42ab      	cmp	r3, r5
 800bbd6:	bfb8      	it	lt
 800bbd8:	462b      	movlt	r3, r5
 800bbda:	9304      	str	r3, [sp, #16]
 800bbdc:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800bbe0:	b113      	cbz	r3, 800bbe8 <_vfiprintf_r+0x48c>
 800bbe2:	9b04      	ldr	r3, [sp, #16]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	9304      	str	r3, [sp, #16]
 800bbe8:	f01a 0302 	ands.w	r3, sl, #2
 800bbec:	9308      	str	r3, [sp, #32]
 800bbee:	bf1e      	ittt	ne
 800bbf0:	9b04      	ldrne	r3, [sp, #16]
 800bbf2:	3302      	addne	r3, #2
 800bbf4:	9304      	strne	r3, [sp, #16]
 800bbf6:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800bbfa:	9309      	str	r3, [sp, #36]	; 0x24
 800bbfc:	d11f      	bne.n	800bc3e <_vfiprintf_r+0x4e2>
 800bbfe:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800bc02:	1a9c      	subs	r4, r3, r2
 800bc04:	2c00      	cmp	r4, #0
 800bc06:	dd1a      	ble.n	800bc3e <_vfiprintf_r+0x4e2>
 800bc08:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800bc0c:	48b9      	ldr	r0, [pc, #740]	; (800bef4 <_vfiprintf_r+0x798>)
 800bc0e:	6030      	str	r0, [r6, #0]
 800bc10:	2c10      	cmp	r4, #16
 800bc12:	f103 0301 	add.w	r3, r3, #1
 800bc16:	f106 0108 	add.w	r1, r6, #8
 800bc1a:	f300 814d 	bgt.w	800beb8 <_vfiprintf_r+0x75c>
 800bc1e:	6074      	str	r4, [r6, #4]
 800bc20:	2b07      	cmp	r3, #7
 800bc22:	4414      	add	r4, r2
 800bc24:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800bc28:	f340 8158 	ble.w	800bedc <_vfiprintf_r+0x780>
 800bc2c:	aa0c      	add	r2, sp, #48	; 0x30
 800bc2e:	4639      	mov	r1, r7
 800bc30:	4648      	mov	r0, r9
 800bc32:	f7ff fd61 	bl	800b6f8 <__sprint_r>
 800bc36:	2800      	cmp	r0, #0
 800bc38:	f040 81b8 	bne.w	800bfac <_vfiprintf_r+0x850>
 800bc3c:	ae0f      	add	r6, sp, #60	; 0x3c
 800bc3e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800bc42:	b173      	cbz	r3, 800bc62 <_vfiprintf_r+0x506>
 800bc44:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800bc48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc4a:	6032      	str	r2, [r6, #0]
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	6072      	str	r2, [r6, #4]
 800bc50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc52:	3301      	adds	r3, #1
 800bc54:	3201      	adds	r2, #1
 800bc56:	2b07      	cmp	r3, #7
 800bc58:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800bc5c:	f300 8140 	bgt.w	800bee0 <_vfiprintf_r+0x784>
 800bc60:	3608      	adds	r6, #8
 800bc62:	9b08      	ldr	r3, [sp, #32]
 800bc64:	b16b      	cbz	r3, 800bc82 <_vfiprintf_r+0x526>
 800bc66:	aa0b      	add	r2, sp, #44	; 0x2c
 800bc68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc6a:	6032      	str	r2, [r6, #0]
 800bc6c:	2202      	movs	r2, #2
 800bc6e:	6072      	str	r2, [r6, #4]
 800bc70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc72:	3301      	adds	r3, #1
 800bc74:	3202      	adds	r2, #2
 800bc76:	2b07      	cmp	r3, #7
 800bc78:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800bc7c:	f300 8140 	bgt.w	800bf00 <_vfiprintf_r+0x7a4>
 800bc80:	3608      	adds	r6, #8
 800bc82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc84:	2b80      	cmp	r3, #128	; 0x80
 800bc86:	d11f      	bne.n	800bcc8 <_vfiprintf_r+0x56c>
 800bc88:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800bc8c:	1a9c      	subs	r4, r3, r2
 800bc8e:	2c00      	cmp	r4, #0
 800bc90:	dd1a      	ble.n	800bcc8 <_vfiprintf_r+0x56c>
 800bc92:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800bc96:	4898      	ldr	r0, [pc, #608]	; (800bef8 <_vfiprintf_r+0x79c>)
 800bc98:	6030      	str	r0, [r6, #0]
 800bc9a:	2c10      	cmp	r4, #16
 800bc9c:	f103 0301 	add.w	r3, r3, #1
 800bca0:	f106 0108 	add.w	r1, r6, #8
 800bca4:	f300 8135 	bgt.w	800bf12 <_vfiprintf_r+0x7b6>
 800bca8:	6074      	str	r4, [r6, #4]
 800bcaa:	2b07      	cmp	r3, #7
 800bcac:	4414      	add	r4, r2
 800bcae:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800bcb2:	f340 8140 	ble.w	800bf36 <_vfiprintf_r+0x7da>
 800bcb6:	aa0c      	add	r2, sp, #48	; 0x30
 800bcb8:	4639      	mov	r1, r7
 800bcba:	4648      	mov	r0, r9
 800bcbc:	f7ff fd1c 	bl	800b6f8 <__sprint_r>
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	f040 8173 	bne.w	800bfac <_vfiprintf_r+0x850>
 800bcc6:	ae0f      	add	r6, sp, #60	; 0x3c
 800bcc8:	9b00      	ldr	r3, [sp, #0]
 800bcca:	1aec      	subs	r4, r5, r3
 800bccc:	2c00      	cmp	r4, #0
 800bcce:	dd1a      	ble.n	800bd06 <_vfiprintf_r+0x5aa>
 800bcd0:	4d89      	ldr	r5, [pc, #548]	; (800bef8 <_vfiprintf_r+0x79c>)
 800bcd2:	6035      	str	r5, [r6, #0]
 800bcd4:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800bcd8:	2c10      	cmp	r4, #16
 800bcda:	f103 0301 	add.w	r3, r3, #1
 800bcde:	f106 0208 	add.w	r2, r6, #8
 800bce2:	f300 812a 	bgt.w	800bf3a <_vfiprintf_r+0x7de>
 800bce6:	6074      	str	r4, [r6, #4]
 800bce8:	2b07      	cmp	r3, #7
 800bcea:	440c      	add	r4, r1
 800bcec:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800bcf0:	f340 8134 	ble.w	800bf5c <_vfiprintf_r+0x800>
 800bcf4:	aa0c      	add	r2, sp, #48	; 0x30
 800bcf6:	4639      	mov	r1, r7
 800bcf8:	4648      	mov	r0, r9
 800bcfa:	f7ff fcfd 	bl	800b6f8 <__sprint_r>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	f040 8154 	bne.w	800bfac <_vfiprintf_r+0x850>
 800bd04:	ae0f      	add	r6, sp, #60	; 0x3c
 800bd06:	9b00      	ldr	r3, [sp, #0]
 800bd08:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bd0a:	6073      	str	r3, [r6, #4]
 800bd0c:	4418      	add	r0, r3
 800bd0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd10:	f8c6 8000 	str.w	r8, [r6]
 800bd14:	3301      	adds	r3, #1
 800bd16:	2b07      	cmp	r3, #7
 800bd18:	900e      	str	r0, [sp, #56]	; 0x38
 800bd1a:	930d      	str	r3, [sp, #52]	; 0x34
 800bd1c:	f300 8120 	bgt.w	800bf60 <_vfiprintf_r+0x804>
 800bd20:	f106 0308 	add.w	r3, r6, #8
 800bd24:	f01a 0f04 	tst.w	sl, #4
 800bd28:	f040 8122 	bne.w	800bf70 <_vfiprintf_r+0x814>
 800bd2c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bd30:	9904      	ldr	r1, [sp, #16]
 800bd32:	428a      	cmp	r2, r1
 800bd34:	bfac      	ite	ge
 800bd36:	189b      	addge	r3, r3, r2
 800bd38:	185b      	addlt	r3, r3, r1
 800bd3a:	9302      	str	r3, [sp, #8]
 800bd3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd3e:	b13b      	cbz	r3, 800bd50 <_vfiprintf_r+0x5f4>
 800bd40:	aa0c      	add	r2, sp, #48	; 0x30
 800bd42:	4639      	mov	r1, r7
 800bd44:	4648      	mov	r0, r9
 800bd46:	f7ff fcd7 	bl	800b6f8 <__sprint_r>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	f040 812e 	bne.w	800bfac <_vfiprintf_r+0x850>
 800bd50:	2300      	movs	r3, #0
 800bd52:	930d      	str	r3, [sp, #52]	; 0x34
 800bd54:	465c      	mov	r4, fp
 800bd56:	ae0f      	add	r6, sp, #60	; 0x3c
 800bd58:	e564      	b.n	800b824 <_vfiprintf_r+0xc8>
 800bd5a:	4640      	mov	r0, r8
 800bd5c:	f7f4 fa38 	bl	80001d0 <strlen>
 800bd60:	9000      	str	r0, [sp, #0]
 800bd62:	e736      	b.n	800bbd2 <_vfiprintf_r+0x476>
 800bd64:	f04a 0a10 	orr.w	sl, sl, #16
 800bd68:	f01a 0f20 	tst.w	sl, #32
 800bd6c:	d006      	beq.n	800bd7c <_vfiprintf_r+0x620>
 800bd6e:	3407      	adds	r4, #7
 800bd70:	f024 0b07 	bic.w	fp, r4, #7
 800bd74:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e6dd      	b.n	800bb38 <_vfiprintf_r+0x3dc>
 800bd7c:	f01a 0f10 	tst.w	sl, #16
 800bd80:	f104 0b04 	add.w	fp, r4, #4
 800bd84:	d001      	beq.n	800bd8a <_vfiprintf_r+0x62e>
 800bd86:	6824      	ldr	r4, [r4, #0]
 800bd88:	e003      	b.n	800bd92 <_vfiprintf_r+0x636>
 800bd8a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800bd8e:	d002      	beq.n	800bd96 <_vfiprintf_r+0x63a>
 800bd90:	8824      	ldrh	r4, [r4, #0]
 800bd92:	2500      	movs	r5, #0
 800bd94:	e7f0      	b.n	800bd78 <_vfiprintf_r+0x61c>
 800bd96:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800bd9a:	d0f4      	beq.n	800bd86 <_vfiprintf_r+0x62a>
 800bd9c:	7824      	ldrb	r4, [r4, #0]
 800bd9e:	e7f8      	b.n	800bd92 <_vfiprintf_r+0x636>
 800bda0:	4a56      	ldr	r2, [pc, #344]	; (800befc <_vfiprintf_r+0x7a0>)
 800bda2:	e5d5      	b.n	800b950 <_vfiprintf_r+0x1f4>
 800bda4:	f01a 0f10 	tst.w	sl, #16
 800bda8:	f104 0b04 	add.w	fp, r4, #4
 800bdac:	d001      	beq.n	800bdb2 <_vfiprintf_r+0x656>
 800bdae:	6824      	ldr	r4, [r4, #0]
 800bdb0:	e003      	b.n	800bdba <_vfiprintf_r+0x65e>
 800bdb2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800bdb6:	d002      	beq.n	800bdbe <_vfiprintf_r+0x662>
 800bdb8:	8824      	ldrh	r4, [r4, #0]
 800bdba:	2500      	movs	r5, #0
 800bdbc:	e5d2      	b.n	800b964 <_vfiprintf_r+0x208>
 800bdbe:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800bdc2:	d0f4      	beq.n	800bdae <_vfiprintf_r+0x652>
 800bdc4:	7824      	ldrb	r4, [r4, #0]
 800bdc6:	e7f8      	b.n	800bdba <_vfiprintf_r+0x65e>
 800bdc8:	2d00      	cmp	r5, #0
 800bdca:	bf08      	it	eq
 800bdcc:	2c0a      	cmpeq	r4, #10
 800bdce:	d205      	bcs.n	800bddc <_vfiprintf_r+0x680>
 800bdd0:	3430      	adds	r4, #48	; 0x30
 800bdd2:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800bdd6:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800bdda:	e13c      	b.n	800c056 <_vfiprintf_r+0x8fa>
 800bddc:	ab38      	add	r3, sp, #224	; 0xe0
 800bdde:	9308      	str	r3, [sp, #32]
 800bde0:	9b04      	ldr	r3, [sp, #16]
 800bde2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bde6:	f04f 0a00 	mov.w	sl, #0
 800bdea:	9309      	str	r3, [sp, #36]	; 0x24
 800bdec:	9b08      	ldr	r3, [sp, #32]
 800bdee:	220a      	movs	r2, #10
 800bdf0:	f103 38ff 	add.w	r8, r3, #4294967295
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	4629      	mov	r1, r5
 800bdfa:	f7f4 ff25 	bl	8000c48 <__aeabi_uldivmod>
 800bdfe:	9b08      	ldr	r3, [sp, #32]
 800be00:	3230      	adds	r2, #48	; 0x30
 800be02:	f803 2c01 	strb.w	r2, [r3, #-1]
 800be06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be08:	f10a 0a01 	add.w	sl, sl, #1
 800be0c:	b1db      	cbz	r3, 800be46 <_vfiprintf_r+0x6ea>
 800be0e:	9b06      	ldr	r3, [sp, #24]
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	4553      	cmp	r3, sl
 800be14:	d117      	bne.n	800be46 <_vfiprintf_r+0x6ea>
 800be16:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800be1a:	d014      	beq.n	800be46 <_vfiprintf_r+0x6ea>
 800be1c:	2d00      	cmp	r5, #0
 800be1e:	bf08      	it	eq
 800be20:	2c0a      	cmpeq	r4, #10
 800be22:	d310      	bcc.n	800be46 <_vfiprintf_r+0x6ea>
 800be24:	9b07      	ldr	r3, [sp, #28]
 800be26:	eba8 0803 	sub.w	r8, r8, r3
 800be2a:	461a      	mov	r2, r3
 800be2c:	ee18 1a10 	vmov	r1, s16
 800be30:	4640      	mov	r0, r8
 800be32:	f7ff fbc6 	bl	800b5c2 <strncpy>
 800be36:	9b06      	ldr	r3, [sp, #24]
 800be38:	785b      	ldrb	r3, [r3, #1]
 800be3a:	b1a3      	cbz	r3, 800be66 <_vfiprintf_r+0x70a>
 800be3c:	9b06      	ldr	r3, [sp, #24]
 800be3e:	3301      	adds	r3, #1
 800be40:	9306      	str	r3, [sp, #24]
 800be42:	f04f 0a00 	mov.w	sl, #0
 800be46:	220a      	movs	r2, #10
 800be48:	2300      	movs	r3, #0
 800be4a:	4620      	mov	r0, r4
 800be4c:	4629      	mov	r1, r5
 800be4e:	f7f4 fefb 	bl	8000c48 <__aeabi_uldivmod>
 800be52:	2d00      	cmp	r5, #0
 800be54:	bf08      	it	eq
 800be56:	2c0a      	cmpeq	r4, #10
 800be58:	f0c0 80fd 	bcc.w	800c056 <_vfiprintf_r+0x8fa>
 800be5c:	4604      	mov	r4, r0
 800be5e:	460d      	mov	r5, r1
 800be60:	f8cd 8020 	str.w	r8, [sp, #32]
 800be64:	e7c2      	b.n	800bdec <_vfiprintf_r+0x690>
 800be66:	469a      	mov	sl, r3
 800be68:	e7ed      	b.n	800be46 <_vfiprintf_r+0x6ea>
 800be6a:	9a05      	ldr	r2, [sp, #20]
 800be6c:	f004 030f 	and.w	r3, r4, #15
 800be70:	5cd3      	ldrb	r3, [r2, r3]
 800be72:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800be76:	0923      	lsrs	r3, r4, #4
 800be78:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800be7c:	092a      	lsrs	r2, r5, #4
 800be7e:	461c      	mov	r4, r3
 800be80:	4615      	mov	r5, r2
 800be82:	ea54 0305 	orrs.w	r3, r4, r5
 800be86:	d1f0      	bne.n	800be6a <_vfiprintf_r+0x70e>
 800be88:	e0e5      	b.n	800c056 <_vfiprintf_r+0x8fa>
 800be8a:	b933      	cbnz	r3, 800be9a <_vfiprintf_r+0x73e>
 800be8c:	f01a 0f01 	tst.w	sl, #1
 800be90:	d003      	beq.n	800be9a <_vfiprintf_r+0x73e>
 800be92:	2330      	movs	r3, #48	; 0x30
 800be94:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800be98:	e79d      	b.n	800bdd6 <_vfiprintf_r+0x67a>
 800be9a:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800be9e:	e0da      	b.n	800c056 <_vfiprintf_r+0x8fa>
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f000 80a4 	beq.w	800bfee <_vfiprintf_r+0x892>
 800bea6:	2100      	movs	r1, #0
 800bea8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800beac:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800beb0:	46a3      	mov	fp, r4
 800beb2:	e5e7      	b.n	800ba84 <_vfiprintf_r+0x328>
 800beb4:	4605      	mov	r5, r0
 800beb6:	e68c      	b.n	800bbd2 <_vfiprintf_r+0x476>
 800beb8:	2010      	movs	r0, #16
 800beba:	4402      	add	r2, r0
 800bebc:	2b07      	cmp	r3, #7
 800bebe:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800bec2:	6070      	str	r0, [r6, #4]
 800bec4:	dd07      	ble.n	800bed6 <_vfiprintf_r+0x77a>
 800bec6:	aa0c      	add	r2, sp, #48	; 0x30
 800bec8:	4639      	mov	r1, r7
 800beca:	4648      	mov	r0, r9
 800becc:	f7ff fc14 	bl	800b6f8 <__sprint_r>
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d16b      	bne.n	800bfac <_vfiprintf_r+0x850>
 800bed4:	a90f      	add	r1, sp, #60	; 0x3c
 800bed6:	3c10      	subs	r4, #16
 800bed8:	460e      	mov	r6, r1
 800beda:	e695      	b.n	800bc08 <_vfiprintf_r+0x4ac>
 800bedc:	460e      	mov	r6, r1
 800bede:	e6ae      	b.n	800bc3e <_vfiprintf_r+0x4e2>
 800bee0:	aa0c      	add	r2, sp, #48	; 0x30
 800bee2:	4639      	mov	r1, r7
 800bee4:	4648      	mov	r0, r9
 800bee6:	f7ff fc07 	bl	800b6f8 <__sprint_r>
 800beea:	2800      	cmp	r0, #0
 800beec:	d15e      	bne.n	800bfac <_vfiprintf_r+0x850>
 800beee:	ae0f      	add	r6, sp, #60	; 0x3c
 800bef0:	e6b7      	b.n	800bc62 <_vfiprintf_r+0x506>
 800bef2:	bf00      	nop
 800bef4:	0800cf84 	.word	0x0800cf84
 800bef8:	0800cf94 	.word	0x0800cf94
 800befc:	0800cd51 	.word	0x0800cd51
 800bf00:	aa0c      	add	r2, sp, #48	; 0x30
 800bf02:	4639      	mov	r1, r7
 800bf04:	4648      	mov	r0, r9
 800bf06:	f7ff fbf7 	bl	800b6f8 <__sprint_r>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d14e      	bne.n	800bfac <_vfiprintf_r+0x850>
 800bf0e:	ae0f      	add	r6, sp, #60	; 0x3c
 800bf10:	e6b7      	b.n	800bc82 <_vfiprintf_r+0x526>
 800bf12:	2010      	movs	r0, #16
 800bf14:	4402      	add	r2, r0
 800bf16:	2b07      	cmp	r3, #7
 800bf18:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800bf1c:	6070      	str	r0, [r6, #4]
 800bf1e:	dd07      	ble.n	800bf30 <_vfiprintf_r+0x7d4>
 800bf20:	aa0c      	add	r2, sp, #48	; 0x30
 800bf22:	4639      	mov	r1, r7
 800bf24:	4648      	mov	r0, r9
 800bf26:	f7ff fbe7 	bl	800b6f8 <__sprint_r>
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	d13e      	bne.n	800bfac <_vfiprintf_r+0x850>
 800bf2e:	a90f      	add	r1, sp, #60	; 0x3c
 800bf30:	3c10      	subs	r4, #16
 800bf32:	460e      	mov	r6, r1
 800bf34:	e6ad      	b.n	800bc92 <_vfiprintf_r+0x536>
 800bf36:	460e      	mov	r6, r1
 800bf38:	e6c6      	b.n	800bcc8 <_vfiprintf_r+0x56c>
 800bf3a:	2010      	movs	r0, #16
 800bf3c:	4401      	add	r1, r0
 800bf3e:	2b07      	cmp	r3, #7
 800bf40:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800bf44:	6070      	str	r0, [r6, #4]
 800bf46:	dd06      	ble.n	800bf56 <_vfiprintf_r+0x7fa>
 800bf48:	aa0c      	add	r2, sp, #48	; 0x30
 800bf4a:	4639      	mov	r1, r7
 800bf4c:	4648      	mov	r0, r9
 800bf4e:	f7ff fbd3 	bl	800b6f8 <__sprint_r>
 800bf52:	bb58      	cbnz	r0, 800bfac <_vfiprintf_r+0x850>
 800bf54:	aa0f      	add	r2, sp, #60	; 0x3c
 800bf56:	3c10      	subs	r4, #16
 800bf58:	4616      	mov	r6, r2
 800bf5a:	e6ba      	b.n	800bcd2 <_vfiprintf_r+0x576>
 800bf5c:	4616      	mov	r6, r2
 800bf5e:	e6d2      	b.n	800bd06 <_vfiprintf_r+0x5aa>
 800bf60:	aa0c      	add	r2, sp, #48	; 0x30
 800bf62:	4639      	mov	r1, r7
 800bf64:	4648      	mov	r0, r9
 800bf66:	f7ff fbc7 	bl	800b6f8 <__sprint_r>
 800bf6a:	b9f8      	cbnz	r0, 800bfac <_vfiprintf_r+0x850>
 800bf6c:	ab0f      	add	r3, sp, #60	; 0x3c
 800bf6e:	e6d9      	b.n	800bd24 <_vfiprintf_r+0x5c8>
 800bf70:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800bf74:	1a54      	subs	r4, r2, r1
 800bf76:	2c00      	cmp	r4, #0
 800bf78:	f77f aed8 	ble.w	800bd2c <_vfiprintf_r+0x5d0>
 800bf7c:	4d3a      	ldr	r5, [pc, #232]	; (800c068 <_vfiprintf_r+0x90c>)
 800bf7e:	2610      	movs	r6, #16
 800bf80:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800bf84:	2c10      	cmp	r4, #16
 800bf86:	f102 0201 	add.w	r2, r2, #1
 800bf8a:	601d      	str	r5, [r3, #0]
 800bf8c:	dc1d      	bgt.n	800bfca <_vfiprintf_r+0x86e>
 800bf8e:	605c      	str	r4, [r3, #4]
 800bf90:	2a07      	cmp	r2, #7
 800bf92:	440c      	add	r4, r1
 800bf94:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800bf98:	f77f aec8 	ble.w	800bd2c <_vfiprintf_r+0x5d0>
 800bf9c:	aa0c      	add	r2, sp, #48	; 0x30
 800bf9e:	4639      	mov	r1, r7
 800bfa0:	4648      	mov	r0, r9
 800bfa2:	f7ff fba9 	bl	800b6f8 <__sprint_r>
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	f43f aec0 	beq.w	800bd2c <_vfiprintf_r+0x5d0>
 800bfac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfae:	07d9      	lsls	r1, r3, #31
 800bfb0:	d405      	bmi.n	800bfbe <_vfiprintf_r+0x862>
 800bfb2:	89bb      	ldrh	r3, [r7, #12]
 800bfb4:	059a      	lsls	r2, r3, #22
 800bfb6:	d402      	bmi.n	800bfbe <_vfiprintf_r+0x862>
 800bfb8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bfba:	f7fe fc7e 	bl	800a8ba <__retarget_lock_release_recursive>
 800bfbe:	89bb      	ldrh	r3, [r7, #12]
 800bfc0:	065b      	lsls	r3, r3, #25
 800bfc2:	f57f abfe 	bpl.w	800b7c2 <_vfiprintf_r+0x66>
 800bfc6:	f7ff bbf9 	b.w	800b7bc <_vfiprintf_r+0x60>
 800bfca:	3110      	adds	r1, #16
 800bfcc:	2a07      	cmp	r2, #7
 800bfce:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 800bfd2:	605e      	str	r6, [r3, #4]
 800bfd4:	dc02      	bgt.n	800bfdc <_vfiprintf_r+0x880>
 800bfd6:	3308      	adds	r3, #8
 800bfd8:	3c10      	subs	r4, #16
 800bfda:	e7d1      	b.n	800bf80 <_vfiprintf_r+0x824>
 800bfdc:	aa0c      	add	r2, sp, #48	; 0x30
 800bfde:	4639      	mov	r1, r7
 800bfe0:	4648      	mov	r0, r9
 800bfe2:	f7ff fb89 	bl	800b6f8 <__sprint_r>
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	d1e0      	bne.n	800bfac <_vfiprintf_r+0x850>
 800bfea:	ab0f      	add	r3, sp, #60	; 0x3c
 800bfec:	e7f4      	b.n	800bfd8 <_vfiprintf_r+0x87c>
 800bfee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bff0:	b913      	cbnz	r3, 800bff8 <_vfiprintf_r+0x89c>
 800bff2:	2300      	movs	r3, #0
 800bff4:	930d      	str	r3, [sp, #52]	; 0x34
 800bff6:	e7d9      	b.n	800bfac <_vfiprintf_r+0x850>
 800bff8:	aa0c      	add	r2, sp, #48	; 0x30
 800bffa:	4639      	mov	r1, r7
 800bffc:	4648      	mov	r0, r9
 800bffe:	f7ff fb7b 	bl	800b6f8 <__sprint_r>
 800c002:	2800      	cmp	r0, #0
 800c004:	d0f5      	beq.n	800bff2 <_vfiprintf_r+0x896>
 800c006:	e7d1      	b.n	800bfac <_vfiprintf_r+0x850>
 800c008:	ea54 0205 	orrs.w	r2, r4, r5
 800c00c:	f8cd a010 	str.w	sl, [sp, #16]
 800c010:	f43f ada4 	beq.w	800bb5c <_vfiprintf_r+0x400>
 800c014:	2b01      	cmp	r3, #1
 800c016:	f43f aed7 	beq.w	800bdc8 <_vfiprintf_r+0x66c>
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800c020:	f43f af23 	beq.w	800be6a <_vfiprintf_r+0x70e>
 800c024:	08e2      	lsrs	r2, r4, #3
 800c026:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800c02a:	08e8      	lsrs	r0, r5, #3
 800c02c:	f004 0307 	and.w	r3, r4, #7
 800c030:	4605      	mov	r5, r0
 800c032:	4614      	mov	r4, r2
 800c034:	3330      	adds	r3, #48	; 0x30
 800c036:	ea54 0205 	orrs.w	r2, r4, r5
 800c03a:	4641      	mov	r1, r8
 800c03c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800c040:	d1f0      	bne.n	800c024 <_vfiprintf_r+0x8c8>
 800c042:	9a04      	ldr	r2, [sp, #16]
 800c044:	07d0      	lsls	r0, r2, #31
 800c046:	d506      	bpl.n	800c056 <_vfiprintf_r+0x8fa>
 800c048:	2b30      	cmp	r3, #48	; 0x30
 800c04a:	d004      	beq.n	800c056 <_vfiprintf_r+0x8fa>
 800c04c:	2330      	movs	r3, #48	; 0x30
 800c04e:	f808 3c01 	strb.w	r3, [r8, #-1]
 800c052:	f1a1 0802 	sub.w	r8, r1, #2
 800c056:	ab38      	add	r3, sp, #224	; 0xe0
 800c058:	eba3 0308 	sub.w	r3, r3, r8
 800c05c:	9d00      	ldr	r5, [sp, #0]
 800c05e:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c062:	9300      	str	r3, [sp, #0]
 800c064:	e5b5      	b.n	800bbd2 <_vfiprintf_r+0x476>
 800c066:	bf00      	nop
 800c068:	0800cf84 	.word	0x0800cf84

0800c06c <__sbprintf>:
 800c06c:	b570      	push	{r4, r5, r6, lr}
 800c06e:	460c      	mov	r4, r1
 800c070:	8989      	ldrh	r1, [r1, #12]
 800c072:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800c076:	f021 0102 	bic.w	r1, r1, #2
 800c07a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800c07e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c080:	911b      	str	r1, [sp, #108]	; 0x6c
 800c082:	89e1      	ldrh	r1, [r4, #14]
 800c084:	f8ad 1016 	strh.w	r1, [sp, #22]
 800c088:	69e1      	ldr	r1, [r4, #28]
 800c08a:	9109      	str	r1, [sp, #36]	; 0x24
 800c08c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c08e:	910b      	str	r1, [sp, #44]	; 0x2c
 800c090:	a91c      	add	r1, sp, #112	; 0x70
 800c092:	9102      	str	r1, [sp, #8]
 800c094:	9106      	str	r1, [sp, #24]
 800c096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c09a:	4606      	mov	r6, r0
 800c09c:	9104      	str	r1, [sp, #16]
 800c09e:	9107      	str	r1, [sp, #28]
 800c0a0:	a818      	add	r0, sp, #96	; 0x60
 800c0a2:	2100      	movs	r1, #0
 800c0a4:	e9cd 3200 	strd	r3, r2, [sp]
 800c0a8:	9108      	str	r1, [sp, #32]
 800c0aa:	f7fe fc03 	bl	800a8b4 <__retarget_lock_init_recursive>
 800c0ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c0b2:	a902      	add	r1, sp, #8
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	f7ff fb51 	bl	800b75c <_vfiprintf_r>
 800c0ba:	1e05      	subs	r5, r0, #0
 800c0bc:	db07      	blt.n	800c0ce <__sbprintf+0x62>
 800c0be:	a902      	add	r1, sp, #8
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	f7fe fa17 	bl	800a4f4 <_fflush_r>
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	bf18      	it	ne
 800c0ca:	f04f 35ff 	movne.w	r5, #4294967295
 800c0ce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c0d2:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c0d4:	065b      	lsls	r3, r3, #25
 800c0d6:	bf42      	ittt	mi
 800c0d8:	89a3      	ldrhmi	r3, [r4, #12]
 800c0da:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800c0de:	81a3      	strhmi	r3, [r4, #12]
 800c0e0:	f7fe fbe9 	bl	800a8b6 <__retarget_lock_close_recursive>
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800c0ea:	bd70      	pop	{r4, r5, r6, pc}

0800c0ec <_write_r>:
 800c0ec:	b538      	push	{r3, r4, r5, lr}
 800c0ee:	4d07      	ldr	r5, [pc, #28]	; (800c10c <_write_r+0x20>)
 800c0f0:	4604      	mov	r4, r0
 800c0f2:	4608      	mov	r0, r1
 800c0f4:	4611      	mov	r1, r2
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	602a      	str	r2, [r5, #0]
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	f7f5 ffb8 	bl	8002070 <_write>
 800c100:	1c43      	adds	r3, r0, #1
 800c102:	d102      	bne.n	800c10a <_write_r+0x1e>
 800c104:	682b      	ldr	r3, [r5, #0]
 800c106:	b103      	cbz	r3, 800c10a <_write_r+0x1e>
 800c108:	6023      	str	r3, [r4, #0]
 800c10a:	bd38      	pop	{r3, r4, r5, pc}
 800c10c:	20000c3c 	.word	0x20000c3c

0800c110 <__register_exitproc>:
 800c110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c114:	4d1c      	ldr	r5, [pc, #112]	; (800c188 <__register_exitproc+0x78>)
 800c116:	4606      	mov	r6, r0
 800c118:	6828      	ldr	r0, [r5, #0]
 800c11a:	4698      	mov	r8, r3
 800c11c:	460f      	mov	r7, r1
 800c11e:	4691      	mov	r9, r2
 800c120:	f7fe fbca 	bl	800a8b8 <__retarget_lock_acquire_recursive>
 800c124:	4b19      	ldr	r3, [pc, #100]	; (800c18c <__register_exitproc+0x7c>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800c12c:	4628      	mov	r0, r5
 800c12e:	b91c      	cbnz	r4, 800c138 <__register_exitproc+0x28>
 800c130:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800c134:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800c138:	6865      	ldr	r5, [r4, #4]
 800c13a:	6800      	ldr	r0, [r0, #0]
 800c13c:	2d1f      	cmp	r5, #31
 800c13e:	dd05      	ble.n	800c14c <__register_exitproc+0x3c>
 800c140:	f7fe fbbb 	bl	800a8ba <__retarget_lock_release_recursive>
 800c144:	f04f 30ff 	mov.w	r0, #4294967295
 800c148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c14c:	b19e      	cbz	r6, 800c176 <__register_exitproc+0x66>
 800c14e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800c152:	2201      	movs	r2, #1
 800c154:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800c158:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800c15c:	40aa      	lsls	r2, r5
 800c15e:	4313      	orrs	r3, r2
 800c160:	2e02      	cmp	r6, #2
 800c162:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800c166:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800c16a:	bf02      	ittt	eq
 800c16c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800c170:	431a      	orreq	r2, r3
 800c172:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 800c176:	1c6b      	adds	r3, r5, #1
 800c178:	3502      	adds	r5, #2
 800c17a:	6063      	str	r3, [r4, #4]
 800c17c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800c180:	f7fe fb9b 	bl	800a8ba <__retarget_lock_release_recursive>
 800c184:	2000      	movs	r0, #0
 800c186:	e7df      	b.n	800c148 <__register_exitproc+0x38>
 800c188:	20000468 	.word	0x20000468
 800c18c:	0800cd2c 	.word	0x0800cd2c

0800c190 <__assert_func>:
 800c190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c192:	4614      	mov	r4, r2
 800c194:	461a      	mov	r2, r3
 800c196:	4b09      	ldr	r3, [pc, #36]	; (800c1bc <__assert_func+0x2c>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4605      	mov	r5, r0
 800c19c:	68d8      	ldr	r0, [r3, #12]
 800c19e:	b14c      	cbz	r4, 800c1b4 <__assert_func+0x24>
 800c1a0:	4b07      	ldr	r3, [pc, #28]	; (800c1c0 <__assert_func+0x30>)
 800c1a2:	9100      	str	r1, [sp, #0]
 800c1a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1a8:	4906      	ldr	r1, [pc, #24]	; (800c1c4 <__assert_func+0x34>)
 800c1aa:	462b      	mov	r3, r5
 800c1ac:	f000 f8a4 	bl	800c2f8 <fiprintf>
 800c1b0:	f000 fcf5 	bl	800cb9e <abort>
 800c1b4:	4b04      	ldr	r3, [pc, #16]	; (800c1c8 <__assert_func+0x38>)
 800c1b6:	461c      	mov	r4, r3
 800c1b8:	e7f3      	b.n	800c1a2 <__assert_func+0x12>
 800c1ba:	bf00      	nop
 800c1bc:	2000003c 	.word	0x2000003c
 800c1c0:	0800cfa4 	.word	0x0800cfa4
 800c1c4:	0800cfb1 	.word	0x0800cfb1
 800c1c8:	0800cfdf 	.word	0x0800cfdf

0800c1cc <_calloc_r>:
 800c1cc:	b510      	push	{r4, lr}
 800c1ce:	4351      	muls	r1, r2
 800c1d0:	f7fe fbe0 	bl	800a994 <_malloc_r>
 800c1d4:	4604      	mov	r4, r0
 800c1d6:	b198      	cbz	r0, 800c200 <_calloc_r+0x34>
 800c1d8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c1dc:	f022 0203 	bic.w	r2, r2, #3
 800c1e0:	3a04      	subs	r2, #4
 800c1e2:	2a24      	cmp	r2, #36	; 0x24
 800c1e4:	d81b      	bhi.n	800c21e <_calloc_r+0x52>
 800c1e6:	2a13      	cmp	r2, #19
 800c1e8:	d917      	bls.n	800c21a <_calloc_r+0x4e>
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	2a1b      	cmp	r2, #27
 800c1ee:	e9c0 1100 	strd	r1, r1, [r0]
 800c1f2:	d807      	bhi.n	800c204 <_calloc_r+0x38>
 800c1f4:	f100 0308 	add.w	r3, r0, #8
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	e9c3 2200 	strd	r2, r2, [r3]
 800c1fe:	609a      	str	r2, [r3, #8]
 800c200:	4620      	mov	r0, r4
 800c202:	bd10      	pop	{r4, pc}
 800c204:	2a24      	cmp	r2, #36	; 0x24
 800c206:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800c20a:	bf11      	iteee	ne
 800c20c:	f100 0310 	addne.w	r3, r0, #16
 800c210:	6101      	streq	r1, [r0, #16]
 800c212:	f100 0318 	addeq.w	r3, r0, #24
 800c216:	6141      	streq	r1, [r0, #20]
 800c218:	e7ee      	b.n	800c1f8 <_calloc_r+0x2c>
 800c21a:	4603      	mov	r3, r0
 800c21c:	e7ec      	b.n	800c1f8 <_calloc_r+0x2c>
 800c21e:	2100      	movs	r1, #0
 800c220:	f7fa fd80 	bl	8006d24 <memset>
 800c224:	e7ec      	b.n	800c200 <_calloc_r+0x34>
	...

0800c228 <_close_r>:
 800c228:	b538      	push	{r3, r4, r5, lr}
 800c22a:	4d06      	ldr	r5, [pc, #24]	; (800c244 <_close_r+0x1c>)
 800c22c:	2300      	movs	r3, #0
 800c22e:	4604      	mov	r4, r0
 800c230:	4608      	mov	r0, r1
 800c232:	602b      	str	r3, [r5, #0]
 800c234:	f7f5 ff3e 	bl	80020b4 <_close>
 800c238:	1c43      	adds	r3, r0, #1
 800c23a:	d102      	bne.n	800c242 <_close_r+0x1a>
 800c23c:	682b      	ldr	r3, [r5, #0]
 800c23e:	b103      	cbz	r3, 800c242 <_close_r+0x1a>
 800c240:	6023      	str	r3, [r4, #0]
 800c242:	bd38      	pop	{r3, r4, r5, pc}
 800c244:	20000c3c 	.word	0x20000c3c

0800c248 <_fclose_r>:
 800c248:	b570      	push	{r4, r5, r6, lr}
 800c24a:	4606      	mov	r6, r0
 800c24c:	460c      	mov	r4, r1
 800c24e:	b911      	cbnz	r1, 800c256 <_fclose_r+0xe>
 800c250:	2500      	movs	r5, #0
 800c252:	4628      	mov	r0, r5
 800c254:	bd70      	pop	{r4, r5, r6, pc}
 800c256:	b118      	cbz	r0, 800c260 <_fclose_r+0x18>
 800c258:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c25a:	b90b      	cbnz	r3, 800c260 <_fclose_r+0x18>
 800c25c:	f7fe f9b6 	bl	800a5cc <__sinit>
 800c260:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c262:	07d8      	lsls	r0, r3, #31
 800c264:	d405      	bmi.n	800c272 <_fclose_r+0x2a>
 800c266:	89a3      	ldrh	r3, [r4, #12]
 800c268:	0599      	lsls	r1, r3, #22
 800c26a:	d402      	bmi.n	800c272 <_fclose_r+0x2a>
 800c26c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c26e:	f7fe fb23 	bl	800a8b8 <__retarget_lock_acquire_recursive>
 800c272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c276:	b93b      	cbnz	r3, 800c288 <_fclose_r+0x40>
 800c278:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800c27a:	f015 0501 	ands.w	r5, r5, #1
 800c27e:	d1e7      	bne.n	800c250 <_fclose_r+0x8>
 800c280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c282:	f7fe fb1a 	bl	800a8ba <__retarget_lock_release_recursive>
 800c286:	e7e4      	b.n	800c252 <_fclose_r+0xa>
 800c288:	4621      	mov	r1, r4
 800c28a:	4630      	mov	r0, r6
 800c28c:	f7fe f8a4 	bl	800a3d8 <__sflush_r>
 800c290:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c292:	4605      	mov	r5, r0
 800c294:	b133      	cbz	r3, 800c2a4 <_fclose_r+0x5c>
 800c296:	69e1      	ldr	r1, [r4, #28]
 800c298:	4630      	mov	r0, r6
 800c29a:	4798      	blx	r3
 800c29c:	2800      	cmp	r0, #0
 800c29e:	bfb8      	it	lt
 800c2a0:	f04f 35ff 	movlt.w	r5, #4294967295
 800c2a4:	89a3      	ldrh	r3, [r4, #12]
 800c2a6:	061a      	lsls	r2, r3, #24
 800c2a8:	d503      	bpl.n	800c2b2 <_fclose_r+0x6a>
 800c2aa:	6921      	ldr	r1, [r4, #16]
 800c2ac:	4630      	mov	r0, r6
 800c2ae:	f7fe fa1d 	bl	800a6ec <_free_r>
 800c2b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c2b4:	b141      	cbz	r1, 800c2c8 <_fclose_r+0x80>
 800c2b6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c2ba:	4299      	cmp	r1, r3
 800c2bc:	d002      	beq.n	800c2c4 <_fclose_r+0x7c>
 800c2be:	4630      	mov	r0, r6
 800c2c0:	f7fe fa14 	bl	800a6ec <_free_r>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	6323      	str	r3, [r4, #48]	; 0x30
 800c2c8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c2ca:	b121      	cbz	r1, 800c2d6 <_fclose_r+0x8e>
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	f7fe fa0d 	bl	800a6ec <_free_r>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	6463      	str	r3, [r4, #68]	; 0x44
 800c2d6:	f7fe f961 	bl	800a59c <__sfp_lock_acquire>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	81a3      	strh	r3, [r4, #12]
 800c2de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2e0:	07db      	lsls	r3, r3, #31
 800c2e2:	d402      	bmi.n	800c2ea <_fclose_r+0xa2>
 800c2e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2e6:	f7fe fae8 	bl	800a8ba <__retarget_lock_release_recursive>
 800c2ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2ec:	f7fe fae3 	bl	800a8b6 <__retarget_lock_close_recursive>
 800c2f0:	f7fe f95a 	bl	800a5a8 <__sfp_lock_release>
 800c2f4:	e7ad      	b.n	800c252 <_fclose_r+0xa>
	...

0800c2f8 <fiprintf>:
 800c2f8:	b40e      	push	{r1, r2, r3}
 800c2fa:	b503      	push	{r0, r1, lr}
 800c2fc:	4601      	mov	r1, r0
 800c2fe:	ab03      	add	r3, sp, #12
 800c300:	4805      	ldr	r0, [pc, #20]	; (800c318 <fiprintf+0x20>)
 800c302:	f853 2b04 	ldr.w	r2, [r3], #4
 800c306:	6800      	ldr	r0, [r0, #0]
 800c308:	9301      	str	r3, [sp, #4]
 800c30a:	f7ff fa27 	bl	800b75c <_vfiprintf_r>
 800c30e:	b002      	add	sp, #8
 800c310:	f85d eb04 	ldr.w	lr, [sp], #4
 800c314:	b003      	add	sp, #12
 800c316:	4770      	bx	lr
 800c318:	2000003c 	.word	0x2000003c

0800c31c <__fputwc>:
 800c31c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c320:	4680      	mov	r8, r0
 800c322:	460e      	mov	r6, r1
 800c324:	4615      	mov	r5, r2
 800c326:	f000 f9d1 	bl	800c6cc <__locale_mb_cur_max>
 800c32a:	2801      	cmp	r0, #1
 800c32c:	d11c      	bne.n	800c368 <__fputwc+0x4c>
 800c32e:	1e73      	subs	r3, r6, #1
 800c330:	2bfe      	cmp	r3, #254	; 0xfe
 800c332:	d819      	bhi.n	800c368 <__fputwc+0x4c>
 800c334:	f88d 6004 	strb.w	r6, [sp, #4]
 800c338:	4604      	mov	r4, r0
 800c33a:	2700      	movs	r7, #0
 800c33c:	f10d 0904 	add.w	r9, sp, #4
 800c340:	42a7      	cmp	r7, r4
 800c342:	d020      	beq.n	800c386 <__fputwc+0x6a>
 800c344:	68ab      	ldr	r3, [r5, #8]
 800c346:	f817 1009 	ldrb.w	r1, [r7, r9]
 800c34a:	3b01      	subs	r3, #1
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	60ab      	str	r3, [r5, #8]
 800c350:	da04      	bge.n	800c35c <__fputwc+0x40>
 800c352:	69aa      	ldr	r2, [r5, #24]
 800c354:	4293      	cmp	r3, r2
 800c356:	db1a      	blt.n	800c38e <__fputwc+0x72>
 800c358:	290a      	cmp	r1, #10
 800c35a:	d018      	beq.n	800c38e <__fputwc+0x72>
 800c35c:	682b      	ldr	r3, [r5, #0]
 800c35e:	1c5a      	adds	r2, r3, #1
 800c360:	602a      	str	r2, [r5, #0]
 800c362:	7019      	strb	r1, [r3, #0]
 800c364:	3701      	adds	r7, #1
 800c366:	e7eb      	b.n	800c340 <__fputwc+0x24>
 800c368:	4632      	mov	r2, r6
 800c36a:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800c36e:	a901      	add	r1, sp, #4
 800c370:	4640      	mov	r0, r8
 800c372:	f000 fbf1 	bl	800cb58 <_wcrtomb_r>
 800c376:	1c42      	adds	r2, r0, #1
 800c378:	4604      	mov	r4, r0
 800c37a:	d1de      	bne.n	800c33a <__fputwc+0x1e>
 800c37c:	89ab      	ldrh	r3, [r5, #12]
 800c37e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c382:	81ab      	strh	r3, [r5, #12]
 800c384:	4606      	mov	r6, r0
 800c386:	4630      	mov	r0, r6
 800c388:	b003      	add	sp, #12
 800c38a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c38e:	462a      	mov	r2, r5
 800c390:	4640      	mov	r0, r8
 800c392:	f000 fb97 	bl	800cac4 <__swbuf_r>
 800c396:	1c43      	adds	r3, r0, #1
 800c398:	d1e4      	bne.n	800c364 <__fputwc+0x48>
 800c39a:	4606      	mov	r6, r0
 800c39c:	e7f3      	b.n	800c386 <__fputwc+0x6a>

0800c39e <_fputwc_r>:
 800c39e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800c3a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3a2:	4614      	mov	r4, r2
 800c3a4:	07da      	lsls	r2, r3, #31
 800c3a6:	4605      	mov	r5, r0
 800c3a8:	d407      	bmi.n	800c3ba <_fputwc_r+0x1c>
 800c3aa:	89a3      	ldrh	r3, [r4, #12]
 800c3ac:	059b      	lsls	r3, r3, #22
 800c3ae:	d404      	bmi.n	800c3ba <_fputwc_r+0x1c>
 800c3b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3b2:	9101      	str	r1, [sp, #4]
 800c3b4:	f7fe fa80 	bl	800a8b8 <__retarget_lock_acquire_recursive>
 800c3b8:	9901      	ldr	r1, [sp, #4]
 800c3ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3be:	0498      	lsls	r0, r3, #18
 800c3c0:	d406      	bmi.n	800c3d0 <_fputwc_r+0x32>
 800c3c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c3c6:	81a3      	strh	r3, [r4, #12]
 800c3c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c3ce:	6663      	str	r3, [r4, #100]	; 0x64
 800c3d0:	4622      	mov	r2, r4
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	f7ff ffa2 	bl	800c31c <__fputwc>
 800c3d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3da:	07da      	lsls	r2, r3, #31
 800c3dc:	4605      	mov	r5, r0
 800c3de:	d405      	bmi.n	800c3ec <_fputwc_r+0x4e>
 800c3e0:	89a3      	ldrh	r3, [r4, #12]
 800c3e2:	059b      	lsls	r3, r3, #22
 800c3e4:	d402      	bmi.n	800c3ec <_fputwc_r+0x4e>
 800c3e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3e8:	f7fe fa67 	bl	800a8ba <__retarget_lock_release_recursive>
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	b003      	add	sp, #12
 800c3f0:	bd30      	pop	{r4, r5, pc}
	...

0800c3f4 <_fstat_r>:
 800c3f4:	b538      	push	{r3, r4, r5, lr}
 800c3f6:	4d07      	ldr	r5, [pc, #28]	; (800c414 <_fstat_r+0x20>)
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	4608      	mov	r0, r1
 800c3fe:	4611      	mov	r1, r2
 800c400:	602b      	str	r3, [r5, #0]
 800c402:	f7f5 fe63 	bl	80020cc <_fstat>
 800c406:	1c43      	adds	r3, r0, #1
 800c408:	d102      	bne.n	800c410 <_fstat_r+0x1c>
 800c40a:	682b      	ldr	r3, [r5, #0]
 800c40c:	b103      	cbz	r3, 800c410 <_fstat_r+0x1c>
 800c40e:	6023      	str	r3, [r4, #0]
 800c410:	bd38      	pop	{r3, r4, r5, pc}
 800c412:	bf00      	nop
 800c414:	20000c3c 	.word	0x20000c3c

0800c418 <__sfvwrite_r>:
 800c418:	6893      	ldr	r3, [r2, #8]
 800c41a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c41e:	4606      	mov	r6, r0
 800c420:	460c      	mov	r4, r1
 800c422:	4690      	mov	r8, r2
 800c424:	b91b      	cbnz	r3, 800c42e <__sfvwrite_r+0x16>
 800c426:	2000      	movs	r0, #0
 800c428:	b003      	add	sp, #12
 800c42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c42e:	898b      	ldrh	r3, [r1, #12]
 800c430:	0718      	lsls	r0, r3, #28
 800c432:	d550      	bpl.n	800c4d6 <__sfvwrite_r+0xbe>
 800c434:	690b      	ldr	r3, [r1, #16]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d04d      	beq.n	800c4d6 <__sfvwrite_r+0xbe>
 800c43a:	89a3      	ldrh	r3, [r4, #12]
 800c43c:	f8d8 7000 	ldr.w	r7, [r8]
 800c440:	f013 0902 	ands.w	r9, r3, #2
 800c444:	d16c      	bne.n	800c520 <__sfvwrite_r+0x108>
 800c446:	f013 0301 	ands.w	r3, r3, #1
 800c44a:	f000 809c 	beq.w	800c586 <__sfvwrite_r+0x16e>
 800c44e:	4648      	mov	r0, r9
 800c450:	46ca      	mov	sl, r9
 800c452:	46cb      	mov	fp, r9
 800c454:	f1bb 0f00 	cmp.w	fp, #0
 800c458:	f000 8103 	beq.w	800c662 <__sfvwrite_r+0x24a>
 800c45c:	b950      	cbnz	r0, 800c474 <__sfvwrite_r+0x5c>
 800c45e:	465a      	mov	r2, fp
 800c460:	210a      	movs	r1, #10
 800c462:	4650      	mov	r0, sl
 800c464:	f7f3 febc 	bl	80001e0 <memchr>
 800c468:	2800      	cmp	r0, #0
 800c46a:	f000 80ff 	beq.w	800c66c <__sfvwrite_r+0x254>
 800c46e:	3001      	adds	r0, #1
 800c470:	eba0 090a 	sub.w	r9, r0, sl
 800c474:	6820      	ldr	r0, [r4, #0]
 800c476:	6921      	ldr	r1, [r4, #16]
 800c478:	6963      	ldr	r3, [r4, #20]
 800c47a:	45d9      	cmp	r9, fp
 800c47c:	464a      	mov	r2, r9
 800c47e:	bf28      	it	cs
 800c480:	465a      	movcs	r2, fp
 800c482:	4288      	cmp	r0, r1
 800c484:	f240 80f5 	bls.w	800c672 <__sfvwrite_r+0x25a>
 800c488:	68a5      	ldr	r5, [r4, #8]
 800c48a:	441d      	add	r5, r3
 800c48c:	42aa      	cmp	r2, r5
 800c48e:	f340 80f0 	ble.w	800c672 <__sfvwrite_r+0x25a>
 800c492:	4651      	mov	r1, sl
 800c494:	462a      	mov	r2, r5
 800c496:	f000 f943 	bl	800c720 <memmove>
 800c49a:	6823      	ldr	r3, [r4, #0]
 800c49c:	442b      	add	r3, r5
 800c49e:	6023      	str	r3, [r4, #0]
 800c4a0:	4621      	mov	r1, r4
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	f7fe f826 	bl	800a4f4 <_fflush_r>
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	d167      	bne.n	800c57c <__sfvwrite_r+0x164>
 800c4ac:	ebb9 0905 	subs.w	r9, r9, r5
 800c4b0:	f040 80f7 	bne.w	800c6a2 <__sfvwrite_r+0x28a>
 800c4b4:	4621      	mov	r1, r4
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	f7fe f81c 	bl	800a4f4 <_fflush_r>
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	d15d      	bne.n	800c57c <__sfvwrite_r+0x164>
 800c4c0:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800c4c4:	44aa      	add	sl, r5
 800c4c6:	ebab 0b05 	sub.w	fp, fp, r5
 800c4ca:	1b55      	subs	r5, r2, r5
 800c4cc:	f8c8 5008 	str.w	r5, [r8, #8]
 800c4d0:	2d00      	cmp	r5, #0
 800c4d2:	d1bf      	bne.n	800c454 <__sfvwrite_r+0x3c>
 800c4d4:	e7a7      	b.n	800c426 <__sfvwrite_r+0xe>
 800c4d6:	4621      	mov	r1, r4
 800c4d8:	4630      	mov	r0, r6
 800c4da:	f7fd f8b3 	bl	8009644 <__swsetup_r>
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d0ab      	beq.n	800c43a <__sfvwrite_r+0x22>
 800c4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e6:	e79f      	b.n	800c428 <__sfvwrite_r+0x10>
 800c4e8:	e9d7 b900 	ldrd	fp, r9, [r7]
 800c4ec:	3708      	adds	r7, #8
 800c4ee:	f1b9 0f00 	cmp.w	r9, #0
 800c4f2:	d0f9      	beq.n	800c4e8 <__sfvwrite_r+0xd0>
 800c4f4:	45d1      	cmp	r9, sl
 800c4f6:	464b      	mov	r3, r9
 800c4f8:	69e1      	ldr	r1, [r4, #28]
 800c4fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c4fc:	bf28      	it	cs
 800c4fe:	4653      	movcs	r3, sl
 800c500:	465a      	mov	r2, fp
 800c502:	4630      	mov	r0, r6
 800c504:	47a8      	blx	r5
 800c506:	2800      	cmp	r0, #0
 800c508:	dd38      	ble.n	800c57c <__sfvwrite_r+0x164>
 800c50a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c50e:	4483      	add	fp, r0
 800c510:	eba9 0900 	sub.w	r9, r9, r0
 800c514:	1a18      	subs	r0, r3, r0
 800c516:	f8c8 0008 	str.w	r0, [r8, #8]
 800c51a:	2800      	cmp	r0, #0
 800c51c:	d1e7      	bne.n	800c4ee <__sfvwrite_r+0xd6>
 800c51e:	e782      	b.n	800c426 <__sfvwrite_r+0xe>
 800c520:	f04f 0b00 	mov.w	fp, #0
 800c524:	f8df a180 	ldr.w	sl, [pc, #384]	; 800c6a8 <__sfvwrite_r+0x290>
 800c528:	46d9      	mov	r9, fp
 800c52a:	e7e0      	b.n	800c4ee <__sfvwrite_r+0xd6>
 800c52c:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800c530:	3708      	adds	r7, #8
 800c532:	f1ba 0f00 	cmp.w	sl, #0
 800c536:	d0f9      	beq.n	800c52c <__sfvwrite_r+0x114>
 800c538:	89a3      	ldrh	r3, [r4, #12]
 800c53a:	68a2      	ldr	r2, [r4, #8]
 800c53c:	6820      	ldr	r0, [r4, #0]
 800c53e:	0599      	lsls	r1, r3, #22
 800c540:	d563      	bpl.n	800c60a <__sfvwrite_r+0x1f2>
 800c542:	4552      	cmp	r2, sl
 800c544:	d836      	bhi.n	800c5b4 <__sfvwrite_r+0x19c>
 800c546:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800c54a:	d033      	beq.n	800c5b4 <__sfvwrite_r+0x19c>
 800c54c:	6921      	ldr	r1, [r4, #16]
 800c54e:	6965      	ldr	r5, [r4, #20]
 800c550:	eba0 0b01 	sub.w	fp, r0, r1
 800c554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c558:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c55c:	f10b 0201 	add.w	r2, fp, #1
 800c560:	106d      	asrs	r5, r5, #1
 800c562:	4452      	add	r2, sl
 800c564:	4295      	cmp	r5, r2
 800c566:	bf38      	it	cc
 800c568:	4615      	movcc	r5, r2
 800c56a:	055b      	lsls	r3, r3, #21
 800c56c:	d53d      	bpl.n	800c5ea <__sfvwrite_r+0x1d2>
 800c56e:	4629      	mov	r1, r5
 800c570:	4630      	mov	r0, r6
 800c572:	f7fe fa0f 	bl	800a994 <_malloc_r>
 800c576:	b948      	cbnz	r0, 800c58c <__sfvwrite_r+0x174>
 800c578:	230c      	movs	r3, #12
 800c57a:	6033      	str	r3, [r6, #0]
 800c57c:	89a3      	ldrh	r3, [r4, #12]
 800c57e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c582:	81a3      	strh	r3, [r4, #12]
 800c584:	e7ad      	b.n	800c4e2 <__sfvwrite_r+0xca>
 800c586:	4699      	mov	r9, r3
 800c588:	469a      	mov	sl, r3
 800c58a:	e7d2      	b.n	800c532 <__sfvwrite_r+0x11a>
 800c58c:	465a      	mov	r2, fp
 800c58e:	6921      	ldr	r1, [r4, #16]
 800c590:	9001      	str	r0, [sp, #4]
 800c592:	f7fe fc41 	bl	800ae18 <memcpy>
 800c596:	89a2      	ldrh	r2, [r4, #12]
 800c598:	9b01      	ldr	r3, [sp, #4]
 800c59a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c59e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c5a2:	81a2      	strh	r2, [r4, #12]
 800c5a4:	6123      	str	r3, [r4, #16]
 800c5a6:	6165      	str	r5, [r4, #20]
 800c5a8:	445b      	add	r3, fp
 800c5aa:	eba5 050b 	sub.w	r5, r5, fp
 800c5ae:	6023      	str	r3, [r4, #0]
 800c5b0:	4652      	mov	r2, sl
 800c5b2:	60a5      	str	r5, [r4, #8]
 800c5b4:	4552      	cmp	r2, sl
 800c5b6:	bf28      	it	cs
 800c5b8:	4652      	movcs	r2, sl
 800c5ba:	6820      	ldr	r0, [r4, #0]
 800c5bc:	9201      	str	r2, [sp, #4]
 800c5be:	4649      	mov	r1, r9
 800c5c0:	f000 f8ae 	bl	800c720 <memmove>
 800c5c4:	68a3      	ldr	r3, [r4, #8]
 800c5c6:	9a01      	ldr	r2, [sp, #4]
 800c5c8:	1a9b      	subs	r3, r3, r2
 800c5ca:	60a3      	str	r3, [r4, #8]
 800c5cc:	6823      	ldr	r3, [r4, #0]
 800c5ce:	441a      	add	r2, r3
 800c5d0:	4655      	mov	r5, sl
 800c5d2:	6022      	str	r2, [r4, #0]
 800c5d4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800c5d8:	44a9      	add	r9, r5
 800c5da:	ebaa 0a05 	sub.w	sl, sl, r5
 800c5de:	1b45      	subs	r5, r0, r5
 800c5e0:	f8c8 5008 	str.w	r5, [r8, #8]
 800c5e4:	2d00      	cmp	r5, #0
 800c5e6:	d1a4      	bne.n	800c532 <__sfvwrite_r+0x11a>
 800c5e8:	e71d      	b.n	800c426 <__sfvwrite_r+0xe>
 800c5ea:	462a      	mov	r2, r5
 800c5ec:	4630      	mov	r0, r6
 800c5ee:	f000 f8c3 	bl	800c778 <_realloc_r>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2800      	cmp	r0, #0
 800c5f6:	d1d5      	bne.n	800c5a4 <__sfvwrite_r+0x18c>
 800c5f8:	6921      	ldr	r1, [r4, #16]
 800c5fa:	4630      	mov	r0, r6
 800c5fc:	f7fe f876 	bl	800a6ec <_free_r>
 800c600:	89a3      	ldrh	r3, [r4, #12]
 800c602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c606:	81a3      	strh	r3, [r4, #12]
 800c608:	e7b6      	b.n	800c578 <__sfvwrite_r+0x160>
 800c60a:	6923      	ldr	r3, [r4, #16]
 800c60c:	4283      	cmp	r3, r0
 800c60e:	d302      	bcc.n	800c616 <__sfvwrite_r+0x1fe>
 800c610:	6961      	ldr	r1, [r4, #20]
 800c612:	4551      	cmp	r1, sl
 800c614:	d915      	bls.n	800c642 <__sfvwrite_r+0x22a>
 800c616:	4552      	cmp	r2, sl
 800c618:	bf28      	it	cs
 800c61a:	4652      	movcs	r2, sl
 800c61c:	4649      	mov	r1, r9
 800c61e:	4615      	mov	r5, r2
 800c620:	f000 f87e 	bl	800c720 <memmove>
 800c624:	68a3      	ldr	r3, [r4, #8]
 800c626:	6822      	ldr	r2, [r4, #0]
 800c628:	1b5b      	subs	r3, r3, r5
 800c62a:	442a      	add	r2, r5
 800c62c:	60a3      	str	r3, [r4, #8]
 800c62e:	6022      	str	r2, [r4, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1cf      	bne.n	800c5d4 <__sfvwrite_r+0x1bc>
 800c634:	4621      	mov	r1, r4
 800c636:	4630      	mov	r0, r6
 800c638:	f7fd ff5c 	bl	800a4f4 <_fflush_r>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d0c9      	beq.n	800c5d4 <__sfvwrite_r+0x1bc>
 800c640:	e79c      	b.n	800c57c <__sfvwrite_r+0x164>
 800c642:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c646:	459a      	cmp	sl, r3
 800c648:	bf38      	it	cc
 800c64a:	4653      	movcc	r3, sl
 800c64c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c64e:	fb93 f3f1 	sdiv	r3, r3, r1
 800c652:	464a      	mov	r2, r9
 800c654:	434b      	muls	r3, r1
 800c656:	4630      	mov	r0, r6
 800c658:	69e1      	ldr	r1, [r4, #28]
 800c65a:	47a8      	blx	r5
 800c65c:	1e05      	subs	r5, r0, #0
 800c65e:	dcb9      	bgt.n	800c5d4 <__sfvwrite_r+0x1bc>
 800c660:	e78c      	b.n	800c57c <__sfvwrite_r+0x164>
 800c662:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c666:	2000      	movs	r0, #0
 800c668:	3708      	adds	r7, #8
 800c66a:	e6f3      	b.n	800c454 <__sfvwrite_r+0x3c>
 800c66c:	f10b 0901 	add.w	r9, fp, #1
 800c670:	e700      	b.n	800c474 <__sfvwrite_r+0x5c>
 800c672:	4293      	cmp	r3, r2
 800c674:	dc08      	bgt.n	800c688 <__sfvwrite_r+0x270>
 800c676:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c678:	69e1      	ldr	r1, [r4, #28]
 800c67a:	4652      	mov	r2, sl
 800c67c:	4630      	mov	r0, r6
 800c67e:	47a8      	blx	r5
 800c680:	1e05      	subs	r5, r0, #0
 800c682:	f73f af13 	bgt.w	800c4ac <__sfvwrite_r+0x94>
 800c686:	e779      	b.n	800c57c <__sfvwrite_r+0x164>
 800c688:	4651      	mov	r1, sl
 800c68a:	9201      	str	r2, [sp, #4]
 800c68c:	f000 f848 	bl	800c720 <memmove>
 800c690:	9a01      	ldr	r2, [sp, #4]
 800c692:	68a3      	ldr	r3, [r4, #8]
 800c694:	1a9b      	subs	r3, r3, r2
 800c696:	60a3      	str	r3, [r4, #8]
 800c698:	6823      	ldr	r3, [r4, #0]
 800c69a:	4413      	add	r3, r2
 800c69c:	6023      	str	r3, [r4, #0]
 800c69e:	4615      	mov	r5, r2
 800c6a0:	e704      	b.n	800c4ac <__sfvwrite_r+0x94>
 800c6a2:	2001      	movs	r0, #1
 800c6a4:	e70c      	b.n	800c4c0 <__sfvwrite_r+0xa8>
 800c6a6:	bf00      	nop
 800c6a8:	7ffffc00 	.word	0x7ffffc00

0800c6ac <_isatty_r>:
 800c6ac:	b538      	push	{r3, r4, r5, lr}
 800c6ae:	4d06      	ldr	r5, [pc, #24]	; (800c6c8 <_isatty_r+0x1c>)
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	4608      	mov	r0, r1
 800c6b6:	602b      	str	r3, [r5, #0]
 800c6b8:	f7f5 fd18 	bl	80020ec <_isatty>
 800c6bc:	1c43      	adds	r3, r0, #1
 800c6be:	d102      	bne.n	800c6c6 <_isatty_r+0x1a>
 800c6c0:	682b      	ldr	r3, [r5, #0]
 800c6c2:	b103      	cbz	r3, 800c6c6 <_isatty_r+0x1a>
 800c6c4:	6023      	str	r3, [r4, #0]
 800c6c6:	bd38      	pop	{r3, r4, r5, pc}
 800c6c8:	20000c3c 	.word	0x20000c3c

0800c6cc <__locale_mb_cur_max>:
 800c6cc:	4b01      	ldr	r3, [pc, #4]	; (800c6d4 <__locale_mb_cur_max+0x8>)
 800c6ce:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800c6d2:	4770      	bx	lr
 800c6d4:	2000087c 	.word	0x2000087c

0800c6d8 <_lseek_r>:
 800c6d8:	b538      	push	{r3, r4, r5, lr}
 800c6da:	4d07      	ldr	r5, [pc, #28]	; (800c6f8 <_lseek_r+0x20>)
 800c6dc:	4604      	mov	r4, r0
 800c6de:	4608      	mov	r0, r1
 800c6e0:	4611      	mov	r1, r2
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	602a      	str	r2, [r5, #0]
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	f7f5 fd0b 	bl	8002102 <_lseek>
 800c6ec:	1c43      	adds	r3, r0, #1
 800c6ee:	d102      	bne.n	800c6f6 <_lseek_r+0x1e>
 800c6f0:	682b      	ldr	r3, [r5, #0]
 800c6f2:	b103      	cbz	r3, 800c6f6 <_lseek_r+0x1e>
 800c6f4:	6023      	str	r3, [r4, #0]
 800c6f6:	bd38      	pop	{r3, r4, r5, pc}
 800c6f8:	20000c3c 	.word	0x20000c3c

0800c6fc <__ascii_mbtowc>:
 800c6fc:	b082      	sub	sp, #8
 800c6fe:	b901      	cbnz	r1, 800c702 <__ascii_mbtowc+0x6>
 800c700:	a901      	add	r1, sp, #4
 800c702:	b142      	cbz	r2, 800c716 <__ascii_mbtowc+0x1a>
 800c704:	b14b      	cbz	r3, 800c71a <__ascii_mbtowc+0x1e>
 800c706:	7813      	ldrb	r3, [r2, #0]
 800c708:	600b      	str	r3, [r1, #0]
 800c70a:	7812      	ldrb	r2, [r2, #0]
 800c70c:	1e10      	subs	r0, r2, #0
 800c70e:	bf18      	it	ne
 800c710:	2001      	movne	r0, #1
 800c712:	b002      	add	sp, #8
 800c714:	4770      	bx	lr
 800c716:	4610      	mov	r0, r2
 800c718:	e7fb      	b.n	800c712 <__ascii_mbtowc+0x16>
 800c71a:	f06f 0001 	mvn.w	r0, #1
 800c71e:	e7f8      	b.n	800c712 <__ascii_mbtowc+0x16>

0800c720 <memmove>:
 800c720:	4288      	cmp	r0, r1
 800c722:	b510      	push	{r4, lr}
 800c724:	eb01 0402 	add.w	r4, r1, r2
 800c728:	d902      	bls.n	800c730 <memmove+0x10>
 800c72a:	4284      	cmp	r4, r0
 800c72c:	4623      	mov	r3, r4
 800c72e:	d807      	bhi.n	800c740 <memmove+0x20>
 800c730:	1e43      	subs	r3, r0, #1
 800c732:	42a1      	cmp	r1, r4
 800c734:	d008      	beq.n	800c748 <memmove+0x28>
 800c736:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c73a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c73e:	e7f8      	b.n	800c732 <memmove+0x12>
 800c740:	4402      	add	r2, r0
 800c742:	4601      	mov	r1, r0
 800c744:	428a      	cmp	r2, r1
 800c746:	d100      	bne.n	800c74a <memmove+0x2a>
 800c748:	bd10      	pop	{r4, pc}
 800c74a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c74e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c752:	e7f7      	b.n	800c744 <memmove+0x24>

0800c754 <_read_r>:
 800c754:	b538      	push	{r3, r4, r5, lr}
 800c756:	4d07      	ldr	r5, [pc, #28]	; (800c774 <_read_r+0x20>)
 800c758:	4604      	mov	r4, r0
 800c75a:	4608      	mov	r0, r1
 800c75c:	4611      	mov	r1, r2
 800c75e:	2200      	movs	r2, #0
 800c760:	602a      	str	r2, [r5, #0]
 800c762:	461a      	mov	r2, r3
 800c764:	f7f5 fc66 	bl	8002034 <_read>
 800c768:	1c43      	adds	r3, r0, #1
 800c76a:	d102      	bne.n	800c772 <_read_r+0x1e>
 800c76c:	682b      	ldr	r3, [r5, #0]
 800c76e:	b103      	cbz	r3, 800c772 <_read_r+0x1e>
 800c770:	6023      	str	r3, [r4, #0]
 800c772:	bd38      	pop	{r3, r4, r5, pc}
 800c774:	20000c3c 	.word	0x20000c3c

0800c778 <_realloc_r>:
 800c778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77c:	4681      	mov	r9, r0
 800c77e:	460c      	mov	r4, r1
 800c780:	b929      	cbnz	r1, 800c78e <_realloc_r+0x16>
 800c782:	4611      	mov	r1, r2
 800c784:	b003      	add	sp, #12
 800c786:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c78a:	f7fe b903 	b.w	800a994 <_malloc_r>
 800c78e:	9201      	str	r2, [sp, #4]
 800c790:	f7fe fb50 	bl	800ae34 <__malloc_lock>
 800c794:	9a01      	ldr	r2, [sp, #4]
 800c796:	f102 080b 	add.w	r8, r2, #11
 800c79a:	f1b8 0f16 	cmp.w	r8, #22
 800c79e:	d90b      	bls.n	800c7b8 <_realloc_r+0x40>
 800c7a0:	f038 0807 	bics.w	r8, r8, #7
 800c7a4:	d50a      	bpl.n	800c7bc <_realloc_r+0x44>
 800c7a6:	230c      	movs	r3, #12
 800c7a8:	f8c9 3000 	str.w	r3, [r9]
 800c7ac:	f04f 0b00 	mov.w	fp, #0
 800c7b0:	4658      	mov	r0, fp
 800c7b2:	b003      	add	sp, #12
 800c7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b8:	f04f 0810 	mov.w	r8, #16
 800c7bc:	4590      	cmp	r8, r2
 800c7be:	d3f2      	bcc.n	800c7a6 <_realloc_r+0x2e>
 800c7c0:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800c7c4:	f025 0603 	bic.w	r6, r5, #3
 800c7c8:	45b0      	cmp	r8, r6
 800c7ca:	f1a4 0a08 	sub.w	sl, r4, #8
 800c7ce:	f340 8170 	ble.w	800cab2 <_realloc_r+0x33a>
 800c7d2:	48a9      	ldr	r0, [pc, #676]	; (800ca78 <_realloc_r+0x300>)
 800c7d4:	9001      	str	r0, [sp, #4]
 800c7d6:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800c7da:	eb0a 0306 	add.w	r3, sl, r6
 800c7de:	459c      	cmp	ip, r3
 800c7e0:	6859      	ldr	r1, [r3, #4]
 800c7e2:	d005      	beq.n	800c7f0 <_realloc_r+0x78>
 800c7e4:	f021 0001 	bic.w	r0, r1, #1
 800c7e8:	4418      	add	r0, r3
 800c7ea:	6840      	ldr	r0, [r0, #4]
 800c7ec:	07c7      	lsls	r7, r0, #31
 800c7ee:	d427      	bmi.n	800c840 <_realloc_r+0xc8>
 800c7f0:	f021 0103 	bic.w	r1, r1, #3
 800c7f4:	459c      	cmp	ip, r3
 800c7f6:	eb06 0701 	add.w	r7, r6, r1
 800c7fa:	d119      	bne.n	800c830 <_realloc_r+0xb8>
 800c7fc:	f108 0010 	add.w	r0, r8, #16
 800c800:	42b8      	cmp	r0, r7
 800c802:	dc1f      	bgt.n	800c844 <_realloc_r+0xcc>
 800c804:	eb0a 0308 	add.w	r3, sl, r8
 800c808:	9a01      	ldr	r2, [sp, #4]
 800c80a:	eba7 0708 	sub.w	r7, r7, r8
 800c80e:	f047 0701 	orr.w	r7, r7, #1
 800c812:	6093      	str	r3, [r2, #8]
 800c814:	605f      	str	r7, [r3, #4]
 800c816:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c81a:	f003 0301 	and.w	r3, r3, #1
 800c81e:	ea43 0308 	orr.w	r3, r3, r8
 800c822:	f844 3c04 	str.w	r3, [r4, #-4]
 800c826:	4648      	mov	r0, r9
 800c828:	f7fe fb0a 	bl	800ae40 <__malloc_unlock>
 800c82c:	46a3      	mov	fp, r4
 800c82e:	e7bf      	b.n	800c7b0 <_realloc_r+0x38>
 800c830:	45b8      	cmp	r8, r7
 800c832:	dc07      	bgt.n	800c844 <_realloc_r+0xcc>
 800c834:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800c838:	60da      	str	r2, [r3, #12]
 800c83a:	6093      	str	r3, [r2, #8]
 800c83c:	4655      	mov	r5, sl
 800c83e:	e07f      	b.n	800c940 <_realloc_r+0x1c8>
 800c840:	2100      	movs	r1, #0
 800c842:	460b      	mov	r3, r1
 800c844:	07e8      	lsls	r0, r5, #31
 800c846:	f100 80e5 	bmi.w	800ca14 <_realloc_r+0x29c>
 800c84a:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800c84e:	ebaa 0505 	sub.w	r5, sl, r5
 800c852:	6868      	ldr	r0, [r5, #4]
 800c854:	f020 0003 	bic.w	r0, r0, #3
 800c858:	eb00 0b06 	add.w	fp, r0, r6
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f000 80a5 	beq.w	800c9ac <_realloc_r+0x234>
 800c862:	459c      	cmp	ip, r3
 800c864:	eb01 070b 	add.w	r7, r1, fp
 800c868:	d14a      	bne.n	800c900 <_realloc_r+0x188>
 800c86a:	f108 0310 	add.w	r3, r8, #16
 800c86e:	42bb      	cmp	r3, r7
 800c870:	f300 809c 	bgt.w	800c9ac <_realloc_r+0x234>
 800c874:	46ab      	mov	fp, r5
 800c876:	68eb      	ldr	r3, [r5, #12]
 800c878:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800c87c:	60d3      	str	r3, [r2, #12]
 800c87e:	609a      	str	r2, [r3, #8]
 800c880:	1f32      	subs	r2, r6, #4
 800c882:	2a24      	cmp	r2, #36	; 0x24
 800c884:	d837      	bhi.n	800c8f6 <_realloc_r+0x17e>
 800c886:	2a13      	cmp	r2, #19
 800c888:	d933      	bls.n	800c8f2 <_realloc_r+0x17a>
 800c88a:	6823      	ldr	r3, [r4, #0]
 800c88c:	60ab      	str	r3, [r5, #8]
 800c88e:	6863      	ldr	r3, [r4, #4]
 800c890:	60eb      	str	r3, [r5, #12]
 800c892:	2a1b      	cmp	r2, #27
 800c894:	d81b      	bhi.n	800c8ce <_realloc_r+0x156>
 800c896:	3408      	adds	r4, #8
 800c898:	f105 0310 	add.w	r3, r5, #16
 800c89c:	6822      	ldr	r2, [r4, #0]
 800c89e:	601a      	str	r2, [r3, #0]
 800c8a0:	6862      	ldr	r2, [r4, #4]
 800c8a2:	605a      	str	r2, [r3, #4]
 800c8a4:	68a2      	ldr	r2, [r4, #8]
 800c8a6:	609a      	str	r2, [r3, #8]
 800c8a8:	eb05 0308 	add.w	r3, r5, r8
 800c8ac:	9a01      	ldr	r2, [sp, #4]
 800c8ae:	eba7 0708 	sub.w	r7, r7, r8
 800c8b2:	f047 0701 	orr.w	r7, r7, #1
 800c8b6:	6093      	str	r3, [r2, #8]
 800c8b8:	605f      	str	r7, [r3, #4]
 800c8ba:	686b      	ldr	r3, [r5, #4]
 800c8bc:	f003 0301 	and.w	r3, r3, #1
 800c8c0:	ea43 0308 	orr.w	r3, r3, r8
 800c8c4:	606b      	str	r3, [r5, #4]
 800c8c6:	4648      	mov	r0, r9
 800c8c8:	f7fe faba 	bl	800ae40 <__malloc_unlock>
 800c8cc:	e770      	b.n	800c7b0 <_realloc_r+0x38>
 800c8ce:	68a3      	ldr	r3, [r4, #8]
 800c8d0:	612b      	str	r3, [r5, #16]
 800c8d2:	68e3      	ldr	r3, [r4, #12]
 800c8d4:	616b      	str	r3, [r5, #20]
 800c8d6:	2a24      	cmp	r2, #36	; 0x24
 800c8d8:	bf01      	itttt	eq
 800c8da:	6923      	ldreq	r3, [r4, #16]
 800c8dc:	61ab      	streq	r3, [r5, #24]
 800c8de:	6962      	ldreq	r2, [r4, #20]
 800c8e0:	61ea      	streq	r2, [r5, #28]
 800c8e2:	bf19      	ittee	ne
 800c8e4:	3410      	addne	r4, #16
 800c8e6:	f105 0318 	addne.w	r3, r5, #24
 800c8ea:	f105 0320 	addeq.w	r3, r5, #32
 800c8ee:	3418      	addeq	r4, #24
 800c8f0:	e7d4      	b.n	800c89c <_realloc_r+0x124>
 800c8f2:	465b      	mov	r3, fp
 800c8f4:	e7d2      	b.n	800c89c <_realloc_r+0x124>
 800c8f6:	4621      	mov	r1, r4
 800c8f8:	4658      	mov	r0, fp
 800c8fa:	f7ff ff11 	bl	800c720 <memmove>
 800c8fe:	e7d3      	b.n	800c8a8 <_realloc_r+0x130>
 800c900:	45b8      	cmp	r8, r7
 800c902:	dc53      	bgt.n	800c9ac <_realloc_r+0x234>
 800c904:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800c908:	4628      	mov	r0, r5
 800c90a:	60da      	str	r2, [r3, #12]
 800c90c:	6093      	str	r3, [r2, #8]
 800c90e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c912:	68eb      	ldr	r3, [r5, #12]
 800c914:	60d3      	str	r3, [r2, #12]
 800c916:	609a      	str	r2, [r3, #8]
 800c918:	1f32      	subs	r2, r6, #4
 800c91a:	2a24      	cmp	r2, #36	; 0x24
 800c91c:	d842      	bhi.n	800c9a4 <_realloc_r+0x22c>
 800c91e:	2a13      	cmp	r2, #19
 800c920:	d908      	bls.n	800c934 <_realloc_r+0x1bc>
 800c922:	6823      	ldr	r3, [r4, #0]
 800c924:	60ab      	str	r3, [r5, #8]
 800c926:	6863      	ldr	r3, [r4, #4]
 800c928:	60eb      	str	r3, [r5, #12]
 800c92a:	2a1b      	cmp	r2, #27
 800c92c:	d828      	bhi.n	800c980 <_realloc_r+0x208>
 800c92e:	3408      	adds	r4, #8
 800c930:	f105 0010 	add.w	r0, r5, #16
 800c934:	6823      	ldr	r3, [r4, #0]
 800c936:	6003      	str	r3, [r0, #0]
 800c938:	6863      	ldr	r3, [r4, #4]
 800c93a:	6043      	str	r3, [r0, #4]
 800c93c:	68a3      	ldr	r3, [r4, #8]
 800c93e:	6083      	str	r3, [r0, #8]
 800c940:	686a      	ldr	r2, [r5, #4]
 800c942:	eba7 0008 	sub.w	r0, r7, r8
 800c946:	280f      	cmp	r0, #15
 800c948:	f002 0201 	and.w	r2, r2, #1
 800c94c:	eb05 0307 	add.w	r3, r5, r7
 800c950:	f240 80b1 	bls.w	800cab6 <_realloc_r+0x33e>
 800c954:	eb05 0108 	add.w	r1, r5, r8
 800c958:	ea48 0202 	orr.w	r2, r8, r2
 800c95c:	f040 0001 	orr.w	r0, r0, #1
 800c960:	606a      	str	r2, [r5, #4]
 800c962:	6048      	str	r0, [r1, #4]
 800c964:	685a      	ldr	r2, [r3, #4]
 800c966:	f042 0201 	orr.w	r2, r2, #1
 800c96a:	605a      	str	r2, [r3, #4]
 800c96c:	3108      	adds	r1, #8
 800c96e:	4648      	mov	r0, r9
 800c970:	f7fd febc 	bl	800a6ec <_free_r>
 800c974:	4648      	mov	r0, r9
 800c976:	f7fe fa63 	bl	800ae40 <__malloc_unlock>
 800c97a:	f105 0b08 	add.w	fp, r5, #8
 800c97e:	e717      	b.n	800c7b0 <_realloc_r+0x38>
 800c980:	68a3      	ldr	r3, [r4, #8]
 800c982:	612b      	str	r3, [r5, #16]
 800c984:	68e3      	ldr	r3, [r4, #12]
 800c986:	616b      	str	r3, [r5, #20]
 800c988:	2a24      	cmp	r2, #36	; 0x24
 800c98a:	bf01      	itttt	eq
 800c98c:	6923      	ldreq	r3, [r4, #16]
 800c98e:	61ab      	streq	r3, [r5, #24]
 800c990:	6963      	ldreq	r3, [r4, #20]
 800c992:	61eb      	streq	r3, [r5, #28]
 800c994:	bf19      	ittee	ne
 800c996:	3410      	addne	r4, #16
 800c998:	f105 0018 	addne.w	r0, r5, #24
 800c99c:	f105 0020 	addeq.w	r0, r5, #32
 800c9a0:	3418      	addeq	r4, #24
 800c9a2:	e7c7      	b.n	800c934 <_realloc_r+0x1bc>
 800c9a4:	4621      	mov	r1, r4
 800c9a6:	f7ff febb 	bl	800c720 <memmove>
 800c9aa:	e7c9      	b.n	800c940 <_realloc_r+0x1c8>
 800c9ac:	45d8      	cmp	r8, fp
 800c9ae:	dc31      	bgt.n	800ca14 <_realloc_r+0x29c>
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	68eb      	ldr	r3, [r5, #12]
 800c9b4:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c9b8:	60d3      	str	r3, [r2, #12]
 800c9ba:	609a      	str	r2, [r3, #8]
 800c9bc:	1f32      	subs	r2, r6, #4
 800c9be:	2a24      	cmp	r2, #36	; 0x24
 800c9c0:	d824      	bhi.n	800ca0c <_realloc_r+0x294>
 800c9c2:	2a13      	cmp	r2, #19
 800c9c4:	d908      	bls.n	800c9d8 <_realloc_r+0x260>
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	60ab      	str	r3, [r5, #8]
 800c9ca:	6863      	ldr	r3, [r4, #4]
 800c9cc:	60eb      	str	r3, [r5, #12]
 800c9ce:	2a1b      	cmp	r2, #27
 800c9d0:	d80a      	bhi.n	800c9e8 <_realloc_r+0x270>
 800c9d2:	3408      	adds	r4, #8
 800c9d4:	f105 0010 	add.w	r0, r5, #16
 800c9d8:	6823      	ldr	r3, [r4, #0]
 800c9da:	6003      	str	r3, [r0, #0]
 800c9dc:	6863      	ldr	r3, [r4, #4]
 800c9de:	6043      	str	r3, [r0, #4]
 800c9e0:	68a3      	ldr	r3, [r4, #8]
 800c9e2:	6083      	str	r3, [r0, #8]
 800c9e4:	465f      	mov	r7, fp
 800c9e6:	e7ab      	b.n	800c940 <_realloc_r+0x1c8>
 800c9e8:	68a3      	ldr	r3, [r4, #8]
 800c9ea:	612b      	str	r3, [r5, #16]
 800c9ec:	68e3      	ldr	r3, [r4, #12]
 800c9ee:	616b      	str	r3, [r5, #20]
 800c9f0:	2a24      	cmp	r2, #36	; 0x24
 800c9f2:	bf01      	itttt	eq
 800c9f4:	6923      	ldreq	r3, [r4, #16]
 800c9f6:	61ab      	streq	r3, [r5, #24]
 800c9f8:	6963      	ldreq	r3, [r4, #20]
 800c9fa:	61eb      	streq	r3, [r5, #28]
 800c9fc:	bf19      	ittee	ne
 800c9fe:	3410      	addne	r4, #16
 800ca00:	f105 0018 	addne.w	r0, r5, #24
 800ca04:	f105 0020 	addeq.w	r0, r5, #32
 800ca08:	3418      	addeq	r4, #24
 800ca0a:	e7e5      	b.n	800c9d8 <_realloc_r+0x260>
 800ca0c:	4621      	mov	r1, r4
 800ca0e:	f7ff fe87 	bl	800c720 <memmove>
 800ca12:	e7e7      	b.n	800c9e4 <_realloc_r+0x26c>
 800ca14:	4611      	mov	r1, r2
 800ca16:	4648      	mov	r0, r9
 800ca18:	f7fd ffbc 	bl	800a994 <_malloc_r>
 800ca1c:	4683      	mov	fp, r0
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	f43f af51 	beq.w	800c8c6 <_realloc_r+0x14e>
 800ca24:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ca28:	f023 0301 	bic.w	r3, r3, #1
 800ca2c:	4453      	add	r3, sl
 800ca2e:	f1a0 0208 	sub.w	r2, r0, #8
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d105      	bne.n	800ca42 <_realloc_r+0x2ca>
 800ca36:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800ca3a:	f027 0703 	bic.w	r7, r7, #3
 800ca3e:	4437      	add	r7, r6
 800ca40:	e6fc      	b.n	800c83c <_realloc_r+0xc4>
 800ca42:	1f32      	subs	r2, r6, #4
 800ca44:	2a24      	cmp	r2, #36	; 0x24
 800ca46:	d830      	bhi.n	800caaa <_realloc_r+0x332>
 800ca48:	2a13      	cmp	r2, #19
 800ca4a:	d92b      	bls.n	800caa4 <_realloc_r+0x32c>
 800ca4c:	6823      	ldr	r3, [r4, #0]
 800ca4e:	6003      	str	r3, [r0, #0]
 800ca50:	6863      	ldr	r3, [r4, #4]
 800ca52:	6043      	str	r3, [r0, #4]
 800ca54:	2a1b      	cmp	r2, #27
 800ca56:	d811      	bhi.n	800ca7c <_realloc_r+0x304>
 800ca58:	f104 0208 	add.w	r2, r4, #8
 800ca5c:	f100 0308 	add.w	r3, r0, #8
 800ca60:	6811      	ldr	r1, [r2, #0]
 800ca62:	6019      	str	r1, [r3, #0]
 800ca64:	6851      	ldr	r1, [r2, #4]
 800ca66:	6059      	str	r1, [r3, #4]
 800ca68:	6892      	ldr	r2, [r2, #8]
 800ca6a:	609a      	str	r2, [r3, #8]
 800ca6c:	4621      	mov	r1, r4
 800ca6e:	4648      	mov	r0, r9
 800ca70:	f7fd fe3c 	bl	800a6ec <_free_r>
 800ca74:	e727      	b.n	800c8c6 <_realloc_r+0x14e>
 800ca76:	bf00      	nop
 800ca78:	2000046c 	.word	0x2000046c
 800ca7c:	68a3      	ldr	r3, [r4, #8]
 800ca7e:	6083      	str	r3, [r0, #8]
 800ca80:	68e3      	ldr	r3, [r4, #12]
 800ca82:	60c3      	str	r3, [r0, #12]
 800ca84:	2a24      	cmp	r2, #36	; 0x24
 800ca86:	bf01      	itttt	eq
 800ca88:	6923      	ldreq	r3, [r4, #16]
 800ca8a:	6103      	streq	r3, [r0, #16]
 800ca8c:	6961      	ldreq	r1, [r4, #20]
 800ca8e:	6141      	streq	r1, [r0, #20]
 800ca90:	bf19      	ittee	ne
 800ca92:	f104 0210 	addne.w	r2, r4, #16
 800ca96:	f100 0310 	addne.w	r3, r0, #16
 800ca9a:	f104 0218 	addeq.w	r2, r4, #24
 800ca9e:	f100 0318 	addeq.w	r3, r0, #24
 800caa2:	e7dd      	b.n	800ca60 <_realloc_r+0x2e8>
 800caa4:	4603      	mov	r3, r0
 800caa6:	4622      	mov	r2, r4
 800caa8:	e7da      	b.n	800ca60 <_realloc_r+0x2e8>
 800caaa:	4621      	mov	r1, r4
 800caac:	f7ff fe38 	bl	800c720 <memmove>
 800cab0:	e7dc      	b.n	800ca6c <_realloc_r+0x2f4>
 800cab2:	4637      	mov	r7, r6
 800cab4:	e6c2      	b.n	800c83c <_realloc_r+0xc4>
 800cab6:	4317      	orrs	r7, r2
 800cab8:	606f      	str	r7, [r5, #4]
 800caba:	685a      	ldr	r2, [r3, #4]
 800cabc:	f042 0201 	orr.w	r2, r2, #1
 800cac0:	605a      	str	r2, [r3, #4]
 800cac2:	e757      	b.n	800c974 <_realloc_r+0x1fc>

0800cac4 <__swbuf_r>:
 800cac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac6:	460e      	mov	r6, r1
 800cac8:	4614      	mov	r4, r2
 800caca:	4605      	mov	r5, r0
 800cacc:	b118      	cbz	r0, 800cad6 <__swbuf_r+0x12>
 800cace:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cad0:	b90b      	cbnz	r3, 800cad6 <__swbuf_r+0x12>
 800cad2:	f7fd fd7b 	bl	800a5cc <__sinit>
 800cad6:	69a3      	ldr	r3, [r4, #24]
 800cad8:	60a3      	str	r3, [r4, #8]
 800cada:	89a3      	ldrh	r3, [r4, #12]
 800cadc:	0719      	lsls	r1, r3, #28
 800cade:	d529      	bpl.n	800cb34 <__swbuf_r+0x70>
 800cae0:	6923      	ldr	r3, [r4, #16]
 800cae2:	b33b      	cbz	r3, 800cb34 <__swbuf_r+0x70>
 800cae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cae8:	b2f6      	uxtb	r6, r6
 800caea:	049a      	lsls	r2, r3, #18
 800caec:	4637      	mov	r7, r6
 800caee:	d52a      	bpl.n	800cb46 <__swbuf_r+0x82>
 800caf0:	6823      	ldr	r3, [r4, #0]
 800caf2:	6920      	ldr	r0, [r4, #16]
 800caf4:	1a18      	subs	r0, r3, r0
 800caf6:	6963      	ldr	r3, [r4, #20]
 800caf8:	4283      	cmp	r3, r0
 800cafa:	dc04      	bgt.n	800cb06 <__swbuf_r+0x42>
 800cafc:	4621      	mov	r1, r4
 800cafe:	4628      	mov	r0, r5
 800cb00:	f7fd fcf8 	bl	800a4f4 <_fflush_r>
 800cb04:	b9e0      	cbnz	r0, 800cb40 <__swbuf_r+0x7c>
 800cb06:	68a3      	ldr	r3, [r4, #8]
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	60a3      	str	r3, [r4, #8]
 800cb0c:	6823      	ldr	r3, [r4, #0]
 800cb0e:	1c5a      	adds	r2, r3, #1
 800cb10:	6022      	str	r2, [r4, #0]
 800cb12:	701e      	strb	r6, [r3, #0]
 800cb14:	6962      	ldr	r2, [r4, #20]
 800cb16:	1c43      	adds	r3, r0, #1
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d004      	beq.n	800cb26 <__swbuf_r+0x62>
 800cb1c:	89a3      	ldrh	r3, [r4, #12]
 800cb1e:	07db      	lsls	r3, r3, #31
 800cb20:	d506      	bpl.n	800cb30 <__swbuf_r+0x6c>
 800cb22:	2e0a      	cmp	r6, #10
 800cb24:	d104      	bne.n	800cb30 <__swbuf_r+0x6c>
 800cb26:	4621      	mov	r1, r4
 800cb28:	4628      	mov	r0, r5
 800cb2a:	f7fd fce3 	bl	800a4f4 <_fflush_r>
 800cb2e:	b938      	cbnz	r0, 800cb40 <__swbuf_r+0x7c>
 800cb30:	4638      	mov	r0, r7
 800cb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb34:	4621      	mov	r1, r4
 800cb36:	4628      	mov	r0, r5
 800cb38:	f7fc fd84 	bl	8009644 <__swsetup_r>
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	d0d1      	beq.n	800cae4 <__swbuf_r+0x20>
 800cb40:	f04f 37ff 	mov.w	r7, #4294967295
 800cb44:	e7f4      	b.n	800cb30 <__swbuf_r+0x6c>
 800cb46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cb4a:	81a3      	strh	r3, [r4, #12]
 800cb4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cb52:	6663      	str	r3, [r4, #100]	; 0x64
 800cb54:	e7cc      	b.n	800caf0 <__swbuf_r+0x2c>
	...

0800cb58 <_wcrtomb_r>:
 800cb58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb5a:	4c09      	ldr	r4, [pc, #36]	; (800cb80 <_wcrtomb_r+0x28>)
 800cb5c:	b085      	sub	sp, #20
 800cb5e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800cb62:	4605      	mov	r5, r0
 800cb64:	461e      	mov	r6, r3
 800cb66:	b909      	cbnz	r1, 800cb6c <_wcrtomb_r+0x14>
 800cb68:	460a      	mov	r2, r1
 800cb6a:	a901      	add	r1, sp, #4
 800cb6c:	47b8      	blx	r7
 800cb6e:	1c43      	adds	r3, r0, #1
 800cb70:	bf01      	itttt	eq
 800cb72:	2300      	moveq	r3, #0
 800cb74:	6033      	streq	r3, [r6, #0]
 800cb76:	238a      	moveq	r3, #138	; 0x8a
 800cb78:	602b      	streq	r3, [r5, #0]
 800cb7a:	b005      	add	sp, #20
 800cb7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	2000087c 	.word	0x2000087c

0800cb84 <__ascii_wctomb>:
 800cb84:	b149      	cbz	r1, 800cb9a <__ascii_wctomb+0x16>
 800cb86:	2aff      	cmp	r2, #255	; 0xff
 800cb88:	bf85      	ittet	hi
 800cb8a:	238a      	movhi	r3, #138	; 0x8a
 800cb8c:	6003      	strhi	r3, [r0, #0]
 800cb8e:	700a      	strbls	r2, [r1, #0]
 800cb90:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb94:	bf98      	it	ls
 800cb96:	2001      	movls	r0, #1
 800cb98:	4770      	bx	lr
 800cb9a:	4608      	mov	r0, r1
 800cb9c:	4770      	bx	lr

0800cb9e <abort>:
 800cb9e:	b508      	push	{r3, lr}
 800cba0:	2006      	movs	r0, #6
 800cba2:	f000 f82d 	bl	800cc00 <raise>
 800cba6:	2001      	movs	r0, #1
 800cba8:	f7f5 fa3a 	bl	8002020 <_exit>

0800cbac <_raise_r>:
 800cbac:	291f      	cmp	r1, #31
 800cbae:	b538      	push	{r3, r4, r5, lr}
 800cbb0:	4604      	mov	r4, r0
 800cbb2:	460d      	mov	r5, r1
 800cbb4:	d904      	bls.n	800cbc0 <_raise_r+0x14>
 800cbb6:	2316      	movs	r3, #22
 800cbb8:	6003      	str	r3, [r0, #0]
 800cbba:	f04f 30ff 	mov.w	r0, #4294967295
 800cbbe:	bd38      	pop	{r3, r4, r5, pc}
 800cbc0:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800cbc4:	b112      	cbz	r2, 800cbcc <_raise_r+0x20>
 800cbc6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cbca:	b94b      	cbnz	r3, 800cbe0 <_raise_r+0x34>
 800cbcc:	4620      	mov	r0, r4
 800cbce:	f000 f831 	bl	800cc34 <_getpid_r>
 800cbd2:	462a      	mov	r2, r5
 800cbd4:	4601      	mov	r1, r0
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbdc:	f000 b818 	b.w	800cc10 <_kill_r>
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d00a      	beq.n	800cbfa <_raise_r+0x4e>
 800cbe4:	1c59      	adds	r1, r3, #1
 800cbe6:	d103      	bne.n	800cbf0 <_raise_r+0x44>
 800cbe8:	2316      	movs	r3, #22
 800cbea:	6003      	str	r3, [r0, #0]
 800cbec:	2001      	movs	r0, #1
 800cbee:	e7e6      	b.n	800cbbe <_raise_r+0x12>
 800cbf0:	2400      	movs	r4, #0
 800cbf2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	4798      	blx	r3
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	e7df      	b.n	800cbbe <_raise_r+0x12>
	...

0800cc00 <raise>:
 800cc00:	4b02      	ldr	r3, [pc, #8]	; (800cc0c <raise+0xc>)
 800cc02:	4601      	mov	r1, r0
 800cc04:	6818      	ldr	r0, [r3, #0]
 800cc06:	f7ff bfd1 	b.w	800cbac <_raise_r>
 800cc0a:	bf00      	nop
 800cc0c:	2000003c 	.word	0x2000003c

0800cc10 <_kill_r>:
 800cc10:	b538      	push	{r3, r4, r5, lr}
 800cc12:	4d07      	ldr	r5, [pc, #28]	; (800cc30 <_kill_r+0x20>)
 800cc14:	2300      	movs	r3, #0
 800cc16:	4604      	mov	r4, r0
 800cc18:	4608      	mov	r0, r1
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	602b      	str	r3, [r5, #0]
 800cc1e:	f7f5 f9ef 	bl	8002000 <_kill>
 800cc22:	1c43      	adds	r3, r0, #1
 800cc24:	d102      	bne.n	800cc2c <_kill_r+0x1c>
 800cc26:	682b      	ldr	r3, [r5, #0]
 800cc28:	b103      	cbz	r3, 800cc2c <_kill_r+0x1c>
 800cc2a:	6023      	str	r3, [r4, #0]
 800cc2c:	bd38      	pop	{r3, r4, r5, pc}
 800cc2e:	bf00      	nop
 800cc30:	20000c3c 	.word	0x20000c3c

0800cc34 <_getpid_r>:
 800cc34:	f7f5 b9dc 	b.w	8001ff0 <_getpid>

0800cc38 <_init>:
 800cc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3a:	bf00      	nop
 800cc3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc3e:	bc08      	pop	{r3}
 800cc40:	469e      	mov	lr, r3
 800cc42:	4770      	bx	lr

0800cc44 <_fini>:
 800cc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc46:	bf00      	nop
 800cc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc4a:	bc08      	pop	{r3}
 800cc4c:	469e      	mov	lr, r3
 800cc4e:	4770      	bx	lr
