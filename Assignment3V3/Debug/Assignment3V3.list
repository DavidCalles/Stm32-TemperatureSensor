
Assignment3V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800c960  0800c960  0001c960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdfc  0800cdfc  000209c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdfc  0800cdfc  0001cdfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce04  0800ce04  000209c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ce04  0800ce04  0001ce04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce0c  0800ce0c  0001ce0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c8  20000000  0800ce10  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200009c8  0800d7d8  000209c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c10  0800d7d8  00020c10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ed2  00000000  00000000  000209f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df4  00000000  00000000  000388ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0003b6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  0003cab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244d5  00000000  00000000  0003dd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149a9  00000000  00000000  0006226d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd5f3  00000000  00000000  00076c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154209  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006968  00000000  00000000  0015425c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200009c8 	.word	0x200009c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c948 	.word	0x0800c948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200009cc 	.word	0x200009cc
 80001cc:	0800c948 	.word	0x0800c948

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000f4e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000f52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000f56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000f5a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f5e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000f60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000f62:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 f80e 	bl	8000f96 <Lcd_init>

	return lcd;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	461d      	mov	r5, r3
 8000f7e:	f107 0410 	add.w	r4, r7, #16
 8000f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f8a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	3728      	adds	r7, #40	; 0x28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bdb0      	pop	{r4, r5, r7, pc}

08000f96 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7d9b      	ldrb	r3, [r3, #22]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10c      	bne.n	8000fc0 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000fa6:	2133      	movs	r1, #51	; 0x33
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f863 	bl	8001074 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000fae:	2132      	movs	r1, #50	; 0x32
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f85f 	bl	8001074 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000fb6:	2128      	movs	r1, #40	; 0x28
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f000 f85b 	bl	8001074 <lcd_write_command>
 8000fbe:	e003      	b.n	8000fc8 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000fc0:	2138      	movs	r1, #56	; 0x38
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f856 	bl	8001074 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000fc8:	2101      	movs	r1, #1
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f852 	bl	8001074 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000fd0:	210c      	movs	r1, #12
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f84e 	bl	8001074 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000fd8:	2106      	movs	r1, #6
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f84a 	bl	8001074 <lcd_write_command>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	e00a      	b.n	800100e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 f864 	bl	80010d0 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	3301      	adds	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	7bfc      	ldrb	r4, [r7, #15]
 8001010:	6838      	ldr	r0, [r7, #0]
 8001012:	f7ff f8dd 	bl	80001d0 <strlen>
 8001016:	4603      	mov	r3, r0
 8001018:	429c      	cmp	r4, r3
 800101a:	d3ed      	bcc.n	8000ff8 <Lcd_string+0x10>
	}
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bd90      	pop	{r4, r7, pc}
	...

08001028 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
 8001034:	4613      	mov	r3, r2
 8001036:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	4a07      	ldr	r2, [pc, #28]	; (8001058 <Lcd_cursor+0x30>)
 800103c:	5cd2      	ldrb	r2, [r2, r3]
 800103e:	78bb      	ldrb	r3, [r7, #2]
 8001040:	4413      	add	r3, r2
 8001042:	b2db      	uxtb	r3, r3
 8001044:	3b80      	subs	r3, #128	; 0x80
 8001046:	b2db      	uxtb	r3, r3
 8001048:	4619      	mov	r1, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f812 	bl	8001074 <lcd_write_command>
	#endif
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	0800c9f0 	.word	0x0800c9f0

0800105c <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8001064:	2101      	movs	r1, #1
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f804 	bl	8001074 <lcd_write_command>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6898      	ldr	r0, [r3, #8]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	899b      	ldrh	r3, [r3, #12]
 8001088:	2200      	movs	r2, #0
 800108a:	4619      	mov	r1, r3
 800108c:	f002 fe46 	bl	8003d1c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	7d9b      	ldrb	r3, [r3, #22]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d111      	bne.n	80010bc <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	091b      	lsrs	r3, r3, #4
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2204      	movs	r2, #4
 80010a0:	4619      	mov	r1, r3
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f842 	bl	800112c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2204      	movs	r2, #4
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f839 	bl	800112c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80010ba:	e005      	b.n	80010c8 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	2208      	movs	r2, #8
 80010c0:	4619      	mov	r1, r3
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f832 	bl	800112c <lcd_write>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6898      	ldr	r0, [r3, #8]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	899b      	ldrh	r3, [r3, #12]
 80010e4:	2201      	movs	r2, #1
 80010e6:	4619      	mov	r1, r3
 80010e8:	f002 fe18 	bl	8003d1c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7d9b      	ldrb	r3, [r3, #22]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d111      	bne.n	8001118 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2204      	movs	r2, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f814 	bl	800112c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2204      	movs	r2, #4
 800110e:	4619      	mov	r1, r3
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f80b 	bl	800112c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001116:	e005      	b.n	8001124 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	2208      	movs	r2, #8
 800111c:	4619      	mov	r1, r3
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f804 	bl	800112c <lcd_write>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	70fb      	strb	r3, [r7, #3]
 8001138:	4613      	mov	r3, r2
 800113a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	e019      	b.n	8001176 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	8819      	ldrh	r1, [r3, #0]
 800115a:	78fa      	ldrb	r2, [r7, #3]
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	fa42 f303 	asr.w	r3, r2, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	f002 fdd6 	bl	8003d1c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	3301      	adds	r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	78bb      	ldrb	r3, [r7, #2]
 800117a:	429a      	cmp	r2, r3
 800117c:	d3e1      	bcc.n	8001142 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6918      	ldr	r0, [r3, #16]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	8a9b      	ldrh	r3, [r3, #20]
 8001186:	2201      	movs	r2, #1
 8001188:	4619      	mov	r1, r3
 800118a:	f002 fdc7 	bl	8003d1c <HAL_GPIO_WritePin>
	DELAY(1);
 800118e:	2001      	movs	r0, #1
 8001190:	f000 ff9c 	bl	80020cc <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6918      	ldr	r0, [r3, #16]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	8a9b      	ldrh	r3, [r3, #20]
 800119c:	2200      	movs	r2, #0
 800119e:	4619      	mov	r1, r3
 80011a0:	f002 fdbc 	bl	8003d1c <HAL_GPIO_WritePin>
}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	0000      	movs	r0, r0
	...

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b0a4      	sub	sp, #144	; 0x90
 80011b4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	// GPIO Ports for LCD
	Lcd_PortType ports[] = {
 80011b6:	4b9a      	ldr	r3, [pc, #616]	; (8001420 <main+0x270>)
 80011b8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80011bc:	461d      	mov	r5, r3
 80011be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		D0_GPIO_Port, D1_GPIO_Port, D2_GPIO_Port, D3_GPIO_Port,
		D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
	 };
	// GPIO Pins for LCD
	Lcd_PinType pins[] = {D0_Pin, D1_Pin, D2_Pin, D3_Pin,
 80011ca:	4b96      	ldr	r3, [pc, #600]	; (8001424 <main+0x274>)
 80011cc:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80011d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						  D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	// Conversion values trough the calibrated sensor values
	slope = (130-30)/((float)(*calibValue130_ptr) - (float)(*calibValue30_ptr));
 80011d6:	4b94      	ldr	r3, [pc, #592]	; (8001428 <main+0x278>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011e4:	4b91      	ldr	r3, [pc, #580]	; (800142c <main+0x27c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	ee07 3a90 	vmov	s15, r3
 80011ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011f6:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8001430 <main+0x280>
 80011fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011fe:	4b8d      	ldr	r3, [pc, #564]	; (8001434 <main+0x284>)
 8001200:	edc3 7a00 	vstr	s15, [r3]
	interb = (-slope * (float)(*calibValue30_ptr)) + 30;
 8001204:	4b8b      	ldr	r3, [pc, #556]	; (8001434 <main+0x284>)
 8001206:	edd3 7a00 	vldr	s15, [r3]
 800120a:	eeb1 7a67 	vneg.f32	s14, s15
 800120e:	4b87      	ldr	r3, [pc, #540]	; (800142c <main+0x27c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800121c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001220:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001224:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001228:	4b83      	ldr	r3, [pc, #524]	; (8001438 <main+0x288>)
 800122a:	edc3 7a00 	vstr	s15, [r3]
	// Typical calibration values for on-board temperature sensor
	slope2 = 400;
 800122e:	4b83      	ldr	r3, [pc, #524]	; (800143c <main+0x28c>)
 8001230:	4a83      	ldr	r2, [pc, #524]	; (8001440 <main+0x290>)
 8001232:	601a      	str	r2, [r3, #0]
	interb2 = -slope2*0.76 + 30;
 8001234:	4b81      	ldr	r3, [pc, #516]	; (800143c <main+0x28c>)
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	eef1 7a67 	vneg.f32	s15, s15
 800123e:	ee17 3a90 	vmov	r3, s15
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f980 	bl	8000548 <__aeabi_f2d>
 8001248:	a373      	add	r3, pc, #460	; (adr r3, 8001418 <main+0x268>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff f9d3 	bl	80005f8 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	4b79      	ldr	r3, [pc, #484]	; (8001444 <main+0x294>)
 8001260:	f7ff f814 	bl	800028c <__adddf3>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fc9c 	bl	8000ba8 <__aeabi_d2f>
 8001270:	4603      	mov	r3, r0
 8001272:	4a75      	ldr	r2, [pc, #468]	; (8001448 <main+0x298>)
 8001274:	6013      	str	r3, [r2, #0]

	// Timing variable
	uint32_t tick, tLast = HAL_GetTick();
 8001276:	f000 ff1d 	bl	80020b4 <HAL_GetTick>
 800127a:	67f8      	str	r0, [r7, #124]	; 0x7c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127c:	f000 feb1 	bl	8001fe2 <HAL_Init>

  /* USER CODE BEGIN Init */
  // Create handler for the LCD
	Lcd_HandleTypeDef lcd;
	lcd = Lcd_create(ports, pins,
 8001280:	4638      	mov	r0, r7
 8001282:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001286:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800128a:	2301      	movs	r3, #1
 800128c:	9303      	str	r3, [sp, #12]
 800128e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001292:	9302      	str	r3, [sp, #8]
 8001294:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012a4:	f7ff fe4c 	bl	8000f40 <Lcd_create>
 80012a8:	f107 041c 	add.w	r4, r7, #28
 80012ac:	463d      	mov	r5, r7
 80012ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012b6:	e884 0003 	stmia.w	r4, {r0, r1}
				  EN_GPIO_Port, EN_Pin,
				  LCD_8_BIT_MODE);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ba:	f000 f8d9 	bl	8001470 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Lcd_clear(&lcd);
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff feca 	bl	800105c <Lcd_clear>
  Lcd_cursor(&lcd, 0,1);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	2201      	movs	r2, #1
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fea9 	bl	8001028 <Lcd_cursor>
  Lcd_string(&lcd, "HI; HOW ARE YOU?");
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	495c      	ldr	r1, [pc, #368]	; (800144c <main+0x29c>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe83 	bl	8000fe8 <Lcd_string>
  HAL_Delay(2000);
 80012e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012e6:	f000 fef1 	bl	80020cc <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ea:	f000 fad3 	bl	8001894 <MX_GPIO_Init>
  MX_DMA_Init();
 80012ee:	f000 fab3 	bl	8001858 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80012f2:	f000 fa81 	bl	80017f8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80012f6:	f000 f94f 	bl	8001598 <MX_ADC1_Init>
  MX_TIM2_Init();
 80012fa:	f000 f9d3 	bl	80016a4 <MX_TIM2_Init>
  MX_TIM7_Init();
 80012fe:	f000 fa45 	bl	800178c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001302:	4853      	ldr	r0, [pc, #332]	; (8001450 <main+0x2a0>)
 8001304:	f003 ff0a 	bl	800511c <HAL_TIM_Base_Start>
  // Initial ADC calibration
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001308:	217f      	movs	r1, #127	; 0x7f
 800130a:	4852      	ldr	r0, [pc, #328]	; (8001454 <main+0x2a4>)
 800130c:	f002 f832 	bl	8003374 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, myVar, 3);
 8001310:	2203      	movs	r2, #3
 8001312:	4951      	ldr	r1, [pc, #324]	; (8001458 <main+0x2a8>)
 8001314:	484f      	ldr	r0, [pc, #316]	; (8001454 <main+0x2a4>)
 8001316:	f001 fa33 	bl	8002780 <HAL_ADC_Start_DMA>

    /* USER CODE BEGIN 3 */

	  //printf("Value1: %d \t Value2: %d \t Value3: %d \n\r", myVar[0], myVar[1], myVar[2]);
	  // Temperature from on-board temperature sensor
	  tempIn = CalculateSensorInside(myVar[1]);
 800131a:	4b4f      	ldr	r3, [pc, #316]	; (8001458 <main+0x2a8>)
 800131c:	885b      	ldrh	r3, [r3, #2]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fba7 	bl	8001a74 <CalculateSensorInside>
 8001326:	eef0 7a40 	vmov.f32	s15, s0
 800132a:	4b4c      	ldr	r3, [pc, #304]	; (800145c <main+0x2ac>)
 800132c:	edc3 7a00 	vstr	s15, [r3]
	  // Temperature from MCP9700A
	  tempOut = CalculateSensorOutside(myVar[2]);
 8001330:	4b49      	ldr	r3, [pc, #292]	; (8001458 <main+0x2a8>)
 8001332:	889b      	ldrh	r3, [r3, #4]
 8001334:	b29b      	uxth	r3, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fb22 	bl	8001980 <CalculateSensorOutside>
 800133c:	eef0 7a40 	vmov.f32	s15, s0
 8001340:	4b47      	ldr	r3, [pc, #284]	; (8001460 <main+0x2b0>)
 8001342:	edc3 7a00 	vstr	s15, [r3]
	  // Compensating Temperature from MCP9700A with second order equation
	  tempOut = CalculateSensorOutside2nd(tempOut);
 8001346:	4b46      	ldr	r3, [pc, #280]	; (8001460 <main+0x2b0>)
 8001348:	edd3 7a00 	vldr	s15, [r3]
 800134c:	eeb0 0a67 	vmov.f32	s0, s15
 8001350:	f000 fb52 	bl	80019f8 <CalculateSensorOutside2nd>
 8001354:	eef0 7a40 	vmov.f32	s15, s0
 8001358:	4b41      	ldr	r3, [pc, #260]	; (8001460 <main+0x2b0>)
 800135a:	edc3 7a00 	vstr	s15, [r3]

	  // Updating LCD when required
	  tick = HAL_GetTick();
 800135e:	f000 fea9 	bl	80020b4 <HAL_GetTick>
 8001362:	67b8      	str	r0, [r7, #120]	; 0x78
	  if(tick-tLast > LCD_TICKS){
 8001364:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001366:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800136e:	d9d4      	bls.n	800131a <main+0x16a>
		  tLast = tick;
 8001370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001372:	67fb      	str	r3, [r7, #124]	; 0x7c
		  // LCS Message
		  Lcd_clear(&lcd);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe6f 	bl	800105c <Lcd_clear>
		  Lcd_cursor(&lcd, 0,0);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fe4e 	bl	8001028 <Lcd_cursor>
		  sprintf(mssg, "T: In  %.1f C", tempIn);
 800138c:	4b33      	ldr	r3, [pc, #204]	; (800145c <main+0x2ac>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f8d9 	bl	8000548 <__aeabi_f2d>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800139e:	4931      	ldr	r1, [pc, #196]	; (8001464 <main+0x2b4>)
 80013a0:	f005 fb62 	bl	8006a68 <sprintf>
		  Lcd_string(&lcd, mssg);
 80013a4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4611      	mov	r1, r2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fe1a 	bl	8000fe8 <Lcd_string>
		  Lcd_cursor(&lcd, 1,0);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	2200      	movs	r2, #0
 80013ba:	2101      	movs	r1, #1
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fe33 	bl	8001028 <Lcd_cursor>
		  sprintf(mssg, "T: Out %.1f C", tempOut);
 80013c2:	4b27      	ldr	r3, [pc, #156]	; (8001460 <main+0x2b0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f8be 	bl	8000548 <__aeabi_f2d>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80013d4:	4924      	ldr	r1, [pc, #144]	; (8001468 <main+0x2b8>)
 80013d6:	f005 fb47 	bl	8006a68 <sprintf>
		  Lcd_string(&lcd, mssg);
 80013da:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fdff 	bl	8000fe8 <Lcd_string>
		  // Print in Serial Port
		  printf("Time: %ld, TempIn: %.2f \t TempOut: %.2f \n\r", tick, tempIn, tempOut);
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <main+0x2ac>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f8aa 	bl	8000548 <__aeabi_f2d>
 80013f4:	4604      	mov	r4, r0
 80013f6:	460d      	mov	r5, r1
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <main+0x2b0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f8a3 	bl	8000548 <__aeabi_f2d>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	e9cd 2300 	strd	r2, r3, [sp]
 800140a:	4622      	mov	r2, r4
 800140c:	462b      	mov	r3, r5
 800140e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001410:	4816      	ldr	r0, [pc, #88]	; (800146c <main+0x2bc>)
 8001412:	f005 fb17 	bl	8006a44 <printf>
	  tempIn = CalculateSensorInside(myVar[1]);
 8001416:	e780      	b.n	800131a <main+0x16a>
 8001418:	851eb852 	.word	0x851eb852
 800141c:	3fe851eb 	.word	0x3fe851eb
 8001420:	0800c9c0 	.word	0x0800c9c0
 8001424:	0800c9e0 	.word	0x0800c9e0
 8001428:	20000004 	.word	0x20000004
 800142c:	20000000 	.word	0x20000000
 8001430:	42c80000 	.word	0x42c80000
 8001434:	20000bf4 	.word	0x20000bf4
 8001438:	20000bf8 	.word	0x20000bf8
 800143c:	20000a24 	.word	0x20000a24
 8001440:	43c80000 	.word	0x43c80000
 8001444:	403e0000 	.word	0x403e0000
 8001448:	20000bf0 	.word	0x20000bf0
 800144c:	0800c960 	.word	0x0800c960
 8001450:	20000ad4 	.word	0x20000ad4
 8001454:	20000a28 	.word	0x20000a28
 8001458:	20000008 	.word	0x20000008
 800145c:	200009e4 	.word	0x200009e4
 8001460:	200009e8 	.word	0x200009e8
 8001464:	0800c974 	.word	0x0800c974
 8001468:	0800c984 	.word	0x0800c984
 800146c:	0800c994 	.word	0x0800c994

08001470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0ac      	sub	sp, #176	; 0xb0
 8001474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001476:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800147a:	2244      	movs	r2, #68	; 0x44
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f005 fad8 	bl	8006a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001484:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2254      	movs	r2, #84	; 0x54
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f005 faca 	bl	8006a34 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014a0:	f002 fc54 	bl	8003d4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014a4:	4b3b      	ldr	r3, [pc, #236]	; (8001594 <SystemClock_Config+0x124>)
 80014a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014aa:	4a3a      	ldr	r2, [pc, #232]	; (8001594 <SystemClock_Config+0x124>)
 80014ac:	f023 0318 	bic.w	r3, r3, #24
 80014b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80014b4:	2314      	movs	r3, #20
 80014b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014b8:	2301      	movs	r3, #1
 80014ba:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014bc:	2301      	movs	r3, #1
 80014be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014c8:	2360      	movs	r3, #96	; 0x60
 80014ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ce:	2302      	movs	r3, #2
 80014d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014d4:	2301      	movs	r3, #1
 80014d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014da:	2301      	movs	r3, #1
 80014dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80014e0:	2310      	movs	r3, #16
 80014e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014e6:	2307      	movs	r3, #7
 80014e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 fc99 	bl	8003e34 <HAL_RCC_OscConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001508:	f000 fae2 	bl	8001ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150c:	230f      	movs	r3, #15
 800150e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001510:	2303      	movs	r3, #3
 8001512:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001520:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001524:	2101      	movs	r1, #1
 8001526:	4618      	mov	r0, r3
 8001528:	f003 f8a4 	bl	8004674 <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001532:	f000 facd 	bl	8001ad0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8001536:	f244 0302 	movw	r3, #16386	; 0x4002
 800153a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800153c:	2300      	movs	r3, #0
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001540:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001544:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001546:	2301      	movs	r3, #1
 8001548:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800154a:	2301      	movs	r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800154e:	2310      	movs	r3, #16
 8001550:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001552:	2307      	movs	r3, #7
 8001554:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001556:	2302      	movs	r3, #2
 8001558:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800155a:	2302      	movs	r3, #2
 800155c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800155e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001562:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	4618      	mov	r0, r3
 8001568:	f003 fa8a 	bl	8004a80 <HAL_RCCEx_PeriphCLKConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8001572:	f000 faad 	bl	8001ad0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001576:	f44f 7000 	mov.w	r0, #512	; 0x200
 800157a:	f002 fc05 	bl	8003d88 <HAL_PWREx_ControlVoltageScaling>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8001584:	f000 faa4 	bl	8001ad0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001588:	f003 fc6e 	bl	8004e68 <HAL_RCCEx_EnableMSIPLLMode>
}
 800158c:	bf00      	nop
 800158e:	37b0      	adds	r7, #176	; 0xb0
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000

08001598 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800159e:	463b      	mov	r3, r7
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
 80015ac:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80015ae:	4b38      	ldr	r3, [pc, #224]	; (8001690 <MX_ADC1_Init+0xf8>)
 80015b0:	4a38      	ldr	r2, [pc, #224]	; (8001694 <MX_ADC1_Init+0xfc>)
 80015b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015b4:	4b36      	ldr	r3, [pc, #216]	; (8001690 <MX_ADC1_Init+0xf8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ba:	4b35      	ldr	r3, [pc, #212]	; (8001690 <MX_ADC1_Init+0xf8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c0:	4b33      	ldr	r3, [pc, #204]	; (8001690 <MX_ADC1_Init+0xf8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015c6:	4b32      	ldr	r3, [pc, #200]	; (8001690 <MX_ADC1_Init+0xf8>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015cc:	4b30      	ldr	r3, [pc, #192]	; (8001690 <MX_ADC1_Init+0xf8>)
 80015ce:	2204      	movs	r2, #4
 80015d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015d2:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <MX_ADC1_Init+0xf8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <MX_ADC1_Init+0xf8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80015de:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <MX_ADC1_Init+0xf8>)
 80015e0:	2203      	movs	r2, #3
 80015e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015e4:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <MX_ADC1_Init+0xf8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80015ec:	4b28      	ldr	r3, [pc, #160]	; (8001690 <MX_ADC1_Init+0xf8>)
 80015ee:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <MX_ADC1_Init+0xf8>)
 80015f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015fc:	4b24      	ldr	r3, [pc, #144]	; (8001690 <MX_ADC1_Init+0xf8>)
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <MX_ADC1_Init+0xf8>)
 8001606:	2200      	movs	r2, #0
 8001608:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <MX_ADC1_Init+0xf8>)
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001612:	481f      	ldr	r0, [pc, #124]	; (8001690 <MX_ADC1_Init+0xf8>)
 8001614:	f000 ff6c 	bl	80024f0 <HAL_ADC_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800161e:	f000 fa57 	bl	8001ad0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <MX_ADC1_Init+0x100>)
 8001624:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001626:	2306      	movs	r3, #6
 8001628:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800162a:	2306      	movs	r3, #6
 800162c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800162e:	237f      	movs	r3, #127	; 0x7f
 8001630:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001632:	2304      	movs	r3, #4
 8001634:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800163a:	463b      	mov	r3, r7
 800163c:	4619      	mov	r1, r3
 800163e:	4814      	ldr	r0, [pc, #80]	; (8001690 <MX_ADC1_Init+0xf8>)
 8001640:	f001 f936 	bl	80028b0 <HAL_ADC_ConfigChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800164a:	f000 fa41 	bl	8001ad0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <MX_ADC1_Init+0x104>)
 8001650:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001652:	230c      	movs	r3, #12
 8001654:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001656:	463b      	mov	r3, r7
 8001658:	4619      	mov	r1, r3
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <MX_ADC1_Init+0xf8>)
 800165c:	f001 f928 	bl	80028b0 <HAL_ADC_ConfigChannel>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001666:	f000 fa33 	bl	8001ad0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <MX_ADC1_Init+0x108>)
 800166c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800166e:	2312      	movs	r3, #18
 8001670:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001672:	463b      	mov	r3, r7
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_ADC1_Init+0xf8>)
 8001678:	f001 f91a 	bl	80028b0 <HAL_ADC_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8001682:	f000 fa25 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000a28 	.word	0x20000a28
 8001694:	50040000 	.word	0x50040000
 8001698:	2e300800 	.word	0x2e300800
 800169c:	c7520000 	.word	0xc7520000
 80016a0:	19200040 	.word	0x19200040

080016a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08e      	sub	sp, #56	; 0x38
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c4:	463b      	mov	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]
 80016d2:	615a      	str	r2, [r3, #20]
 80016d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016d6:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <MX_TIM2_Init+0xe4>)
 80016d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320;
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <MX_TIM2_Init+0xe4>)
 80016e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80016e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e6:	4b28      	ldr	r3, [pc, #160]	; (8001788 <MX_TIM2_Init+0xe4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80016ec:	4b26      	ldr	r3, [pc, #152]	; (8001788 <MX_TIM2_Init+0xe4>)
 80016ee:	2264      	movs	r2, #100	; 0x64
 80016f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f2:	4b25      	ldr	r3, [pc, #148]	; (8001788 <MX_TIM2_Init+0xe4>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	4b23      	ldr	r3, [pc, #140]	; (8001788 <MX_TIM2_Init+0xe4>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016fe:	4822      	ldr	r0, [pc, #136]	; (8001788 <MX_TIM2_Init+0xe4>)
 8001700:	f003 fcb4 	bl	800506c <HAL_TIM_Base_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800170a:	f000 f9e1 	bl	8001ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001714:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001718:	4619      	mov	r1, r3
 800171a:	481b      	ldr	r0, [pc, #108]	; (8001788 <MX_TIM2_Init+0xe4>)
 800171c:	f003 ff40 	bl	80055a0 <HAL_TIM_ConfigClockSource>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001726:	f000 f9d3 	bl	8001ad0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800172a:	4817      	ldr	r0, [pc, #92]	; (8001788 <MX_TIM2_Init+0xe4>)
 800172c:	f003 fd42 	bl	80051b4 <HAL_TIM_OC_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001736:	f000 f9cb 	bl	8001ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800173a:	2320      	movs	r3, #32
 800173c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	4619      	mov	r1, r3
 8001748:	480f      	ldr	r0, [pc, #60]	; (8001788 <MX_TIM2_Init+0xe4>)
 800174a:	f004 fb9d 	bl	8005e88 <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001754:	f000 f9bc 	bl	8001ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001758:	2300      	movs	r3, #0
 800175a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001768:	463b      	mov	r3, r7
 800176a:	2204      	movs	r2, #4
 800176c:	4619      	mov	r1, r3
 800176e:	4806      	ldr	r0, [pc, #24]	; (8001788 <MX_TIM2_Init+0xe4>)
 8001770:	f003 fea0 	bl	80054b4 <HAL_TIM_OC_ConfigChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800177a:	f000 f9a9 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	3738      	adds	r7, #56	; 0x38
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000ad4 	.word	0x20000ad4

0800178c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_TIM7_Init+0x64>)
 800179e:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <MX_TIM7_Init+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 320;
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <MX_TIM7_Init+0x64>)
 80017a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017a8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_TIM7_Init+0x64>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_TIM7_Init+0x64>)
 80017b2:	2264      	movs	r2, #100	; 0x64
 80017b4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_TIM7_Init+0x64>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <MX_TIM7_Init+0x64>)
 80017be:	f003 fc55 	bl	800506c <HAL_TIM_Base_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80017c8:	f000 f982 	bl	8001ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017cc:	2320      	movs	r3, #32
 80017ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_TIM7_Init+0x64>)
 80017da:	f004 fb55 	bl	8005e88 <HAL_TIMEx_MasterConfigSynchronization>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80017e4:	f000 f974 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000ba4 	.word	0x20000ba4
 80017f4:	40001400 	.word	0x40001400

080017f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <MX_USART2_UART_Init+0x58>)
 80017fe:	4a15      	ldr	r2, [pc, #84]	; (8001854 <MX_USART2_UART_Init+0x5c>)
 8001800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <MX_USART2_UART_Init+0x58>)
 8001804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <MX_USART2_UART_Init+0x58>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_USART2_UART_Init+0x58>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_USART2_UART_Init+0x58>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_USART2_UART_Init+0x58>)
 800181e:	220c      	movs	r2, #12
 8001820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <MX_USART2_UART_Init+0x58>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_USART2_UART_Init+0x58>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <MX_USART2_UART_Init+0x58>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_USART2_UART_Init+0x58>)
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <MX_USART2_UART_Init+0x58>)
 800183c:	f004 fba8 	bl	8005f90 <HAL_UART_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001846:	f000 f943 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000b20 	.word	0x20000b20
 8001854:	40004400 	.word	0x40004400

08001858 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_DMA_Init+0x38>)
 8001860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001862:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <MX_DMA_Init+0x38>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6493      	str	r3, [r2, #72]	; 0x48
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_DMA_Init+0x38>)
 800186c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	200b      	movs	r0, #11
 800187c:	f001 feb5 	bl	80035ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001880:	200b      	movs	r0, #11
 8001882:	f001 fece 	bl	8003622 <HAL_NVIC_EnableIRQ>

}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000

08001894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	4b29      	ldr	r3, [pc, #164]	; (8001950 <MX_GPIO_Init+0xbc>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	4a28      	ldr	r2, [pc, #160]	; (8001950 <MX_GPIO_Init+0xbc>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b6:	4b26      	ldr	r3, [pc, #152]	; (8001950 <MX_GPIO_Init+0xbc>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	4b23      	ldr	r3, [pc, #140]	; (8001950 <MX_GPIO_Init+0xbc>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	4a22      	ldr	r2, [pc, #136]	; (8001950 <MX_GPIO_Init+0xbc>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <MX_GPIO_Init+0xbc>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <MX_GPIO_Init+0xbc>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	4a1c      	ldr	r2, [pc, #112]	; (8001950 <MX_GPIO_Init+0xbc>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <MX_GPIO_Init+0xbc>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 80018f2:	2200      	movs	r2, #0
 80018f4:	f640 71b8 	movw	r1, #4024	; 0xfb8
 80018f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fc:	f002 fa0e 	bl	8003d1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|GPIO_PIN_4
 8001900:	2200      	movs	r2, #0
 8001902:	21fb      	movs	r1, #251	; 0xfb
 8001904:	4813      	ldr	r0, [pc, #76]	; (8001954 <MX_GPIO_Init+0xc0>)
 8001906:	f002 fa09 	bl	8003d1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA4 PA5 PA7
                           PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 800190a:	f640 73b8 	movw	r3, #4024	; 0xfb8
 800190e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4619      	mov	r1, r3
 8001922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001926:	f002 f88f 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 LD3_Pin PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|GPIO_PIN_4
 800192a:	23fb      	movs	r3, #251	; 0xfb
 800192c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192e:	2301      	movs	r3, #1
 8001930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	4619      	mov	r1, r3
 8001940:	4804      	ldr	r0, [pc, #16]	; (8001954 <MX_GPIO_Init+0xc0>)
 8001942:	f002 f881 	bl	8003a48 <HAL_GPIO_Init>

}
 8001946:	bf00      	nop
 8001948:	3720      	adds	r7, #32
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000
 8001954:	48000400 	.word	0x48000400

08001958 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	// Small pulse each time
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001960:	2201      	movs	r2, #1
 8001962:	2120      	movs	r1, #32
 8001964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001968:	f002 f9d8 	bl	8003d1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800196c:	2200      	movs	r2, #0
 800196e:	2120      	movs	r1, #32
 8001970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001974:	f002 f9d2 	bl	8003d1c <HAL_GPIO_WritePin>
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <CalculateSensorOutside>:

//Temperature sensor on a MCP9700A
float CalculateSensorOutside(uint16_t tempIn){
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]

	float voltsIn = (float)tempIn*convRate;
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001994:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80019f0 <CalculateSensorOutside+0x70>
 8001998:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199c:	edc7 7a03 	vstr	s15, [r7, #12]
	float tempOut = (voltsIn-0.5)/0.01;
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f7fe fdd1 	bl	8000548 <__aeabi_f2d>
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <CalculateSensorOutside+0x74>)
 80019ac:	f7fe fc6c 	bl	8000288 <__aeabi_dsub>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	a30b      	add	r3, pc, #44	; (adr r3, 80019e8 <CalculateSensorOutside+0x68>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe ff45 	bl	800084c <__aeabi_ddiv>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f7ff f8ed 	bl	8000ba8 <__aeabi_d2f>
 80019ce:	4603      	mov	r3, r0
 80019d0:	60bb      	str	r3, [r7, #8]
	return tempOut;
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	ee07 3a90 	vmov	s15, r3
}
 80019d8:	eeb0 0a67 	vmov.f32	s0, s15
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	f3af 8000 	nop.w
 80019e8:	47ae147b 	.word	0x47ae147b
 80019ec:	3f847ae1 	.word	0x3f847ae1
 80019f0:	3a534067 	.word	0x3a534067
 80019f4:	3fe00000 	.word	0x3fe00000

080019f8 <CalculateSensorOutside2nd>:

//Compansated Temperature on MCP9700A with 2nd order error calculation
//AN1001 application note
float CalculateSensorOutside2nd(float ta){
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	ed87 0a01 	vstr	s0, [r7, #4]

	float tError = (ec_2*(125-ta)*(ta+40)) + (ec_1*(ta+40)) + error_40;
 8001a02:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001a64 <CalculateSensorOutside2nd+0x6c>
 8001a06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a0e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001a68 <CalculateSensorOutside2nd+0x70>
 8001a12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a1a:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001a6c <CalculateSensorOutside2nd+0x74>
 8001a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a26:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a2a:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001a6c <CalculateSensorOutside2nd+0x74>
 8001a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a32:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001a70 <CalculateSensorOutside2nd+0x78>
 8001a36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a46:	edc7 7a03 	vstr	s15, [r7, #12]
	return (ta-tError);
 8001a4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a52:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001a56:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	42fa0000 	.word	0x42fa0000
 8001a68:	b97fda40 	.word	0xb97fda40
 8001a6c:	42200000 	.word	0x42200000
 8001a70:	2c0cbccc 	.word	0x2c0cbccc

08001a74 <CalculateSensorInside>:
//Temperature sensor on board

float CalculateSensorInside(uint16_t tempIn){
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	80fb      	strh	r3, [r7, #6]

	float voltsIn = (float)tempIn*convRate;
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	ee07 3a90 	vmov	s15, r3
 8001a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a88:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001ac4 <CalculateSensorInside+0x50>
 8001a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a90:	edc7 7a03 	vstr	s15, [r7, #12]
	float tempOut = (slope2*((float)voltsIn)) +interb2;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <CalculateSensorInside+0x54>)
 8001a96:	ed93 7a00 	vldr	s14, [r3]
 8001a9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <CalculateSensorInside+0x58>)
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aac:	edc7 7a02 	vstr	s15, [r7, #8]
	return tempOut;
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	ee07 3a90 	vmov	s15, r3
}
 8001ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	3a534067 	.word	0x3a534067
 8001ac8:	20000a24 	.word	0x20000a24
 8001acc:	20000bf0 	.word	0x20000bf0

08001ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad4:	b672      	cpsid	i
}
 8001ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <Error_Handler+0x8>
	...

08001adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_MspInit+0x44>)
 8001ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <HAL_MspInit+0x44>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6613      	str	r3, [r2, #96]	; 0x60
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <HAL_MspInit+0x44>)
 8001af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_MspInit+0x44>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <HAL_MspInit+0x44>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	6593      	str	r3, [r2, #88]	; 0x58
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_MspInit+0x44>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a2b      	ldr	r2, [pc, #172]	; (8001bf0 <HAL_ADC_MspInit+0xcc>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d14f      	bne.n	8001be6 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b46:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <HAL_ADC_MspInit+0xd0>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	4a2a      	ldr	r2, [pc, #168]	; (8001bf4 <HAL_ADC_MspInit+0xd0>)
 8001b4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b52:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <HAL_ADC_MspInit+0xd0>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_ADC_MspInit+0xd0>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	4a24      	ldr	r2, [pc, #144]	; (8001bf4 <HAL_ADC_MspInit+0xd0>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_ADC_MspInit+0xd0>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001b76:	2342      	movs	r3, #66	; 0x42
 8001b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b7a:	230b      	movs	r3, #11
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8c:	f001 ff5c 	bl	8003a48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_ADC_MspInit+0xd4>)
 8001b92:	4a1a      	ldr	r2, [pc, #104]	; (8001bfc <HAL_ADC_MspInit+0xd8>)
 8001b94:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <HAL_ADC_MspInit+0xd4>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_ADC_MspInit+0xd4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_ADC_MspInit+0xd4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <HAL_ADC_MspInit+0xd4>)
 8001baa:	2280      	movs	r2, #128	; 0x80
 8001bac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_ADC_MspInit+0xd4>)
 8001bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <HAL_ADC_MspInit+0xd4>)
 8001bb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_ADC_MspInit+0xd4>)
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_ADC_MspInit+0xd4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bca:	480b      	ldr	r0, [pc, #44]	; (8001bf8 <HAL_ADC_MspInit+0xd4>)
 8001bcc:	f001 fd44 	bl	8003658 <HAL_DMA_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8001bd6:	f7ff ff7b 	bl	8001ad0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <HAL_ADC_MspInit+0xd4>)
 8001bde:	64da      	str	r2, [r3, #76]	; 0x4c
 8001be0:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <HAL_ADC_MspInit+0xd4>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3728      	adds	r7, #40	; 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	50040000 	.word	0x50040000
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	20000a8c 	.word	0x20000a8c
 8001bfc:	40020008 	.word	0x40020008

08001c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c10:	d10c      	bne.n	8001c2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_TIM_Base_MspInit+0x68>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <HAL_TIM_Base_MspInit+0x68>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_TIM_Base_MspInit+0x68>)
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001c2a:	e018      	b.n	8001c5e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0e      	ldr	r2, [pc, #56]	; (8001c6c <HAL_TIM_Base_MspInit+0x6c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d113      	bne.n	8001c5e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_TIM_Base_MspInit+0x68>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <HAL_TIM_Base_MspInit+0x68>)
 8001c3c:	f043 0320 	orr.w	r3, r3, #32
 8001c40:	6593      	str	r3, [r2, #88]	; 0x58
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_TIM_Base_MspInit+0x68>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	f003 0320 	and.w	r3, r3, #32
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	2037      	movs	r0, #55	; 0x37
 8001c54:	f001 fcc9 	bl	80035ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c58:	2037      	movs	r0, #55	; 0x37
 8001c5a:	f001 fce2 	bl	8003622 <HAL_NVIC_EnableIRQ>
}
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40001400 	.word	0x40001400

08001c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a20      	ldr	r2, [pc, #128]	; (8001d10 <HAL_UART_MspInit+0xa0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d13a      	bne.n	8001d08 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <HAL_UART_MspInit+0xa4>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c96:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <HAL_UART_MspInit+0xa4>)
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <HAL_UART_MspInit+0xa4>)
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_UART_MspInit+0xa4>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cae:	4a19      	ldr	r2, [pc, #100]	; (8001d14 <HAL_UART_MspInit+0xa4>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <HAL_UART_MspInit+0xa4>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd2:	2307      	movs	r3, #7
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce0:	f001 feb2 	bl	8003a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d04:	f001 fea0 	bl	8003a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d08:	bf00      	nop
 8001d0a:	3728      	adds	r7, #40	; 0x28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40004400 	.word	0x40004400
 8001d14:	40021000 	.word	0x40021000

08001d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <NMI_Handler+0x4>

08001d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d22:	e7fe      	b.n	8001d22 <HardFault_Handler+0x4>

08001d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <MemManage_Handler+0x4>

08001d2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2e:	e7fe      	b.n	8001d2e <BusFault_Handler+0x4>

08001d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <UsageFault_Handler+0x4>

08001d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d64:	f000 f992 	bl	800208c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <DMA1_Channel1_IRQHandler+0x10>)
 8001d72:	f001 fd89 	bl	8003888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000a8c 	.word	0x20000a8c

08001d80 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <TIM7_IRQHandler+0x10>)
 8001d86:	f003 fa76 	bl	8005276 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000ba4 	.word	0x20000ba4

08001d94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
	return 1;
 8001d98:	2301      	movs	r3, #1
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <_kill>:

int _kill(int pid, int sig)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dae:	f004 fe17 	bl	80069e0 <__errno>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2216      	movs	r2, #22
 8001db6:	601a      	str	r2, [r3, #0]
	return -1;
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <_exit>:

void _exit (int status)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff ffe7 	bl	8001da4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dd6:	e7fe      	b.n	8001dd6 <_exit+0x12>

08001dd8 <_read>:
}

int _read (int file, char *ptr, int len)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8001de4:	2301      	movs	r3, #1
 8001de6:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	4807      	ldr	r0, [pc, #28]	; (8001e10 <_read+0x38>)
 8001df4:	f004 f9ae 	bl	8006154 <HAL_UART_Receive>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001e02:	607b      	str	r3, [r7, #4]

	return len;
 8001e04:	687b      	ldr	r3, [r7, #4]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000b20 	.word	0x20000b20

08001e14 <_write>:

int _write(int file, char *ptr, int len)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	4809      	ldr	r0, [pc, #36]	; (8001e54 <_write+0x40>)
 8001e30:	f004 f8fc 	bl	800602c <HAL_UART_Transmit>
 8001e34:	4603      	mov	r3, r0
 8001e36:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d002      	beq.n	8001e44 <_write+0x30>
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d101      	bne.n	8001e48 <_write+0x34>
	{
		Error_Handler();
 8001e44:	f7ff fe44 	bl	8001ad0 <Error_Handler>
	}

	return len;
 8001e48:	687b      	ldr	r3, [r7, #4]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000b20 	.word	0x20000b20

08001e58 <_close>:



int _close(int file)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	return -1;
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e80:	605a      	str	r2, [r3, #4]
	return 0;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_isatty>:

int _isatty(int file)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	return 1;
 8001e98:	2301      	movs	r3, #1
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b085      	sub	sp, #20
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
	return 0;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec8:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <_sbrk+0x5c>)
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <_sbrk+0x60>)
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed4:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <_sbrk+0x64>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d102      	bne.n	8001ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <_sbrk+0x64>)
 8001ede:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <_sbrk+0x68>)
 8001ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d207      	bcs.n	8001f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef0:	f004 fd76 	bl	80069e0 <__errno>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	e009      	b.n	8001f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <_sbrk+0x64>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f06:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <_sbrk+0x64>)
 8001f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f12:	68fb      	ldr	r3, [r7, #12]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20010000 	.word	0x20010000
 8001f20:	00000400 	.word	0x00000400
 8001f24:	200009ec 	.word	0x200009ec
 8001f28:	20000c10 	.word	0x20000c10

08001f2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f30:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <SystemInit+0x5c>)
 8001f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f36:	4a14      	ldr	r2, [pc, #80]	; (8001f88 <SystemInit+0x5c>)
 8001f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <SystemInit+0x60>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <SystemInit+0x60>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <SystemInit+0x60>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <SystemInit+0x60>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a0d      	ldr	r2, [pc, #52]	; (8001f8c <SystemInit+0x60>)
 8001f58:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f5c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f60:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <SystemInit+0x60>)
 8001f64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <SystemInit+0x60>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <SystemInit+0x60>)
 8001f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <SystemInit+0x60>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000ed00 	.word	0xe000ed00
 8001f8c:	40021000 	.word	0x40021000

08001f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f94:	f7ff ffca 	bl	8001f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f9a:	e003      	b.n	8001fa4 <LoopCopyDataInit>

08001f9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001fa0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001fa2:	3104      	adds	r1, #4

08001fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001fa4:	480a      	ldr	r0, [pc, #40]	; (8001fd0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001fa8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001faa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001fac:	d3f6      	bcc.n	8001f9c <CopyDataInit>
	ldr	r2, =_sbss
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001fb0:	e002      	b.n	8001fb8 <LoopFillZerobss>

08001fb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001fb2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001fb4:	f842 3b04 	str.w	r3, [r2], #4

08001fb8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <LoopForever+0x16>)
	cmp	r2, r3
 8001fba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001fbc:	d3f9      	bcc.n	8001fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fbe:	f004 fd15 	bl	80069ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fc2:	f7ff f8f5 	bl	80011b0 <main>

08001fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fc6:	e7fe      	b.n	8001fc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fc8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001fcc:	0800ce10 	.word	0x0800ce10
	ldr	r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001fd4:	200009c8 	.word	0x200009c8
	ldr	r2, =_sbss
 8001fd8:	200009c8 	.word	0x200009c8
	ldr	r3, = _ebss
 8001fdc:	20000c10 	.word	0x20000c10

08001fe0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC1_IRQHandler>

08001fe2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fec:	2003      	movs	r0, #3
 8001fee:	f001 faf1 	bl	80035d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f000 f80e 	bl	8002014 <HAL_InitTick>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	71fb      	strb	r3, [r7, #7]
 8002002:	e001      	b.n	8002008 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002004:	f7ff fd6a 	bl	8001adc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002008:	79fb      	ldrb	r3, [r7, #7]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002020:	4b17      	ldr	r3, [pc, #92]	; (8002080 <HAL_InitTick+0x6c>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d023      	beq.n	8002070 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002028:	4b16      	ldr	r3, [pc, #88]	; (8002084 <HAL_InitTick+0x70>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <HAL_InitTick+0x6c>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002036:	fbb3 f3f1 	udiv	r3, r3, r1
 800203a:	fbb2 f3f3 	udiv	r3, r2, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f001 fafd 	bl	800363e <HAL_SYSTICK_Config>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10f      	bne.n	800206a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b0f      	cmp	r3, #15
 800204e:	d809      	bhi.n	8002064 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002050:	2200      	movs	r2, #0
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	f001 fac7 	bl	80035ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800205c:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <HAL_InitTick+0x74>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e007      	b.n	8002074 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	e004      	b.n	8002074 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	73fb      	strb	r3, [r7, #15]
 800206e:	e001      	b.n	8002074 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000018 	.word	0x20000018
 8002084:	20000010 	.word	0x20000010
 8002088:	20000014 	.word	0x20000014

0800208c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_IncTick+0x20>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_IncTick+0x24>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4413      	add	r3, r2
 800209c:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <HAL_IncTick+0x24>)
 800209e:	6013      	str	r3, [r2, #0]
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000018 	.word	0x20000018
 80020b0:	20000bfc 	.word	0x20000bfc

080020b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return uwTick;
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <HAL_GetTick+0x14>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000bfc 	.word	0x20000bfc

080020cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d4:	f7ff ffee 	bl	80020b4 <HAL_GetTick>
 80020d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e4:	d005      	beq.n	80020f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <HAL_Delay+0x44>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4413      	add	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020f2:	bf00      	nop
 80020f4:	f7ff ffde 	bl	80020b4 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	429a      	cmp	r2, r3
 8002102:	d8f7      	bhi.n	80020f4 <HAL_Delay+0x28>
  {
  }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000018 	.word	0x20000018

08002114 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	609a      	str	r2, [r3, #8]
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	609a      	str	r2, [r3, #8]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3360      	adds	r3, #96	; 0x60
 800218e:	461a      	mov	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <LL_ADC_SetOffset+0x44>)
 800219e:	4013      	ands	r3, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021b4:	bf00      	nop
 80021b6:	371c      	adds	r7, #28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	03fff000 	.word	0x03fff000

080021c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3360      	adds	r3, #96	; 0x60
 80021d2:	461a      	mov	r2, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	3360      	adds	r3, #96	; 0x60
 8002200:	461a      	mov	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	431a      	orrs	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800221a:	bf00      	nop
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3330      	adds	r3, #48	; 0x30
 800225c:	461a      	mov	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	4413      	add	r3, r2
 800226a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	211f      	movs	r1, #31
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	401a      	ands	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	0e9b      	lsrs	r3, r3, #26
 8002284:	f003 011f 	and.w	r1, r3, #31
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	431a      	orrs	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002298:	bf00      	nop
 800229a:	371c      	adds	r7, #28
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3314      	adds	r3, #20
 80022b4:	461a      	mov	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	0e5b      	lsrs	r3, r3, #25
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	4413      	add	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	0d1b      	lsrs	r3, r3, #20
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	2107      	movs	r1, #7
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	401a      	ands	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	0d1b      	lsrs	r3, r3, #20
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	431a      	orrs	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022ee:	bf00      	nop
 80022f0:	371c      	adds	r7, #28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002314:	43db      	mvns	r3, r3
 8002316:	401a      	ands	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f003 0318 	and.w	r3, r3, #24
 800231e:	4908      	ldr	r1, [pc, #32]	; (8002340 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002320:	40d9      	lsrs	r1, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	400b      	ands	r3, r1
 8002326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232a:	431a      	orrs	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	0007ffff 	.word	0x0007ffff

08002344 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002354:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6093      	str	r3, [r2, #8]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800237c:	d101      	bne.n	8002382 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80023a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023cc:	d101      	bne.n	80023d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023f4:	f043 0201 	orr.w	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002418:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800241c:	f043 0202 	orr.w	r2, r3, #2
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <LL_ADC_IsEnabled+0x18>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <LL_ADC_IsEnabled+0x1a>
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b02      	cmp	r3, #2
 8002468:	d101      	bne.n	800246e <LL_ADC_IsDisableOngoing+0x18>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <LL_ADC_IsDisableOngoing+0x1a>
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800248c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002490:	f043 0204 	orr.w	r2, r3, #4
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d101      	bne.n	80024bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d101      	bne.n	80024e2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e12c      	b.n	8002764 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	2b00      	cmp	r3, #0
 8002516:	d109      	bne.n	800252c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff fb03 	bl	8001b24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff19 	bl	8002368 <LL_ADC_IsDeepPowerDownEnabled>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d004      	beq.n	8002546 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff feff 	bl	8002344 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ff34 	bl	80023b8 <LL_ADC_IsInternalRegulatorEnabled>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d115      	bne.n	8002582 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ff18 	bl	8002390 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002560:	4b82      	ldr	r3, [pc, #520]	; (800276c <HAL_ADC_Init+0x27c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	099b      	lsrs	r3, r3, #6
 8002566:	4a82      	ldr	r2, [pc, #520]	; (8002770 <HAL_ADC_Init+0x280>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	3301      	adds	r3, #1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002574:	e002      	b.n	800257c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	3b01      	subs	r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f9      	bne.n	8002576 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff ff16 	bl	80023b8 <LL_ADC_IsInternalRegulatorEnabled>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10d      	bne.n	80025ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	f043 0210 	orr.w	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ff76 	bl	80024a4 <LL_ADC_REG_IsConversionOngoing>
 80025b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f040 80c5 	bne.w	8002752 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 80c1 	bne.w	8002752 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025d8:	f043 0202 	orr.w	r2, r3, #2
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff23 	bl	8002430 <LL_ADC_IsEnabled>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10b      	bne.n	8002608 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025f0:	4860      	ldr	r0, [pc, #384]	; (8002774 <HAL_ADC_Init+0x284>)
 80025f2:	f7ff ff1d 	bl	8002430 <LL_ADC_IsEnabled>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4619      	mov	r1, r3
 8002602:	485d      	ldr	r0, [pc, #372]	; (8002778 <HAL_ADC_Init+0x288>)
 8002604:	f7ff fd86 	bl	8002114 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	7e5b      	ldrb	r3, [r3, #25]
 800260c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002612:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002618:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800261e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002626:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d106      	bne.n	8002644 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	3b01      	subs	r3, #1
 800263c:	045b      	lsls	r3, r3, #17
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	d009      	beq.n	8002660 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	4b45      	ldr	r3, [pc, #276]	; (800277c <HAL_ADC_Init+0x28c>)
 8002668:	4013      	ands	r3, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	69b9      	ldr	r1, [r7, #24]
 8002670:	430b      	orrs	r3, r1
 8002672:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff13 	bl	80024a4 <LL_ADC_REG_IsConversionOngoing>
 800267e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff20 	bl	80024ca <LL_ADC_INJ_IsConversionOngoing>
 800268a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d13d      	bne.n	800270e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d13a      	bne.n	800270e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800269c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026a4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026b4:	f023 0302 	bic.w	r3, r3, #2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	69b9      	ldr	r1, [r7, #24]
 80026be:	430b      	orrs	r3, r1
 80026c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d118      	bne.n	80026fe <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80026d6:	f023 0304 	bic.w	r3, r3, #4
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026e2:	4311      	orrs	r1, r2
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026e8:	4311      	orrs	r1, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026ee:	430a      	orrs	r2, r1
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	611a      	str	r2, [r3, #16]
 80026fc:	e007      	b.n	800270e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0201 	bic.w	r2, r2, #1
 800270c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d10c      	bne.n	8002730 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	f023 010f 	bic.w	r1, r3, #15
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	1e5a      	subs	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
 800272e:	e007      	b.n	8002740 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 020f 	bic.w	r2, r2, #15
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002744:	f023 0303 	bic.w	r3, r3, #3
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	655a      	str	r2, [r3, #84]	; 0x54
 8002750:	e007      	b.n	8002762 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	f043 0210 	orr.w	r2, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002762:	7ffb      	ldrb	r3, [r7, #31]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3720      	adds	r7, #32
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20000010 	.word	0x20000010
 8002770:	053e2d63 	.word	0x053e2d63
 8002774:	50040000 	.word	0x50040000
 8002778:	50040300 	.word	0x50040300
 800277c:	fff0c007 	.word	0xfff0c007

08002780 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fe87 	bl	80024a4 <LL_ADC_REG_IsConversionOngoing>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d167      	bne.n	800286c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_ADC_Start_DMA+0x2a>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e063      	b.n	8002872 <HAL_ADC_Start_DMA+0xf2>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fc5c 	bl	8003070 <ADC_Enable>
 80027b8:	4603      	mov	r3, r0
 80027ba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d14f      	bne.n	8002862 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d006      	beq.n	80027f0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e6:	f023 0206 	bic.w	r2, r3, #6
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	659a      	str	r2, [r3, #88]	; 0x58
 80027ee:	e002      	b.n	80027f6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	4a20      	ldr	r2, [pc, #128]	; (800287c <HAL_ADC_Start_DMA+0xfc>)
 80027fc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002802:	4a1f      	ldr	r2, [pc, #124]	; (8002880 <HAL_ADC_Start_DMA+0x100>)
 8002804:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280a:	4a1e      	ldr	r2, [pc, #120]	; (8002884 <HAL_ADC_Start_DMA+0x104>)
 800280c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	221c      	movs	r2, #28
 8002814:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0210 	orr.w	r2, r2, #16
 800282c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0201 	orr.w	r2, r2, #1
 800283c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3340      	adds	r3, #64	; 0x40
 8002848:	4619      	mov	r1, r3
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f000 ffbb 	bl	80037c8 <HAL_DMA_Start_IT>
 8002852:	4603      	mov	r3, r0
 8002854:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fe0e 	bl	800247c <LL_ADC_REG_StartConversion>
 8002860:	e006      	b.n	8002870 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800286a:	e001      	b.n	8002870 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800286c:	2302      	movs	r3, #2
 800286e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002870:	7dfb      	ldrb	r3, [r7, #23]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	080031f3 	.word	0x080031f3
 8002880:	080032cb 	.word	0x080032cb
 8002884:	080032e7 	.word	0x080032e7

08002888 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b0b6      	sub	sp, #216	; 0xd8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x22>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e3b9      	b.n	8003046 <HAL_ADC_ConfigChannel+0x796>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fde0 	bl	80024a4 <LL_ADC_REG_IsConversionOngoing>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f040 839e 	bne.w	8003028 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d824      	bhi.n	800293e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	3b02      	subs	r3, #2
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d81b      	bhi.n	8002936 <HAL_ADC_ConfigChannel+0x86>
 80028fe:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <HAL_ADC_ConfigChannel+0x54>)
 8002900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002904:	08002915 	.word	0x08002915
 8002908:	0800291d 	.word	0x0800291d
 800290c:	08002925 	.word	0x08002925
 8002910:	0800292d 	.word	0x0800292d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	220c      	movs	r2, #12
 8002918:	605a      	str	r2, [r3, #4]
          break;
 800291a:	e011      	b.n	8002940 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2212      	movs	r2, #18
 8002920:	605a      	str	r2, [r3, #4]
          break;
 8002922:	e00d      	b.n	8002940 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2218      	movs	r2, #24
 8002928:	605a      	str	r2, [r3, #4]
          break;
 800292a:	e009      	b.n	8002940 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002932:	605a      	str	r2, [r3, #4]
          break;
 8002934:	e004      	b.n	8002940 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2206      	movs	r2, #6
 800293a:	605a      	str	r2, [r3, #4]
          break;
 800293c:	e000      	b.n	8002940 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800293e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	f7ff fc7d 	bl	800224c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fda4 	bl	80024a4 <LL_ADC_REG_IsConversionOngoing>
 800295c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fdb0 	bl	80024ca <LL_ADC_INJ_IsConversionOngoing>
 800296a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800296e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002972:	2b00      	cmp	r3, #0
 8002974:	f040 81a6 	bne.w	8002cc4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002978:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800297c:	2b00      	cmp	r3, #0
 800297e:	f040 81a1 	bne.w	8002cc4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6819      	ldr	r1, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	461a      	mov	r2, r3
 8002990:	f7ff fc88 	bl	80022a4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	08db      	lsrs	r3, r3, #3
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d00a      	beq.n	80029cc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6919      	ldr	r1, [r3, #16]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029c6:	f7ff fbd9 	bl	800217c <LL_ADC_SetOffset>
 80029ca:	e17b      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fbf6 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 80029d8:	4603      	mov	r3, r0
 80029da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10a      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x148>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fbeb 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 80029ee:	4603      	mov	r3, r0
 80029f0:	0e9b      	lsrs	r3, r3, #26
 80029f2:	f003 021f 	and.w	r2, r3, #31
 80029f6:	e01e      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x186>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fbe0 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002a26:	2320      	movs	r3, #32
 8002a28:	e004      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002a2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d105      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x19e>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	0e9b      	lsrs	r3, r3, #26
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	e018      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x1d0>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002a72:	2320      	movs	r3, #32
 8002a74:	e004      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002a76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d106      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fbaf 	bl	80021f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2101      	movs	r1, #1
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fb93 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x20e>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2101      	movs	r1, #1
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff fb88 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	0e9b      	lsrs	r3, r3, #26
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	e01e      	b.n	8002afc <HAL_ADC_ConfigChannel+0x24c>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fb7d 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002adc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ae4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002aec:	2320      	movs	r3, #32
 8002aee:	e004      	b.n	8002afa <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002af0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002af4:	fab3 f383 	clz	r3, r3
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d105      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x264>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0e9b      	lsrs	r3, r3, #26
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	e018      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x296>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002b38:	2320      	movs	r3, #32
 8002b3a:	e004      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d106      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2101      	movs	r1, #1
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fb4c 	bl	80021f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fb30 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10a      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x2d4>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2102      	movs	r1, #2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fb25 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	f003 021f 	and.w	r2, r3, #31
 8002b82:	e01e      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x312>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2102      	movs	r1, #2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fb1a 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ba2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002baa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002bb2:	2320      	movs	r3, #32
 8002bb4:	e004      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002bb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bba:	fab3 f383 	clz	r3, r3
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d105      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x32a>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0e9b      	lsrs	r3, r3, #26
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	e016      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x358>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002be6:	fa93 f3a3 	rbit	r3, r3
 8002bea:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002bec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002bf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	e004      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d106      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2200      	movs	r2, #0
 8002c12:	2102      	movs	r1, #2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff faeb 	bl	80021f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2103      	movs	r1, #3
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff facf 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x396>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2103      	movs	r1, #3
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fac4 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	0e9b      	lsrs	r3, r3, #26
 8002c40:	f003 021f 	and.w	r2, r3, #31
 8002c44:	e017      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x3c6>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2103      	movs	r1, #3
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fab9 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002c52:	4603      	mov	r3, r0
 8002c54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c60:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002c68:	2320      	movs	r3, #32
 8002c6a:	e003      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c6e:	fab3 f383 	clz	r3, r3
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d105      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x3de>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	0e9b      	lsrs	r3, r3, #26
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	e011      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x402>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	e003      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cac:	fab3 f383 	clz	r3, r3
 8002cb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d106      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2103      	movs	r1, #3
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fa96 	bl	80021f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fbb1 	bl	8002430 <LL_ADC_IsEnabled>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f040 813f 	bne.w	8002f54 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6819      	ldr	r1, [r3, #0]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	f7ff fb0a 	bl	80022fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a8e      	ldr	r2, [pc, #568]	; (8002f28 <HAL_ADC_ConfigChannel+0x678>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	f040 8130 	bne.w	8002f54 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10b      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x46c>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	0e9b      	lsrs	r3, r3, #26
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	2b09      	cmp	r3, #9
 8002d12:	bf94      	ite	ls
 8002d14:	2301      	movls	r3, #1
 8002d16:	2300      	movhi	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	e019      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x4a0>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d2c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002d34:	2320      	movs	r3, #32
 8002d36:	e003      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002d38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	3301      	adds	r3, #1
 8002d42:	f003 031f 	and.w	r3, r3, #31
 8002d46:	2b09      	cmp	r3, #9
 8002d48:	bf94      	ite	ls
 8002d4a:	2301      	movls	r3, #1
 8002d4c:	2300      	movhi	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d079      	beq.n	8002e48 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x4c0>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0e9b      	lsrs	r3, r3, #26
 8002d66:	3301      	adds	r3, #1
 8002d68:	069b      	lsls	r3, r3, #26
 8002d6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d6e:	e015      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x4ec>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d80:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002d88:	2320      	movs	r3, #32
 8002d8a:	e003      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	3301      	adds	r3, #1
 8002d96:	069b      	lsls	r3, r3, #26
 8002d98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x50c>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0e9b      	lsrs	r3, r3, #26
 8002dae:	3301      	adds	r3, #1
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	2101      	movs	r1, #1
 8002db6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dba:	e017      	b.n	8002dec <HAL_ADC_ConfigChannel+0x53c>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dcc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	e003      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	2101      	movs	r1, #1
 8002de8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dec:	ea42 0103 	orr.w	r1, r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10a      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x562>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	0e9b      	lsrs	r3, r3, #26
 8002e02:	3301      	adds	r3, #1
 8002e04:	f003 021f 	and.w	r2, r3, #31
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	051b      	lsls	r3, r3, #20
 8002e10:	e018      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x594>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002e2a:	2320      	movs	r3, #32
 8002e2c:	e003      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	3301      	adds	r3, #1
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e44:	430b      	orrs	r3, r1
 8002e46:	e080      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d107      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x5b4>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	0e9b      	lsrs	r3, r3, #26
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	069b      	lsls	r3, r3, #26
 8002e5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e62:	e015      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x5e0>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	e003      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	069b      	lsls	r3, r3, #26
 8002e8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x600>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	0e9b      	lsrs	r3, r3, #26
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	e017      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x630>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	61fb      	str	r3, [r7, #28]
  return result;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002ec8:	2320      	movs	r3, #32
 8002eca:	e003      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	2101      	movs	r1, #1
 8002edc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee0:	ea42 0103 	orr.w	r1, r2, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10d      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x65c>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	0e9b      	lsrs	r3, r3, #26
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f003 021f 	and.w	r2, r3, #31
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	3b1e      	subs	r3, #30
 8002f04:	051b      	lsls	r3, r3, #20
 8002f06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	e01d      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x698>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	613b      	str	r3, [r7, #16]
  return result;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d103      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002f24:	2320      	movs	r3, #32
 8002f26:	e005      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x684>
 8002f28:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	fab3 f383 	clz	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	3301      	adds	r3, #1
 8002f36:	f003 021f 	and.w	r2, r3, #31
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	4413      	add	r3, r2
 8002f40:	3b1e      	subs	r3, #30
 8002f42:	051b      	lsls	r3, r3, #20
 8002f44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	6892      	ldr	r2, [r2, #8]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	f7ff f9a8 	bl	80022a4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b3d      	ldr	r3, [pc, #244]	; (8003050 <HAL_ADC_ConfigChannel+0x7a0>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d06c      	beq.n	800303a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f60:	483c      	ldr	r0, [pc, #240]	; (8003054 <HAL_ADC_ConfigChannel+0x7a4>)
 8002f62:	f7ff f8fd 	bl	8002160 <LL_ADC_GetCommonPathInternalCh>
 8002f66:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a3a      	ldr	r2, [pc, #232]	; (8003058 <HAL_ADC_ConfigChannel+0x7a8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d127      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d121      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a35      	ldr	r2, [pc, #212]	; (800305c <HAL_ADC_ConfigChannel+0x7ac>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d157      	bne.n	800303a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f92:	4619      	mov	r1, r3
 8002f94:	482f      	ldr	r0, [pc, #188]	; (8003054 <HAL_ADC_ConfigChannel+0x7a4>)
 8002f96:	f7ff f8d0 	bl	800213a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f9a:	4b31      	ldr	r3, [pc, #196]	; (8003060 <HAL_ADC_ConfigChannel+0x7b0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	099b      	lsrs	r3, r3, #6
 8002fa0:	4a30      	ldr	r2, [pc, #192]	; (8003064 <HAL_ADC_ConfigChannel+0x7b4>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	099b      	lsrs	r3, r3, #6
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	4613      	mov	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fb4:	e002      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f9      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fc2:	e03a      	b.n	800303a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a27      	ldr	r2, [pc, #156]	; (8003068 <HAL_ADC_ConfigChannel+0x7b8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d113      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x746>
 8002fce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10d      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1f      	ldr	r2, [pc, #124]	; (800305c <HAL_ADC_ConfigChannel+0x7ac>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d12a      	bne.n	800303a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fe4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fe8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fec:	4619      	mov	r1, r3
 8002fee:	4819      	ldr	r0, [pc, #100]	; (8003054 <HAL_ADC_ConfigChannel+0x7a4>)
 8002ff0:	f7ff f8a3 	bl	800213a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ff4:	e021      	b.n	800303a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a1c      	ldr	r2, [pc, #112]	; (800306c <HAL_ADC_ConfigChannel+0x7bc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d11c      	bne.n	800303a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003004:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d116      	bne.n	800303a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a12      	ldr	r2, [pc, #72]	; (800305c <HAL_ADC_ConfigChannel+0x7ac>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d111      	bne.n	800303a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003016:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800301a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800301e:	4619      	mov	r1, r3
 8003020:	480c      	ldr	r0, [pc, #48]	; (8003054 <HAL_ADC_ConfigChannel+0x7a4>)
 8003022:	f7ff f88a 	bl	800213a <LL_ADC_SetCommonPathInternalCh>
 8003026:	e008      	b.n	800303a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003042:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003046:	4618      	mov	r0, r3
 8003048:	37d8      	adds	r7, #216	; 0xd8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	80080000 	.word	0x80080000
 8003054:	50040300 	.word	0x50040300
 8003058:	c7520000 	.word	0xc7520000
 800305c:	50040000 	.word	0x50040000
 8003060:	20000010 	.word	0x20000010
 8003064:	053e2d63 	.word	0x053e2d63
 8003068:	cb840000 	.word	0xcb840000
 800306c:	80000001 	.word	0x80000001

08003070 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff f9d7 	bl	8002430 <LL_ADC_IsEnabled>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d14d      	bne.n	8003124 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	4b28      	ldr	r3, [pc, #160]	; (8003130 <ADC_Enable+0xc0>)
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00d      	beq.n	80030b2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309a:	f043 0210 	orr.w	r2, r3, #16
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a6:	f043 0201 	orr.w	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e039      	b.n	8003126 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff f992 	bl	80023e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030bc:	f7fe fffa 	bl	80020b4 <HAL_GetTick>
 80030c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030c2:	e028      	b.n	8003116 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff f9b1 	bl	8002430 <LL_ADC_IsEnabled>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d104      	bne.n	80030de <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff f981 	bl	80023e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030de:	f7fe ffe9 	bl	80020b4 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d914      	bls.n	8003116 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d00d      	beq.n	8003116 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	f043 0210 	orr.w	r2, r3, #16
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	f043 0201 	orr.w	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e007      	b.n	8003126 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b01      	cmp	r3, #1
 8003122:	d1cf      	bne.n	80030c4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	8000003f 	.word	0x8000003f

08003134 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff f988 	bl	8002456 <LL_ADC_IsDisableOngoing>
 8003146:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff f96f 	bl	8002430 <LL_ADC_IsEnabled>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d047      	beq.n	80031e8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d144      	bne.n	80031e8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 030d 	and.w	r3, r3, #13
 8003168:	2b01      	cmp	r3, #1
 800316a:	d10c      	bne.n	8003186 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff f949 	bl	8002408 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2203      	movs	r2, #3
 800317c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800317e:	f7fe ff99 	bl	80020b4 <HAL_GetTick>
 8003182:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003184:	e029      	b.n	80031da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318a:	f043 0210 	orr.w	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003196:	f043 0201 	orr.w	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e023      	b.n	80031ea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031a2:	f7fe ff87 	bl	80020b4 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d914      	bls.n	80031da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00d      	beq.n	80031da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	f043 0210 	orr.w	r2, r3, #16
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ce:	f043 0201 	orr.w	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e007      	b.n	80031ea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1dc      	bne.n	80031a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003208:	2b00      	cmp	r3, #0
 800320a:	d14b      	bne.n	80032a4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003210:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d021      	beq.n	800326a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe fffb 	bl	8002226 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d032      	beq.n	800329c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d12b      	bne.n	800329c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d11f      	bne.n	800329c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	655a      	str	r2, [r3, #84]	; 0x54
 8003268:	e018      	b.n	800329c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d111      	bne.n	800329c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f7fe fb5b 	bl	8001958 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032a2:	e00e      	b.n	80032c2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f7ff faf3 	bl	800289c <HAL_ADC_ErrorCallback>
}
 80032b6:	e004      	b.n	80032c2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4798      	blx	r3
}
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f7ff fad5 	bl	8002888 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032de:	bf00      	nop
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b084      	sub	sp, #16
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	f043 0204 	orr.w	r2, r3, #4
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7ff fac5 	bl	800289c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <LL_ADC_StartCalibration>:
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800332c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003336:	4313      	orrs	r3, r2
 8003338:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	609a      	str	r2, [r3, #8]
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <LL_ADC_IsCalibrationOnGoing>:
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800335c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003360:	d101      	bne.n	8003366 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800337e:	2300      	movs	r3, #0
 8003380:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_ADCEx_Calibration_Start+0x1c>
 800338c:	2302      	movs	r3, #2
 800338e:	e04d      	b.n	800342c <HAL_ADCEx_Calibration_Start+0xb8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff fecb 	bl	8003134 <ADC_Disable>
 800339e:	4603      	mov	r3, r0
 80033a0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d136      	bne.n	8003416 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033b0:	f023 0302 	bic.w	r3, r3, #2
 80033b4:	f043 0202 	orr.w	r2, r3, #2
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6839      	ldr	r1, [r7, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff ffa9 	bl	800331a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033c8:	e014      	b.n	80033f4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	3301      	adds	r3, #1
 80033ce:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80033d6:	d30d      	bcc.n	80033f4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	f023 0312 	bic.w	r3, r3, #18
 80033e0:	f043 0210 	orr.w	r2, r3, #16
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e01b      	b.n	800342c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ffa7 	bl	800334c <LL_ADC_IsCalibrationOnGoing>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1e2      	bne.n	80033ca <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003408:	f023 0303 	bic.w	r3, r3, #3
 800340c:	f043 0201 	orr.w	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	655a      	str	r2, [r3, #84]	; 0x54
 8003414:	e005      	b.n	8003422 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341a:	f043 0210 	orr.w	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800342a:	7bfb      	ldrb	r3, [r7, #15]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <__NVIC_SetPriorityGrouping+0x44>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003450:	4013      	ands	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800345c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003466:	4a04      	ldr	r2, [pc, #16]	; (8003478 <__NVIC_SetPriorityGrouping+0x44>)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	60d3      	str	r3, [r2, #12]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003480:	4b04      	ldr	r3, [pc, #16]	; (8003494 <__NVIC_GetPriorityGrouping+0x18>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	0a1b      	lsrs	r3, r3, #8
 8003486:	f003 0307 	and.w	r3, r3, #7
}
 800348a:	4618      	mov	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	db0b      	blt.n	80034c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	f003 021f 	and.w	r2, r3, #31
 80034b0:	4907      	ldr	r1, [pc, #28]	; (80034d0 <__NVIC_EnableIRQ+0x38>)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	2001      	movs	r0, #1
 80034ba:	fa00 f202 	lsl.w	r2, r0, r2
 80034be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	e000e100 	.word	0xe000e100

080034d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	6039      	str	r1, [r7, #0]
 80034de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	db0a      	blt.n	80034fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	490c      	ldr	r1, [pc, #48]	; (8003520 <__NVIC_SetPriority+0x4c>)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	0112      	lsls	r2, r2, #4
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	440b      	add	r3, r1
 80034f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034fc:	e00a      	b.n	8003514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	b2da      	uxtb	r2, r3
 8003502:	4908      	ldr	r1, [pc, #32]	; (8003524 <__NVIC_SetPriority+0x50>)
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	3b04      	subs	r3, #4
 800350c:	0112      	lsls	r2, r2, #4
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	440b      	add	r3, r1
 8003512:	761a      	strb	r2, [r3, #24]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	e000e100 	.word	0xe000e100
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003528:	b480      	push	{r7}
 800352a:	b089      	sub	sp, #36	; 0x24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f1c3 0307 	rsb	r3, r3, #7
 8003542:	2b04      	cmp	r3, #4
 8003544:	bf28      	it	cs
 8003546:	2304      	movcs	r3, #4
 8003548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3304      	adds	r3, #4
 800354e:	2b06      	cmp	r3, #6
 8003550:	d902      	bls.n	8003558 <NVIC_EncodePriority+0x30>
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	3b03      	subs	r3, #3
 8003556:	e000      	b.n	800355a <NVIC_EncodePriority+0x32>
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800355c:	f04f 32ff 	mov.w	r2, #4294967295
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43da      	mvns	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	401a      	ands	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003570:	f04f 31ff 	mov.w	r1, #4294967295
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	43d9      	mvns	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003580:	4313      	orrs	r3, r2
         );
}
 8003582:	4618      	mov	r0, r3
 8003584:	3724      	adds	r7, #36	; 0x24
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a0:	d301      	bcc.n	80035a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035a2:	2301      	movs	r3, #1
 80035a4:	e00f      	b.n	80035c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035a6:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <SysTick_Config+0x40>)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ae:	210f      	movs	r1, #15
 80035b0:	f04f 30ff 	mov.w	r0, #4294967295
 80035b4:	f7ff ff8e 	bl	80034d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <SysTick_Config+0x40>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035be:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <SysTick_Config+0x40>)
 80035c0:	2207      	movs	r2, #7
 80035c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	e000e010 	.word	0xe000e010

080035d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ff29 	bl	8003434 <__NVIC_SetPriorityGrouping>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b086      	sub	sp, #24
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	4603      	mov	r3, r0
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035fc:	f7ff ff3e 	bl	800347c <__NVIC_GetPriorityGrouping>
 8003600:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	6978      	ldr	r0, [r7, #20]
 8003608:	f7ff ff8e 	bl	8003528 <NVIC_EncodePriority>
 800360c:	4602      	mov	r2, r0
 800360e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ff5d 	bl	80034d4 <__NVIC_SetPriority>
}
 800361a:	bf00      	nop
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	4603      	mov	r3, r0
 800362a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800362c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ff31 	bl	8003498 <__NVIC_EnableIRQ>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff ffa2 	bl	8003590 <SysTick_Config>
 800364c:	4603      	mov	r3, r0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e098      	b.n	800379c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	4b4d      	ldr	r3, [pc, #308]	; (80037a8 <HAL_DMA_Init+0x150>)
 8003672:	429a      	cmp	r2, r3
 8003674:	d80f      	bhi.n	8003696 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	4b4b      	ldr	r3, [pc, #300]	; (80037ac <HAL_DMA_Init+0x154>)
 800367e:	4413      	add	r3, r2
 8003680:	4a4b      	ldr	r2, [pc, #300]	; (80037b0 <HAL_DMA_Init+0x158>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	009a      	lsls	r2, r3, #2
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a48      	ldr	r2, [pc, #288]	; (80037b4 <HAL_DMA_Init+0x15c>)
 8003692:	641a      	str	r2, [r3, #64]	; 0x40
 8003694:	e00e      	b.n	80036b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	4b46      	ldr	r3, [pc, #280]	; (80037b8 <HAL_DMA_Init+0x160>)
 800369e:	4413      	add	r3, r2
 80036a0:	4a43      	ldr	r2, [pc, #268]	; (80037b0 <HAL_DMA_Init+0x158>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	091b      	lsrs	r3, r3, #4
 80036a8:	009a      	lsls	r2, r3, #2
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a42      	ldr	r2, [pc, #264]	; (80037bc <HAL_DMA_Init+0x164>)
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800370e:	d039      	beq.n	8003784 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	4a27      	ldr	r2, [pc, #156]	; (80037b4 <HAL_DMA_Init+0x15c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d11a      	bne.n	8003750 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800371a:	4b29      	ldr	r3, [pc, #164]	; (80037c0 <HAL_DMA_Init+0x168>)
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	f003 031c 	and.w	r3, r3, #28
 8003726:	210f      	movs	r1, #15
 8003728:	fa01 f303 	lsl.w	r3, r1, r3
 800372c:	43db      	mvns	r3, r3
 800372e:	4924      	ldr	r1, [pc, #144]	; (80037c0 <HAL_DMA_Init+0x168>)
 8003730:	4013      	ands	r3, r2
 8003732:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003734:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <HAL_DMA_Init+0x168>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003740:	f003 031c 	and.w	r3, r3, #28
 8003744:	fa01 f303 	lsl.w	r3, r1, r3
 8003748:	491d      	ldr	r1, [pc, #116]	; (80037c0 <HAL_DMA_Init+0x168>)
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]
 800374e:	e019      	b.n	8003784 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003750:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <HAL_DMA_Init+0x16c>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003758:	f003 031c 	and.w	r3, r3, #28
 800375c:	210f      	movs	r1, #15
 800375e:	fa01 f303 	lsl.w	r3, r1, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	4917      	ldr	r1, [pc, #92]	; (80037c4 <HAL_DMA_Init+0x16c>)
 8003766:	4013      	ands	r3, r2
 8003768:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800376a:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <HAL_DMA_Init+0x16c>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6859      	ldr	r1, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	f003 031c 	and.w	r3, r3, #28
 800377a:	fa01 f303 	lsl.w	r3, r1, r3
 800377e:	4911      	ldr	r1, [pc, #68]	; (80037c4 <HAL_DMA_Init+0x16c>)
 8003780:	4313      	orrs	r3, r2
 8003782:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	40020407 	.word	0x40020407
 80037ac:	bffdfff8 	.word	0xbffdfff8
 80037b0:	cccccccd 	.word	0xcccccccd
 80037b4:	40020000 	.word	0x40020000
 80037b8:	bffdfbf8 	.word	0xbffdfbf8
 80037bc:	40020400 	.word	0x40020400
 80037c0:	400200a8 	.word	0x400200a8
 80037c4:	400204a8 	.word	0x400204a8

080037c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_DMA_Start_IT+0x20>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e04b      	b.n	8003880 <HAL_DMA_Start_IT+0xb8>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d13a      	bne.n	8003872 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0201 	bic.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f8e0 	bl	80039e6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	2b00      	cmp	r3, #0
 800382c:	d008      	beq.n	8003840 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 020e 	orr.w	r2, r2, #14
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	e00f      	b.n	8003860 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0204 	bic.w	r2, r2, #4
 800384e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 020a 	orr.w	r2, r2, #10
 800385e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	e005      	b.n	800387e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800387a:	2302      	movs	r3, #2
 800387c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800387e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a4:	f003 031c 	and.w	r3, r3, #28
 80038a8:	2204      	movs	r2, #4
 80038aa:	409a      	lsls	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d026      	beq.n	8003902 <HAL_DMA_IRQHandler+0x7a>
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d021      	beq.n	8003902 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d107      	bne.n	80038dc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0204 	bic.w	r2, r2, #4
 80038da:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e0:	f003 021c 	and.w	r2, r3, #28
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	2104      	movs	r1, #4
 80038ea:	fa01 f202 	lsl.w	r2, r1, r2
 80038ee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d071      	beq.n	80039dc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003900:	e06c      	b.n	80039dc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	f003 031c 	and.w	r3, r3, #28
 800390a:	2202      	movs	r2, #2
 800390c:	409a      	lsls	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4013      	ands	r3, r2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d02e      	beq.n	8003974 <HAL_DMA_IRQHandler+0xec>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d029      	beq.n	8003974 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10b      	bne.n	8003946 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 020a 	bic.w	r2, r2, #10
 800393c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f003 021c 	and.w	r2, r3, #28
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	2102      	movs	r1, #2
 8003954:	fa01 f202 	lsl.w	r2, r1, r2
 8003958:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d038      	beq.n	80039dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003972:	e033      	b.n	80039dc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003978:	f003 031c 	and.w	r3, r3, #28
 800397c:	2208      	movs	r2, #8
 800397e:	409a      	lsls	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4013      	ands	r3, r2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d02a      	beq.n	80039de <HAL_DMA_IRQHandler+0x156>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d025      	beq.n	80039de <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 020e 	bic.w	r2, r2, #14
 80039a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	f003 021c 	and.w	r2, r3, #28
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	2101      	movs	r1, #1
 80039b0:	fa01 f202 	lsl.w	r2, r1, r2
 80039b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d004      	beq.n	80039de <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
}
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b085      	sub	sp, #20
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f8:	f003 021c 	and.w	r2, r3, #28
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	2101      	movs	r1, #1
 8003a02:	fa01 f202 	lsl.w	r2, r1, r2
 8003a06:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b10      	cmp	r3, #16
 8003a16:	d108      	bne.n	8003a2a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a28:	e007      	b.n	8003a3a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	60da      	str	r2, [r3, #12]
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a56:	e148      	b.n	8003cea <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	fa01 f303 	lsl.w	r3, r1, r3
 8003a64:	4013      	ands	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 813a 	beq.w	8003ce4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d00b      	beq.n	8003a90 <HAL_GPIO_Init+0x48>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d007      	beq.n	8003a90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a84:	2b11      	cmp	r3, #17
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b12      	cmp	r3, #18
 8003a8e:	d130      	bne.n	8003af2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	091b      	lsrs	r3, r3, #4
 8003adc:	f003 0201 	and.w	r2, r3, #1
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	2203      	movs	r2, #3
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43db      	mvns	r3, r3
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4013      	ands	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_Init+0xea>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b12      	cmp	r3, #18
 8003b30:	d123      	bne.n	8003b7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	08da      	lsrs	r2, r3, #3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3208      	adds	r2, #8
 8003b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	220f      	movs	r2, #15
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4013      	ands	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	08da      	lsrs	r2, r3, #3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3208      	adds	r2, #8
 8003b74:	6939      	ldr	r1, [r7, #16]
 8003b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	2203      	movs	r2, #3
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0203 	and.w	r2, r3, #3
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8094 	beq.w	8003ce4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bbc:	4b52      	ldr	r3, [pc, #328]	; (8003d08 <HAL_GPIO_Init+0x2c0>)
 8003bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc0:	4a51      	ldr	r2, [pc, #324]	; (8003d08 <HAL_GPIO_Init+0x2c0>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	6613      	str	r3, [r2, #96]	; 0x60
 8003bc8:	4b4f      	ldr	r3, [pc, #316]	; (8003d08 <HAL_GPIO_Init+0x2c0>)
 8003bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bd4:	4a4d      	ldr	r2, [pc, #308]	; (8003d0c <HAL_GPIO_Init+0x2c4>)
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	089b      	lsrs	r3, r3, #2
 8003bda:	3302      	adds	r3, #2
 8003bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	220f      	movs	r2, #15
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bfe:	d00d      	beq.n	8003c1c <HAL_GPIO_Init+0x1d4>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a43      	ldr	r2, [pc, #268]	; (8003d10 <HAL_GPIO_Init+0x2c8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d007      	beq.n	8003c18 <HAL_GPIO_Init+0x1d0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a42      	ldr	r2, [pc, #264]	; (8003d14 <HAL_GPIO_Init+0x2cc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d101      	bne.n	8003c14 <HAL_GPIO_Init+0x1cc>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e004      	b.n	8003c1e <HAL_GPIO_Init+0x1d6>
 8003c14:	2307      	movs	r3, #7
 8003c16:	e002      	b.n	8003c1e <HAL_GPIO_Init+0x1d6>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <HAL_GPIO_Init+0x1d6>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	f002 0203 	and.w	r2, r2, #3
 8003c24:	0092      	lsls	r2, r2, #2
 8003c26:	4093      	lsls	r3, r2
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c2e:	4937      	ldr	r1, [pc, #220]	; (8003d0c <HAL_GPIO_Init+0x2c4>)
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	089b      	lsrs	r3, r3, #2
 8003c34:	3302      	adds	r3, #2
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c3c:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	43db      	mvns	r3, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c60:	4a2d      	ldr	r2, [pc, #180]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003c66:	4b2c      	ldr	r3, [pc, #176]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c8a:	4a23      	ldr	r2, [pc, #140]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c90:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cb4:	4a18      	ldr	r2, [pc, #96]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cba:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cde:	4a0e      	ldr	r2, [pc, #56]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f47f aeaf 	bne.w	8003a58 <HAL_GPIO_Init+0x10>
  }
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	371c      	adds	r7, #28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40010000 	.word	0x40010000
 8003d10:	48000400 	.word	0x48000400
 8003d14:	48000800 	.word	0x48000800
 8003d18:	40010400 	.word	0x40010400

08003d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	807b      	strh	r3, [r7, #2]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d2c:	787b      	ldrb	r3, [r7, #1]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d32:	887a      	ldrh	r2, [r7, #2]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d38:	e002      	b.n	8003d40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d3a:	887a      	ldrh	r2, [r7, #2]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d50:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a04      	ldr	r2, [pc, #16]	; (8003d68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5a:	6013      	str	r3, [r2, #0]
}
 8003d5c:	bf00      	nop
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40007000 	.word	0x40007000

08003d6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d70:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40007000 	.word	0x40007000

08003d88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d96:	d130      	bne.n	8003dfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d98:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da4:	d038      	beq.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dae:	4a1e      	ldr	r2, [pc, #120]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003db0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003db4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003db6:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2232      	movs	r2, #50	; 0x32
 8003dbc:	fb02 f303 	mul.w	r3, r2, r3
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	0c9b      	lsrs	r3, r3, #18
 8003dc8:	3301      	adds	r3, #1
 8003dca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dcc:	e002      	b.n	8003dd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd4:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de0:	d102      	bne.n	8003de8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1f2      	bne.n	8003dce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df4:	d110      	bne.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e00f      	b.n	8003e1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e06:	d007      	beq.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e08:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e10:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	20000010 	.word	0x20000010
 8003e30:	431bde83 	.word	0x431bde83

08003e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d102      	bne.n	8003e48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f000 bc11 	b.w	800466a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e48:	4ba0      	ldr	r3, [pc, #640]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e52:	4b9e      	ldr	r3, [pc, #632]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80e4 	beq.w	8004032 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <HAL_RCC_OscConfig+0x4c>
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b0c      	cmp	r3, #12
 8003e74:	f040 808b 	bne.w	8003f8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	f040 8087 	bne.w	8003f8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e80:	4b92      	ldr	r3, [pc, #584]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_OscConfig+0x64>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e3e8      	b.n	800466a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1a      	ldr	r2, [r3, #32]
 8003e9c:	4b8b      	ldr	r3, [pc, #556]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0308 	and.w	r3, r3, #8
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d004      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x7e>
 8003ea8:	4b88      	ldr	r3, [pc, #544]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb0:	e005      	b.n	8003ebe <HAL_RCC_OscConfig+0x8a>
 8003eb2:	4b86      	ldr	r3, [pc, #536]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d223      	bcs.n	8003f0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fd7a 	bl	80049c0 <RCC_SetFlashLatencyFromMSIRange>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e3c9      	b.n	800466a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed6:	4b7d      	ldr	r3, [pc, #500]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a7c      	ldr	r2, [pc, #496]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003edc:	f043 0308 	orr.w	r3, r3, #8
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	4b7a      	ldr	r3, [pc, #488]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	4977      	ldr	r1, [pc, #476]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ef4:	4b75      	ldr	r3, [pc, #468]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	4972      	ldr	r1, [pc, #456]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]
 8003f08:	e025      	b.n	8003f56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f0a:	4b70      	ldr	r3, [pc, #448]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a6f      	ldr	r2, [pc, #444]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f10:	f043 0308 	orr.w	r3, r3, #8
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	4b6d      	ldr	r3, [pc, #436]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	496a      	ldr	r1, [pc, #424]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f28:	4b68      	ldr	r3, [pc, #416]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	4965      	ldr	r1, [pc, #404]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fd3a 	bl	80049c0 <RCC_SetFlashLatencyFromMSIRange>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e389      	b.n	800466a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f56:	f000 fc6f 	bl	8004838 <HAL_RCC_GetSysClockFreq>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	4b5b      	ldr	r3, [pc, #364]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	091b      	lsrs	r3, r3, #4
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	495a      	ldr	r1, [pc, #360]	; (80040d0 <HAL_RCC_OscConfig+0x29c>)
 8003f68:	5ccb      	ldrb	r3, [r1, r3]
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f72:	4a58      	ldr	r2, [pc, #352]	; (80040d4 <HAL_RCC_OscConfig+0x2a0>)
 8003f74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f76:	4b58      	ldr	r3, [pc, #352]	; (80040d8 <HAL_RCC_OscConfig+0x2a4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe f84a 	bl	8002014 <HAL_InitTick>
 8003f80:	4603      	mov	r3, r0
 8003f82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d052      	beq.n	8004030 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	e36d      	b.n	800466a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d032      	beq.n	8003ffc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f96:	4b4d      	ldr	r3, [pc, #308]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a4c      	ldr	r2, [pc, #304]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fa2:	f7fe f887 	bl	80020b4 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003faa:	f7fe f883 	bl	80020b4 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e356      	b.n	800466a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fbc:	4b43      	ldr	r3, [pc, #268]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fc8:	4b40      	ldr	r3, [pc, #256]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a3f      	ldr	r2, [pc, #252]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003fce:	f043 0308 	orr.w	r3, r3, #8
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b3d      	ldr	r3, [pc, #244]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	493a      	ldr	r1, [pc, #232]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fe6:	4b39      	ldr	r3, [pc, #228]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	4935      	ldr	r1, [pc, #212]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	604b      	str	r3, [r1, #4]
 8003ffa:	e01a      	b.n	8004032 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ffc:	4b33      	ldr	r3, [pc, #204]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a32      	ldr	r2, [pc, #200]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8004002:	f023 0301 	bic.w	r3, r3, #1
 8004006:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004008:	f7fe f854 	bl	80020b4 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004010:	f7fe f850 	bl	80020b4 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e323      	b.n	800466a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004022:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x1dc>
 800402e:	e000      	b.n	8004032 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004030:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d073      	beq.n	8004126 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b08      	cmp	r3, #8
 8004042:	d005      	beq.n	8004050 <HAL_RCC_OscConfig+0x21c>
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b0c      	cmp	r3, #12
 8004048:	d10e      	bne.n	8004068 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b03      	cmp	r3, #3
 800404e:	d10b      	bne.n	8004068 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004050:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d063      	beq.n	8004124 <HAL_RCC_OscConfig+0x2f0>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d15f      	bne.n	8004124 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e300      	b.n	800466a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004070:	d106      	bne.n	8004080 <HAL_RCC_OscConfig+0x24c>
 8004072:	4b16      	ldr	r3, [pc, #88]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a15      	ldr	r2, [pc, #84]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8004078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	e01d      	b.n	80040bc <HAL_RCC_OscConfig+0x288>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004088:	d10c      	bne.n	80040a4 <HAL_RCC_OscConfig+0x270>
 800408a:	4b10      	ldr	r3, [pc, #64]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a0f      	ldr	r2, [pc, #60]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8004090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a0c      	ldr	r2, [pc, #48]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e00b      	b.n	80040bc <HAL_RCC_OscConfig+0x288>
 80040a4:	4b09      	ldr	r3, [pc, #36]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a08      	ldr	r2, [pc, #32]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 80040aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a05      	ldr	r2, [pc, #20]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 80040b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01b      	beq.n	80040fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fd fff6 	bl	80020b4 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ca:	e010      	b.n	80040ee <HAL_RCC_OscConfig+0x2ba>
 80040cc:	40021000 	.word	0x40021000
 80040d0:	0800c9f4 	.word	0x0800c9f4
 80040d4:	20000010 	.word	0x20000010
 80040d8:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040dc:	f7fd ffea 	bl	80020b4 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	; 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e2bd      	b.n	800466a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ee:	4baf      	ldr	r3, [pc, #700]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x2a8>
 80040fa:	e014      	b.n	8004126 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fd ffda 	bl	80020b4 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004104:	f7fd ffd6 	bl	80020b4 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	; 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e2a9      	b.n	800466a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004116:	4ba5      	ldr	r3, [pc, #660]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x2d0>
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d060      	beq.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2b04      	cmp	r3, #4
 8004136:	d005      	beq.n	8004144 <HAL_RCC_OscConfig+0x310>
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2b0c      	cmp	r3, #12
 800413c:	d119      	bne.n	8004172 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d116      	bne.n	8004172 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004144:	4b99      	ldr	r3, [pc, #612]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_OscConfig+0x328>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e286      	b.n	800466a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415c:	4b93      	ldr	r3, [pc, #588]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	4990      	ldr	r1, [pc, #576]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800416c:	4313      	orrs	r3, r2
 800416e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004170:	e040      	b.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d023      	beq.n	80041c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800417a:	4b8c      	ldr	r3, [pc, #560]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a8b      	ldr	r2, [pc, #556]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fd ff95 	bl	80020b4 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800418e:	f7fd ff91 	bl	80020b4 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e264      	b.n	800466a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a0:	4b82      	ldr	r3, [pc, #520]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ac:	4b7f      	ldr	r3, [pc, #508]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	061b      	lsls	r3, r3, #24
 80041ba:	497c      	ldr	r1, [pc, #496]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	604b      	str	r3, [r1, #4]
 80041c0:	e018      	b.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c2:	4b7a      	ldr	r3, [pc, #488]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a79      	ldr	r2, [pc, #484]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 80041c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ce:	f7fd ff71 	bl	80020b4 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d6:	f7fd ff6d 	bl	80020b4 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e240      	b.n	800466a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041e8:	4b70      	ldr	r3, [pc, #448]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f0      	bne.n	80041d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d03c      	beq.n	800427a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01c      	beq.n	8004242 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004208:	4b68      	ldr	r3, [pc, #416]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800420a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800420e:	4a67      	ldr	r2, [pc, #412]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004218:	f7fd ff4c 	bl	80020b4 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004220:	f7fd ff48 	bl	80020b4 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e21b      	b.n	800466a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004232:	4b5e      	ldr	r3, [pc, #376]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0ef      	beq.n	8004220 <HAL_RCC_OscConfig+0x3ec>
 8004240:	e01b      	b.n	800427a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004242:	4b5a      	ldr	r3, [pc, #360]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004248:	4a58      	ldr	r2, [pc, #352]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004252:	f7fd ff2f 	bl	80020b4 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425a:	f7fd ff2b 	bl	80020b4 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e1fe      	b.n	800466a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800426c:	4b4f      	ldr	r3, [pc, #316]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800426e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1ef      	bne.n	800425a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80a6 	beq.w	80043d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004288:	2300      	movs	r3, #0
 800428a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800428c:	4b47      	ldr	r3, [pc, #284]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800428e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10d      	bne.n	80042b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004298:	4b44      	ldr	r3, [pc, #272]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800429a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429c:	4a43      	ldr	r2, [pc, #268]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800429e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a2:	6593      	str	r3, [r2, #88]	; 0x58
 80042a4:	4b41      	ldr	r3, [pc, #260]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 80042a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b0:	2301      	movs	r3, #1
 80042b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b4:	4b3e      	ldr	r3, [pc, #248]	; (80043b0 <HAL_RCC_OscConfig+0x57c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d118      	bne.n	80042f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042c0:	4b3b      	ldr	r3, [pc, #236]	; (80043b0 <HAL_RCC_OscConfig+0x57c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a3a      	ldr	r2, [pc, #232]	; (80043b0 <HAL_RCC_OscConfig+0x57c>)
 80042c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042cc:	f7fd fef2 	bl	80020b4 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d4:	f7fd feee 	bl	80020b4 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e1c1      	b.n	800466a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e6:	4b32      	ldr	r3, [pc, #200]	; (80043b0 <HAL_RCC_OscConfig+0x57c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d108      	bne.n	800430c <HAL_RCC_OscConfig+0x4d8>
 80042fa:	4b2c      	ldr	r3, [pc, #176]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 80042fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004300:	4a2a      	ldr	r2, [pc, #168]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800430a:	e024      	b.n	8004356 <HAL_RCC_OscConfig+0x522>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b05      	cmp	r3, #5
 8004312:	d110      	bne.n	8004336 <HAL_RCC_OscConfig+0x502>
 8004314:	4b25      	ldr	r3, [pc, #148]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	4a24      	ldr	r2, [pc, #144]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800431c:	f043 0304 	orr.w	r3, r3, #4
 8004320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004324:	4b21      	ldr	r3, [pc, #132]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432a:	4a20      	ldr	r2, [pc, #128]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004334:	e00f      	b.n	8004356 <HAL_RCC_OscConfig+0x522>
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433c:	4a1b      	ldr	r2, [pc, #108]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004346:	4b19      	ldr	r3, [pc, #100]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434c:	4a17      	ldr	r2, [pc, #92]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800434e:	f023 0304 	bic.w	r3, r3, #4
 8004352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d016      	beq.n	800438c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435e:	f7fd fea9 	bl	80020b4 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004364:	e00a      	b.n	800437c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004366:	f7fd fea5 	bl	80020b4 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	f241 3288 	movw	r2, #5000	; 0x1388
 8004374:	4293      	cmp	r3, r2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e176      	b.n	800466a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0ed      	beq.n	8004366 <HAL_RCC_OscConfig+0x532>
 800438a:	e01a      	b.n	80043c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438c:	f7fd fe92 	bl	80020b4 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004392:	e00f      	b.n	80043b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004394:	f7fd fe8e 	bl	80020b4 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d906      	bls.n	80043b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e15f      	b.n	800466a <HAL_RCC_OscConfig+0x836>
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043b4:	4baa      	ldr	r3, [pc, #680]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e8      	bne.n	8004394 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043c2:	7ffb      	ldrb	r3, [r7, #31]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d105      	bne.n	80043d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c8:	4ba5      	ldr	r3, [pc, #660]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	4aa4      	ldr	r2, [pc, #656]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80043ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d03c      	beq.n	800445a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01c      	beq.n	8004422 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043e8:	4b9d      	ldr	r3, [pc, #628]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80043ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043ee:	4a9c      	ldr	r2, [pc, #624]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f8:	f7fd fe5c 	bl	80020b4 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004400:	f7fd fe58 	bl	80020b4 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e12b      	b.n	800466a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004412:	4b93      	ldr	r3, [pc, #588]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 8004414:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0ef      	beq.n	8004400 <HAL_RCC_OscConfig+0x5cc>
 8004420:	e01b      	b.n	800445a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004422:	4b8f      	ldr	r3, [pc, #572]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 8004424:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004428:	4a8d      	ldr	r2, [pc, #564]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004432:	f7fd fe3f 	bl	80020b4 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800443a:	f7fd fe3b 	bl	80020b4 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e10e      	b.n	800466a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800444c:	4b84      	ldr	r3, [pc, #528]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 800444e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1ef      	bne.n	800443a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 8102 	beq.w	8004668 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	2b02      	cmp	r3, #2
 800446a:	f040 80c5 	bne.w	80045f8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800446e:	4b7c      	ldr	r3, [pc, #496]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f003 0203 	and.w	r2, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	429a      	cmp	r2, r3
 8004480:	d12c      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	3b01      	subs	r3, #1
 800448e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d123      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d11b      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d113      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	085b      	lsrs	r3, r3, #1
 80044c0:	3b01      	subs	r3, #1
 80044c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d109      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	3b01      	subs	r3, #1
 80044d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d067      	beq.n	80045ac <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b0c      	cmp	r3, #12
 80044e0:	d062      	beq.n	80045a8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044e2:	4b5f      	ldr	r3, [pc, #380]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e0bb      	b.n	800466a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044f2:	4b5b      	ldr	r3, [pc, #364]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a5a      	ldr	r2, [pc, #360]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80044f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044fe:	f7fd fdd9 	bl	80020b4 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004506:	f7fd fdd5 	bl	80020b4 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e0a8      	b.n	800466a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004518:	4b51      	ldr	r3, [pc, #324]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004524:	4b4e      	ldr	r3, [pc, #312]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	4b4e      	ldr	r3, [pc, #312]	; (8004664 <HAL_RCC_OscConfig+0x830>)
 800452a:	4013      	ands	r3, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004534:	3a01      	subs	r2, #1
 8004536:	0112      	lsls	r2, r2, #4
 8004538:	4311      	orrs	r1, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800453e:	0212      	lsls	r2, r2, #8
 8004540:	4311      	orrs	r1, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004546:	0852      	lsrs	r2, r2, #1
 8004548:	3a01      	subs	r2, #1
 800454a:	0552      	lsls	r2, r2, #21
 800454c:	4311      	orrs	r1, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004552:	0852      	lsrs	r2, r2, #1
 8004554:	3a01      	subs	r2, #1
 8004556:	0652      	lsls	r2, r2, #25
 8004558:	4311      	orrs	r1, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800455e:	06d2      	lsls	r2, r2, #27
 8004560:	430a      	orrs	r2, r1
 8004562:	493f      	ldr	r1, [pc, #252]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 8004564:	4313      	orrs	r3, r2
 8004566:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004568:	4b3d      	ldr	r3, [pc, #244]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a3c      	ldr	r2, [pc, #240]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 800456e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004572:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004574:	4b3a      	ldr	r3, [pc, #232]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4a39      	ldr	r2, [pc, #228]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 800457a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800457e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004580:	f7fd fd98 	bl	80020b4 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004588:	f7fd fd94 	bl	80020b4 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e067      	b.n	800466a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800459a:	4b31      	ldr	r3, [pc, #196]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045a6:	e05f      	b.n	8004668 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e05e      	b.n	800466a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ac:	4b2c      	ldr	r3, [pc, #176]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d157      	bne.n	8004668 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045b8:	4b29      	ldr	r3, [pc, #164]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a28      	ldr	r2, [pc, #160]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80045be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045c4:	4b26      	ldr	r3, [pc, #152]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	4a25      	ldr	r2, [pc, #148]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80045ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045d0:	f7fd fd70 	bl	80020b4 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d8:	f7fd fd6c 	bl	80020b4 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e03f      	b.n	800466a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ea:	4b1d      	ldr	r3, [pc, #116]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCC_OscConfig+0x7a4>
 80045f6:	e037      	b.n	8004668 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	2b0c      	cmp	r3, #12
 80045fc:	d02d      	beq.n	800465a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fe:	4b18      	ldr	r3, [pc, #96]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a17      	ldr	r2, [pc, #92]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 8004604:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004608:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800460a:	4b15      	ldr	r3, [pc, #84]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d105      	bne.n	8004622 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004616:	4b12      	ldr	r3, [pc, #72]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	4a11      	ldr	r2, [pc, #68]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 800461c:	f023 0303 	bic.w	r3, r3, #3
 8004620:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004622:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	4a0e      	ldr	r2, [pc, #56]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 8004628:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800462c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004630:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004632:	f7fd fd3f 	bl	80020b4 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800463a:	f7fd fd3b 	bl	80020b4 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e00e      	b.n	800466a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800464c:	4b04      	ldr	r3, [pc, #16]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1f0      	bne.n	800463a <HAL_RCC_OscConfig+0x806>
 8004658:	e006      	b.n	8004668 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e005      	b.n	800466a <HAL_RCC_OscConfig+0x836>
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000
 8004664:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3720      	adds	r7, #32
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop

08004674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0c8      	b.n	800481a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004688:	4b66      	ldr	r3, [pc, #408]	; (8004824 <HAL_RCC_ClockConfig+0x1b0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d910      	bls.n	80046b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b63      	ldr	r3, [pc, #396]	; (8004824 <HAL_RCC_ClockConfig+0x1b0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 0207 	bic.w	r2, r3, #7
 800469e:	4961      	ldr	r1, [pc, #388]	; (8004824 <HAL_RCC_ClockConfig+0x1b0>)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a6:	4b5f      	ldr	r3, [pc, #380]	; (8004824 <HAL_RCC_ClockConfig+0x1b0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0b0      	b.n	800481a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d04c      	beq.n	800475e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d107      	bne.n	80046dc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046cc:	4b56      	ldr	r3, [pc, #344]	; (8004828 <HAL_RCC_ClockConfig+0x1b4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d121      	bne.n	800471c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e09e      	b.n	800481a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d107      	bne.n	80046f4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046e4:	4b50      	ldr	r3, [pc, #320]	; (8004828 <HAL_RCC_ClockConfig+0x1b4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d115      	bne.n	800471c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e092      	b.n	800481a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d107      	bne.n	800470c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046fc:	4b4a      	ldr	r3, [pc, #296]	; (8004828 <HAL_RCC_ClockConfig+0x1b4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d109      	bne.n	800471c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e086      	b.n	800481a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800470c:	4b46      	ldr	r3, [pc, #280]	; (8004828 <HAL_RCC_ClockConfig+0x1b4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e07e      	b.n	800481a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800471c:	4b42      	ldr	r3, [pc, #264]	; (8004828 <HAL_RCC_ClockConfig+0x1b4>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f023 0203 	bic.w	r2, r3, #3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	493f      	ldr	r1, [pc, #252]	; (8004828 <HAL_RCC_ClockConfig+0x1b4>)
 800472a:	4313      	orrs	r3, r2
 800472c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472e:	f7fd fcc1 	bl	80020b4 <HAL_GetTick>
 8004732:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004734:	e00a      	b.n	800474c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004736:	f7fd fcbd 	bl	80020b4 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f241 3288 	movw	r2, #5000	; 0x1388
 8004744:	4293      	cmp	r3, r2
 8004746:	d901      	bls.n	800474c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e066      	b.n	800481a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474c:	4b36      	ldr	r3, [pc, #216]	; (8004828 <HAL_RCC_ClockConfig+0x1b4>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 020c 	and.w	r2, r3, #12
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	429a      	cmp	r2, r3
 800475c:	d1eb      	bne.n	8004736 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800476a:	4b2f      	ldr	r3, [pc, #188]	; (8004828 <HAL_RCC_ClockConfig+0x1b4>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	492c      	ldr	r1, [pc, #176]	; (8004828 <HAL_RCC_ClockConfig+0x1b4>)
 8004778:	4313      	orrs	r3, r2
 800477a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800477c:	4b29      	ldr	r3, [pc, #164]	; (8004824 <HAL_RCC_ClockConfig+0x1b0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d210      	bcs.n	80047ac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478a:	4b26      	ldr	r3, [pc, #152]	; (8004824 <HAL_RCC_ClockConfig+0x1b0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 0207 	bic.w	r2, r3, #7
 8004792:	4924      	ldr	r1, [pc, #144]	; (8004824 <HAL_RCC_ClockConfig+0x1b0>)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b22      	ldr	r3, [pc, #136]	; (8004824 <HAL_RCC_ClockConfig+0x1b0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e036      	b.n	800481a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b8:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <HAL_RCC_ClockConfig+0x1b4>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4918      	ldr	r1, [pc, #96]	; (8004828 <HAL_RCC_ClockConfig+0x1b4>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047d6:	4b14      	ldr	r3, [pc, #80]	; (8004828 <HAL_RCC_ClockConfig+0x1b4>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	4910      	ldr	r1, [pc, #64]	; (8004828 <HAL_RCC_ClockConfig+0x1b4>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047ea:	f000 f825 	bl	8004838 <HAL_RCC_GetSysClockFreq>
 80047ee:	4602      	mov	r2, r0
 80047f0:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <HAL_RCC_ClockConfig+0x1b4>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	091b      	lsrs	r3, r3, #4
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	490c      	ldr	r1, [pc, #48]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80047fc:	5ccb      	ldrb	r3, [r1, r3]
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	fa22 f303 	lsr.w	r3, r2, r3
 8004806:	4a0a      	ldr	r2, [pc, #40]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800480a:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <HAL_RCC_ClockConfig+0x1c0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f7fd fc00 	bl	8002014 <HAL_InitTick>
 8004814:	4603      	mov	r3, r0
 8004816:	72fb      	strb	r3, [r7, #11]

  return status;
 8004818:	7afb      	ldrb	r3, [r7, #11]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40022000 	.word	0x40022000
 8004828:	40021000 	.word	0x40021000
 800482c:	0800c9f4 	.word	0x0800c9f4
 8004830:	20000010 	.word	0x20000010
 8004834:	20000014 	.word	0x20000014

08004838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004838:	b480      	push	{r7}
 800483a:	b089      	sub	sp, #36	; 0x24
 800483c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	2300      	movs	r3, #0
 8004844:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004846:	4b3e      	ldr	r3, [pc, #248]	; (8004940 <HAL_RCC_GetSysClockFreq+0x108>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 030c 	and.w	r3, r3, #12
 800484e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004850:	4b3b      	ldr	r3, [pc, #236]	; (8004940 <HAL_RCC_GetSysClockFreq+0x108>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_RCC_GetSysClockFreq+0x34>
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2b0c      	cmp	r3, #12
 8004864:	d121      	bne.n	80048aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d11e      	bne.n	80048aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800486c:	4b34      	ldr	r3, [pc, #208]	; (8004940 <HAL_RCC_GetSysClockFreq+0x108>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d107      	bne.n	8004888 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004878:	4b31      	ldr	r3, [pc, #196]	; (8004940 <HAL_RCC_GetSysClockFreq+0x108>)
 800487a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800487e:	0a1b      	lsrs	r3, r3, #8
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	61fb      	str	r3, [r7, #28]
 8004886:	e005      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004888:	4b2d      	ldr	r3, [pc, #180]	; (8004940 <HAL_RCC_GetSysClockFreq+0x108>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	091b      	lsrs	r3, r3, #4
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004894:	4a2b      	ldr	r2, [pc, #172]	; (8004944 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800489c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10d      	bne.n	80048c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048a8:	e00a      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d102      	bne.n	80048b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048b0:	4b25      	ldr	r3, [pc, #148]	; (8004948 <HAL_RCC_GetSysClockFreq+0x110>)
 80048b2:	61bb      	str	r3, [r7, #24]
 80048b4:	e004      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d101      	bne.n	80048c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048bc:	4b23      	ldr	r3, [pc, #140]	; (800494c <HAL_RCC_GetSysClockFreq+0x114>)
 80048be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	2b0c      	cmp	r3, #12
 80048c4:	d134      	bne.n	8004930 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048c6:	4b1e      	ldr	r3, [pc, #120]	; (8004940 <HAL_RCC_GetSysClockFreq+0x108>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d003      	beq.n	80048de <HAL_RCC_GetSysClockFreq+0xa6>
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d003      	beq.n	80048e4 <HAL_RCC_GetSysClockFreq+0xac>
 80048dc:	e005      	b.n	80048ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80048de:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <HAL_RCC_GetSysClockFreq+0x110>)
 80048e0:	617b      	str	r3, [r7, #20]
      break;
 80048e2:	e005      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80048e4:	4b19      	ldr	r3, [pc, #100]	; (800494c <HAL_RCC_GetSysClockFreq+0x114>)
 80048e6:	617b      	str	r3, [r7, #20]
      break;
 80048e8:	e002      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	617b      	str	r3, [r7, #20]
      break;
 80048ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048f0:	4b13      	ldr	r3, [pc, #76]	; (8004940 <HAL_RCC_GetSysClockFreq+0x108>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	091b      	lsrs	r3, r3, #4
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	3301      	adds	r3, #1
 80048fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048fe:	4b10      	ldr	r3, [pc, #64]	; (8004940 <HAL_RCC_GetSysClockFreq+0x108>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	0a1b      	lsrs	r3, r3, #8
 8004904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	fb02 f203 	mul.w	r2, r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	fbb2 f3f3 	udiv	r3, r2, r3
 8004914:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004916:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <HAL_RCC_GetSysClockFreq+0x108>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	0e5b      	lsrs	r3, r3, #25
 800491c:	f003 0303 	and.w	r3, r3, #3
 8004920:	3301      	adds	r3, #1
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	fbb2 f3f3 	udiv	r3, r2, r3
 800492e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004930:	69bb      	ldr	r3, [r7, #24]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3724      	adds	r7, #36	; 0x24
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	40021000 	.word	0x40021000
 8004944:	0800ca0c 	.word	0x0800ca0c
 8004948:	00f42400 	.word	0x00f42400
 800494c:	007a1200 	.word	0x007a1200

08004950 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <HAL_RCC_GetHCLKFreq+0x14>)
 8004956:	681b      	ldr	r3, [r3, #0]
}
 8004958:	4618      	mov	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20000010 	.word	0x20000010

08004968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800496c:	f7ff fff0 	bl	8004950 <HAL_RCC_GetHCLKFreq>
 8004970:	4602      	mov	r2, r0
 8004972:	4b06      	ldr	r3, [pc, #24]	; (800498c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	0a1b      	lsrs	r3, r3, #8
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	4904      	ldr	r1, [pc, #16]	; (8004990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800497e:	5ccb      	ldrb	r3, [r1, r3]
 8004980:	f003 031f 	and.w	r3, r3, #31
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004988:	4618      	mov	r0, r3
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40021000 	.word	0x40021000
 8004990:	0800ca04 	.word	0x0800ca04

08004994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004998:	f7ff ffda 	bl	8004950 <HAL_RCC_GetHCLKFreq>
 800499c:	4602      	mov	r2, r0
 800499e:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	0adb      	lsrs	r3, r3, #11
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	4904      	ldr	r1, [pc, #16]	; (80049bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80049aa:	5ccb      	ldrb	r3, [r1, r3]
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40021000 	.word	0x40021000
 80049bc:	0800ca04 	.word	0x0800ca04

080049c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049c8:	2300      	movs	r3, #0
 80049ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049cc:	4b2a      	ldr	r3, [pc, #168]	; (8004a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80049d8:	f7ff f9c8 	bl	8003d6c <HAL_PWREx_GetVoltageRange>
 80049dc:	6178      	str	r0, [r7, #20]
 80049de:	e014      	b.n	8004a0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80049e0:	4b25      	ldr	r3, [pc, #148]	; (8004a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e4:	4a24      	ldr	r2, [pc, #144]	; (8004a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ea:	6593      	str	r3, [r2, #88]	; 0x58
 80049ec:	4b22      	ldr	r3, [pc, #136]	; (8004a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049f8:	f7ff f9b8 	bl	8003d6c <HAL_PWREx_GetVoltageRange>
 80049fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049fe:	4b1e      	ldr	r3, [pc, #120]	; (8004a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a02:	4a1d      	ldr	r2, [pc, #116]	; (8004a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a10:	d10b      	bne.n	8004a2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b80      	cmp	r3, #128	; 0x80
 8004a16:	d919      	bls.n	8004a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2ba0      	cmp	r3, #160	; 0xa0
 8004a1c:	d902      	bls.n	8004a24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a1e:	2302      	movs	r3, #2
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	e013      	b.n	8004a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a24:	2301      	movs	r3, #1
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	e010      	b.n	8004a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b80      	cmp	r3, #128	; 0x80
 8004a2e:	d902      	bls.n	8004a36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a30:	2303      	movs	r3, #3
 8004a32:	613b      	str	r3, [r7, #16]
 8004a34:	e00a      	b.n	8004a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b80      	cmp	r3, #128	; 0x80
 8004a3a:	d102      	bne.n	8004a42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	e004      	b.n	8004a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b70      	cmp	r3, #112	; 0x70
 8004a46:	d101      	bne.n	8004a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a48:	2301      	movs	r3, #1
 8004a4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f023 0207 	bic.w	r2, r3, #7
 8004a54:	4909      	ldr	r1, [pc, #36]	; (8004a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a5c:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d001      	beq.n	8004a6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	40022000 	.word	0x40022000

08004a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a88:	2300      	movs	r3, #0
 8004a8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d031      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004aa4:	d01a      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004aa6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004aaa:	d814      	bhi.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d009      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ab0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ab4:	d10f      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004ab6:	4bac      	ldr	r3, [pc, #688]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	4aab      	ldr	r2, [pc, #684]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ac2:	e00c      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	2100      	movs	r1, #0
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f9dc 	bl	8004e88 <RCCEx_PLLSAI1_Config>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ad4:	e003      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	74fb      	strb	r3, [r7, #19]
      break;
 8004ada:	e000      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ade:	7cfb      	ldrb	r3, [r7, #19]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10b      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ae4:	4ba0      	ldr	r3, [pc, #640]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af2:	499d      	ldr	r1, [pc, #628]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004afa:	e001      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afc:	7cfb      	ldrb	r3, [r7, #19]
 8004afe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8099 	beq.w	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b12:	4b95      	ldr	r3, [pc, #596]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004b22:	2300      	movs	r3, #0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00d      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b28:	4b8f      	ldr	r3, [pc, #572]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2c:	4a8e      	ldr	r2, [pc, #568]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b32:	6593      	str	r3, [r2, #88]	; 0x58
 8004b34:	4b8c      	ldr	r3, [pc, #560]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b40:	2301      	movs	r3, #1
 8004b42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b44:	4b89      	ldr	r3, [pc, #548]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a88      	ldr	r2, [pc, #544]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b50:	f7fd fab0 	bl	80020b4 <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b56:	e009      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b58:	f7fd faac 	bl	80020b4 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d902      	bls.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	74fb      	strb	r3, [r7, #19]
        break;
 8004b6a:	e005      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b6c:	4b7f      	ldr	r3, [pc, #508]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0ef      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004b78:	7cfb      	ldrb	r3, [r7, #19]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d155      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b7e:	4b7a      	ldr	r3, [pc, #488]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01e      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d019      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b9a:	4b73      	ldr	r3, [pc, #460]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ba6:	4b70      	ldr	r3, [pc, #448]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bac:	4a6e      	ldr	r2, [pc, #440]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bb6:	4b6c      	ldr	r3, [pc, #432]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbc:	4a6a      	ldr	r2, [pc, #424]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bc6:	4a68      	ldr	r2, [pc, #416]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d016      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd8:	f7fd fa6c 	bl	80020b4 <HAL_GetTick>
 8004bdc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bde:	e00b      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be0:	f7fd fa68 	bl	80020b4 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d902      	bls.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	74fb      	strb	r3, [r7, #19]
            break;
 8004bf6:	e006      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf8:	4b5b      	ldr	r3, [pc, #364]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0ec      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004c06:	7cfb      	ldrb	r3, [r7, #19]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10b      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c0c:	4b56      	ldr	r3, [pc, #344]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1a:	4953      	ldr	r1, [pc, #332]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c22:	e004      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c24:	7cfb      	ldrb	r3, [r7, #19]
 8004c26:	74bb      	strb	r3, [r7, #18]
 8004c28:	e001      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2a:	7cfb      	ldrb	r3, [r7, #19]
 8004c2c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c2e:	7c7b      	ldrb	r3, [r7, #17]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d105      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c34:	4b4c      	ldr	r3, [pc, #304]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c38:	4a4b      	ldr	r2, [pc, #300]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00a      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c4c:	4b46      	ldr	r3, [pc, #280]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c52:	f023 0203 	bic.w	r2, r3, #3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	4943      	ldr	r1, [pc, #268]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c6e:	4b3e      	ldr	r3, [pc, #248]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c74:	f023 020c 	bic.w	r2, r3, #12
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	493a      	ldr	r1, [pc, #232]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c90:	4b35      	ldr	r3, [pc, #212]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9e:	4932      	ldr	r1, [pc, #200]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cb2:	4b2d      	ldr	r3, [pc, #180]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc0:	4929      	ldr	r1, [pc, #164]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cd4:	4b24      	ldr	r3, [pc, #144]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	4921      	ldr	r1, [pc, #132]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cf6:	4b1c      	ldr	r3, [pc, #112]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	4918      	ldr	r1, [pc, #96]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d18:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	4910      	ldr	r1, [pc, #64]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d02c      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	4907      	ldr	r1, [pc, #28]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d58:	d10a      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d5a:	4b03      	ldr	r3, [pc, #12]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	4a02      	ldr	r2, [pc, #8]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d64:	60d3      	str	r3, [r2, #12]
 8004d66:	e015      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d78:	d10c      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	2101      	movs	r1, #1
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 f881 	bl	8004e88 <RCCEx_PLLSAI1_Config>
 8004d86:	4603      	mov	r3, r0
 8004d88:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d8a:	7cfb      	ldrb	r3, [r7, #19]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8004d90:	7cfb      	ldrb	r3, [r7, #19]
 8004d92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d028      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004da0:	4b30      	ldr	r3, [pc, #192]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	492d      	ldr	r1, [pc, #180]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dbe:	d106      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dc0:	4b28      	ldr	r3, [pc, #160]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	4a27      	ldr	r2, [pc, #156]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dca:	60d3      	str	r3, [r2, #12]
 8004dcc:	e011      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dd6:	d10c      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	2101      	movs	r1, #1
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 f852 	bl	8004e88 <RCCEx_PLLSAI1_Config>
 8004de4:	4603      	mov	r3, r0
 8004de6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004de8:	7cfb      	ldrb	r3, [r7, #19]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8004dee:	7cfb      	ldrb	r3, [r7, #19]
 8004df0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01c      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dfe:	4b19      	ldr	r3, [pc, #100]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e0c:	4915      	ldr	r1, [pc, #84]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e1c:	d10c      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3304      	adds	r3, #4
 8004e22:	2102      	movs	r1, #2
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 f82f 	bl	8004e88 <RCCEx_PLLSAI1_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e2e:	7cfb      	ldrb	r3, [r7, #19]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004e34:	7cfb      	ldrb	r3, [r7, #19]
 8004e36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00a      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e44:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e52:	4904      	ldr	r1, [pc, #16]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40021000 	.word	0x40021000

08004e68 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004e6c:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a04      	ldr	r2, [pc, #16]	; (8004e84 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e72:	f043 0304 	orr.w	r3, r3, #4
 8004e76:	6013      	str	r3, [r2, #0]
}
 8004e78:	bf00      	nop
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40021000 	.word	0x40021000

08004e88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e96:	4b74      	ldr	r3, [pc, #464]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d018      	beq.n	8004ed4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ea2:	4b71      	ldr	r3, [pc, #452]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f003 0203 	and.w	r2, r3, #3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d10d      	bne.n	8004ece <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
       ||
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d009      	beq.n	8004ece <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004eba:	4b6b      	ldr	r3, [pc, #428]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	091b      	lsrs	r3, r3, #4
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
       ||
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d047      	beq.n	8004f5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	73fb      	strb	r3, [r7, #15]
 8004ed2:	e044      	b.n	8004f5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d018      	beq.n	8004f0e <RCCEx_PLLSAI1_Config+0x86>
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d825      	bhi.n	8004f2c <RCCEx_PLLSAI1_Config+0xa4>
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d002      	beq.n	8004eea <RCCEx_PLLSAI1_Config+0x62>
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d009      	beq.n	8004efc <RCCEx_PLLSAI1_Config+0x74>
 8004ee8:	e020      	b.n	8004f2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004eea:	4b5f      	ldr	r3, [pc, #380]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d11d      	bne.n	8004f32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004efa:	e01a      	b.n	8004f32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004efc:	4b5a      	ldr	r3, [pc, #360]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d116      	bne.n	8004f36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f0c:	e013      	b.n	8004f36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f0e:	4b56      	ldr	r3, [pc, #344]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10f      	bne.n	8004f3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f1a:	4b53      	ldr	r3, [pc, #332]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d109      	bne.n	8004f3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f2a:	e006      	b.n	8004f3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f30:	e004      	b.n	8004f3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f32:	bf00      	nop
 8004f34:	e002      	b.n	8004f3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f36:	bf00      	nop
 8004f38:	e000      	b.n	8004f3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10d      	bne.n	8004f5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f42:	4b49      	ldr	r3, [pc, #292]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6819      	ldr	r1, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	430b      	orrs	r3, r1
 8004f58:	4943      	ldr	r1, [pc, #268]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d17c      	bne.n	800505e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f64:	4b40      	ldr	r3, [pc, #256]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a3f      	ldr	r2, [pc, #252]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f70:	f7fd f8a0 	bl	80020b4 <HAL_GetTick>
 8004f74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f76:	e009      	b.n	8004f8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f78:	f7fd f89c 	bl	80020b4 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d902      	bls.n	8004f8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	73fb      	strb	r3, [r7, #15]
        break;
 8004f8a:	e005      	b.n	8004f98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f8c:	4b36      	ldr	r3, [pc, #216]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1ef      	bne.n	8004f78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d15f      	bne.n	800505e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d110      	bne.n	8004fc6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fa4:	4b30      	ldr	r3, [pc, #192]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004fac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6892      	ldr	r2, [r2, #8]
 8004fb4:	0211      	lsls	r1, r2, #8
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	68d2      	ldr	r2, [r2, #12]
 8004fba:	06d2      	lsls	r2, r2, #27
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	492a      	ldr	r1, [pc, #168]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	610b      	str	r3, [r1, #16]
 8004fc4:	e027      	b.n	8005016 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d112      	bne.n	8004ff2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fcc:	4b26      	ldr	r3, [pc, #152]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004fd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6892      	ldr	r2, [r2, #8]
 8004fdc:	0211      	lsls	r1, r2, #8
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6912      	ldr	r2, [r2, #16]
 8004fe2:	0852      	lsrs	r2, r2, #1
 8004fe4:	3a01      	subs	r2, #1
 8004fe6:	0552      	lsls	r2, r2, #21
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	491f      	ldr	r1, [pc, #124]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	610b      	str	r3, [r1, #16]
 8004ff0:	e011      	b.n	8005016 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ff2:	4b1d      	ldr	r3, [pc, #116]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ffa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6892      	ldr	r2, [r2, #8]
 8005002:	0211      	lsls	r1, r2, #8
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6952      	ldr	r2, [r2, #20]
 8005008:	0852      	lsrs	r2, r2, #1
 800500a:	3a01      	subs	r2, #1
 800500c:	0652      	lsls	r2, r2, #25
 800500e:	430a      	orrs	r2, r1
 8005010:	4915      	ldr	r1, [pc, #84]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005012:	4313      	orrs	r3, r2
 8005014:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005016:	4b14      	ldr	r3, [pc, #80]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a13      	ldr	r2, [pc, #76]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 800501c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005020:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005022:	f7fd f847 	bl	80020b4 <HAL_GetTick>
 8005026:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005028:	e009      	b.n	800503e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800502a:	f7fd f843 	bl	80020b4 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d902      	bls.n	800503e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	73fb      	strb	r3, [r7, #15]
          break;
 800503c:	e005      	b.n	800504a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800503e:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0ef      	beq.n	800502a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d106      	bne.n	800505e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005050:	4b05      	ldr	r3, [pc, #20]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	4903      	ldr	r1, [pc, #12]	; (8005068 <RCCEx_PLLSAI1_Config+0x1e0>)
 800505a:	4313      	orrs	r3, r2
 800505c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800505e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	40021000 	.word	0x40021000

0800506c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e049      	b.n	8005112 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fc fdb4 	bl	8001c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3304      	adds	r3, #4
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f000 fb70 	bl	8005790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	d001      	beq.n	8005134 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e033      	b.n	800519c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a19      	ldr	r2, [pc, #100]	; (80051a8 <HAL_TIM_Base_Start+0x8c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d009      	beq.n	800515a <HAL_TIM_Base_Start+0x3e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514e:	d004      	beq.n	800515a <HAL_TIM_Base_Start+0x3e>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a15      	ldr	r2, [pc, #84]	; (80051ac <HAL_TIM_Base_Start+0x90>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d115      	bne.n	8005186 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <HAL_TIM_Base_Start+0x94>)
 8005162:	4013      	ands	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b06      	cmp	r3, #6
 800516a:	d015      	beq.n	8005198 <HAL_TIM_Base_Start+0x7c>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005172:	d011      	beq.n	8005198 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005184:	e008      	b.n	8005198 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0201 	orr.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e000      	b.n	800519a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	40012c00 	.word	0x40012c00
 80051ac:	40014000 	.word	0x40014000
 80051b0:	00010007 	.word	0x00010007

080051b4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e049      	b.n	800525a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f841 	bl	8005262 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3304      	adds	r3, #4
 80051f0:	4619      	mov	r1, r3
 80051f2:	4610      	mov	r0, r2
 80051f4:	f000 facc 	bl	8005790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005262:	b480      	push	{r7}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b02      	cmp	r3, #2
 800528a:	d122      	bne.n	80052d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b02      	cmp	r3, #2
 8005298:	d11b      	bne.n	80052d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f06f 0202 	mvn.w	r2, #2
 80052a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	f003 0303 	and.w	r3, r3, #3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fa4b 	bl	8005754 <HAL_TIM_IC_CaptureCallback>
 80052be:	e005      	b.n	80052cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fa3d 	bl	8005740 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fa4e 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d122      	bne.n	8005326 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d11b      	bne.n	8005326 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f06f 0204 	mvn.w	r2, #4
 80052f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fa21 	bl	8005754 <HAL_TIM_IC_CaptureCallback>
 8005312:	e005      	b.n	8005320 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 fa13 	bl	8005740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fa24 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b08      	cmp	r3, #8
 8005332:	d122      	bne.n	800537a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b08      	cmp	r3, #8
 8005340:	d11b      	bne.n	800537a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f06f 0208 	mvn.w	r2, #8
 800534a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2204      	movs	r2, #4
 8005350:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	f003 0303 	and.w	r3, r3, #3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f9f7 	bl	8005754 <HAL_TIM_IC_CaptureCallback>
 8005366:	e005      	b.n	8005374 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f9e9 	bl	8005740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f9fa 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b10      	cmp	r3, #16
 8005386:	d122      	bne.n	80053ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f003 0310 	and.w	r3, r3, #16
 8005392:	2b10      	cmp	r3, #16
 8005394:	d11b      	bne.n	80053ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f06f 0210 	mvn.w	r2, #16
 800539e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2208      	movs	r2, #8
 80053a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f9cd 	bl	8005754 <HAL_TIM_IC_CaptureCallback>
 80053ba:	e005      	b.n	80053c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f9bf 	bl	8005740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f9d0 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d10e      	bne.n	80053fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d107      	bne.n	80053fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f06f 0201 	mvn.w	r2, #1
 80053f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f999 	bl	800572c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005404:	2b80      	cmp	r3, #128	; 0x80
 8005406:	d10e      	bne.n	8005426 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005412:	2b80      	cmp	r3, #128	; 0x80
 8005414:	d107      	bne.n	8005426 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800541e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fda1 	bl	8005f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005434:	d10e      	bne.n	8005454 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005440:	2b80      	cmp	r3, #128	; 0x80
 8005442:	d107      	bne.n	8005454 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800544c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fd94 	bl	8005f7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545e:	2b40      	cmp	r3, #64	; 0x40
 8005460:	d10e      	bne.n	8005480 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546c:	2b40      	cmp	r3, #64	; 0x40
 800546e:	d107      	bne.n	8005480 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f97e 	bl	800577c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b20      	cmp	r3, #32
 800548c:	d10e      	bne.n	80054ac <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b20      	cmp	r3, #32
 800549a:	d107      	bne.n	80054ac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0220 	mvn.w	r2, #32
 80054a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fd54 	bl	8005f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ac:	bf00      	nop
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d101      	bne.n	80054ce <HAL_TIM_OC_ConfigChannel+0x1a>
 80054ca:	2302      	movs	r3, #2
 80054cc:	e064      	b.n	8005598 <HAL_TIM_OC_ConfigChannel+0xe4>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b14      	cmp	r3, #20
 80054da:	d857      	bhi.n	800558c <HAL_TIM_OC_ConfigChannel+0xd8>
 80054dc:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <HAL_TIM_OC_ConfigChannel+0x30>)
 80054de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e2:	bf00      	nop
 80054e4:	08005539 	.word	0x08005539
 80054e8:	0800558d 	.word	0x0800558d
 80054ec:	0800558d 	.word	0x0800558d
 80054f0:	0800558d 	.word	0x0800558d
 80054f4:	08005547 	.word	0x08005547
 80054f8:	0800558d 	.word	0x0800558d
 80054fc:	0800558d 	.word	0x0800558d
 8005500:	0800558d 	.word	0x0800558d
 8005504:	08005555 	.word	0x08005555
 8005508:	0800558d 	.word	0x0800558d
 800550c:	0800558d 	.word	0x0800558d
 8005510:	0800558d 	.word	0x0800558d
 8005514:	08005563 	.word	0x08005563
 8005518:	0800558d 	.word	0x0800558d
 800551c:	0800558d 	.word	0x0800558d
 8005520:	0800558d 	.word	0x0800558d
 8005524:	08005571 	.word	0x08005571
 8005528:	0800558d 	.word	0x0800558d
 800552c:	0800558d 	.word	0x0800558d
 8005530:	0800558d 	.word	0x0800558d
 8005534:	0800557f 	.word	0x0800557f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	4618      	mov	r0, r3
 8005540:	f000 f98a 	bl	8005858 <TIM_OC1_SetConfig>
      break;
 8005544:	e023      	b.n	800558e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68b9      	ldr	r1, [r7, #8]
 800554c:	4618      	mov	r0, r3
 800554e:	f000 f9ff 	bl	8005950 <TIM_OC2_SetConfig>
      break;
 8005552:	e01c      	b.n	800558e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fa72 	bl	8005a44 <TIM_OC3_SetConfig>
      break;
 8005560:	e015      	b.n	800558e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	4618      	mov	r0, r3
 800556a:	f000 fae3 	bl	8005b34 <TIM_OC4_SetConfig>
      break;
 800556e:	e00e      	b.n	800558e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68b9      	ldr	r1, [r7, #8]
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fb3a 	bl	8005bf0 <TIM_OC5_SetConfig>
      break;
 800557c:	e007      	b.n	800558e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68b9      	ldr	r1, [r7, #8]
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fb8b 	bl	8005ca0 <TIM_OC6_SetConfig>
      break;
 800558a:	e000      	b.n	800558e <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800558c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_TIM_ConfigClockSource+0x18>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e0b5      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x184>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f4:	d03e      	beq.n	8005674 <HAL_TIM_ConfigClockSource+0xd4>
 80055f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055fa:	f200 8087 	bhi.w	800570c <HAL_TIM_ConfigClockSource+0x16c>
 80055fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005602:	f000 8085 	beq.w	8005710 <HAL_TIM_ConfigClockSource+0x170>
 8005606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560a:	d87f      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x16c>
 800560c:	2b70      	cmp	r3, #112	; 0x70
 800560e:	d01a      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0xa6>
 8005610:	2b70      	cmp	r3, #112	; 0x70
 8005612:	d87b      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x16c>
 8005614:	2b60      	cmp	r3, #96	; 0x60
 8005616:	d050      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x11a>
 8005618:	2b60      	cmp	r3, #96	; 0x60
 800561a:	d877      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x16c>
 800561c:	2b50      	cmp	r3, #80	; 0x50
 800561e:	d03c      	beq.n	800569a <HAL_TIM_ConfigClockSource+0xfa>
 8005620:	2b50      	cmp	r3, #80	; 0x50
 8005622:	d873      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x16c>
 8005624:	2b40      	cmp	r3, #64	; 0x40
 8005626:	d058      	beq.n	80056da <HAL_TIM_ConfigClockSource+0x13a>
 8005628:	2b40      	cmp	r3, #64	; 0x40
 800562a:	d86f      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x16c>
 800562c:	2b30      	cmp	r3, #48	; 0x30
 800562e:	d064      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x15a>
 8005630:	2b30      	cmp	r3, #48	; 0x30
 8005632:	d86b      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x16c>
 8005634:	2b20      	cmp	r3, #32
 8005636:	d060      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x15a>
 8005638:	2b20      	cmp	r3, #32
 800563a:	d867      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x16c>
 800563c:	2b00      	cmp	r3, #0
 800563e:	d05c      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x15a>
 8005640:	2b10      	cmp	r3, #16
 8005642:	d05a      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005644:	e062      	b.n	800570c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6818      	ldr	r0, [r3, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6899      	ldr	r1, [r3, #8]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f000 fbf7 	bl	8005e48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005668:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	609a      	str	r2, [r3, #8]
      break;
 8005672:	e04e      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6818      	ldr	r0, [r3, #0]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	6899      	ldr	r1, [r3, #8]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f000 fbe0 	bl	8005e48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005696:	609a      	str	r2, [r3, #8]
      break;
 8005698:	e03b      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6859      	ldr	r1, [r3, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	461a      	mov	r2, r3
 80056a8:	f000 fb54 	bl	8005d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2150      	movs	r1, #80	; 0x50
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fbad 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 80056b8:	e02b      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6859      	ldr	r1, [r3, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	461a      	mov	r2, r3
 80056c8:	f000 fb73 	bl	8005db2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2160      	movs	r1, #96	; 0x60
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fb9d 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 80056d8:	e01b      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	6859      	ldr	r1, [r3, #4]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	461a      	mov	r2, r3
 80056e8:	f000 fb34 	bl	8005d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2140      	movs	r1, #64	; 0x40
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fb8d 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 80056f8:	e00b      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4619      	mov	r1, r3
 8005704:	4610      	mov	r0, r2
 8005706:	f000 fb84 	bl	8005e12 <TIM_ITRx_SetConfig>
        break;
 800570a:	e002      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800570c:	bf00      	nop
 800570e:	e000      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005710:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a2a      	ldr	r2, [pc, #168]	; (800584c <TIM_Base_SetConfig+0xbc>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d003      	beq.n	80057b0 <TIM_Base_SetConfig+0x20>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ae:	d108      	bne.n	80057c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a21      	ldr	r2, [pc, #132]	; (800584c <TIM_Base_SetConfig+0xbc>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00b      	beq.n	80057e2 <TIM_Base_SetConfig+0x52>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d0:	d007      	beq.n	80057e2 <TIM_Base_SetConfig+0x52>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a1e      	ldr	r2, [pc, #120]	; (8005850 <TIM_Base_SetConfig+0xc0>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d003      	beq.n	80057e2 <TIM_Base_SetConfig+0x52>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a1d      	ldr	r2, [pc, #116]	; (8005854 <TIM_Base_SetConfig+0xc4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d108      	bne.n	80057f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a0c      	ldr	r2, [pc, #48]	; (800584c <TIM_Base_SetConfig+0xbc>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d007      	beq.n	8005830 <TIM_Base_SetConfig+0xa0>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a0b      	ldr	r2, [pc, #44]	; (8005850 <TIM_Base_SetConfig+0xc0>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <TIM_Base_SetConfig+0xa0>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a0a      	ldr	r2, [pc, #40]	; (8005854 <TIM_Base_SetConfig+0xc4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d103      	bne.n	8005838 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	615a      	str	r2, [r3, #20]
}
 800583e:	bf00      	nop
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40012c00 	.word	0x40012c00
 8005850:	40014000 	.word	0x40014000
 8005854:	40014400 	.word	0x40014400

08005858 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	f023 0201 	bic.w	r2, r3, #1
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0303 	bic.w	r3, r3, #3
 8005892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f023 0302 	bic.w	r3, r3, #2
 80058a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a24      	ldr	r2, [pc, #144]	; (8005944 <TIM_OC1_SetConfig+0xec>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d007      	beq.n	80058c8 <TIM_OC1_SetConfig+0x70>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a23      	ldr	r2, [pc, #140]	; (8005948 <TIM_OC1_SetConfig+0xf0>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d003      	beq.n	80058c8 <TIM_OC1_SetConfig+0x70>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a22      	ldr	r2, [pc, #136]	; (800594c <TIM_OC1_SetConfig+0xf4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d10c      	bne.n	80058e2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f023 0308 	bic.w	r3, r3, #8
 80058ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f023 0304 	bic.w	r3, r3, #4
 80058e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a17      	ldr	r2, [pc, #92]	; (8005944 <TIM_OC1_SetConfig+0xec>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d007      	beq.n	80058fa <TIM_OC1_SetConfig+0xa2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a16      	ldr	r2, [pc, #88]	; (8005948 <TIM_OC1_SetConfig+0xf0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d003      	beq.n	80058fa <TIM_OC1_SetConfig+0xa2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a15      	ldr	r2, [pc, #84]	; (800594c <TIM_OC1_SetConfig+0xf4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d111      	bne.n	800591e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	621a      	str	r2, [r3, #32]
}
 8005938:	bf00      	nop
 800593a:	371c      	adds	r7, #28
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	40012c00 	.word	0x40012c00
 8005948:	40014000 	.word	0x40014000
 800594c:	40014400 	.word	0x40014400

08005950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	f023 0210 	bic.w	r2, r3, #16
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800597e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	021b      	lsls	r3, r3, #8
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0320 	bic.w	r3, r3, #32
 800599e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a22      	ldr	r2, [pc, #136]	; (8005a38 <TIM_OC2_SetConfig+0xe8>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d10d      	bne.n	80059d0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a19      	ldr	r2, [pc, #100]	; (8005a38 <TIM_OC2_SetConfig+0xe8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d007      	beq.n	80059e8 <TIM_OC2_SetConfig+0x98>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a18      	ldr	r2, [pc, #96]	; (8005a3c <TIM_OC2_SetConfig+0xec>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <TIM_OC2_SetConfig+0x98>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a17      	ldr	r2, [pc, #92]	; (8005a40 <TIM_OC2_SetConfig+0xf0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d113      	bne.n	8005a10 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40012c00 	.word	0x40012c00
 8005a3c:	40014000 	.word	0x40014000
 8005a40:	40014400 	.word	0x40014400

08005a44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0303 	bic.w	r3, r3, #3
 8005a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a21      	ldr	r2, [pc, #132]	; (8005b28 <TIM_OC3_SetConfig+0xe4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d10d      	bne.n	8005ac2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a18      	ldr	r2, [pc, #96]	; (8005b28 <TIM_OC3_SetConfig+0xe4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d007      	beq.n	8005ada <TIM_OC3_SetConfig+0x96>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a17      	ldr	r2, [pc, #92]	; (8005b2c <TIM_OC3_SetConfig+0xe8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d003      	beq.n	8005ada <TIM_OC3_SetConfig+0x96>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a16      	ldr	r2, [pc, #88]	; (8005b30 <TIM_OC3_SetConfig+0xec>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d113      	bne.n	8005b02 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	621a      	str	r2, [r3, #32]
}
 8005b1c:	bf00      	nop
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	40012c00 	.word	0x40012c00
 8005b2c:	40014000 	.word	0x40014000
 8005b30:	40014400 	.word	0x40014400

08005b34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	021b      	lsls	r3, r3, #8
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	031b      	lsls	r3, r3, #12
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a14      	ldr	r2, [pc, #80]	; (8005be4 <TIM_OC4_SetConfig+0xb0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d007      	beq.n	8005ba8 <TIM_OC4_SetConfig+0x74>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a13      	ldr	r2, [pc, #76]	; (8005be8 <TIM_OC4_SetConfig+0xb4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_OC4_SetConfig+0x74>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a12      	ldr	r2, [pc, #72]	; (8005bec <TIM_OC4_SetConfig+0xb8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d109      	bne.n	8005bbc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	019b      	lsls	r3, r3, #6
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	621a      	str	r2, [r3, #32]
}
 8005bd6:	bf00      	nop
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40012c00 	.word	0x40012c00
 8005be8:	40014000 	.word	0x40014000
 8005bec:	40014400 	.word	0x40014400

08005bf0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	041b      	lsls	r3, r3, #16
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a13      	ldr	r2, [pc, #76]	; (8005c94 <TIM_OC5_SetConfig+0xa4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d007      	beq.n	8005c5a <TIM_OC5_SetConfig+0x6a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a12      	ldr	r2, [pc, #72]	; (8005c98 <TIM_OC5_SetConfig+0xa8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d003      	beq.n	8005c5a <TIM_OC5_SetConfig+0x6a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a11      	ldr	r2, [pc, #68]	; (8005c9c <TIM_OC5_SetConfig+0xac>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d109      	bne.n	8005c6e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	621a      	str	r2, [r3, #32]
}
 8005c88:	bf00      	nop
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	40012c00 	.word	0x40012c00
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40014400 	.word	0x40014400

08005ca0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	051b      	lsls	r3, r3, #20
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a14      	ldr	r2, [pc, #80]	; (8005d48 <TIM_OC6_SetConfig+0xa8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d007      	beq.n	8005d0c <TIM_OC6_SetConfig+0x6c>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a13      	ldr	r2, [pc, #76]	; (8005d4c <TIM_OC6_SetConfig+0xac>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_OC6_SetConfig+0x6c>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a12      	ldr	r2, [pc, #72]	; (8005d50 <TIM_OC6_SetConfig+0xb0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d109      	bne.n	8005d20 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	029b      	lsls	r3, r3, #10
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	621a      	str	r2, [r3, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40012c00 	.word	0x40012c00
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	40014400 	.word	0x40014400

08005d54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	f023 0201 	bic.w	r2, r3, #1
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f023 030a 	bic.w	r3, r3, #10
 8005d90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	621a      	str	r2, [r3, #32]
}
 8005da6:	bf00      	nop
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b087      	sub	sp, #28
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	f023 0210 	bic.w	r2, r3, #16
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ddc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	031b      	lsls	r3, r3, #12
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	621a      	str	r2, [r3, #32]
}
 8005e06:	bf00      	nop
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b085      	sub	sp, #20
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f043 0307 	orr.w	r3, r3, #7
 8005e34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	609a      	str	r2, [r3, #8]
}
 8005e3c:	bf00      	nop
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	021a      	lsls	r2, r3, #8
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	609a      	str	r2, [r3, #8]
}
 8005e7c:	bf00      	nop
 8005e7e:	371c      	adds	r7, #28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e04f      	b.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a21      	ldr	r2, [pc, #132]	; (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d108      	bne.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ed0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a14      	ldr	r2, [pc, #80]	; (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d009      	beq.n	8005f14 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f08:	d004      	beq.n	8005f14 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a10      	ldr	r2, [pc, #64]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d10c      	bne.n	8005f2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	40012c00 	.word	0x40012c00
 8005f50:	40014000 	.word	0x40014000

08005f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e040      	b.n	8006024 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fb fe5c 	bl	8001c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2224      	movs	r2, #36	; 0x24
 8005fbc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0201 	bic.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f992 	bl	80062f8 <UART_SetConfig>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d101      	bne.n	8005fde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e022      	b.n	8006024 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fb92 	bl	8006710 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ffa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800600a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fc19 	bl	8006854 <UART_CheckIdleState>
 8006022:	4603      	mov	r3, r0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b08a      	sub	sp, #40	; 0x28
 8006030:	af02      	add	r7, sp, #8
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	4613      	mov	r3, r2
 800603a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006040:	2b20      	cmp	r3, #32
 8006042:	f040 8082 	bne.w	800614a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <HAL_UART_Transmit+0x26>
 800604c:	88fb      	ldrh	r3, [r7, #6]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e07a      	b.n	800614c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_UART_Transmit+0x38>
 8006060:	2302      	movs	r3, #2
 8006062:	e073      	b.n	800614c <HAL_UART_Transmit+0x120>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2221      	movs	r2, #33	; 0x21
 8006078:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800607a:	f7fc f81b 	bl	80020b4 <HAL_GetTick>
 800607e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	88fa      	ldrh	r2, [r7, #6]
 8006084:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	88fa      	ldrh	r2, [r7, #6]
 800608c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006098:	d108      	bne.n	80060ac <HAL_UART_Transmit+0x80>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d104      	bne.n	80060ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80060a2:	2300      	movs	r3, #0
 80060a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	61bb      	str	r3, [r7, #24]
 80060aa:	e003      	b.n	80060b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060b0:	2300      	movs	r3, #0
 80060b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80060bc:	e02d      	b.n	800611a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2200      	movs	r2, #0
 80060c6:	2180      	movs	r1, #128	; 0x80
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 fc0c 	bl	80068e6 <UART_WaitOnFlagUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e039      	b.n	800614c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10b      	bne.n	80060f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	881a      	ldrh	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060ea:	b292      	uxth	r2, r2
 80060ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	3302      	adds	r3, #2
 80060f2:	61bb      	str	r3, [r7, #24]
 80060f4:	e008      	b.n	8006108 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	781a      	ldrb	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	b292      	uxth	r2, r2
 8006100:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	3301      	adds	r3, #1
 8006106:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006120:	b29b      	uxth	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1cb      	bne.n	80060be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2200      	movs	r2, #0
 800612e:	2140      	movs	r1, #64	; 0x40
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 fbd8 	bl	80068e6 <UART_WaitOnFlagUntilTimeout>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e005      	b.n	800614c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2220      	movs	r2, #32
 8006144:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	e000      	b.n	800614c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800614a:	2302      	movs	r3, #2
  }
}
 800614c:	4618      	mov	r0, r3
 800614e:	3720      	adds	r7, #32
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08a      	sub	sp, #40	; 0x28
 8006158:	af02      	add	r7, sp, #8
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	4613      	mov	r3, r2
 8006162:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006168:	2b20      	cmp	r3, #32
 800616a:	f040 80bf 	bne.w	80062ec <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <HAL_UART_Receive+0x26>
 8006174:	88fb      	ldrh	r3, [r7, #6]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e0b7      	b.n	80062ee <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <HAL_UART_Receive+0x38>
 8006188:	2302      	movs	r3, #2
 800618a:	e0b0      	b.n	80062ee <HAL_UART_Receive+0x19a>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2222      	movs	r2, #34	; 0x22
 80061a0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061a8:	f7fb ff84 	bl	80020b4 <HAL_GetTick>
 80061ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	88fa      	ldrh	r2, [r7, #6]
 80061b2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	88fa      	ldrh	r2, [r7, #6]
 80061ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c6:	d10e      	bne.n	80061e6 <HAL_UART_Receive+0x92>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d105      	bne.n	80061dc <HAL_UART_Receive+0x88>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80061d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061da:	e02d      	b.n	8006238 <HAL_UART_Receive+0xe4>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	22ff      	movs	r2, #255	; 0xff
 80061e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061e4:	e028      	b.n	8006238 <HAL_UART_Receive+0xe4>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10d      	bne.n	800620a <HAL_UART_Receive+0xb6>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d104      	bne.n	8006200 <HAL_UART_Receive+0xac>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	22ff      	movs	r2, #255	; 0xff
 80061fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061fe:	e01b      	b.n	8006238 <HAL_UART_Receive+0xe4>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	227f      	movs	r2, #127	; 0x7f
 8006204:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006208:	e016      	b.n	8006238 <HAL_UART_Receive+0xe4>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006212:	d10d      	bne.n	8006230 <HAL_UART_Receive+0xdc>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <HAL_UART_Receive+0xd2>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	227f      	movs	r2, #127	; 0x7f
 8006220:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006224:	e008      	b.n	8006238 <HAL_UART_Receive+0xe4>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	223f      	movs	r2, #63	; 0x3f
 800622a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800622e:	e003      	b.n	8006238 <HAL_UART_Receive+0xe4>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800623e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006248:	d108      	bne.n	800625c <HAL_UART_Receive+0x108>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d104      	bne.n	800625c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006252:	2300      	movs	r3, #0
 8006254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	61bb      	str	r3, [r7, #24]
 800625a:	e003      	b.n	8006264 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006260:	2300      	movs	r3, #0
 8006262:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800626c:	e033      	b.n	80062d6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2200      	movs	r2, #0
 8006276:	2120      	movs	r1, #32
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 fb34 	bl	80068e6 <UART_WaitOnFlagUntilTimeout>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e032      	b.n	80062ee <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10c      	bne.n	80062a8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006294:	b29a      	uxth	r2, r3
 8006296:	8a7b      	ldrh	r3, [r7, #18]
 8006298:	4013      	ands	r3, r2
 800629a:	b29a      	uxth	r2, r3
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	3302      	adds	r3, #2
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	e00d      	b.n	80062c4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	8a7b      	ldrh	r3, [r7, #18]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	4013      	ands	r3, r2
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	3301      	adds	r3, #1
 80062c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1c5      	bne.n	800626e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2220      	movs	r2, #32
 80062e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e000      	b.n	80062ee <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80062ec:	2302      	movs	r3, #2
  }
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3720      	adds	r7, #32
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
	...

080062f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062f8:	b5b0      	push	{r4, r5, r7, lr}
 80062fa:	b088      	sub	sp, #32
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689a      	ldr	r2, [r3, #8]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	431a      	orrs	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	4313      	orrs	r3, r2
 800631a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	4baf      	ldr	r3, [pc, #700]	; (80065e0 <UART_SetConfig+0x2e8>)
 8006324:	4013      	ands	r3, r2
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6812      	ldr	r2, [r2, #0]
 800632a:	69f9      	ldr	r1, [r7, #28]
 800632c:	430b      	orrs	r3, r1
 800632e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68da      	ldr	r2, [r3, #12]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4aa4      	ldr	r2, [pc, #656]	; (80065e4 <UART_SetConfig+0x2ec>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d004      	beq.n	8006360 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	69fa      	ldr	r2, [r7, #28]
 800635c:	4313      	orrs	r3, r2
 800635e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69fa      	ldr	r2, [r7, #28]
 8006370:	430a      	orrs	r2, r1
 8006372:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a9b      	ldr	r2, [pc, #620]	; (80065e8 <UART_SetConfig+0x2f0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d121      	bne.n	80063c2 <UART_SetConfig+0xca>
 800637e:	4b9b      	ldr	r3, [pc, #620]	; (80065ec <UART_SetConfig+0x2f4>)
 8006380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006384:	f003 0303 	and.w	r3, r3, #3
 8006388:	2b03      	cmp	r3, #3
 800638a:	d817      	bhi.n	80063bc <UART_SetConfig+0xc4>
 800638c:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <UART_SetConfig+0x9c>)
 800638e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006392:	bf00      	nop
 8006394:	080063a5 	.word	0x080063a5
 8006398:	080063b1 	.word	0x080063b1
 800639c:	080063ab 	.word	0x080063ab
 80063a0:	080063b7 	.word	0x080063b7
 80063a4:	2301      	movs	r3, #1
 80063a6:	76fb      	strb	r3, [r7, #27]
 80063a8:	e070      	b.n	800648c <UART_SetConfig+0x194>
 80063aa:	2302      	movs	r3, #2
 80063ac:	76fb      	strb	r3, [r7, #27]
 80063ae:	e06d      	b.n	800648c <UART_SetConfig+0x194>
 80063b0:	2304      	movs	r3, #4
 80063b2:	76fb      	strb	r3, [r7, #27]
 80063b4:	e06a      	b.n	800648c <UART_SetConfig+0x194>
 80063b6:	2308      	movs	r3, #8
 80063b8:	76fb      	strb	r3, [r7, #27]
 80063ba:	e067      	b.n	800648c <UART_SetConfig+0x194>
 80063bc:	2310      	movs	r3, #16
 80063be:	76fb      	strb	r3, [r7, #27]
 80063c0:	e064      	b.n	800648c <UART_SetConfig+0x194>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a8a      	ldr	r2, [pc, #552]	; (80065f0 <UART_SetConfig+0x2f8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d132      	bne.n	8006432 <UART_SetConfig+0x13a>
 80063cc:	4b87      	ldr	r3, [pc, #540]	; (80065ec <UART_SetConfig+0x2f4>)
 80063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d2:	f003 030c 	and.w	r3, r3, #12
 80063d6:	2b0c      	cmp	r3, #12
 80063d8:	d828      	bhi.n	800642c <UART_SetConfig+0x134>
 80063da:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <UART_SetConfig+0xe8>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	08006415 	.word	0x08006415
 80063e4:	0800642d 	.word	0x0800642d
 80063e8:	0800642d 	.word	0x0800642d
 80063ec:	0800642d 	.word	0x0800642d
 80063f0:	08006421 	.word	0x08006421
 80063f4:	0800642d 	.word	0x0800642d
 80063f8:	0800642d 	.word	0x0800642d
 80063fc:	0800642d 	.word	0x0800642d
 8006400:	0800641b 	.word	0x0800641b
 8006404:	0800642d 	.word	0x0800642d
 8006408:	0800642d 	.word	0x0800642d
 800640c:	0800642d 	.word	0x0800642d
 8006410:	08006427 	.word	0x08006427
 8006414:	2300      	movs	r3, #0
 8006416:	76fb      	strb	r3, [r7, #27]
 8006418:	e038      	b.n	800648c <UART_SetConfig+0x194>
 800641a:	2302      	movs	r3, #2
 800641c:	76fb      	strb	r3, [r7, #27]
 800641e:	e035      	b.n	800648c <UART_SetConfig+0x194>
 8006420:	2304      	movs	r3, #4
 8006422:	76fb      	strb	r3, [r7, #27]
 8006424:	e032      	b.n	800648c <UART_SetConfig+0x194>
 8006426:	2308      	movs	r3, #8
 8006428:	76fb      	strb	r3, [r7, #27]
 800642a:	e02f      	b.n	800648c <UART_SetConfig+0x194>
 800642c:	2310      	movs	r3, #16
 800642e:	76fb      	strb	r3, [r7, #27]
 8006430:	e02c      	b.n	800648c <UART_SetConfig+0x194>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a6b      	ldr	r2, [pc, #428]	; (80065e4 <UART_SetConfig+0x2ec>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d125      	bne.n	8006488 <UART_SetConfig+0x190>
 800643c:	4b6b      	ldr	r3, [pc, #428]	; (80065ec <UART_SetConfig+0x2f4>)
 800643e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006442:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006446:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800644a:	d017      	beq.n	800647c <UART_SetConfig+0x184>
 800644c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006450:	d817      	bhi.n	8006482 <UART_SetConfig+0x18a>
 8006452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006456:	d00b      	beq.n	8006470 <UART_SetConfig+0x178>
 8006458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800645c:	d811      	bhi.n	8006482 <UART_SetConfig+0x18a>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <UART_SetConfig+0x172>
 8006462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006466:	d006      	beq.n	8006476 <UART_SetConfig+0x17e>
 8006468:	e00b      	b.n	8006482 <UART_SetConfig+0x18a>
 800646a:	2300      	movs	r3, #0
 800646c:	76fb      	strb	r3, [r7, #27]
 800646e:	e00d      	b.n	800648c <UART_SetConfig+0x194>
 8006470:	2302      	movs	r3, #2
 8006472:	76fb      	strb	r3, [r7, #27]
 8006474:	e00a      	b.n	800648c <UART_SetConfig+0x194>
 8006476:	2304      	movs	r3, #4
 8006478:	76fb      	strb	r3, [r7, #27]
 800647a:	e007      	b.n	800648c <UART_SetConfig+0x194>
 800647c:	2308      	movs	r3, #8
 800647e:	76fb      	strb	r3, [r7, #27]
 8006480:	e004      	b.n	800648c <UART_SetConfig+0x194>
 8006482:	2310      	movs	r3, #16
 8006484:	76fb      	strb	r3, [r7, #27]
 8006486:	e001      	b.n	800648c <UART_SetConfig+0x194>
 8006488:	2310      	movs	r3, #16
 800648a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a54      	ldr	r2, [pc, #336]	; (80065e4 <UART_SetConfig+0x2ec>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d173      	bne.n	800657e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006496:	7efb      	ldrb	r3, [r7, #27]
 8006498:	2b08      	cmp	r3, #8
 800649a:	d824      	bhi.n	80064e6 <UART_SetConfig+0x1ee>
 800649c:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <UART_SetConfig+0x1ac>)
 800649e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	080064c9 	.word	0x080064c9
 80064a8:	080064e7 	.word	0x080064e7
 80064ac:	080064d1 	.word	0x080064d1
 80064b0:	080064e7 	.word	0x080064e7
 80064b4:	080064d7 	.word	0x080064d7
 80064b8:	080064e7 	.word	0x080064e7
 80064bc:	080064e7 	.word	0x080064e7
 80064c0:	080064e7 	.word	0x080064e7
 80064c4:	080064df 	.word	0x080064df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064c8:	f7fe fa4e 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 80064cc:	6178      	str	r0, [r7, #20]
        break;
 80064ce:	e00f      	b.n	80064f0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064d0:	4b48      	ldr	r3, [pc, #288]	; (80065f4 <UART_SetConfig+0x2fc>)
 80064d2:	617b      	str	r3, [r7, #20]
        break;
 80064d4:	e00c      	b.n	80064f0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064d6:	f7fe f9af 	bl	8004838 <HAL_RCC_GetSysClockFreq>
 80064da:	6178      	str	r0, [r7, #20]
        break;
 80064dc:	e008      	b.n	80064f0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064e2:	617b      	str	r3, [r7, #20]
        break;
 80064e4:	e004      	b.n	80064f0 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	76bb      	strb	r3, [r7, #26]
        break;
 80064ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 80fe 	beq.w	80066f4 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	4613      	mov	r3, r2
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	4413      	add	r3, r2
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	429a      	cmp	r2, r3
 8006506:	d305      	bcc.n	8006514 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	429a      	cmp	r2, r3
 8006512:	d902      	bls.n	800651a <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	76bb      	strb	r3, [r7, #26]
 8006518:	e0ec      	b.n	80066f4 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	4618      	mov	r0, r3
 800651e:	f04f 0100 	mov.w	r1, #0
 8006522:	f04f 0200 	mov.w	r2, #0
 8006526:	f04f 0300 	mov.w	r3, #0
 800652a:	020b      	lsls	r3, r1, #8
 800652c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006530:	0202      	lsls	r2, r0, #8
 8006532:	6879      	ldr	r1, [r7, #4]
 8006534:	6849      	ldr	r1, [r1, #4]
 8006536:	0849      	lsrs	r1, r1, #1
 8006538:	4608      	mov	r0, r1
 800653a:	f04f 0100 	mov.w	r1, #0
 800653e:	1814      	adds	r4, r2, r0
 8006540:	eb43 0501 	adc.w	r5, r3, r1
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	461a      	mov	r2, r3
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	4620      	mov	r0, r4
 8006550:	4629      	mov	r1, r5
 8006552:	f7fa fb79 	bl	8000c48 <__aeabi_uldivmod>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4613      	mov	r3, r2
 800655c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006564:	d308      	bcc.n	8006578 <UART_SetConfig+0x280>
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800656c:	d204      	bcs.n	8006578 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	60da      	str	r2, [r3, #12]
 8006576:	e0bd      	b.n	80066f4 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	76bb      	strb	r3, [r7, #26]
 800657c:	e0ba      	b.n	80066f4 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006586:	d168      	bne.n	800665a <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8006588:	7efb      	ldrb	r3, [r7, #27]
 800658a:	2b08      	cmp	r3, #8
 800658c:	d834      	bhi.n	80065f8 <UART_SetConfig+0x300>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <UART_SetConfig+0x29c>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	080065b9 	.word	0x080065b9
 8006598:	080065c1 	.word	0x080065c1
 800659c:	080065c9 	.word	0x080065c9
 80065a0:	080065f9 	.word	0x080065f9
 80065a4:	080065cf 	.word	0x080065cf
 80065a8:	080065f9 	.word	0x080065f9
 80065ac:	080065f9 	.word	0x080065f9
 80065b0:	080065f9 	.word	0x080065f9
 80065b4:	080065d7 	.word	0x080065d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065b8:	f7fe f9d6 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 80065bc:	6178      	str	r0, [r7, #20]
        break;
 80065be:	e020      	b.n	8006602 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065c0:	f7fe f9e8 	bl	8004994 <HAL_RCC_GetPCLK2Freq>
 80065c4:	6178      	str	r0, [r7, #20]
        break;
 80065c6:	e01c      	b.n	8006602 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065c8:	4b0a      	ldr	r3, [pc, #40]	; (80065f4 <UART_SetConfig+0x2fc>)
 80065ca:	617b      	str	r3, [r7, #20]
        break;
 80065cc:	e019      	b.n	8006602 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ce:	f7fe f933 	bl	8004838 <HAL_RCC_GetSysClockFreq>
 80065d2:	6178      	str	r0, [r7, #20]
        break;
 80065d4:	e015      	b.n	8006602 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065da:	617b      	str	r3, [r7, #20]
        break;
 80065dc:	e011      	b.n	8006602 <UART_SetConfig+0x30a>
 80065de:	bf00      	nop
 80065e0:	efff69f3 	.word	0xefff69f3
 80065e4:	40008000 	.word	0x40008000
 80065e8:	40013800 	.word	0x40013800
 80065ec:	40021000 	.word	0x40021000
 80065f0:	40004400 	.word	0x40004400
 80065f4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	76bb      	strb	r3, [r7, #26]
        break;
 8006600:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d075      	beq.n	80066f4 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	005a      	lsls	r2, r3, #1
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	085b      	lsrs	r3, r3, #1
 8006612:	441a      	add	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	fbb2 f3f3 	udiv	r3, r2, r3
 800661c:	b29b      	uxth	r3, r3
 800661e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	2b0f      	cmp	r3, #15
 8006624:	d916      	bls.n	8006654 <UART_SetConfig+0x35c>
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800662c:	d212      	bcs.n	8006654 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	b29b      	uxth	r3, r3
 8006632:	f023 030f 	bic.w	r3, r3, #15
 8006636:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	085b      	lsrs	r3, r3, #1
 800663c:	b29b      	uxth	r3, r3
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	b29a      	uxth	r2, r3
 8006644:	89fb      	ldrh	r3, [r7, #14]
 8006646:	4313      	orrs	r3, r2
 8006648:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	89fa      	ldrh	r2, [r7, #14]
 8006650:	60da      	str	r2, [r3, #12]
 8006652:	e04f      	b.n	80066f4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	76bb      	strb	r3, [r7, #26]
 8006658:	e04c      	b.n	80066f4 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800665a:	7efb      	ldrb	r3, [r7, #27]
 800665c:	2b08      	cmp	r3, #8
 800665e:	d828      	bhi.n	80066b2 <UART_SetConfig+0x3ba>
 8006660:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <UART_SetConfig+0x370>)
 8006662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006666:	bf00      	nop
 8006668:	0800668d 	.word	0x0800668d
 800666c:	08006695 	.word	0x08006695
 8006670:	0800669d 	.word	0x0800669d
 8006674:	080066b3 	.word	0x080066b3
 8006678:	080066a3 	.word	0x080066a3
 800667c:	080066b3 	.word	0x080066b3
 8006680:	080066b3 	.word	0x080066b3
 8006684:	080066b3 	.word	0x080066b3
 8006688:	080066ab 	.word	0x080066ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800668c:	f7fe f96c 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 8006690:	6178      	str	r0, [r7, #20]
        break;
 8006692:	e013      	b.n	80066bc <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006694:	f7fe f97e 	bl	8004994 <HAL_RCC_GetPCLK2Freq>
 8006698:	6178      	str	r0, [r7, #20]
        break;
 800669a:	e00f      	b.n	80066bc <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800669c:	4b1b      	ldr	r3, [pc, #108]	; (800670c <UART_SetConfig+0x414>)
 800669e:	617b      	str	r3, [r7, #20]
        break;
 80066a0:	e00c      	b.n	80066bc <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066a2:	f7fe f8c9 	bl	8004838 <HAL_RCC_GetSysClockFreq>
 80066a6:	6178      	str	r0, [r7, #20]
        break;
 80066a8:	e008      	b.n	80066bc <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ae:	617b      	str	r3, [r7, #20]
        break;
 80066b0:	e004      	b.n	80066bc <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	76bb      	strb	r3, [r7, #26]
        break;
 80066ba:	bf00      	nop
    }

    if (pclk != 0U)
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d018      	beq.n	80066f4 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	085a      	lsrs	r2, r3, #1
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	441a      	add	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	2b0f      	cmp	r3, #15
 80066dc:	d908      	bls.n	80066f0 <UART_SetConfig+0x3f8>
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e4:	d204      	bcs.n	80066f0 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	60da      	str	r2, [r3, #12]
 80066ee:	e001      	b.n	80066f4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006700:	7ebb      	ldrb	r3, [r7, #26]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3720      	adds	r7, #32
 8006706:	46bd      	mov	sp, r7
 8006708:	bdb0      	pop	{r4, r5, r7, pc}
 800670a:	bf00      	nop
 800670c:	00f42400 	.word	0x00f42400

08006710 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00a      	beq.n	800673a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00a      	beq.n	800675c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00a      	beq.n	800677e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	f003 0308 	and.w	r3, r3, #8
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	f003 0310 	and.w	r3, r3, #16
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00a      	beq.n	80067c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d01a      	beq.n	8006826 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800680e:	d10a      	bne.n	8006826 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	430a      	orrs	r2, r1
 8006846:	605a      	str	r2, [r3, #4]
  }
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af02      	add	r7, sp, #8
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006864:	f7fb fc26 	bl	80020b4 <HAL_GetTick>
 8006868:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0308 	and.w	r3, r3, #8
 8006874:	2b08      	cmp	r3, #8
 8006876:	d10e      	bne.n	8006896 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006878:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f82d 	bl	80068e6 <UART_WaitOnFlagUntilTimeout>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e023      	b.n	80068de <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	d10e      	bne.n	80068c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f817 	bl	80068e6 <UART_WaitOnFlagUntilTimeout>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e00d      	b.n	80068de <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2220      	movs	r2, #32
 80068c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2220      	movs	r2, #32
 80068cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	60f8      	str	r0, [r7, #12]
 80068ee:	60b9      	str	r1, [r7, #8]
 80068f0:	603b      	str	r3, [r7, #0]
 80068f2:	4613      	mov	r3, r2
 80068f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068f6:	e05e      	b.n	80069b6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fe:	d05a      	beq.n	80069b6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006900:	f7fb fbd8 	bl	80020b4 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	429a      	cmp	r2, r3
 800690e:	d302      	bcc.n	8006916 <UART_WaitOnFlagUntilTimeout+0x30>
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d11b      	bne.n	800694e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006924:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0201 	bic.w	r2, r2, #1
 8006934:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2220      	movs	r2, #32
 800693a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2220      	movs	r2, #32
 8006940:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e043      	b.n	80069d6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b00      	cmp	r3, #0
 800695a:	d02c      	beq.n	80069b6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800696a:	d124      	bne.n	80069b6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006974:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006984:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0201 	bic.w	r2, r2, #1
 8006994:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2220      	movs	r2, #32
 800699a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e00f      	b.n	80069d6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	69da      	ldr	r2, [r3, #28]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	4013      	ands	r3, r2
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	bf0c      	ite	eq
 80069c6:	2301      	moveq	r3, #1
 80069c8:	2300      	movne	r3, #0
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	461a      	mov	r2, r3
 80069ce:	79fb      	ldrb	r3, [r7, #7]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d091      	beq.n	80068f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <__errno>:
 80069e0:	4b01      	ldr	r3, [pc, #4]	; (80069e8 <__errno+0x8>)
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	2000001c 	.word	0x2000001c

080069ec <__libc_init_array>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	4d0d      	ldr	r5, [pc, #52]	; (8006a24 <__libc_init_array+0x38>)
 80069f0:	4c0d      	ldr	r4, [pc, #52]	; (8006a28 <__libc_init_array+0x3c>)
 80069f2:	1b64      	subs	r4, r4, r5
 80069f4:	10a4      	asrs	r4, r4, #2
 80069f6:	2600      	movs	r6, #0
 80069f8:	42a6      	cmp	r6, r4
 80069fa:	d109      	bne.n	8006a10 <__libc_init_array+0x24>
 80069fc:	4d0b      	ldr	r5, [pc, #44]	; (8006a2c <__libc_init_array+0x40>)
 80069fe:	4c0c      	ldr	r4, [pc, #48]	; (8006a30 <__libc_init_array+0x44>)
 8006a00:	f005 ffa2 	bl	800c948 <_init>
 8006a04:	1b64      	subs	r4, r4, r5
 8006a06:	10a4      	asrs	r4, r4, #2
 8006a08:	2600      	movs	r6, #0
 8006a0a:	42a6      	cmp	r6, r4
 8006a0c:	d105      	bne.n	8006a1a <__libc_init_array+0x2e>
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
 8006a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a14:	4798      	blx	r3
 8006a16:	3601      	adds	r6, #1
 8006a18:	e7ee      	b.n	80069f8 <__libc_init_array+0xc>
 8006a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a1e:	4798      	blx	r3
 8006a20:	3601      	adds	r6, #1
 8006a22:	e7f2      	b.n	8006a0a <__libc_init_array+0x1e>
 8006a24:	0800ce04 	.word	0x0800ce04
 8006a28:	0800ce04 	.word	0x0800ce04
 8006a2c:	0800ce04 	.word	0x0800ce04
 8006a30:	0800ce0c 	.word	0x0800ce0c

08006a34 <memset>:
 8006a34:	4402      	add	r2, r0
 8006a36:	4603      	mov	r3, r0
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d100      	bne.n	8006a3e <memset+0xa>
 8006a3c:	4770      	bx	lr
 8006a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a42:	e7f9      	b.n	8006a38 <memset+0x4>

08006a44 <printf>:
 8006a44:	b40f      	push	{r0, r1, r2, r3}
 8006a46:	b507      	push	{r0, r1, r2, lr}
 8006a48:	4906      	ldr	r1, [pc, #24]	; (8006a64 <printf+0x20>)
 8006a4a:	ab04      	add	r3, sp, #16
 8006a4c:	6808      	ldr	r0, [r1, #0]
 8006a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a52:	6881      	ldr	r1, [r0, #8]
 8006a54:	9301      	str	r3, [sp, #4]
 8006a56:	f001 fa07 	bl	8007e68 <_vfprintf_r>
 8006a5a:	b003      	add	sp, #12
 8006a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a60:	b004      	add	sp, #16
 8006a62:	4770      	bx	lr
 8006a64:	2000001c 	.word	0x2000001c

08006a68 <sprintf>:
 8006a68:	b40e      	push	{r1, r2, r3}
 8006a6a:	b500      	push	{lr}
 8006a6c:	b09c      	sub	sp, #112	; 0x70
 8006a6e:	ab1d      	add	r3, sp, #116	; 0x74
 8006a70:	9002      	str	r0, [sp, #8]
 8006a72:	9006      	str	r0, [sp, #24]
 8006a74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a78:	4809      	ldr	r0, [pc, #36]	; (8006aa0 <sprintf+0x38>)
 8006a7a:	9107      	str	r1, [sp, #28]
 8006a7c:	9104      	str	r1, [sp, #16]
 8006a7e:	4909      	ldr	r1, [pc, #36]	; (8006aa4 <sprintf+0x3c>)
 8006a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a84:	9105      	str	r1, [sp, #20]
 8006a86:	6800      	ldr	r0, [r0, #0]
 8006a88:	9301      	str	r3, [sp, #4]
 8006a8a:	a902      	add	r1, sp, #8
 8006a8c:	f000 f80c 	bl	8006aa8 <_svfprintf_r>
 8006a90:	9b02      	ldr	r3, [sp, #8]
 8006a92:	2200      	movs	r2, #0
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	b01c      	add	sp, #112	; 0x70
 8006a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a9c:	b003      	add	sp, #12
 8006a9e:	4770      	bx	lr
 8006aa0:	2000001c 	.word	0x2000001c
 8006aa4:	ffff0208 	.word	0xffff0208

08006aa8 <_svfprintf_r>:
 8006aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	ed2d 8b04 	vpush	{d8-d9}
 8006ab0:	b0cf      	sub	sp, #316	; 0x13c
 8006ab2:	4689      	mov	r9, r1
 8006ab4:	4693      	mov	fp, r2
 8006ab6:	461e      	mov	r6, r3
 8006ab8:	4682      	mov	sl, r0
 8006aba:	f003 fd7f 	bl	800a5bc <_localeconv_r>
 8006abe:	6803      	ldr	r3, [r0, #0]
 8006ac0:	9313      	str	r3, [sp, #76]	; 0x4c
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7f9 fb84 	bl	80001d0 <strlen>
 8006ac8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006acc:	900e      	str	r0, [sp, #56]	; 0x38
 8006ace:	0618      	lsls	r0, r3, #24
 8006ad0:	d51a      	bpl.n	8006b08 <_svfprintf_r+0x60>
 8006ad2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ad6:	b9bb      	cbnz	r3, 8006b08 <_svfprintf_r+0x60>
 8006ad8:	2140      	movs	r1, #64	; 0x40
 8006ada:	4650      	mov	r0, sl
 8006adc:	f003 fde2 	bl	800a6a4 <_malloc_r>
 8006ae0:	f8c9 0000 	str.w	r0, [r9]
 8006ae4:	f8c9 0010 	str.w	r0, [r9, #16]
 8006ae8:	b958      	cbnz	r0, 8006b02 <_svfprintf_r+0x5a>
 8006aea:	230c      	movs	r3, #12
 8006aec:	f8ca 3000 	str.w	r3, [sl]
 8006af0:	f04f 33ff 	mov.w	r3, #4294967295
 8006af4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006af6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006af8:	b04f      	add	sp, #316	; 0x13c
 8006afa:	ecbd 8b04 	vpop	{d8-d9}
 8006afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b02:	2340      	movs	r3, #64	; 0x40
 8006b04:	f8c9 3014 	str.w	r3, [r9, #20]
 8006b08:	ed9f 7b93 	vldr	d7, [pc, #588]	; 8006d58 <_svfprintf_r+0x2b0>
 8006b0c:	2500      	movs	r5, #0
 8006b0e:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8006b12:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006b16:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8006b1a:	ac25      	add	r4, sp, #148	; 0x94
 8006b1c:	9422      	str	r4, [sp, #136]	; 0x88
 8006b1e:	9505      	str	r5, [sp, #20]
 8006b20:	950a      	str	r5, [sp, #40]	; 0x28
 8006b22:	9512      	str	r5, [sp, #72]	; 0x48
 8006b24:	9514      	str	r5, [sp, #80]	; 0x50
 8006b26:	950f      	str	r5, [sp, #60]	; 0x3c
 8006b28:	465b      	mov	r3, fp
 8006b2a:	461d      	mov	r5, r3
 8006b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b30:	b10a      	cbz	r2, 8006b36 <_svfprintf_r+0x8e>
 8006b32:	2a25      	cmp	r2, #37	; 0x25
 8006b34:	d1f9      	bne.n	8006b2a <_svfprintf_r+0x82>
 8006b36:	ebb5 070b 	subs.w	r7, r5, fp
 8006b3a:	d00d      	beq.n	8006b58 <_svfprintf_r+0xb0>
 8006b3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006b3e:	443b      	add	r3, r7
 8006b40:	9324      	str	r3, [sp, #144]	; 0x90
 8006b42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b44:	3301      	adds	r3, #1
 8006b46:	2b07      	cmp	r3, #7
 8006b48:	e9c4 b700 	strd	fp, r7, [r4]
 8006b4c:	9323      	str	r3, [sp, #140]	; 0x8c
 8006b4e:	dc79      	bgt.n	8006c44 <_svfprintf_r+0x19c>
 8006b50:	3408      	adds	r4, #8
 8006b52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b54:	443b      	add	r3, r7
 8006b56:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b58:	782b      	ldrb	r3, [r5, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f001 8140 	beq.w	8007de0 <_svfprintf_r+0x1338>
 8006b60:	2300      	movs	r3, #0
 8006b62:	f04f 32ff 	mov.w	r2, #4294967295
 8006b66:	3501      	adds	r5, #1
 8006b68:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006b6c:	9204      	str	r2, [sp, #16]
 8006b6e:	9310      	str	r3, [sp, #64]	; 0x40
 8006b70:	4698      	mov	r8, r3
 8006b72:	270a      	movs	r7, #10
 8006b74:	212b      	movs	r1, #43	; 0x2b
 8006b76:	462a      	mov	r2, r5
 8006b78:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006b7c:	9307      	str	r3, [sp, #28]
 8006b7e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006b80:	9b07      	ldr	r3, [sp, #28]
 8006b82:	3b20      	subs	r3, #32
 8006b84:	2b5a      	cmp	r3, #90	; 0x5a
 8006b86:	f200 85b4 	bhi.w	80076f2 <_svfprintf_r+0xc4a>
 8006b8a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006b8e:	007e      	.short	0x007e
 8006b90:	05b205b2 	.word	0x05b205b2
 8006b94:	05b20086 	.word	0x05b20086
 8006b98:	05b205b2 	.word	0x05b205b2
 8006b9c:	05b20065 	.word	0x05b20065
 8006ba0:	008905b2 	.word	0x008905b2
 8006ba4:	05b20093 	.word	0x05b20093
 8006ba8:	00960090 	.word	0x00960090
 8006bac:	00b305b2 	.word	0x00b305b2
 8006bb0:	00b600b6 	.word	0x00b600b6
 8006bb4:	00b600b6 	.word	0x00b600b6
 8006bb8:	00b600b6 	.word	0x00b600b6
 8006bbc:	00b600b6 	.word	0x00b600b6
 8006bc0:	05b200b6 	.word	0x05b200b6
 8006bc4:	05b205b2 	.word	0x05b205b2
 8006bc8:	05b205b2 	.word	0x05b205b2
 8006bcc:	05b205b2 	.word	0x05b205b2
 8006bd0:	05b20127 	.word	0x05b20127
 8006bd4:	00fc00e9 	.word	0x00fc00e9
 8006bd8:	01270127 	.word	0x01270127
 8006bdc:	05b20127 	.word	0x05b20127
 8006be0:	05b205b2 	.word	0x05b205b2
 8006be4:	00c605b2 	.word	0x00c605b2
 8006be8:	05b205b2 	.word	0x05b205b2
 8006bec:	05b20492 	.word	0x05b20492
 8006bf0:	05b205b2 	.word	0x05b205b2
 8006bf4:	05b204d9 	.word	0x05b204d9
 8006bf8:	05b204fa 	.word	0x05b204fa
 8006bfc:	051905b2 	.word	0x051905b2
 8006c00:	05b205b2 	.word	0x05b205b2
 8006c04:	05b205b2 	.word	0x05b205b2
 8006c08:	05b205b2 	.word	0x05b205b2
 8006c0c:	05b205b2 	.word	0x05b205b2
 8006c10:	05b20127 	.word	0x05b20127
 8006c14:	00fe00e9 	.word	0x00fe00e9
 8006c18:	01270127 	.word	0x01270127
 8006c1c:	00c90127 	.word	0x00c90127
 8006c20:	00dd00fe 	.word	0x00dd00fe
 8006c24:	00d605b2 	.word	0x00d605b2
 8006c28:	046f05b2 	.word	0x046f05b2
 8006c2c:	04c80494 	.word	0x04c80494
 8006c30:	05b200dd 	.word	0x05b200dd
 8006c34:	007c04d9 	.word	0x007c04d9
 8006c38:	05b204fc 	.word	0x05b204fc
 8006c3c:	053605b2 	.word	0x053605b2
 8006c40:	007c05b2 	.word	0x007c05b2
 8006c44:	aa22      	add	r2, sp, #136	; 0x88
 8006c46:	4649      	mov	r1, r9
 8006c48:	4650      	mov	r0, sl
 8006c4a:	f004 fb55 	bl	800b2f8 <__ssprint_r>
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	f040 8132 	bne.w	8006eb8 <_svfprintf_r+0x410>
 8006c54:	ac25      	add	r4, sp, #148	; 0x94
 8006c56:	e77c      	b.n	8006b52 <_svfprintf_r+0xaa>
 8006c58:	4650      	mov	r0, sl
 8006c5a:	f003 fcaf 	bl	800a5bc <_localeconv_r>
 8006c5e:	6843      	ldr	r3, [r0, #4]
 8006c60:	9314      	str	r3, [sp, #80]	; 0x50
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7f9 fab4 	bl	80001d0 <strlen>
 8006c68:	9012      	str	r0, [sp, #72]	; 0x48
 8006c6a:	4650      	mov	r0, sl
 8006c6c:	f003 fca6 	bl	800a5bc <_localeconv_r>
 8006c70:	6883      	ldr	r3, [r0, #8]
 8006c72:	930a      	str	r3, [sp, #40]	; 0x28
 8006c74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c76:	212b      	movs	r1, #43	; 0x2b
 8006c78:	b12b      	cbz	r3, 8006c86 <_svfprintf_r+0x1de>
 8006c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c7c:	b11b      	cbz	r3, 8006c86 <_svfprintf_r+0x1de>
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	b10b      	cbz	r3, 8006c86 <_svfprintf_r+0x1de>
 8006c82:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 8006c86:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006c88:	e775      	b.n	8006b76 <_svfprintf_r+0xce>
 8006c8a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f9      	bne.n	8006c86 <_svfprintf_r+0x1de>
 8006c92:	2320      	movs	r3, #32
 8006c94:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006c98:	e7f5      	b.n	8006c86 <_svfprintf_r+0x1de>
 8006c9a:	f048 0801 	orr.w	r8, r8, #1
 8006c9e:	e7f2      	b.n	8006c86 <_svfprintf_r+0x1de>
 8006ca0:	f856 3b04 	ldr.w	r3, [r6], #4
 8006ca4:	9310      	str	r3, [sp, #64]	; 0x40
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	daed      	bge.n	8006c86 <_svfprintf_r+0x1de>
 8006caa:	425b      	negs	r3, r3
 8006cac:	9310      	str	r3, [sp, #64]	; 0x40
 8006cae:	f048 0804 	orr.w	r8, r8, #4
 8006cb2:	e7e8      	b.n	8006c86 <_svfprintf_r+0x1de>
 8006cb4:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8006cb8:	e7e5      	b.n	8006c86 <_svfprintf_r+0x1de>
 8006cba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cbc:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006cc0:	9307      	str	r3, [sp, #28]
 8006cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8006cc4:	d113      	bne.n	8006cee <_svfprintf_r+0x246>
 8006cc6:	f856 0b04 	ldr.w	r0, [r6], #4
 8006cca:	920b      	str	r2, [sp, #44]	; 0x2c
 8006ccc:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8006cd0:	9304      	str	r3, [sp, #16]
 8006cd2:	e7d8      	b.n	8006c86 <_svfprintf_r+0x1de>
 8006cd4:	9804      	ldr	r0, [sp, #16]
 8006cd6:	fb07 3300 	mla	r3, r7, r0, r3
 8006cda:	9304      	str	r3, [sp, #16]
 8006cdc:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006ce0:	9307      	str	r3, [sp, #28]
 8006ce2:	9b07      	ldr	r3, [sp, #28]
 8006ce4:	3b30      	subs	r3, #48	; 0x30
 8006ce6:	2b09      	cmp	r3, #9
 8006ce8:	d9f4      	bls.n	8006cd4 <_svfprintf_r+0x22c>
 8006cea:	920b      	str	r2, [sp, #44]	; 0x2c
 8006cec:	e748      	b.n	8006b80 <_svfprintf_r+0xd8>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	9304      	str	r3, [sp, #16]
 8006cf2:	e7f6      	b.n	8006ce2 <_svfprintf_r+0x23a>
 8006cf4:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8006cf8:	e7c5      	b.n	8006c86 <_svfprintf_r+0x1de>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cfe:	9310      	str	r3, [sp, #64]	; 0x40
 8006d00:	9b07      	ldr	r3, [sp, #28]
 8006d02:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006d04:	3b30      	subs	r3, #48	; 0x30
 8006d06:	fb07 3300 	mla	r3, r7, r0, r3
 8006d0a:	9310      	str	r3, [sp, #64]	; 0x40
 8006d0c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006d10:	9307      	str	r3, [sp, #28]
 8006d12:	3b30      	subs	r3, #48	; 0x30
 8006d14:	2b09      	cmp	r3, #9
 8006d16:	d9f3      	bls.n	8006d00 <_svfprintf_r+0x258>
 8006d18:	e7e7      	b.n	8006cea <_svfprintf_r+0x242>
 8006d1a:	f048 0808 	orr.w	r8, r8, #8
 8006d1e:	e7b2      	b.n	8006c86 <_svfprintf_r+0x1de>
 8006d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	2b68      	cmp	r3, #104	; 0x68
 8006d26:	bf01      	itttt	eq
 8006d28:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8006d2a:	3301      	addeq	r3, #1
 8006d2c:	930b      	streq	r3, [sp, #44]	; 0x2c
 8006d2e:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 8006d32:	bf18      	it	ne
 8006d34:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8006d38:	e7a5      	b.n	8006c86 <_svfprintf_r+0x1de>
 8006d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	2b6c      	cmp	r3, #108	; 0x6c
 8006d40:	d105      	bne.n	8006d4e <_svfprintf_r+0x2a6>
 8006d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d44:	3301      	adds	r3, #1
 8006d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d48:	f048 0820 	orr.w	r8, r8, #32
 8006d4c:	e79b      	b.n	8006c86 <_svfprintf_r+0x1de>
 8006d4e:	f048 0810 	orr.w	r8, r8, #16
 8006d52:	e798      	b.n	8006c86 <_svfprintf_r+0x1de>
 8006d54:	f3af 8000 	nop.w
	...
 8006d60:	4632      	mov	r2, r6
 8006d62:	2000      	movs	r0, #0
 8006d64:	f852 3b04 	ldr.w	r3, [r2], #4
 8006d68:	9206      	str	r2, [sp, #24]
 8006d6a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8006d6e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8006d72:	2301      	movs	r3, #1
 8006d74:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8006d78:	9003      	str	r0, [sp, #12]
 8006d7a:	9304      	str	r3, [sp, #16]
 8006d7c:	4606      	mov	r6, r0
 8006d7e:	4605      	mov	r5, r0
 8006d80:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 8006d84:	e1b8      	b.n	80070f8 <_svfprintf_r+0x650>
 8006d86:	f048 0810 	orr.w	r8, r8, #16
 8006d8a:	f018 0f20 	tst.w	r8, #32
 8006d8e:	d012      	beq.n	8006db6 <_svfprintf_r+0x30e>
 8006d90:	3607      	adds	r6, #7
 8006d92:	f026 0307 	bic.w	r3, r6, #7
 8006d96:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8006d9a:	9306      	str	r3, [sp, #24]
 8006d9c:	2e00      	cmp	r6, #0
 8006d9e:	f177 0300 	sbcs.w	r3, r7, #0
 8006da2:	da06      	bge.n	8006db2 <_svfprintf_r+0x30a>
 8006da4:	4276      	negs	r6, r6
 8006da6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8006daa:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8006dae:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006db2:	2301      	movs	r3, #1
 8006db4:	e38e      	b.n	80074d4 <_svfprintf_r+0xa2c>
 8006db6:	1d33      	adds	r3, r6, #4
 8006db8:	f018 0f10 	tst.w	r8, #16
 8006dbc:	9306      	str	r3, [sp, #24]
 8006dbe:	d002      	beq.n	8006dc6 <_svfprintf_r+0x31e>
 8006dc0:	6836      	ldr	r6, [r6, #0]
 8006dc2:	17f7      	asrs	r7, r6, #31
 8006dc4:	e7ea      	b.n	8006d9c <_svfprintf_r+0x2f4>
 8006dc6:	f018 0f40 	tst.w	r8, #64	; 0x40
 8006dca:	6836      	ldr	r6, [r6, #0]
 8006dcc:	d001      	beq.n	8006dd2 <_svfprintf_r+0x32a>
 8006dce:	b236      	sxth	r6, r6
 8006dd0:	e7f7      	b.n	8006dc2 <_svfprintf_r+0x31a>
 8006dd2:	f418 7f00 	tst.w	r8, #512	; 0x200
 8006dd6:	bf18      	it	ne
 8006dd8:	b276      	sxtbne	r6, r6
 8006dda:	e7f2      	b.n	8006dc2 <_svfprintf_r+0x31a>
 8006ddc:	3607      	adds	r6, #7
 8006dde:	f026 0307 	bic.w	r3, r6, #7
 8006de2:	ecb3 7b02 	vldmia	r3!, {d7}
 8006de6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006dea:	9306      	str	r3, [sp, #24]
 8006dec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dee:	ee09 3a10 	vmov	s18, r3
 8006df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006df8:	ee09 3a90 	vmov	s19, r3
 8006dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8006e00:	4b3a      	ldr	r3, [pc, #232]	; (8006eec <_svfprintf_r+0x444>)
 8006e02:	ec51 0b19 	vmov	r0, r1, d9
 8006e06:	f7f9 fe91 	bl	8000b2c <__aeabi_dcmpun>
 8006e0a:	bb10      	cbnz	r0, 8006e52 <_svfprintf_r+0x3aa>
 8006e0c:	4b37      	ldr	r3, [pc, #220]	; (8006eec <_svfprintf_r+0x444>)
 8006e0e:	ec51 0b19 	vmov	r0, r1, d9
 8006e12:	f04f 32ff 	mov.w	r2, #4294967295
 8006e16:	f7f9 fe6b 	bl	8000af0 <__aeabi_dcmple>
 8006e1a:	b9d0      	cbnz	r0, 8006e52 <_svfprintf_r+0x3aa>
 8006e1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e20:	2200      	movs	r2, #0
 8006e22:	2300      	movs	r3, #0
 8006e24:	f7f9 fe5a 	bl	8000adc <__aeabi_dcmplt>
 8006e28:	b110      	cbz	r0, 8006e30 <_svfprintf_r+0x388>
 8006e2a:	232d      	movs	r3, #45	; 0x2d
 8006e2c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006e30:	4a2f      	ldr	r2, [pc, #188]	; (8006ef0 <_svfprintf_r+0x448>)
 8006e32:	4830      	ldr	r0, [pc, #192]	; (8006ef4 <_svfprintf_r+0x44c>)
 8006e34:	9b07      	ldr	r3, [sp, #28]
 8006e36:	2100      	movs	r1, #0
 8006e38:	2b47      	cmp	r3, #71	; 0x47
 8006e3a:	bfd4      	ite	le
 8006e3c:	4693      	movle	fp, r2
 8006e3e:	4683      	movgt	fp, r0
 8006e40:	2303      	movs	r3, #3
 8006e42:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8006e46:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8006e4a:	2600      	movs	r6, #0
 8006e4c:	4633      	mov	r3, r6
 8006e4e:	f001 b802 	b.w	8007e56 <_svfprintf_r+0x13ae>
 8006e52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006e56:	4610      	mov	r0, r2
 8006e58:	4619      	mov	r1, r3
 8006e5a:	f7f9 fe67 	bl	8000b2c <__aeabi_dcmpun>
 8006e5e:	b140      	cbz	r0, 8006e72 <_svfprintf_r+0x3ca>
 8006e60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e62:	4a25      	ldr	r2, [pc, #148]	; (8006ef8 <_svfprintf_r+0x450>)
 8006e64:	4825      	ldr	r0, [pc, #148]	; (8006efc <_svfprintf_r+0x454>)
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	bfbc      	itt	lt
 8006e6a:	232d      	movlt	r3, #45	; 0x2d
 8006e6c:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8006e70:	e7e0      	b.n	8006e34 <_svfprintf_r+0x38c>
 8006e72:	9b07      	ldr	r3, [sp, #28]
 8006e74:	f023 0320 	bic.w	r3, r3, #32
 8006e78:	2b41      	cmp	r3, #65	; 0x41
 8006e7a:	9308      	str	r3, [sp, #32]
 8006e7c:	d125      	bne.n	8006eca <_svfprintf_r+0x422>
 8006e7e:	2330      	movs	r3, #48	; 0x30
 8006e80:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8006e84:	9b07      	ldr	r3, [sp, #28]
 8006e86:	2b61      	cmp	r3, #97	; 0x61
 8006e88:	bf0c      	ite	eq
 8006e8a:	2378      	moveq	r3, #120	; 0x78
 8006e8c:	2358      	movne	r3, #88	; 0x58
 8006e8e:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8006e92:	9b04      	ldr	r3, [sp, #16]
 8006e94:	2b63      	cmp	r3, #99	; 0x63
 8006e96:	f048 0802 	orr.w	r8, r8, #2
 8006e9a:	dd31      	ble.n	8006f00 <_svfprintf_r+0x458>
 8006e9c:	1c59      	adds	r1, r3, #1
 8006e9e:	4650      	mov	r0, sl
 8006ea0:	f003 fc00 	bl	800a6a4 <_malloc_r>
 8006ea4:	4683      	mov	fp, r0
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	f040 81fe 	bne.w	80072a8 <_svfprintf_r+0x800>
 8006eac:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb4:	f8a9 300c 	strh.w	r3, [r9, #12]
 8006eb8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006ebc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ec0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ec2:	bf18      	it	ne
 8006ec4:	f04f 33ff 	movne.w	r3, #4294967295
 8006ec8:	e614      	b.n	8006af4 <_svfprintf_r+0x4c>
 8006eca:	9b04      	ldr	r3, [sp, #16]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	f000 81ed 	beq.w	80072ac <_svfprintf_r+0x804>
 8006ed2:	9b08      	ldr	r3, [sp, #32]
 8006ed4:	2b47      	cmp	r3, #71	; 0x47
 8006ed6:	f040 81ec 	bne.w	80072b2 <_svfprintf_r+0x80a>
 8006eda:	9b04      	ldr	r3, [sp, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f040 81e8 	bne.w	80072b2 <_svfprintf_r+0x80a>
 8006ee2:	9303      	str	r3, [sp, #12]
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	9304      	str	r3, [sp, #16]
 8006ee8:	e00d      	b.n	8006f06 <_svfprintf_r+0x45e>
 8006eea:	bf00      	nop
 8006eec:	7fefffff 	.word	0x7fefffff
 8006ef0:	0800ca40 	.word	0x0800ca40
 8006ef4:	0800ca44 	.word	0x0800ca44
 8006ef8:	0800ca48 	.word	0x0800ca48
 8006efc:	0800ca4c 	.word	0x0800ca4c
 8006f00:	9003      	str	r0, [sp, #12]
 8006f02:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 8006f06:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 8006f0a:	9311      	str	r3, [sp, #68]	; 0x44
 8006f0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f280 81d1 	bge.w	80072b6 <_svfprintf_r+0x80e>
 8006f14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f16:	ee08 3a10 	vmov	s16, r3
 8006f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f1c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006f20:	ee08 3a90 	vmov	s17, r3
 8006f24:	232d      	movs	r3, #45	; 0x2d
 8006f26:	9318      	str	r3, [sp, #96]	; 0x60
 8006f28:	9b08      	ldr	r3, [sp, #32]
 8006f2a:	2b41      	cmp	r3, #65	; 0x41
 8006f2c:	f040 81e1 	bne.w	80072f2 <_svfprintf_r+0x84a>
 8006f30:	eeb0 0a48 	vmov.f32	s0, s16
 8006f34:	eef0 0a68 	vmov.f32	s1, s17
 8006f38:	a81c      	add	r0, sp, #112	; 0x70
 8006f3a:	f004 f93f 	bl	800b1bc <frexp>
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006f44:	ec51 0b10 	vmov	r0, r1, d0
 8006f48:	f7f9 fb56 	bl	80005f8 <__aeabi_dmul>
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2300      	movs	r3, #0
 8006f50:	4606      	mov	r6, r0
 8006f52:	460f      	mov	r7, r1
 8006f54:	f7f9 fdb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f58:	b108      	cbz	r0, 8006f5e <_svfprintf_r+0x4b6>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	931c      	str	r3, [sp, #112]	; 0x70
 8006f5e:	4bb4      	ldr	r3, [pc, #720]	; (8007230 <_svfprintf_r+0x788>)
 8006f60:	4ab4      	ldr	r2, [pc, #720]	; (8007234 <_svfprintf_r+0x78c>)
 8006f62:	9907      	ldr	r1, [sp, #28]
 8006f64:	2961      	cmp	r1, #97	; 0x61
 8006f66:	bf18      	it	ne
 8006f68:	461a      	movne	r2, r3
 8006f6a:	9b04      	ldr	r3, [sp, #16]
 8006f6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	9305      	str	r3, [sp, #20]
 8006f72:	465d      	mov	r5, fp
 8006f74:	4bb0      	ldr	r3, [pc, #704]	; (8007238 <_svfprintf_r+0x790>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	4630      	mov	r0, r6
 8006f7a:	4639      	mov	r1, r7
 8006f7c:	f7f9 fb3c 	bl	80005f8 <__aeabi_dmul>
 8006f80:	460f      	mov	r7, r1
 8006f82:	4606      	mov	r6, r0
 8006f84:	f7f9 fde8 	bl	8000b58 <__aeabi_d2iz>
 8006f88:	9019      	str	r0, [sp, #100]	; 0x64
 8006f8a:	f7f9 facb 	bl	8000524 <__aeabi_i2d>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4630      	mov	r0, r6
 8006f94:	4639      	mov	r1, r7
 8006f96:	f7f9 f977 	bl	8000288 <__aeabi_dsub>
 8006f9a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f9e:	5c9b      	ldrb	r3, [r3, r2]
 8006fa0:	f805 3b01 	strb.w	r3, [r5], #1
 8006fa4:	9b05      	ldr	r3, [sp, #20]
 8006fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	4606      	mov	r6, r0
 8006fac:	460f      	mov	r7, r1
 8006fae:	d007      	beq.n	8006fc0 <_svfprintf_r+0x518>
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	9305      	str	r3, [sp, #20]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f7f9 fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	d0d9      	beq.n	8006f74 <_svfprintf_r+0x4cc>
 8006fc0:	4b9e      	ldr	r3, [pc, #632]	; (800723c <_svfprintf_r+0x794>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	f7f9 fda6 	bl	8000b18 <__aeabi_dcmpgt>
 8006fcc:	b960      	cbnz	r0, 8006fe8 <_svfprintf_r+0x540>
 8006fce:	4b9b      	ldr	r3, [pc, #620]	; (800723c <_svfprintf_r+0x794>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	4639      	mov	r1, r7
 8006fd6:	f7f9 fd77 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	f000 8184 	beq.w	80072e8 <_svfprintf_r+0x840>
 8006fe0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fe2:	07df      	lsls	r7, r3, #31
 8006fe4:	f140 8180 	bpl.w	80072e8 <_svfprintf_r+0x840>
 8006fe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fea:	9520      	str	r5, [sp, #128]	; 0x80
 8006fec:	7bd9      	ldrb	r1, [r3, #15]
 8006fee:	2030      	movs	r0, #48	; 0x30
 8006ff0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ff2:	1e53      	subs	r3, r2, #1
 8006ff4:	9320      	str	r3, [sp, #128]	; 0x80
 8006ff6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8006ffa:	428b      	cmp	r3, r1
 8006ffc:	f000 8163 	beq.w	80072c6 <_svfprintf_r+0x81e>
 8007000:	2b39      	cmp	r3, #57	; 0x39
 8007002:	bf0b      	itete	eq
 8007004:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8007006:	3301      	addne	r3, #1
 8007008:	7a9b      	ldrbeq	r3, [r3, #10]
 800700a:	b2db      	uxtbne	r3, r3
 800700c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007010:	eba5 030b 	sub.w	r3, r5, fp
 8007014:	9305      	str	r3, [sp, #20]
 8007016:	9b08      	ldr	r3, [sp, #32]
 8007018:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800701a:	2b47      	cmp	r3, #71	; 0x47
 800701c:	f040 81b1 	bne.w	8007382 <_svfprintf_r+0x8da>
 8007020:	1cee      	adds	r6, r5, #3
 8007022:	db03      	blt.n	800702c <_svfprintf_r+0x584>
 8007024:	9b04      	ldr	r3, [sp, #16]
 8007026:	42ab      	cmp	r3, r5
 8007028:	f280 81d6 	bge.w	80073d8 <_svfprintf_r+0x930>
 800702c:	9b07      	ldr	r3, [sp, #28]
 800702e:	3b02      	subs	r3, #2
 8007030:	9307      	str	r3, [sp, #28]
 8007032:	9907      	ldr	r1, [sp, #28]
 8007034:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8007038:	f021 0120 	bic.w	r1, r1, #32
 800703c:	2941      	cmp	r1, #65	; 0x41
 800703e:	bf08      	it	eq
 8007040:	320f      	addeq	r2, #15
 8007042:	f105 33ff 	add.w	r3, r5, #4294967295
 8007046:	bf06      	itte	eq
 8007048:	b2d2      	uxtbeq	r2, r2
 800704a:	2101      	moveq	r1, #1
 800704c:	2100      	movne	r1, #0
 800704e:	2b00      	cmp	r3, #0
 8007050:	931c      	str	r3, [sp, #112]	; 0x70
 8007052:	bfb8      	it	lt
 8007054:	f1c5 0301 	rsblt	r3, r5, #1
 8007058:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800705c:	bfb4      	ite	lt
 800705e:	222d      	movlt	r2, #45	; 0x2d
 8007060:	222b      	movge	r2, #43	; 0x2b
 8007062:	2b09      	cmp	r3, #9
 8007064:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8007068:	f340 81a4 	ble.w	80073b4 <_svfprintf_r+0x90c>
 800706c:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8007070:	260a      	movs	r6, #10
 8007072:	4611      	mov	r1, r2
 8007074:	fb93 f5f6 	sdiv	r5, r3, r6
 8007078:	fb06 3015 	mls	r0, r6, r5, r3
 800707c:	3030      	adds	r0, #48	; 0x30
 800707e:	f801 0c01 	strb.w	r0, [r1, #-1]
 8007082:	4618      	mov	r0, r3
 8007084:	2863      	cmp	r0, #99	; 0x63
 8007086:	f102 32ff 	add.w	r2, r2, #4294967295
 800708a:	462b      	mov	r3, r5
 800708c:	dcf1      	bgt.n	8007072 <_svfprintf_r+0x5ca>
 800708e:	3330      	adds	r3, #48	; 0x30
 8007090:	1e88      	subs	r0, r1, #2
 8007092:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007096:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 800709a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800709e:	4603      	mov	r3, r0
 80070a0:	42ab      	cmp	r3, r5
 80070a2:	f0c0 8182 	bcc.w	80073aa <_svfprintf_r+0x902>
 80070a6:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 80070aa:	1a52      	subs	r2, r2, r1
 80070ac:	42a8      	cmp	r0, r5
 80070ae:	bf88      	it	hi
 80070b0:	2200      	movhi	r2, #0
 80070b2:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 80070b6:	441a      	add	r2, r3
 80070b8:	ab1e      	add	r3, sp, #120	; 0x78
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	9a05      	ldr	r2, [sp, #20]
 80070be:	9315      	str	r3, [sp, #84]	; 0x54
 80070c0:	2a01      	cmp	r2, #1
 80070c2:	4413      	add	r3, r2
 80070c4:	9304      	str	r3, [sp, #16]
 80070c6:	dc02      	bgt.n	80070ce <_svfprintf_r+0x626>
 80070c8:	f018 0f01 	tst.w	r8, #1
 80070cc:	d003      	beq.n	80070d6 <_svfprintf_r+0x62e>
 80070ce:	9b04      	ldr	r3, [sp, #16]
 80070d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070d2:	4413      	add	r3, r2
 80070d4:	9304      	str	r3, [sp, #16]
 80070d6:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 80070da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070de:	9311      	str	r3, [sp, #68]	; 0x44
 80070e0:	2300      	movs	r3, #0
 80070e2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80070e6:	461d      	mov	r5, r3
 80070e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80070ea:	b113      	cbz	r3, 80070f2 <_svfprintf_r+0x64a>
 80070ec:	232d      	movs	r3, #45	; 0x2d
 80070ee:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80070f2:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 80070f6:	2600      	movs	r6, #0
 80070f8:	9b04      	ldr	r3, [sp, #16]
 80070fa:	42b3      	cmp	r3, r6
 80070fc:	bfb8      	it	lt
 80070fe:	4633      	movlt	r3, r6
 8007100:	9311      	str	r3, [sp, #68]	; 0x44
 8007102:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8007106:	b113      	cbz	r3, 800710e <_svfprintf_r+0x666>
 8007108:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800710a:	3301      	adds	r3, #1
 800710c:	9311      	str	r3, [sp, #68]	; 0x44
 800710e:	f018 0302 	ands.w	r3, r8, #2
 8007112:	9317      	str	r3, [sp, #92]	; 0x5c
 8007114:	bf1e      	ittt	ne
 8007116:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8007118:	3302      	addne	r3, #2
 800711a:	9311      	strne	r3, [sp, #68]	; 0x44
 800711c:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8007120:	9318      	str	r3, [sp, #96]	; 0x60
 8007122:	d11f      	bne.n	8007164 <_svfprintf_r+0x6bc>
 8007124:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8007128:	1a9f      	subs	r7, r3, r2
 800712a:	2f00      	cmp	r7, #0
 800712c:	dd1a      	ble.n	8007164 <_svfprintf_r+0x6bc>
 800712e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007132:	4843      	ldr	r0, [pc, #268]	; (8007240 <_svfprintf_r+0x798>)
 8007134:	6020      	str	r0, [r4, #0]
 8007136:	2f10      	cmp	r7, #16
 8007138:	f103 0301 	add.w	r3, r3, #1
 800713c:	f104 0108 	add.w	r1, r4, #8
 8007140:	f300 82e6 	bgt.w	8007710 <_svfprintf_r+0xc68>
 8007144:	6067      	str	r7, [r4, #4]
 8007146:	2b07      	cmp	r3, #7
 8007148:	4417      	add	r7, r2
 800714a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800714e:	f340 82f2 	ble.w	8007736 <_svfprintf_r+0xc8e>
 8007152:	aa22      	add	r2, sp, #136	; 0x88
 8007154:	4649      	mov	r1, r9
 8007156:	4650      	mov	r0, sl
 8007158:	f004 f8ce 	bl	800b2f8 <__ssprint_r>
 800715c:	2800      	cmp	r0, #0
 800715e:	f040 861d 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 8007162:	ac25      	add	r4, sp, #148	; 0x94
 8007164:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8007168:	b173      	cbz	r3, 8007188 <_svfprintf_r+0x6e0>
 800716a:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 800716e:	6023      	str	r3, [r4, #0]
 8007170:	2301      	movs	r3, #1
 8007172:	6063      	str	r3, [r4, #4]
 8007174:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007176:	3301      	adds	r3, #1
 8007178:	9324      	str	r3, [sp, #144]	; 0x90
 800717a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800717c:	3301      	adds	r3, #1
 800717e:	2b07      	cmp	r3, #7
 8007180:	9323      	str	r3, [sp, #140]	; 0x8c
 8007182:	f300 82da 	bgt.w	800773a <_svfprintf_r+0xc92>
 8007186:	3408      	adds	r4, #8
 8007188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800718a:	b16b      	cbz	r3, 80071a8 <_svfprintf_r+0x700>
 800718c:	ab1b      	add	r3, sp, #108	; 0x6c
 800718e:	6023      	str	r3, [r4, #0]
 8007190:	2302      	movs	r3, #2
 8007192:	6063      	str	r3, [r4, #4]
 8007194:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007196:	3302      	adds	r3, #2
 8007198:	9324      	str	r3, [sp, #144]	; 0x90
 800719a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800719c:	3301      	adds	r3, #1
 800719e:	2b07      	cmp	r3, #7
 80071a0:	9323      	str	r3, [sp, #140]	; 0x8c
 80071a2:	f300 82d4 	bgt.w	800774e <_svfprintf_r+0xca6>
 80071a6:	3408      	adds	r4, #8
 80071a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80071aa:	2b80      	cmp	r3, #128	; 0x80
 80071ac:	d11f      	bne.n	80071ee <_svfprintf_r+0x746>
 80071ae:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80071b2:	1a9f      	subs	r7, r3, r2
 80071b4:	2f00      	cmp	r7, #0
 80071b6:	dd1a      	ble.n	80071ee <_svfprintf_r+0x746>
 80071b8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80071bc:	4821      	ldr	r0, [pc, #132]	; (8007244 <_svfprintf_r+0x79c>)
 80071be:	6020      	str	r0, [r4, #0]
 80071c0:	2f10      	cmp	r7, #16
 80071c2:	f103 0301 	add.w	r3, r3, #1
 80071c6:	f104 0108 	add.w	r1, r4, #8
 80071ca:	f300 82ca 	bgt.w	8007762 <_svfprintf_r+0xcba>
 80071ce:	6067      	str	r7, [r4, #4]
 80071d0:	2b07      	cmp	r3, #7
 80071d2:	4417      	add	r7, r2
 80071d4:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80071d8:	f340 82d6 	ble.w	8007788 <_svfprintf_r+0xce0>
 80071dc:	aa22      	add	r2, sp, #136	; 0x88
 80071de:	4649      	mov	r1, r9
 80071e0:	4650      	mov	r0, sl
 80071e2:	f004 f889 	bl	800b2f8 <__ssprint_r>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	f040 85d8 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 80071ec:	ac25      	add	r4, sp, #148	; 0x94
 80071ee:	9b04      	ldr	r3, [sp, #16]
 80071f0:	1af6      	subs	r6, r6, r3
 80071f2:	2e00      	cmp	r6, #0
 80071f4:	dd28      	ble.n	8007248 <_svfprintf_r+0x7a0>
 80071f6:	4f13      	ldr	r7, [pc, #76]	; (8007244 <_svfprintf_r+0x79c>)
 80071f8:	6027      	str	r7, [r4, #0]
 80071fa:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80071fe:	2e10      	cmp	r6, #16
 8007200:	f103 0301 	add.w	r3, r3, #1
 8007204:	f104 0108 	add.w	r1, r4, #8
 8007208:	f300 82c0 	bgt.w	800778c <_svfprintf_r+0xce4>
 800720c:	6066      	str	r6, [r4, #4]
 800720e:	2b07      	cmp	r3, #7
 8007210:	4416      	add	r6, r2
 8007212:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8007216:	f340 82cc 	ble.w	80077b2 <_svfprintf_r+0xd0a>
 800721a:	aa22      	add	r2, sp, #136	; 0x88
 800721c:	4649      	mov	r1, r9
 800721e:	4650      	mov	r0, sl
 8007220:	f004 f86a 	bl	800b2f8 <__ssprint_r>
 8007224:	2800      	cmp	r0, #0
 8007226:	f040 85b9 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 800722a:	ac25      	add	r4, sp, #148	; 0x94
 800722c:	e00c      	b.n	8007248 <_svfprintf_r+0x7a0>
 800722e:	bf00      	nop
 8007230:	0800ca61 	.word	0x0800ca61
 8007234:	0800ca50 	.word	0x0800ca50
 8007238:	40300000 	.word	0x40300000
 800723c:	3fe00000 	.word	0x3fe00000
 8007240:	0800ca74 	.word	0x0800ca74
 8007244:	0800ca84 	.word	0x0800ca84
 8007248:	f418 7f80 	tst.w	r8, #256	; 0x100
 800724c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800724e:	f040 82b7 	bne.w	80077c0 <_svfprintf_r+0xd18>
 8007252:	9b04      	ldr	r3, [sp, #16]
 8007254:	f8c4 b000 	str.w	fp, [r4]
 8007258:	441e      	add	r6, r3
 800725a:	6063      	str	r3, [r4, #4]
 800725c:	9624      	str	r6, [sp, #144]	; 0x90
 800725e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007260:	3301      	adds	r3, #1
 8007262:	2b07      	cmp	r3, #7
 8007264:	9323      	str	r3, [sp, #140]	; 0x8c
 8007266:	f300 82f0 	bgt.w	800784a <_svfprintf_r+0xda2>
 800726a:	3408      	adds	r4, #8
 800726c:	f018 0f04 	tst.w	r8, #4
 8007270:	f040 8576 	bne.w	8007d60 <_svfprintf_r+0x12b8>
 8007274:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8007278:	9911      	ldr	r1, [sp, #68]	; 0x44
 800727a:	428a      	cmp	r2, r1
 800727c:	bfac      	ite	ge
 800727e:	189b      	addge	r3, r3, r2
 8007280:	185b      	addlt	r3, r3, r1
 8007282:	930f      	str	r3, [sp, #60]	; 0x3c
 8007284:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007286:	b13b      	cbz	r3, 8007298 <_svfprintf_r+0x7f0>
 8007288:	aa22      	add	r2, sp, #136	; 0x88
 800728a:	4649      	mov	r1, r9
 800728c:	4650      	mov	r0, sl
 800728e:	f004 f833 	bl	800b2f8 <__ssprint_r>
 8007292:	2800      	cmp	r0, #0
 8007294:	f040 8582 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 8007298:	2300      	movs	r3, #0
 800729a:	9323      	str	r3, [sp, #140]	; 0x8c
 800729c:	9b03      	ldr	r3, [sp, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f040 8598 	bne.w	8007dd4 <_svfprintf_r+0x132c>
 80072a4:	ac25      	add	r4, sp, #148	; 0x94
 80072a6:	e0ed      	b.n	8007484 <_svfprintf_r+0x9dc>
 80072a8:	9003      	str	r0, [sp, #12]
 80072aa:	e62c      	b.n	8006f06 <_svfprintf_r+0x45e>
 80072ac:	9003      	str	r0, [sp, #12]
 80072ae:	2306      	movs	r3, #6
 80072b0:	e619      	b.n	8006ee6 <_svfprintf_r+0x43e>
 80072b2:	9003      	str	r0, [sp, #12]
 80072b4:	e627      	b.n	8006f06 <_svfprintf_r+0x45e>
 80072b6:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 80072ba:	2300      	movs	r3, #0
 80072bc:	eeb0 8a47 	vmov.f32	s16, s14
 80072c0:	eef0 8a67 	vmov.f32	s17, s15
 80072c4:	e62f      	b.n	8006f26 <_svfprintf_r+0x47e>
 80072c6:	f802 0c01 	strb.w	r0, [r2, #-1]
 80072ca:	e691      	b.n	8006ff0 <_svfprintf_r+0x548>
 80072cc:	f803 0b01 	strb.w	r0, [r3], #1
 80072d0:	1aca      	subs	r2, r1, r3
 80072d2:	2a00      	cmp	r2, #0
 80072d4:	dafa      	bge.n	80072cc <_svfprintf_r+0x824>
 80072d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072da:	3201      	adds	r2, #1
 80072dc:	f103 0301 	add.w	r3, r3, #1
 80072e0:	bfb8      	it	lt
 80072e2:	2300      	movlt	r3, #0
 80072e4:	441d      	add	r5, r3
 80072e6:	e693      	b.n	8007010 <_svfprintf_r+0x568>
 80072e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072ea:	462b      	mov	r3, r5
 80072ec:	18a9      	adds	r1, r5, r2
 80072ee:	2030      	movs	r0, #48	; 0x30
 80072f0:	e7ee      	b.n	80072d0 <_svfprintf_r+0x828>
 80072f2:	9b08      	ldr	r3, [sp, #32]
 80072f4:	2b46      	cmp	r3, #70	; 0x46
 80072f6:	d005      	beq.n	8007304 <_svfprintf_r+0x85c>
 80072f8:	2b45      	cmp	r3, #69	; 0x45
 80072fa:	d11b      	bne.n	8007334 <_svfprintf_r+0x88c>
 80072fc:	9b04      	ldr	r3, [sp, #16]
 80072fe:	1c5d      	adds	r5, r3, #1
 8007300:	2102      	movs	r1, #2
 8007302:	e001      	b.n	8007308 <_svfprintf_r+0x860>
 8007304:	9d04      	ldr	r5, [sp, #16]
 8007306:	2103      	movs	r1, #3
 8007308:	ab20      	add	r3, sp, #128	; 0x80
 800730a:	9301      	str	r3, [sp, #4]
 800730c:	ab1d      	add	r3, sp, #116	; 0x74
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	462a      	mov	r2, r5
 8007312:	ab1c      	add	r3, sp, #112	; 0x70
 8007314:	4650      	mov	r0, sl
 8007316:	eeb0 0a48 	vmov.f32	s0, s16
 800731a:	eef0 0a68 	vmov.f32	s1, s17
 800731e:	f002 f90f 	bl	8009540 <_dtoa_r>
 8007322:	9b08      	ldr	r3, [sp, #32]
 8007324:	2b47      	cmp	r3, #71	; 0x47
 8007326:	4683      	mov	fp, r0
 8007328:	d106      	bne.n	8007338 <_svfprintf_r+0x890>
 800732a:	f018 0f01 	tst.w	r8, #1
 800732e:	d103      	bne.n	8007338 <_svfprintf_r+0x890>
 8007330:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8007332:	e66d      	b.n	8007010 <_svfprintf_r+0x568>
 8007334:	9d04      	ldr	r5, [sp, #16]
 8007336:	e7e3      	b.n	8007300 <_svfprintf_r+0x858>
 8007338:	9b08      	ldr	r3, [sp, #32]
 800733a:	2b46      	cmp	r3, #70	; 0x46
 800733c:	eb0b 0605 	add.w	r6, fp, r5
 8007340:	d10f      	bne.n	8007362 <_svfprintf_r+0x8ba>
 8007342:	f89b 3000 	ldrb.w	r3, [fp]
 8007346:	2b30      	cmp	r3, #48	; 0x30
 8007348:	d109      	bne.n	800735e <_svfprintf_r+0x8b6>
 800734a:	ec51 0b18 	vmov	r0, r1, d8
 800734e:	2200      	movs	r2, #0
 8007350:	2300      	movs	r3, #0
 8007352:	f7f9 fbb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007356:	b910      	cbnz	r0, 800735e <_svfprintf_r+0x8b6>
 8007358:	f1c5 0501 	rsb	r5, r5, #1
 800735c:	951c      	str	r5, [sp, #112]	; 0x70
 800735e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007360:	441e      	add	r6, r3
 8007362:	ec51 0b18 	vmov	r0, r1, d8
 8007366:	2200      	movs	r2, #0
 8007368:	2300      	movs	r3, #0
 800736a:	f7f9 fbad 	bl	8000ac8 <__aeabi_dcmpeq>
 800736e:	b100      	cbz	r0, 8007372 <_svfprintf_r+0x8ca>
 8007370:	9620      	str	r6, [sp, #128]	; 0x80
 8007372:	2230      	movs	r2, #48	; 0x30
 8007374:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007376:	429e      	cmp	r6, r3
 8007378:	d9da      	bls.n	8007330 <_svfprintf_r+0x888>
 800737a:	1c59      	adds	r1, r3, #1
 800737c:	9120      	str	r1, [sp, #128]	; 0x80
 800737e:	701a      	strb	r2, [r3, #0]
 8007380:	e7f8      	b.n	8007374 <_svfprintf_r+0x8cc>
 8007382:	9b08      	ldr	r3, [sp, #32]
 8007384:	2b46      	cmp	r3, #70	; 0x46
 8007386:	f47f ae54 	bne.w	8007032 <_svfprintf_r+0x58a>
 800738a:	9a04      	ldr	r2, [sp, #16]
 800738c:	f008 0301 	and.w	r3, r8, #1
 8007390:	2d00      	cmp	r5, #0
 8007392:	ea43 0302 	orr.w	r3, r3, r2
 8007396:	dd1a      	ble.n	80073ce <_svfprintf_r+0x926>
 8007398:	2b00      	cmp	r3, #0
 800739a:	d034      	beq.n	8007406 <_svfprintf_r+0x95e>
 800739c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800739e:	18eb      	adds	r3, r5, r3
 80073a0:	441a      	add	r2, r3
 80073a2:	9204      	str	r2, [sp, #16]
 80073a4:	2366      	movs	r3, #102	; 0x66
 80073a6:	9307      	str	r3, [sp, #28]
 80073a8:	e033      	b.n	8007412 <_svfprintf_r+0x96a>
 80073aa:	f813 6b01 	ldrb.w	r6, [r3], #1
 80073ae:	f802 6b01 	strb.w	r6, [r2], #1
 80073b2:	e675      	b.n	80070a0 <_svfprintf_r+0x5f8>
 80073b4:	b941      	cbnz	r1, 80073c8 <_svfprintf_r+0x920>
 80073b6:	2230      	movs	r2, #48	; 0x30
 80073b8:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 80073bc:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80073c0:	3330      	adds	r3, #48	; 0x30
 80073c2:	f802 3b01 	strb.w	r3, [r2], #1
 80073c6:	e677      	b.n	80070b8 <_svfprintf_r+0x610>
 80073c8:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80073cc:	e7f8      	b.n	80073c0 <_svfprintf_r+0x918>
 80073ce:	b1e3      	cbz	r3, 800740a <_svfprintf_r+0x962>
 80073d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073d2:	9a04      	ldr	r2, [sp, #16]
 80073d4:	3301      	adds	r3, #1
 80073d6:	e7e3      	b.n	80073a0 <_svfprintf_r+0x8f8>
 80073d8:	9b05      	ldr	r3, [sp, #20]
 80073da:	429d      	cmp	r5, r3
 80073dc:	db07      	blt.n	80073ee <_svfprintf_r+0x946>
 80073de:	f018 0f01 	tst.w	r8, #1
 80073e2:	d02d      	beq.n	8007440 <_svfprintf_r+0x998>
 80073e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073e6:	18eb      	adds	r3, r5, r3
 80073e8:	9304      	str	r3, [sp, #16]
 80073ea:	2367      	movs	r3, #103	; 0x67
 80073ec:	e7db      	b.n	80073a6 <_svfprintf_r+0x8fe>
 80073ee:	9b05      	ldr	r3, [sp, #20]
 80073f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073f2:	2d00      	cmp	r5, #0
 80073f4:	4413      	add	r3, r2
 80073f6:	9304      	str	r3, [sp, #16]
 80073f8:	dcf7      	bgt.n	80073ea <_svfprintf_r+0x942>
 80073fa:	9a04      	ldr	r2, [sp, #16]
 80073fc:	f1c5 0301 	rsb	r3, r5, #1
 8007400:	441a      	add	r2, r3
 8007402:	4613      	mov	r3, r2
 8007404:	e7f0      	b.n	80073e8 <_svfprintf_r+0x940>
 8007406:	9504      	str	r5, [sp, #16]
 8007408:	e7cc      	b.n	80073a4 <_svfprintf_r+0x8fc>
 800740a:	2366      	movs	r3, #102	; 0x66
 800740c:	9307      	str	r3, [sp, #28]
 800740e:	2301      	movs	r3, #1
 8007410:	9304      	str	r3, [sp, #16]
 8007412:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 8007416:	9309      	str	r3, [sp, #36]	; 0x24
 8007418:	d025      	beq.n	8007466 <_svfprintf_r+0x9be>
 800741a:	2300      	movs	r3, #0
 800741c:	2d00      	cmp	r5, #0
 800741e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8007422:	f77f ae61 	ble.w	80070e8 <_svfprintf_r+0x640>
 8007426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2bff      	cmp	r3, #255	; 0xff
 800742c:	d10a      	bne.n	8007444 <_svfprintf_r+0x99c>
 800742e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007432:	9904      	ldr	r1, [sp, #16]
 8007434:	4413      	add	r3, r2
 8007436:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007438:	fb02 1303 	mla	r3, r2, r3, r1
 800743c:	9304      	str	r3, [sp, #16]
 800743e:	e653      	b.n	80070e8 <_svfprintf_r+0x640>
 8007440:	9504      	str	r5, [sp, #16]
 8007442:	e7d2      	b.n	80073ea <_svfprintf_r+0x942>
 8007444:	42ab      	cmp	r3, r5
 8007446:	daf2      	bge.n	800742e <_svfprintf_r+0x986>
 8007448:	1aed      	subs	r5, r5, r3
 800744a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800744c:	785b      	ldrb	r3, [r3, #1]
 800744e:	b133      	cbz	r3, 800745e <_svfprintf_r+0x9b6>
 8007450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007452:	3301      	adds	r3, #1
 8007454:	9309      	str	r3, [sp, #36]	; 0x24
 8007456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007458:	3301      	adds	r3, #1
 800745a:	930a      	str	r3, [sp, #40]	; 0x28
 800745c:	e7e3      	b.n	8007426 <_svfprintf_r+0x97e>
 800745e:	9b08      	ldr	r3, [sp, #32]
 8007460:	3301      	adds	r3, #1
 8007462:	9308      	str	r3, [sp, #32]
 8007464:	e7df      	b.n	8007426 <_svfprintf_r+0x97e>
 8007466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007468:	9308      	str	r3, [sp, #32]
 800746a:	e63d      	b.n	80070e8 <_svfprintf_r+0x640>
 800746c:	4632      	mov	r2, r6
 800746e:	f018 0f20 	tst.w	r8, #32
 8007472:	f852 3b04 	ldr.w	r3, [r2], #4
 8007476:	9206      	str	r2, [sp, #24]
 8007478:	d009      	beq.n	800748e <_svfprintf_r+0x9e6>
 800747a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800747c:	4610      	mov	r0, r2
 800747e:	17d1      	asrs	r1, r2, #31
 8007480:	e9c3 0100 	strd	r0, r1, [r3]
 8007484:	9e06      	ldr	r6, [sp, #24]
 8007486:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800748a:	f7ff bb4d 	b.w	8006b28 <_svfprintf_r+0x80>
 800748e:	f018 0f10 	tst.w	r8, #16
 8007492:	d002      	beq.n	800749a <_svfprintf_r+0x9f2>
 8007494:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	e7f4      	b.n	8007484 <_svfprintf_r+0x9dc>
 800749a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800749e:	d002      	beq.n	80074a6 <_svfprintf_r+0x9fe>
 80074a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074a2:	801a      	strh	r2, [r3, #0]
 80074a4:	e7ee      	b.n	8007484 <_svfprintf_r+0x9dc>
 80074a6:	f418 7f00 	tst.w	r8, #512	; 0x200
 80074aa:	d0f3      	beq.n	8007494 <_svfprintf_r+0x9ec>
 80074ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074ae:	701a      	strb	r2, [r3, #0]
 80074b0:	e7e8      	b.n	8007484 <_svfprintf_r+0x9dc>
 80074b2:	f048 0810 	orr.w	r8, r8, #16
 80074b6:	f018 0f20 	tst.w	r8, #32
 80074ba:	d01e      	beq.n	80074fa <_svfprintf_r+0xa52>
 80074bc:	3607      	adds	r6, #7
 80074be:	f026 0307 	bic.w	r3, r6, #7
 80074c2:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80074c6:	9306      	str	r3, [sp, #24]
 80074c8:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 80074cc:	2300      	movs	r3, #0
 80074ce:	2200      	movs	r2, #0
 80074d0:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 80074d4:	9a04      	ldr	r2, [sp, #16]
 80074d6:	3201      	adds	r2, #1
 80074d8:	f000 848d 	beq.w	8007df6 <_svfprintf_r+0x134e>
 80074dc:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 80074e0:	9203      	str	r2, [sp, #12]
 80074e2:	ea56 0207 	orrs.w	r2, r6, r7
 80074e6:	f040 848c 	bne.w	8007e02 <_svfprintf_r+0x135a>
 80074ea:	9a04      	ldr	r2, [sp, #16]
 80074ec:	2a00      	cmp	r2, #0
 80074ee:	f000 80f5 	beq.w	80076dc <_svfprintf_r+0xc34>
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	f040 8488 	bne.w	8007e08 <_svfprintf_r+0x1360>
 80074f8:	e097      	b.n	800762a <_svfprintf_r+0xb82>
 80074fa:	1d33      	adds	r3, r6, #4
 80074fc:	f018 0f10 	tst.w	r8, #16
 8007500:	9306      	str	r3, [sp, #24]
 8007502:	d001      	beq.n	8007508 <_svfprintf_r+0xa60>
 8007504:	6836      	ldr	r6, [r6, #0]
 8007506:	e003      	b.n	8007510 <_svfprintf_r+0xa68>
 8007508:	f018 0f40 	tst.w	r8, #64	; 0x40
 800750c:	d002      	beq.n	8007514 <_svfprintf_r+0xa6c>
 800750e:	8836      	ldrh	r6, [r6, #0]
 8007510:	2700      	movs	r7, #0
 8007512:	e7d9      	b.n	80074c8 <_svfprintf_r+0xa20>
 8007514:	f418 7f00 	tst.w	r8, #512	; 0x200
 8007518:	d0f4      	beq.n	8007504 <_svfprintf_r+0xa5c>
 800751a:	7836      	ldrb	r6, [r6, #0]
 800751c:	e7f8      	b.n	8007510 <_svfprintf_r+0xa68>
 800751e:	4633      	mov	r3, r6
 8007520:	2278      	movs	r2, #120	; 0x78
 8007522:	f853 6b04 	ldr.w	r6, [r3], #4
 8007526:	9306      	str	r3, [sp, #24]
 8007528:	f647 0330 	movw	r3, #30768	; 0x7830
 800752c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8007530:	4ba1      	ldr	r3, [pc, #644]	; (80077b8 <_svfprintf_r+0xd10>)
 8007532:	9316      	str	r3, [sp, #88]	; 0x58
 8007534:	2700      	movs	r7, #0
 8007536:	f048 0802 	orr.w	r8, r8, #2
 800753a:	2302      	movs	r3, #2
 800753c:	9207      	str	r2, [sp, #28]
 800753e:	e7c6      	b.n	80074ce <_svfprintf_r+0xa26>
 8007540:	4633      	mov	r3, r6
 8007542:	2500      	movs	r5, #0
 8007544:	f853 bb04 	ldr.w	fp, [r3], #4
 8007548:	9306      	str	r3, [sp, #24]
 800754a:	9b04      	ldr	r3, [sp, #16]
 800754c:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8007550:	1c59      	adds	r1, r3, #1
 8007552:	d010      	beq.n	8007576 <_svfprintf_r+0xace>
 8007554:	461a      	mov	r2, r3
 8007556:	4629      	mov	r1, r5
 8007558:	4658      	mov	r0, fp
 800755a:	f7f8 fe41 	bl	80001e0 <memchr>
 800755e:	9003      	str	r0, [sp, #12]
 8007560:	2800      	cmp	r0, #0
 8007562:	f000 80d2 	beq.w	800770a <_svfprintf_r+0xc62>
 8007566:	eba0 030b 	sub.w	r3, r0, fp
 800756a:	e9cd 5303 	strd	r5, r3, [sp, #12]
 800756e:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8007572:	462e      	mov	r6, r5
 8007574:	e5c0      	b.n	80070f8 <_svfprintf_r+0x650>
 8007576:	4658      	mov	r0, fp
 8007578:	f7f8 fe2a 	bl	80001d0 <strlen>
 800757c:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8007580:	e463      	b.n	8006e4a <_svfprintf_r+0x3a2>
 8007582:	f048 0810 	orr.w	r8, r8, #16
 8007586:	f018 0f20 	tst.w	r8, #32
 800758a:	d007      	beq.n	800759c <_svfprintf_r+0xaf4>
 800758c:	3607      	adds	r6, #7
 800758e:	f026 0307 	bic.w	r3, r6, #7
 8007592:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8007596:	9306      	str	r3, [sp, #24]
 8007598:	2301      	movs	r3, #1
 800759a:	e798      	b.n	80074ce <_svfprintf_r+0xa26>
 800759c:	1d33      	adds	r3, r6, #4
 800759e:	f018 0f10 	tst.w	r8, #16
 80075a2:	9306      	str	r3, [sp, #24]
 80075a4:	d001      	beq.n	80075aa <_svfprintf_r+0xb02>
 80075a6:	6836      	ldr	r6, [r6, #0]
 80075a8:	e003      	b.n	80075b2 <_svfprintf_r+0xb0a>
 80075aa:	f018 0f40 	tst.w	r8, #64	; 0x40
 80075ae:	d002      	beq.n	80075b6 <_svfprintf_r+0xb0e>
 80075b0:	8836      	ldrh	r6, [r6, #0]
 80075b2:	2700      	movs	r7, #0
 80075b4:	e7f0      	b.n	8007598 <_svfprintf_r+0xaf0>
 80075b6:	f418 7f00 	tst.w	r8, #512	; 0x200
 80075ba:	d0f4      	beq.n	80075a6 <_svfprintf_r+0xafe>
 80075bc:	7836      	ldrb	r6, [r6, #0]
 80075be:	e7f8      	b.n	80075b2 <_svfprintf_r+0xb0a>
 80075c0:	4b7e      	ldr	r3, [pc, #504]	; (80077bc <_svfprintf_r+0xd14>)
 80075c2:	9316      	str	r3, [sp, #88]	; 0x58
 80075c4:	f018 0f20 	tst.w	r8, #32
 80075c8:	d019      	beq.n	80075fe <_svfprintf_r+0xb56>
 80075ca:	3607      	adds	r6, #7
 80075cc:	f026 0307 	bic.w	r3, r6, #7
 80075d0:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80075d4:	9306      	str	r3, [sp, #24]
 80075d6:	f018 0f01 	tst.w	r8, #1
 80075da:	d00a      	beq.n	80075f2 <_svfprintf_r+0xb4a>
 80075dc:	ea56 0307 	orrs.w	r3, r6, r7
 80075e0:	d007      	beq.n	80075f2 <_svfprintf_r+0xb4a>
 80075e2:	2330      	movs	r3, #48	; 0x30
 80075e4:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80075e8:	9b07      	ldr	r3, [sp, #28]
 80075ea:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80075ee:	f048 0802 	orr.w	r8, r8, #2
 80075f2:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 80075f6:	2302      	movs	r3, #2
 80075f8:	e769      	b.n	80074ce <_svfprintf_r+0xa26>
 80075fa:	4b6f      	ldr	r3, [pc, #444]	; (80077b8 <_svfprintf_r+0xd10>)
 80075fc:	e7e1      	b.n	80075c2 <_svfprintf_r+0xb1a>
 80075fe:	1d33      	adds	r3, r6, #4
 8007600:	f018 0f10 	tst.w	r8, #16
 8007604:	9306      	str	r3, [sp, #24]
 8007606:	d001      	beq.n	800760c <_svfprintf_r+0xb64>
 8007608:	6836      	ldr	r6, [r6, #0]
 800760a:	e003      	b.n	8007614 <_svfprintf_r+0xb6c>
 800760c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8007610:	d002      	beq.n	8007618 <_svfprintf_r+0xb70>
 8007612:	8836      	ldrh	r6, [r6, #0]
 8007614:	2700      	movs	r7, #0
 8007616:	e7de      	b.n	80075d6 <_svfprintf_r+0xb2e>
 8007618:	f418 7f00 	tst.w	r8, #512	; 0x200
 800761c:	d0f4      	beq.n	8007608 <_svfprintf_r+0xb60>
 800761e:	7836      	ldrb	r6, [r6, #0]
 8007620:	e7f8      	b.n	8007614 <_svfprintf_r+0xb6c>
 8007622:	2f00      	cmp	r7, #0
 8007624:	bf08      	it	eq
 8007626:	2e0a      	cmpeq	r6, #10
 8007628:	d206      	bcs.n	8007638 <_svfprintf_r+0xb90>
 800762a:	3630      	adds	r6, #48	; 0x30
 800762c:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8007630:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 8007634:	f000 bc06 	b.w	8007e44 <_svfprintf_r+0x139c>
 8007638:	2300      	movs	r3, #0
 800763a:	9305      	str	r3, [sp, #20]
 800763c:	9b03      	ldr	r3, [sp, #12]
 800763e:	ad4e      	add	r5, sp, #312	; 0x138
 8007640:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 8007644:	220a      	movs	r2, #10
 8007646:	2300      	movs	r3, #0
 8007648:	4630      	mov	r0, r6
 800764a:	4639      	mov	r1, r7
 800764c:	f7f9 fafc 	bl	8000c48 <__aeabi_uldivmod>
 8007650:	9b05      	ldr	r3, [sp, #20]
 8007652:	3230      	adds	r2, #48	; 0x30
 8007654:	3301      	adds	r3, #1
 8007656:	f105 3bff 	add.w	fp, r5, #4294967295
 800765a:	f805 2c01 	strb.w	r2, [r5, #-1]
 800765e:	9305      	str	r3, [sp, #20]
 8007660:	f1b8 0f00 	cmp.w	r8, #0
 8007664:	d019      	beq.n	800769a <_svfprintf_r+0xbf2>
 8007666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007668:	9a05      	ldr	r2, [sp, #20]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	429a      	cmp	r2, r3
 800766e:	d114      	bne.n	800769a <_svfprintf_r+0xbf2>
 8007670:	2aff      	cmp	r2, #255	; 0xff
 8007672:	d012      	beq.n	800769a <_svfprintf_r+0xbf2>
 8007674:	2f00      	cmp	r7, #0
 8007676:	bf08      	it	eq
 8007678:	2e0a      	cmpeq	r6, #10
 800767a:	d30e      	bcc.n	800769a <_svfprintf_r+0xbf2>
 800767c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800767e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007680:	ebab 0b03 	sub.w	fp, fp, r3
 8007684:	461a      	mov	r2, r3
 8007686:	4658      	mov	r0, fp
 8007688:	f003 fe23 	bl	800b2d2 <strncpy>
 800768c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800768e:	785d      	ldrb	r5, [r3, #1]
 8007690:	b195      	cbz	r5, 80076b8 <_svfprintf_r+0xc10>
 8007692:	3301      	adds	r3, #1
 8007694:	930a      	str	r3, [sp, #40]	; 0x28
 8007696:	2300      	movs	r3, #0
 8007698:	9305      	str	r3, [sp, #20]
 800769a:	220a      	movs	r2, #10
 800769c:	2300      	movs	r3, #0
 800769e:	4630      	mov	r0, r6
 80076a0:	4639      	mov	r1, r7
 80076a2:	f7f9 fad1 	bl	8000c48 <__aeabi_uldivmod>
 80076a6:	2f00      	cmp	r7, #0
 80076a8:	bf08      	it	eq
 80076aa:	2e0a      	cmpeq	r6, #10
 80076ac:	f0c0 83ca 	bcc.w	8007e44 <_svfprintf_r+0x139c>
 80076b0:	4606      	mov	r6, r0
 80076b2:	460f      	mov	r7, r1
 80076b4:	465d      	mov	r5, fp
 80076b6:	e7c5      	b.n	8007644 <_svfprintf_r+0xb9c>
 80076b8:	9505      	str	r5, [sp, #20]
 80076ba:	e7ee      	b.n	800769a <_svfprintf_r+0xbf2>
 80076bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80076be:	f006 030f 	and.w	r3, r6, #15
 80076c2:	5cd3      	ldrb	r3, [r2, r3]
 80076c4:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80076c8:	0933      	lsrs	r3, r6, #4
 80076ca:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80076ce:	093a      	lsrs	r2, r7, #4
 80076d0:	461e      	mov	r6, r3
 80076d2:	4617      	mov	r7, r2
 80076d4:	ea56 0307 	orrs.w	r3, r6, r7
 80076d8:	d1f0      	bne.n	80076bc <_svfprintf_r+0xc14>
 80076da:	e3b3      	b.n	8007e44 <_svfprintf_r+0x139c>
 80076dc:	b933      	cbnz	r3, 80076ec <_svfprintf_r+0xc44>
 80076de:	f018 0f01 	tst.w	r8, #1
 80076e2:	d003      	beq.n	80076ec <_svfprintf_r+0xc44>
 80076e4:	2330      	movs	r3, #48	; 0x30
 80076e6:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 80076ea:	e7a1      	b.n	8007630 <_svfprintf_r+0xb88>
 80076ec:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 80076f0:	e3a8      	b.n	8007e44 <_svfprintf_r+0x139c>
 80076f2:	9b07      	ldr	r3, [sp, #28]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 8373 	beq.w	8007de0 <_svfprintf_r+0x1338>
 80076fa:	2000      	movs	r0, #0
 80076fc:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8007700:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8007704:	9606      	str	r6, [sp, #24]
 8007706:	f7ff bb34 	b.w	8006d72 <_svfprintf_r+0x2ca>
 800770a:	9e03      	ldr	r6, [sp, #12]
 800770c:	f7ff bb9e 	b.w	8006e4c <_svfprintf_r+0x3a4>
 8007710:	2010      	movs	r0, #16
 8007712:	4402      	add	r2, r0
 8007714:	2b07      	cmp	r3, #7
 8007716:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800771a:	6060      	str	r0, [r4, #4]
 800771c:	dd08      	ble.n	8007730 <_svfprintf_r+0xc88>
 800771e:	aa22      	add	r2, sp, #136	; 0x88
 8007720:	4649      	mov	r1, r9
 8007722:	4650      	mov	r0, sl
 8007724:	f003 fde8 	bl	800b2f8 <__ssprint_r>
 8007728:	2800      	cmp	r0, #0
 800772a:	f040 8337 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 800772e:	a925      	add	r1, sp, #148	; 0x94
 8007730:	3f10      	subs	r7, #16
 8007732:	460c      	mov	r4, r1
 8007734:	e4fb      	b.n	800712e <_svfprintf_r+0x686>
 8007736:	460c      	mov	r4, r1
 8007738:	e514      	b.n	8007164 <_svfprintf_r+0x6bc>
 800773a:	aa22      	add	r2, sp, #136	; 0x88
 800773c:	4649      	mov	r1, r9
 800773e:	4650      	mov	r0, sl
 8007740:	f003 fdda 	bl	800b2f8 <__ssprint_r>
 8007744:	2800      	cmp	r0, #0
 8007746:	f040 8329 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 800774a:	ac25      	add	r4, sp, #148	; 0x94
 800774c:	e51c      	b.n	8007188 <_svfprintf_r+0x6e0>
 800774e:	aa22      	add	r2, sp, #136	; 0x88
 8007750:	4649      	mov	r1, r9
 8007752:	4650      	mov	r0, sl
 8007754:	f003 fdd0 	bl	800b2f8 <__ssprint_r>
 8007758:	2800      	cmp	r0, #0
 800775a:	f040 831f 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 800775e:	ac25      	add	r4, sp, #148	; 0x94
 8007760:	e522      	b.n	80071a8 <_svfprintf_r+0x700>
 8007762:	2010      	movs	r0, #16
 8007764:	4402      	add	r2, r0
 8007766:	2b07      	cmp	r3, #7
 8007768:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800776c:	6060      	str	r0, [r4, #4]
 800776e:	dd08      	ble.n	8007782 <_svfprintf_r+0xcda>
 8007770:	aa22      	add	r2, sp, #136	; 0x88
 8007772:	4649      	mov	r1, r9
 8007774:	4650      	mov	r0, sl
 8007776:	f003 fdbf 	bl	800b2f8 <__ssprint_r>
 800777a:	2800      	cmp	r0, #0
 800777c:	f040 830e 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 8007780:	a925      	add	r1, sp, #148	; 0x94
 8007782:	3f10      	subs	r7, #16
 8007784:	460c      	mov	r4, r1
 8007786:	e517      	b.n	80071b8 <_svfprintf_r+0x710>
 8007788:	460c      	mov	r4, r1
 800778a:	e530      	b.n	80071ee <_svfprintf_r+0x746>
 800778c:	2010      	movs	r0, #16
 800778e:	4402      	add	r2, r0
 8007790:	2b07      	cmp	r3, #7
 8007792:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007796:	6060      	str	r0, [r4, #4]
 8007798:	dd08      	ble.n	80077ac <_svfprintf_r+0xd04>
 800779a:	aa22      	add	r2, sp, #136	; 0x88
 800779c:	4649      	mov	r1, r9
 800779e:	4650      	mov	r0, sl
 80077a0:	f003 fdaa 	bl	800b2f8 <__ssprint_r>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	f040 82f9 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 80077aa:	a925      	add	r1, sp, #148	; 0x94
 80077ac:	3e10      	subs	r6, #16
 80077ae:	460c      	mov	r4, r1
 80077b0:	e522      	b.n	80071f8 <_svfprintf_r+0x750>
 80077b2:	460c      	mov	r4, r1
 80077b4:	e548      	b.n	8007248 <_svfprintf_r+0x7a0>
 80077b6:	bf00      	nop
 80077b8:	0800ca50 	.word	0x0800ca50
 80077bc:	0800ca61 	.word	0x0800ca61
 80077c0:	9b07      	ldr	r3, [sp, #28]
 80077c2:	2b65      	cmp	r3, #101	; 0x65
 80077c4:	f340 8232 	ble.w	8007c2c <_svfprintf_r+0x1184>
 80077c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077cc:	2200      	movs	r2, #0
 80077ce:	2300      	movs	r3, #0
 80077d0:	f7f9 f97a 	bl	8000ac8 <__aeabi_dcmpeq>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d068      	beq.n	80078aa <_svfprintf_r+0xe02>
 80077d8:	4b6d      	ldr	r3, [pc, #436]	; (8007990 <_svfprintf_r+0xee8>)
 80077da:	6023      	str	r3, [r4, #0]
 80077dc:	2301      	movs	r3, #1
 80077de:	441e      	add	r6, r3
 80077e0:	6063      	str	r3, [r4, #4]
 80077e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077e4:	9624      	str	r6, [sp, #144]	; 0x90
 80077e6:	3301      	adds	r3, #1
 80077e8:	2b07      	cmp	r3, #7
 80077ea:	9323      	str	r3, [sp, #140]	; 0x8c
 80077ec:	dc37      	bgt.n	800785e <_svfprintf_r+0xdb6>
 80077ee:	3408      	adds	r4, #8
 80077f0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80077f2:	9a05      	ldr	r2, [sp, #20]
 80077f4:	4293      	cmp	r3, r2
 80077f6:	db03      	blt.n	8007800 <_svfprintf_r+0xd58>
 80077f8:	f018 0f01 	tst.w	r8, #1
 80077fc:	f43f ad36 	beq.w	800726c <_svfprintf_r+0x7c4>
 8007800:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007802:	6023      	str	r3, [r4, #0]
 8007804:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007806:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007808:	6063      	str	r3, [r4, #4]
 800780a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800780c:	4413      	add	r3, r2
 800780e:	9324      	str	r3, [sp, #144]	; 0x90
 8007810:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007812:	3301      	adds	r3, #1
 8007814:	2b07      	cmp	r3, #7
 8007816:	9323      	str	r3, [sp, #140]	; 0x8c
 8007818:	dc2b      	bgt.n	8007872 <_svfprintf_r+0xdca>
 800781a:	3408      	adds	r4, #8
 800781c:	9b05      	ldr	r3, [sp, #20]
 800781e:	1e5d      	subs	r5, r3, #1
 8007820:	2d00      	cmp	r5, #0
 8007822:	f77f ad23 	ble.w	800726c <_svfprintf_r+0x7c4>
 8007826:	4e5b      	ldr	r6, [pc, #364]	; (8007994 <_svfprintf_r+0xeec>)
 8007828:	2710      	movs	r7, #16
 800782a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800782e:	2d10      	cmp	r5, #16
 8007830:	f103 0301 	add.w	r3, r3, #1
 8007834:	f104 0108 	add.w	r1, r4, #8
 8007838:	6026      	str	r6, [r4, #0]
 800783a:	dc24      	bgt.n	8007886 <_svfprintf_r+0xdde>
 800783c:	6065      	str	r5, [r4, #4]
 800783e:	2b07      	cmp	r3, #7
 8007840:	4415      	add	r5, r2
 8007842:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8007846:	f340 8288 	ble.w	8007d5a <_svfprintf_r+0x12b2>
 800784a:	aa22      	add	r2, sp, #136	; 0x88
 800784c:	4649      	mov	r1, r9
 800784e:	4650      	mov	r0, sl
 8007850:	f003 fd52 	bl	800b2f8 <__ssprint_r>
 8007854:	2800      	cmp	r0, #0
 8007856:	f040 82a1 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 800785a:	ac25      	add	r4, sp, #148	; 0x94
 800785c:	e506      	b.n	800726c <_svfprintf_r+0x7c4>
 800785e:	aa22      	add	r2, sp, #136	; 0x88
 8007860:	4649      	mov	r1, r9
 8007862:	4650      	mov	r0, sl
 8007864:	f003 fd48 	bl	800b2f8 <__ssprint_r>
 8007868:	2800      	cmp	r0, #0
 800786a:	f040 8297 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 800786e:	ac25      	add	r4, sp, #148	; 0x94
 8007870:	e7be      	b.n	80077f0 <_svfprintf_r+0xd48>
 8007872:	aa22      	add	r2, sp, #136	; 0x88
 8007874:	4649      	mov	r1, r9
 8007876:	4650      	mov	r0, sl
 8007878:	f003 fd3e 	bl	800b2f8 <__ssprint_r>
 800787c:	2800      	cmp	r0, #0
 800787e:	f040 828d 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 8007882:	ac25      	add	r4, sp, #148	; 0x94
 8007884:	e7ca      	b.n	800781c <_svfprintf_r+0xd74>
 8007886:	3210      	adds	r2, #16
 8007888:	2b07      	cmp	r3, #7
 800788a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800788e:	6067      	str	r7, [r4, #4]
 8007890:	dd08      	ble.n	80078a4 <_svfprintf_r+0xdfc>
 8007892:	aa22      	add	r2, sp, #136	; 0x88
 8007894:	4649      	mov	r1, r9
 8007896:	4650      	mov	r0, sl
 8007898:	f003 fd2e 	bl	800b2f8 <__ssprint_r>
 800789c:	2800      	cmp	r0, #0
 800789e:	f040 827d 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 80078a2:	a925      	add	r1, sp, #148	; 0x94
 80078a4:	3d10      	subs	r5, #16
 80078a6:	460c      	mov	r4, r1
 80078a8:	e7bf      	b.n	800782a <_svfprintf_r+0xd82>
 80078aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	dc73      	bgt.n	8007998 <_svfprintf_r+0xef0>
 80078b0:	4b37      	ldr	r3, [pc, #220]	; (8007990 <_svfprintf_r+0xee8>)
 80078b2:	6023      	str	r3, [r4, #0]
 80078b4:	2301      	movs	r3, #1
 80078b6:	441e      	add	r6, r3
 80078b8:	6063      	str	r3, [r4, #4]
 80078ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078bc:	9624      	str	r6, [sp, #144]	; 0x90
 80078be:	3301      	adds	r3, #1
 80078c0:	2b07      	cmp	r3, #7
 80078c2:	9323      	str	r3, [sp, #140]	; 0x8c
 80078c4:	dc3d      	bgt.n	8007942 <_svfprintf_r+0xe9a>
 80078c6:	3408      	adds	r4, #8
 80078c8:	9905      	ldr	r1, [sp, #20]
 80078ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80078cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80078ce:	430a      	orrs	r2, r1
 80078d0:	f008 0101 	and.w	r1, r8, #1
 80078d4:	430a      	orrs	r2, r1
 80078d6:	f43f acc9 	beq.w	800726c <_svfprintf_r+0x7c4>
 80078da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078dc:	6022      	str	r2, [r4, #0]
 80078de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078e0:	6062      	str	r2, [r4, #4]
 80078e2:	4413      	add	r3, r2
 80078e4:	9324      	str	r3, [sp, #144]	; 0x90
 80078e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078e8:	3301      	adds	r3, #1
 80078ea:	2b07      	cmp	r3, #7
 80078ec:	9323      	str	r3, [sp, #140]	; 0x8c
 80078ee:	dc32      	bgt.n	8007956 <_svfprintf_r+0xeae>
 80078f0:	3408      	adds	r4, #8
 80078f2:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80078f4:	2d00      	cmp	r5, #0
 80078f6:	da1b      	bge.n	8007930 <_svfprintf_r+0xe88>
 80078f8:	4e26      	ldr	r6, [pc, #152]	; (8007994 <_svfprintf_r+0xeec>)
 80078fa:	426d      	negs	r5, r5
 80078fc:	4623      	mov	r3, r4
 80078fe:	2710      	movs	r7, #16
 8007900:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8007904:	2d10      	cmp	r5, #16
 8007906:	f102 0201 	add.w	r2, r2, #1
 800790a:	f104 0408 	add.w	r4, r4, #8
 800790e:	601e      	str	r6, [r3, #0]
 8007910:	dc2b      	bgt.n	800796a <_svfprintf_r+0xec2>
 8007912:	605d      	str	r5, [r3, #4]
 8007914:	2a07      	cmp	r2, #7
 8007916:	440d      	add	r5, r1
 8007918:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 800791c:	dd08      	ble.n	8007930 <_svfprintf_r+0xe88>
 800791e:	aa22      	add	r2, sp, #136	; 0x88
 8007920:	4649      	mov	r1, r9
 8007922:	4650      	mov	r0, sl
 8007924:	f003 fce8 	bl	800b2f8 <__ssprint_r>
 8007928:	2800      	cmp	r0, #0
 800792a:	f040 8237 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 800792e:	ac25      	add	r4, sp, #148	; 0x94
 8007930:	9b05      	ldr	r3, [sp, #20]
 8007932:	9a05      	ldr	r2, [sp, #20]
 8007934:	6063      	str	r3, [r4, #4]
 8007936:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007938:	f8c4 b000 	str.w	fp, [r4]
 800793c:	4413      	add	r3, r2
 800793e:	9324      	str	r3, [sp, #144]	; 0x90
 8007940:	e48d      	b.n	800725e <_svfprintf_r+0x7b6>
 8007942:	aa22      	add	r2, sp, #136	; 0x88
 8007944:	4649      	mov	r1, r9
 8007946:	4650      	mov	r0, sl
 8007948:	f003 fcd6 	bl	800b2f8 <__ssprint_r>
 800794c:	2800      	cmp	r0, #0
 800794e:	f040 8225 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 8007952:	ac25      	add	r4, sp, #148	; 0x94
 8007954:	e7b8      	b.n	80078c8 <_svfprintf_r+0xe20>
 8007956:	aa22      	add	r2, sp, #136	; 0x88
 8007958:	4649      	mov	r1, r9
 800795a:	4650      	mov	r0, sl
 800795c:	f003 fccc 	bl	800b2f8 <__ssprint_r>
 8007960:	2800      	cmp	r0, #0
 8007962:	f040 821b 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 8007966:	ac25      	add	r4, sp, #148	; 0x94
 8007968:	e7c3      	b.n	80078f2 <_svfprintf_r+0xe4a>
 800796a:	3110      	adds	r1, #16
 800796c:	2a07      	cmp	r2, #7
 800796e:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8007972:	605f      	str	r7, [r3, #4]
 8007974:	dd08      	ble.n	8007988 <_svfprintf_r+0xee0>
 8007976:	aa22      	add	r2, sp, #136	; 0x88
 8007978:	4649      	mov	r1, r9
 800797a:	4650      	mov	r0, sl
 800797c:	f003 fcbc 	bl	800b2f8 <__ssprint_r>
 8007980:	2800      	cmp	r0, #0
 8007982:	f040 820b 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 8007986:	ac25      	add	r4, sp, #148	; 0x94
 8007988:	3d10      	subs	r5, #16
 800798a:	4623      	mov	r3, r4
 800798c:	e7b8      	b.n	8007900 <_svfprintf_r+0xe58>
 800798e:	bf00      	nop
 8007990:	0800ca72 	.word	0x0800ca72
 8007994:	0800ca84 	.word	0x0800ca84
 8007998:	9b05      	ldr	r3, [sp, #20]
 800799a:	42ab      	cmp	r3, r5
 800799c:	bfa8      	it	ge
 800799e:	462b      	movge	r3, r5
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	461f      	mov	r7, r3
 80079a4:	dd0a      	ble.n	80079bc <_svfprintf_r+0xf14>
 80079a6:	441e      	add	r6, r3
 80079a8:	e9c4 b300 	strd	fp, r3, [r4]
 80079ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079ae:	9624      	str	r6, [sp, #144]	; 0x90
 80079b0:	3301      	adds	r3, #1
 80079b2:	2b07      	cmp	r3, #7
 80079b4:	9323      	str	r3, [sp, #140]	; 0x8c
 80079b6:	f300 8086 	bgt.w	8007ac6 <_svfprintf_r+0x101e>
 80079ba:	3408      	adds	r4, #8
 80079bc:	2f00      	cmp	r7, #0
 80079be:	bfac      	ite	ge
 80079c0:	1bee      	subge	r6, r5, r7
 80079c2:	462e      	movlt	r6, r5
 80079c4:	2e00      	cmp	r6, #0
 80079c6:	dd19      	ble.n	80079fc <_svfprintf_r+0xf54>
 80079c8:	4f97      	ldr	r7, [pc, #604]	; (8007c28 <_svfprintf_r+0x1180>)
 80079ca:	6027      	str	r7, [r4, #0]
 80079cc:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80079d0:	2e10      	cmp	r6, #16
 80079d2:	f103 0301 	add.w	r3, r3, #1
 80079d6:	f104 0108 	add.w	r1, r4, #8
 80079da:	dc7e      	bgt.n	8007ada <_svfprintf_r+0x1032>
 80079dc:	6066      	str	r6, [r4, #4]
 80079de:	2b07      	cmp	r3, #7
 80079e0:	4416      	add	r6, r2
 80079e2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80079e6:	f340 808b 	ble.w	8007b00 <_svfprintf_r+0x1058>
 80079ea:	aa22      	add	r2, sp, #136	; 0x88
 80079ec:	4649      	mov	r1, r9
 80079ee:	4650      	mov	r0, sl
 80079f0:	f003 fc82 	bl	800b2f8 <__ssprint_r>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	f040 81d1 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 80079fa:	ac25      	add	r4, sp, #148	; 0x94
 80079fc:	f418 6f80 	tst.w	r8, #1024	; 0x400
 8007a00:	445d      	add	r5, fp
 8007a02:	d00b      	beq.n	8007a1c <_svfprintf_r+0xf74>
 8007a04:	4e88      	ldr	r6, [pc, #544]	; (8007c28 <_svfprintf_r+0x1180>)
 8007a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d17b      	bne.n	8007b04 <_svfprintf_r+0x105c>
 8007a0c:	9b08      	ldr	r3, [sp, #32]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d17b      	bne.n	8007b0a <_svfprintf_r+0x1062>
 8007a12:	9b05      	ldr	r3, [sp, #20]
 8007a14:	445b      	add	r3, fp
 8007a16:	429d      	cmp	r5, r3
 8007a18:	bf28      	it	cs
 8007a1a:	461d      	movcs	r5, r3
 8007a1c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007a1e:	9a05      	ldr	r2, [sp, #20]
 8007a20:	4293      	cmp	r3, r2
 8007a22:	db02      	blt.n	8007a2a <_svfprintf_r+0xf82>
 8007a24:	f018 0f01 	tst.w	r8, #1
 8007a28:	d00e      	beq.n	8007a48 <_svfprintf_r+0xfa0>
 8007a2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a32:	6063      	str	r3, [r4, #4]
 8007a34:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007a36:	4413      	add	r3, r2
 8007a38:	9324      	str	r3, [sp, #144]	; 0x90
 8007a3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	2b07      	cmp	r3, #7
 8007a40:	9323      	str	r3, [sp, #140]	; 0x8c
 8007a42:	f300 80dd 	bgt.w	8007c00 <_svfprintf_r+0x1158>
 8007a46:	3408      	adds	r4, #8
 8007a48:	9b05      	ldr	r3, [sp, #20]
 8007a4a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8007a4c:	eb0b 0203 	add.w	r2, fp, r3
 8007a50:	1b9e      	subs	r6, r3, r6
 8007a52:	1b52      	subs	r2, r2, r5
 8007a54:	4296      	cmp	r6, r2
 8007a56:	bfa8      	it	ge
 8007a58:	4616      	movge	r6, r2
 8007a5a:	2e00      	cmp	r6, #0
 8007a5c:	dd0b      	ble.n	8007a76 <_svfprintf_r+0xfce>
 8007a5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007a60:	4433      	add	r3, r6
 8007a62:	9324      	str	r3, [sp, #144]	; 0x90
 8007a64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a66:	3301      	adds	r3, #1
 8007a68:	2b07      	cmp	r3, #7
 8007a6a:	e9c4 5600 	strd	r5, r6, [r4]
 8007a6e:	9323      	str	r3, [sp, #140]	; 0x8c
 8007a70:	f300 80d0 	bgt.w	8007c14 <_svfprintf_r+0x116c>
 8007a74:	3408      	adds	r4, #8
 8007a76:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007a78:	9b05      	ldr	r3, [sp, #20]
 8007a7a:	2e00      	cmp	r6, #0
 8007a7c:	eba3 0505 	sub.w	r5, r3, r5
 8007a80:	bfa8      	it	ge
 8007a82:	1bad      	subge	r5, r5, r6
 8007a84:	2d00      	cmp	r5, #0
 8007a86:	f77f abf1 	ble.w	800726c <_svfprintf_r+0x7c4>
 8007a8a:	4e67      	ldr	r6, [pc, #412]	; (8007c28 <_svfprintf_r+0x1180>)
 8007a8c:	2710      	movs	r7, #16
 8007a8e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007a92:	2d10      	cmp	r5, #16
 8007a94:	f103 0301 	add.w	r3, r3, #1
 8007a98:	f104 0108 	add.w	r1, r4, #8
 8007a9c:	6026      	str	r6, [r4, #0]
 8007a9e:	f77f aecd 	ble.w	800783c <_svfprintf_r+0xd94>
 8007aa2:	3210      	adds	r2, #16
 8007aa4:	2b07      	cmp	r3, #7
 8007aa6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007aaa:	6067      	str	r7, [r4, #4]
 8007aac:	dd08      	ble.n	8007ac0 <_svfprintf_r+0x1018>
 8007aae:	aa22      	add	r2, sp, #136	; 0x88
 8007ab0:	4649      	mov	r1, r9
 8007ab2:	4650      	mov	r0, sl
 8007ab4:	f003 fc20 	bl	800b2f8 <__ssprint_r>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	f040 816f 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 8007abe:	a925      	add	r1, sp, #148	; 0x94
 8007ac0:	3d10      	subs	r5, #16
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	e7e3      	b.n	8007a8e <_svfprintf_r+0xfe6>
 8007ac6:	aa22      	add	r2, sp, #136	; 0x88
 8007ac8:	4649      	mov	r1, r9
 8007aca:	4650      	mov	r0, sl
 8007acc:	f003 fc14 	bl	800b2f8 <__ssprint_r>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	f040 8163 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 8007ad6:	ac25      	add	r4, sp, #148	; 0x94
 8007ad8:	e770      	b.n	80079bc <_svfprintf_r+0xf14>
 8007ada:	2010      	movs	r0, #16
 8007adc:	4402      	add	r2, r0
 8007ade:	2b07      	cmp	r3, #7
 8007ae0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007ae4:	6060      	str	r0, [r4, #4]
 8007ae6:	dd08      	ble.n	8007afa <_svfprintf_r+0x1052>
 8007ae8:	aa22      	add	r2, sp, #136	; 0x88
 8007aea:	4649      	mov	r1, r9
 8007aec:	4650      	mov	r0, sl
 8007aee:	f003 fc03 	bl	800b2f8 <__ssprint_r>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	f040 8152 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 8007af8:	a925      	add	r1, sp, #148	; 0x94
 8007afa:	3e10      	subs	r6, #16
 8007afc:	460c      	mov	r4, r1
 8007afe:	e764      	b.n	80079ca <_svfprintf_r+0xf22>
 8007b00:	460c      	mov	r4, r1
 8007b02:	e77b      	b.n	80079fc <_svfprintf_r+0xf54>
 8007b04:	9b08      	ldr	r3, [sp, #32]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d04a      	beq.n	8007ba0 <_svfprintf_r+0x10f8>
 8007b0a:	9b08      	ldr	r3, [sp, #32]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	9308      	str	r3, [sp, #32]
 8007b10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b12:	6023      	str	r3, [r4, #0]
 8007b14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b18:	6063      	str	r3, [r4, #4]
 8007b1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007b1c:	4413      	add	r3, r2
 8007b1e:	9324      	str	r3, [sp, #144]	; 0x90
 8007b20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b22:	3301      	adds	r3, #1
 8007b24:	2b07      	cmp	r3, #7
 8007b26:	9323      	str	r3, [sp, #140]	; 0x8c
 8007b28:	dc41      	bgt.n	8007bae <_svfprintf_r+0x1106>
 8007b2a:	3408      	adds	r4, #8
 8007b2c:	9b05      	ldr	r3, [sp, #20]
 8007b2e:	445b      	add	r3, fp
 8007b30:	1b5a      	subs	r2, r3, r5
 8007b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	4293      	cmp	r3, r2
 8007b38:	bfa8      	it	ge
 8007b3a:	4613      	movge	r3, r2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	461f      	mov	r7, r3
 8007b40:	dd0a      	ble.n	8007b58 <_svfprintf_r+0x10b0>
 8007b42:	e9c4 5300 	strd	r5, r3, [r4]
 8007b46:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007b48:	443b      	add	r3, r7
 8007b4a:	9324      	str	r3, [sp, #144]	; 0x90
 8007b4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b4e:	3301      	adds	r3, #1
 8007b50:	2b07      	cmp	r3, #7
 8007b52:	9323      	str	r3, [sp, #140]	; 0x8c
 8007b54:	dc35      	bgt.n	8007bc2 <_svfprintf_r+0x111a>
 8007b56:	3408      	adds	r4, #8
 8007b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2f00      	cmp	r7, #0
 8007b5e:	bfac      	ite	ge
 8007b60:	1bdf      	subge	r7, r3, r7
 8007b62:	461f      	movlt	r7, r3
 8007b64:	2f00      	cmp	r7, #0
 8007b66:	dd17      	ble.n	8007b98 <_svfprintf_r+0x10f0>
 8007b68:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8007b6c:	2f10      	cmp	r7, #16
 8007b6e:	f102 0201 	add.w	r2, r2, #1
 8007b72:	f104 0108 	add.w	r1, r4, #8
 8007b76:	6026      	str	r6, [r4, #0]
 8007b78:	dc2d      	bgt.n	8007bd6 <_svfprintf_r+0x112e>
 8007b7a:	443b      	add	r3, r7
 8007b7c:	2a07      	cmp	r2, #7
 8007b7e:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8007b82:	6067      	str	r7, [r4, #4]
 8007b84:	dd3a      	ble.n	8007bfc <_svfprintf_r+0x1154>
 8007b86:	aa22      	add	r2, sp, #136	; 0x88
 8007b88:	4649      	mov	r1, r9
 8007b8a:	4650      	mov	r0, sl
 8007b8c:	f003 fbb4 	bl	800b2f8 <__ssprint_r>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	f040 8103 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 8007b96:	ac25      	add	r4, sp, #148	; 0x94
 8007b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	441d      	add	r5, r3
 8007b9e:	e732      	b.n	8007a06 <_svfprintf_r+0xf5e>
 8007ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	930a      	str	r3, [sp, #40]	; 0x28
 8007ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	9309      	str	r3, [sp, #36]	; 0x24
 8007bac:	e7b0      	b.n	8007b10 <_svfprintf_r+0x1068>
 8007bae:	aa22      	add	r2, sp, #136	; 0x88
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	4650      	mov	r0, sl
 8007bb4:	f003 fba0 	bl	800b2f8 <__ssprint_r>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	f040 80ef 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 8007bbe:	ac25      	add	r4, sp, #148	; 0x94
 8007bc0:	e7b4      	b.n	8007b2c <_svfprintf_r+0x1084>
 8007bc2:	aa22      	add	r2, sp, #136	; 0x88
 8007bc4:	4649      	mov	r1, r9
 8007bc6:	4650      	mov	r0, sl
 8007bc8:	f003 fb96 	bl	800b2f8 <__ssprint_r>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	f040 80e5 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 8007bd2:	ac25      	add	r4, sp, #148	; 0x94
 8007bd4:	e7c0      	b.n	8007b58 <_svfprintf_r+0x10b0>
 8007bd6:	2010      	movs	r0, #16
 8007bd8:	4403      	add	r3, r0
 8007bda:	2a07      	cmp	r2, #7
 8007bdc:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8007be0:	6060      	str	r0, [r4, #4]
 8007be2:	dd08      	ble.n	8007bf6 <_svfprintf_r+0x114e>
 8007be4:	aa22      	add	r2, sp, #136	; 0x88
 8007be6:	4649      	mov	r1, r9
 8007be8:	4650      	mov	r0, sl
 8007bea:	f003 fb85 	bl	800b2f8 <__ssprint_r>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	f040 80d4 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 8007bf4:	a925      	add	r1, sp, #148	; 0x94
 8007bf6:	3f10      	subs	r7, #16
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	e7b5      	b.n	8007b68 <_svfprintf_r+0x10c0>
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	e7cb      	b.n	8007b98 <_svfprintf_r+0x10f0>
 8007c00:	aa22      	add	r2, sp, #136	; 0x88
 8007c02:	4649      	mov	r1, r9
 8007c04:	4650      	mov	r0, sl
 8007c06:	f003 fb77 	bl	800b2f8 <__ssprint_r>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	f040 80c6 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 8007c10:	ac25      	add	r4, sp, #148	; 0x94
 8007c12:	e719      	b.n	8007a48 <_svfprintf_r+0xfa0>
 8007c14:	aa22      	add	r2, sp, #136	; 0x88
 8007c16:	4649      	mov	r1, r9
 8007c18:	4650      	mov	r0, sl
 8007c1a:	f003 fb6d 	bl	800b2f8 <__ssprint_r>
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	f040 80bc 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 8007c24:	ac25      	add	r4, sp, #148	; 0x94
 8007c26:	e726      	b.n	8007a76 <_svfprintf_r+0xfce>
 8007c28:	0800ca84 	.word	0x0800ca84
 8007c2c:	9a05      	ldr	r2, [sp, #20]
 8007c2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c30:	2a01      	cmp	r2, #1
 8007c32:	f106 0601 	add.w	r6, r6, #1
 8007c36:	f103 0301 	add.w	r3, r3, #1
 8007c3a:	f104 0508 	add.w	r5, r4, #8
 8007c3e:	dc02      	bgt.n	8007c46 <_svfprintf_r+0x119e>
 8007c40:	f018 0f01 	tst.w	r8, #1
 8007c44:	d07e      	beq.n	8007d44 <_svfprintf_r+0x129c>
 8007c46:	2201      	movs	r2, #1
 8007c48:	2b07      	cmp	r3, #7
 8007c4a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8007c4e:	f8c4 b000 	str.w	fp, [r4]
 8007c52:	6062      	str	r2, [r4, #4]
 8007c54:	dd08      	ble.n	8007c68 <_svfprintf_r+0x11c0>
 8007c56:	aa22      	add	r2, sp, #136	; 0x88
 8007c58:	4649      	mov	r1, r9
 8007c5a:	4650      	mov	r0, sl
 8007c5c:	f003 fb4c 	bl	800b2f8 <__ssprint_r>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	f040 809b 	bne.w	8007d9c <_svfprintf_r+0x12f4>
 8007c66:	ad25      	add	r5, sp, #148	; 0x94
 8007c68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c6a:	602b      	str	r3, [r5, #0]
 8007c6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c70:	606b      	str	r3, [r5, #4]
 8007c72:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007c74:	4413      	add	r3, r2
 8007c76:	9324      	str	r3, [sp, #144]	; 0x90
 8007c78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	2b07      	cmp	r3, #7
 8007c7e:	9323      	str	r3, [sp, #140]	; 0x8c
 8007c80:	dc32      	bgt.n	8007ce8 <_svfprintf_r+0x1240>
 8007c82:	3508      	adds	r5, #8
 8007c84:	9b05      	ldr	r3, [sp, #20]
 8007c86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c8a:	1e5c      	subs	r4, r3, #1
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f7f8 ff1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d130      	bne.n	8007cfa <_svfprintf_r+0x1252>
 8007c98:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8007c9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007c9c:	9a05      	ldr	r2, [sp, #20]
 8007c9e:	3101      	adds	r1, #1
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	f10b 0001 	add.w	r0, fp, #1
 8007ca6:	4413      	add	r3, r2
 8007ca8:	2907      	cmp	r1, #7
 8007caa:	e9c5 0400 	strd	r0, r4, [r5]
 8007cae:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8007cb2:	dd50      	ble.n	8007d56 <_svfprintf_r+0x12ae>
 8007cb4:	aa22      	add	r2, sp, #136	; 0x88
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	4650      	mov	r0, sl
 8007cba:	f003 fb1d 	bl	800b2f8 <__ssprint_r>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d16c      	bne.n	8007d9c <_svfprintf_r+0x12f4>
 8007cc2:	ad25      	add	r5, sp, #148	; 0x94
 8007cc4:	ab1e      	add	r3, sp, #120	; 0x78
 8007cc6:	602b      	str	r3, [r5, #0]
 8007cc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007ccc:	606b      	str	r3, [r5, #4]
 8007cce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007cd0:	4413      	add	r3, r2
 8007cd2:	9324      	str	r3, [sp, #144]	; 0x90
 8007cd4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	2b07      	cmp	r3, #7
 8007cda:	9323      	str	r3, [sp, #140]	; 0x8c
 8007cdc:	f73f adb5 	bgt.w	800784a <_svfprintf_r+0xda2>
 8007ce0:	f105 0408 	add.w	r4, r5, #8
 8007ce4:	f7ff bac2 	b.w	800726c <_svfprintf_r+0x7c4>
 8007ce8:	aa22      	add	r2, sp, #136	; 0x88
 8007cea:	4649      	mov	r1, r9
 8007cec:	4650      	mov	r0, sl
 8007cee:	f003 fb03 	bl	800b2f8 <__ssprint_r>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d152      	bne.n	8007d9c <_svfprintf_r+0x12f4>
 8007cf6:	ad25      	add	r5, sp, #148	; 0x94
 8007cf8:	e7c4      	b.n	8007c84 <_svfprintf_r+0x11dc>
 8007cfa:	2c00      	cmp	r4, #0
 8007cfc:	dde2      	ble.n	8007cc4 <_svfprintf_r+0x121c>
 8007cfe:	4e58      	ldr	r6, [pc, #352]	; (8007e60 <_svfprintf_r+0x13b8>)
 8007d00:	2710      	movs	r7, #16
 8007d02:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007d06:	2c10      	cmp	r4, #16
 8007d08:	f103 0301 	add.w	r3, r3, #1
 8007d0c:	f105 0108 	add.w	r1, r5, #8
 8007d10:	602e      	str	r6, [r5, #0]
 8007d12:	dc07      	bgt.n	8007d24 <_svfprintf_r+0x127c>
 8007d14:	606c      	str	r4, [r5, #4]
 8007d16:	2b07      	cmp	r3, #7
 8007d18:	4414      	add	r4, r2
 8007d1a:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8007d1e:	dcc9      	bgt.n	8007cb4 <_svfprintf_r+0x120c>
 8007d20:	460d      	mov	r5, r1
 8007d22:	e7cf      	b.n	8007cc4 <_svfprintf_r+0x121c>
 8007d24:	3210      	adds	r2, #16
 8007d26:	2b07      	cmp	r3, #7
 8007d28:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007d2c:	606f      	str	r7, [r5, #4]
 8007d2e:	dd06      	ble.n	8007d3e <_svfprintf_r+0x1296>
 8007d30:	aa22      	add	r2, sp, #136	; 0x88
 8007d32:	4649      	mov	r1, r9
 8007d34:	4650      	mov	r0, sl
 8007d36:	f003 fadf 	bl	800b2f8 <__ssprint_r>
 8007d3a:	bb78      	cbnz	r0, 8007d9c <_svfprintf_r+0x12f4>
 8007d3c:	a925      	add	r1, sp, #148	; 0x94
 8007d3e:	3c10      	subs	r4, #16
 8007d40:	460d      	mov	r5, r1
 8007d42:	e7de      	b.n	8007d02 <_svfprintf_r+0x125a>
 8007d44:	2201      	movs	r2, #1
 8007d46:	2b07      	cmp	r3, #7
 8007d48:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8007d4c:	f8c4 b000 	str.w	fp, [r4]
 8007d50:	6062      	str	r2, [r4, #4]
 8007d52:	ddb7      	ble.n	8007cc4 <_svfprintf_r+0x121c>
 8007d54:	e7ae      	b.n	8007cb4 <_svfprintf_r+0x120c>
 8007d56:	3508      	adds	r5, #8
 8007d58:	e7b4      	b.n	8007cc4 <_svfprintf_r+0x121c>
 8007d5a:	460c      	mov	r4, r1
 8007d5c:	f7ff ba86 	b.w	800726c <_svfprintf_r+0x7c4>
 8007d60:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8007d64:	1a9d      	subs	r5, r3, r2
 8007d66:	2d00      	cmp	r5, #0
 8007d68:	f77f aa84 	ble.w	8007274 <_svfprintf_r+0x7cc>
 8007d6c:	4e3d      	ldr	r6, [pc, #244]	; (8007e64 <_svfprintf_r+0x13bc>)
 8007d6e:	2710      	movs	r7, #16
 8007d70:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007d74:	2d10      	cmp	r5, #16
 8007d76:	f103 0301 	add.w	r3, r3, #1
 8007d7a:	6026      	str	r6, [r4, #0]
 8007d7c:	dc18      	bgt.n	8007db0 <_svfprintf_r+0x1308>
 8007d7e:	6065      	str	r5, [r4, #4]
 8007d80:	2b07      	cmp	r3, #7
 8007d82:	4415      	add	r5, r2
 8007d84:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8007d88:	f77f aa74 	ble.w	8007274 <_svfprintf_r+0x7cc>
 8007d8c:	aa22      	add	r2, sp, #136	; 0x88
 8007d8e:	4649      	mov	r1, r9
 8007d90:	4650      	mov	r0, sl
 8007d92:	f003 fab1 	bl	800b2f8 <__ssprint_r>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	f43f aa6c 	beq.w	8007274 <_svfprintf_r+0x7cc>
 8007d9c:	9b03      	ldr	r3, [sp, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f43f a88a 	beq.w	8006eb8 <_svfprintf_r+0x410>
 8007da4:	4619      	mov	r1, r3
 8007da6:	4650      	mov	r0, sl
 8007da8:	f002 fb28 	bl	800a3fc <_free_r>
 8007dac:	f7ff b884 	b.w	8006eb8 <_svfprintf_r+0x410>
 8007db0:	3210      	adds	r2, #16
 8007db2:	2b07      	cmp	r3, #7
 8007db4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007db8:	6067      	str	r7, [r4, #4]
 8007dba:	dc02      	bgt.n	8007dc2 <_svfprintf_r+0x131a>
 8007dbc:	3408      	adds	r4, #8
 8007dbe:	3d10      	subs	r5, #16
 8007dc0:	e7d6      	b.n	8007d70 <_svfprintf_r+0x12c8>
 8007dc2:	aa22      	add	r2, sp, #136	; 0x88
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	4650      	mov	r0, sl
 8007dc8:	f003 fa96 	bl	800b2f8 <__ssprint_r>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d1e5      	bne.n	8007d9c <_svfprintf_r+0x12f4>
 8007dd0:	ac25      	add	r4, sp, #148	; 0x94
 8007dd2:	e7f4      	b.n	8007dbe <_svfprintf_r+0x1316>
 8007dd4:	9903      	ldr	r1, [sp, #12]
 8007dd6:	4650      	mov	r0, sl
 8007dd8:	f002 fb10 	bl	800a3fc <_free_r>
 8007ddc:	f7ff ba62 	b.w	80072a4 <_svfprintf_r+0x7fc>
 8007de0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f43f a868 	beq.w	8006eb8 <_svfprintf_r+0x410>
 8007de8:	aa22      	add	r2, sp, #136	; 0x88
 8007dea:	4649      	mov	r1, r9
 8007dec:	4650      	mov	r0, sl
 8007dee:	f003 fa83 	bl	800b2f8 <__ssprint_r>
 8007df2:	f7ff b861 	b.w	8006eb8 <_svfprintf_r+0x410>
 8007df6:	ea56 0207 	orrs.w	r2, r6, r7
 8007dfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dfe:	f43f ab78 	beq.w	80074f2 <_svfprintf_r+0xa4a>
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	f43f ac0d 	beq.w	8007622 <_svfprintf_r+0xb7a>
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8007e0e:	f43f ac55 	beq.w	80076bc <_svfprintf_r+0xc14>
 8007e12:	08f2      	lsrs	r2, r6, #3
 8007e14:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8007e18:	08f8      	lsrs	r0, r7, #3
 8007e1a:	f006 0307 	and.w	r3, r6, #7
 8007e1e:	4607      	mov	r7, r0
 8007e20:	4616      	mov	r6, r2
 8007e22:	3330      	adds	r3, #48	; 0x30
 8007e24:	ea56 0207 	orrs.w	r2, r6, r7
 8007e28:	4659      	mov	r1, fp
 8007e2a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8007e2e:	d1f0      	bne.n	8007e12 <_svfprintf_r+0x136a>
 8007e30:	9a03      	ldr	r2, [sp, #12]
 8007e32:	07d2      	lsls	r2, r2, #31
 8007e34:	d506      	bpl.n	8007e44 <_svfprintf_r+0x139c>
 8007e36:	2b30      	cmp	r3, #48	; 0x30
 8007e38:	d004      	beq.n	8007e44 <_svfprintf_r+0x139c>
 8007e3a:	2330      	movs	r3, #48	; 0x30
 8007e3c:	f80b 3c01 	strb.w	r3, [fp, #-1]
 8007e40:	f1a1 0b02 	sub.w	fp, r1, #2
 8007e44:	ab4e      	add	r3, sp, #312	; 0x138
 8007e46:	eba3 030b 	sub.w	r3, r3, fp
 8007e4a:	9e04      	ldr	r6, [sp, #16]
 8007e4c:	9304      	str	r3, [sp, #16]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007e54:	9303      	str	r3, [sp, #12]
 8007e56:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8007e5a:	461d      	mov	r5, r3
 8007e5c:	f7ff b94c 	b.w	80070f8 <_svfprintf_r+0x650>
 8007e60:	0800ca84 	.word	0x0800ca84
 8007e64:	0800ca74 	.word	0x0800ca74

08007e68 <_vfprintf_r>:
 8007e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6c:	ed2d 8b04 	vpush	{d8-d9}
 8007e70:	b0cf      	sub	sp, #316	; 0x13c
 8007e72:	4689      	mov	r9, r1
 8007e74:	9203      	str	r2, [sp, #12]
 8007e76:	461c      	mov	r4, r3
 8007e78:	461e      	mov	r6, r3
 8007e7a:	4682      	mov	sl, r0
 8007e7c:	f002 fb9e 	bl	800a5bc <_localeconv_r>
 8007e80:	6803      	ldr	r3, [r0, #0]
 8007e82:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7f8 f9a3 	bl	80001d0 <strlen>
 8007e8a:	900e      	str	r0, [sp, #56]	; 0x38
 8007e8c:	f1ba 0f00 	cmp.w	sl, #0
 8007e90:	d005      	beq.n	8007e9e <_vfprintf_r+0x36>
 8007e92:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 8007e96:	b913      	cbnz	r3, 8007e9e <_vfprintf_r+0x36>
 8007e98:	4650      	mov	r0, sl
 8007e9a:	f002 fa1f 	bl	800a2dc <__sinit>
 8007e9e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8007ea2:	07d8      	lsls	r0, r3, #31
 8007ea4:	d407      	bmi.n	8007eb6 <_vfprintf_r+0x4e>
 8007ea6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007eaa:	0599      	lsls	r1, r3, #22
 8007eac:	d403      	bmi.n	8007eb6 <_vfprintf_r+0x4e>
 8007eae:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8007eb2:	f002 fb89 	bl	800a5c8 <__retarget_lock_acquire_recursive>
 8007eb6:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 8007eba:	049a      	lsls	r2, r3, #18
 8007ebc:	d409      	bmi.n	8007ed2 <_vfprintf_r+0x6a>
 8007ebe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007ec2:	f8a9 300c 	strh.w	r3, [r9, #12]
 8007ec6:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8007eca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ece:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 8007ed2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007ed6:	071f      	lsls	r7, r3, #28
 8007ed8:	d502      	bpl.n	8007ee0 <_vfprintf_r+0x78>
 8007eda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ede:	b9d3      	cbnz	r3, 8007f16 <_vfprintf_r+0xae>
 8007ee0:	4649      	mov	r1, r9
 8007ee2:	4650      	mov	r0, sl
 8007ee4:	f001 fa36 	bl	8009354 <__swsetup_r>
 8007ee8:	b1a8      	cbz	r0, 8007f16 <_vfprintf_r+0xae>
 8007eea:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8007eee:	07dd      	lsls	r5, r3, #31
 8007ef0:	d508      	bpl.n	8007f04 <_vfprintf_r+0x9c>
 8007ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ef8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007efa:	b04f      	add	sp, #316	; 0x13c
 8007efc:	ecbd 8b04 	vpop	{d8-d9}
 8007f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f04:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007f08:	059c      	lsls	r4, r3, #22
 8007f0a:	d4f2      	bmi.n	8007ef2 <_vfprintf_r+0x8a>
 8007f0c:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8007f10:	f002 fb5b 	bl	800a5ca <__retarget_lock_release_recursive>
 8007f14:	e7ed      	b.n	8007ef2 <_vfprintf_r+0x8a>
 8007f16:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007f1a:	f003 021a 	and.w	r2, r3, #26
 8007f1e:	2a0a      	cmp	r2, #10
 8007f20:	d115      	bne.n	8007f4e <_vfprintf_r+0xe6>
 8007f22:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 8007f26:	2a00      	cmp	r2, #0
 8007f28:	db11      	blt.n	8007f4e <_vfprintf_r+0xe6>
 8007f2a:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 8007f2e:	07d0      	lsls	r0, r2, #31
 8007f30:	d405      	bmi.n	8007f3e <_vfprintf_r+0xd6>
 8007f32:	0599      	lsls	r1, r3, #22
 8007f34:	d403      	bmi.n	8007f3e <_vfprintf_r+0xd6>
 8007f36:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8007f3a:	f002 fb46 	bl	800a5ca <__retarget_lock_release_recursive>
 8007f3e:	9a03      	ldr	r2, [sp, #12]
 8007f40:	4623      	mov	r3, r4
 8007f42:	4649      	mov	r1, r9
 8007f44:	4650      	mov	r0, sl
 8007f46:	f001 f9c5 	bl	80092d4 <__sbprintf>
 8007f4a:	900f      	str	r0, [sp, #60]	; 0x3c
 8007f4c:	e7d4      	b.n	8007ef8 <_vfprintf_r+0x90>
 8007f4e:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 80081b8 <_vfprintf_r+0x350>
 8007f52:	2500      	movs	r5, #0
 8007f54:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8007f58:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007f5c:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8007f60:	ac25      	add	r4, sp, #148	; 0x94
 8007f62:	9422      	str	r4, [sp, #136]	; 0x88
 8007f64:	9505      	str	r5, [sp, #20]
 8007f66:	950a      	str	r5, [sp, #40]	; 0x28
 8007f68:	9512      	str	r5, [sp, #72]	; 0x48
 8007f6a:	9514      	str	r5, [sp, #80]	; 0x50
 8007f6c:	950f      	str	r5, [sp, #60]	; 0x3c
 8007f6e:	9b03      	ldr	r3, [sp, #12]
 8007f70:	461d      	mov	r5, r3
 8007f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f76:	b10a      	cbz	r2, 8007f7c <_vfprintf_r+0x114>
 8007f78:	2a25      	cmp	r2, #37	; 0x25
 8007f7a:	d1f9      	bne.n	8007f70 <_vfprintf_r+0x108>
 8007f7c:	9b03      	ldr	r3, [sp, #12]
 8007f7e:	1aef      	subs	r7, r5, r3
 8007f80:	d00d      	beq.n	8007f9e <_vfprintf_r+0x136>
 8007f82:	e9c4 3700 	strd	r3, r7, [r4]
 8007f86:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007f88:	443b      	add	r3, r7
 8007f8a:	9324      	str	r3, [sp, #144]	; 0x90
 8007f8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f8e:	3301      	adds	r3, #1
 8007f90:	2b07      	cmp	r3, #7
 8007f92:	9323      	str	r3, [sp, #140]	; 0x8c
 8007f94:	dc79      	bgt.n	800808a <_vfprintf_r+0x222>
 8007f96:	3408      	adds	r4, #8
 8007f98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f9a:	443b      	add	r3, r7
 8007f9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f9e:	782b      	ldrb	r3, [r5, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f001 8156 	beq.w	8009252 <_vfprintf_r+0x13ea>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	3501      	adds	r5, #1
 8007faa:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8007fae:	f04f 38ff 	mov.w	r8, #4294967295
 8007fb2:	9310      	str	r3, [sp, #64]	; 0x40
 8007fb4:	469b      	mov	fp, r3
 8007fb6:	270a      	movs	r7, #10
 8007fb8:	212b      	movs	r1, #43	; 0x2b
 8007fba:	462a      	mov	r2, r5
 8007fbc:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007fc0:	9307      	str	r3, [sp, #28]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fc6:	9b07      	ldr	r3, [sp, #28]
 8007fc8:	3b20      	subs	r3, #32
 8007fca:	2b5a      	cmp	r3, #90	; 0x5a
 8007fcc:	f200 85c0 	bhi.w	8008b50 <_vfprintf_r+0xce8>
 8007fd0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007fd4:	05be007e 	.word	0x05be007e
 8007fd8:	008605be 	.word	0x008605be
 8007fdc:	05be05be 	.word	0x05be05be
 8007fe0:	006505be 	.word	0x006505be
 8007fe4:	05be05be 	.word	0x05be05be
 8007fe8:	00930089 	.word	0x00930089
 8007fec:	009005be 	.word	0x009005be
 8007ff0:	05be0096 	.word	0x05be0096
 8007ff4:	00b200af 	.word	0x00b200af
 8007ff8:	00b200b2 	.word	0x00b200b2
 8007ffc:	00b200b2 	.word	0x00b200b2
 8008000:	00b200b2 	.word	0x00b200b2
 8008004:	00b200b2 	.word	0x00b200b2
 8008008:	05be05be 	.word	0x05be05be
 800800c:	05be05be 	.word	0x05be05be
 8008010:	05be05be 	.word	0x05be05be
 8008014:	012105be 	.word	0x012105be
 8008018:	00df05be 	.word	0x00df05be
 800801c:	012100f6 	.word	0x012100f6
 8008020:	01210121 	.word	0x01210121
 8008024:	05be05be 	.word	0x05be05be
 8008028:	05be05be 	.word	0x05be05be
 800802c:	05be00c2 	.word	0x05be00c2
 8008030:	049005be 	.word	0x049005be
 8008034:	05be05be 	.word	0x05be05be
 8008038:	04d705be 	.word	0x04d705be
 800803c:	04fb05be 	.word	0x04fb05be
 8008040:	05be05be 	.word	0x05be05be
 8008044:	05be051a 	.word	0x05be051a
 8008048:	05be05be 	.word	0x05be05be
 800804c:	05be05be 	.word	0x05be05be
 8008050:	05be05be 	.word	0x05be05be
 8008054:	012105be 	.word	0x012105be
 8008058:	00df05be 	.word	0x00df05be
 800805c:	012100f8 	.word	0x012100f8
 8008060:	01210121 	.word	0x01210121
 8008064:	00f800c5 	.word	0x00f800c5
 8008068:	05be00d9 	.word	0x05be00d9
 800806c:	05be00d2 	.word	0x05be00d2
 8008070:	0492046d 	.word	0x0492046d
 8008074:	00d904c6 	.word	0x00d904c6
 8008078:	04d705be 	.word	0x04d705be
 800807c:	04fd007c 	.word	0x04fd007c
 8008080:	05be05be 	.word	0x05be05be
 8008084:	05be0537 	.word	0x05be0537
 8008088:	007c      	.short	0x007c
 800808a:	aa22      	add	r2, sp, #136	; 0x88
 800808c:	4649      	mov	r1, r9
 800808e:	4650      	mov	r0, sl
 8008090:	f003 f9ba 	bl	800b408 <__sprint_r>
 8008094:	2800      	cmp	r0, #0
 8008096:	f040 8130 	bne.w	80082fa <_vfprintf_r+0x492>
 800809a:	ac25      	add	r4, sp, #148	; 0x94
 800809c:	e77c      	b.n	8007f98 <_vfprintf_r+0x130>
 800809e:	4650      	mov	r0, sl
 80080a0:	f002 fa8c 	bl	800a5bc <_localeconv_r>
 80080a4:	6843      	ldr	r3, [r0, #4]
 80080a6:	9314      	str	r3, [sp, #80]	; 0x50
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7f8 f891 	bl	80001d0 <strlen>
 80080ae:	9012      	str	r0, [sp, #72]	; 0x48
 80080b0:	4650      	mov	r0, sl
 80080b2:	f002 fa83 	bl	800a5bc <_localeconv_r>
 80080b6:	6883      	ldr	r3, [r0, #8]
 80080b8:	930a      	str	r3, [sp, #40]	; 0x28
 80080ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080bc:	212b      	movs	r1, #43	; 0x2b
 80080be:	b12b      	cbz	r3, 80080cc <_vfprintf_r+0x264>
 80080c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080c2:	b11b      	cbz	r3, 80080cc <_vfprintf_r+0x264>
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	b10b      	cbz	r3, 80080cc <_vfprintf_r+0x264>
 80080c8:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 80080cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80080ce:	e774      	b.n	8007fba <_vfprintf_r+0x152>
 80080d0:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1f9      	bne.n	80080cc <_vfprintf_r+0x264>
 80080d8:	2320      	movs	r3, #32
 80080da:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80080de:	e7f5      	b.n	80080cc <_vfprintf_r+0x264>
 80080e0:	f04b 0b01 	orr.w	fp, fp, #1
 80080e4:	e7f2      	b.n	80080cc <_vfprintf_r+0x264>
 80080e6:	f856 3b04 	ldr.w	r3, [r6], #4
 80080ea:	9310      	str	r3, [sp, #64]	; 0x40
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	daed      	bge.n	80080cc <_vfprintf_r+0x264>
 80080f0:	425b      	negs	r3, r3
 80080f2:	9310      	str	r3, [sp, #64]	; 0x40
 80080f4:	f04b 0b04 	orr.w	fp, fp, #4
 80080f8:	e7e8      	b.n	80080cc <_vfprintf_r+0x264>
 80080fa:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 80080fe:	e7e5      	b.n	80080cc <_vfprintf_r+0x264>
 8008100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008106:	9207      	str	r2, [sp, #28]
 8008108:	2a2a      	cmp	r2, #42	; 0x2a
 800810a:	d10f      	bne.n	800812c <_vfprintf_r+0x2c4>
 800810c:	f856 0b04 	ldr.w	r0, [r6], #4
 8008110:	930b      	str	r3, [sp, #44]	; 0x2c
 8008112:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 8008116:	e7d9      	b.n	80080cc <_vfprintf_r+0x264>
 8008118:	fb07 2808 	mla	r8, r7, r8, r2
 800811c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008120:	9207      	str	r2, [sp, #28]
 8008122:	9a07      	ldr	r2, [sp, #28]
 8008124:	3a30      	subs	r2, #48	; 0x30
 8008126:	2a09      	cmp	r2, #9
 8008128:	d9f6      	bls.n	8008118 <_vfprintf_r+0x2b0>
 800812a:	e74b      	b.n	8007fc4 <_vfprintf_r+0x15c>
 800812c:	f04f 0800 	mov.w	r8, #0
 8008130:	e7f7      	b.n	8008122 <_vfprintf_r+0x2ba>
 8008132:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8008136:	e7c9      	b.n	80080cc <_vfprintf_r+0x264>
 8008138:	2200      	movs	r2, #0
 800813a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800813c:	9210      	str	r2, [sp, #64]	; 0x40
 800813e:	9a07      	ldr	r2, [sp, #28]
 8008140:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008142:	3a30      	subs	r2, #48	; 0x30
 8008144:	fb07 2200 	mla	r2, r7, r0, r2
 8008148:	9210      	str	r2, [sp, #64]	; 0x40
 800814a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800814e:	9207      	str	r2, [sp, #28]
 8008150:	3a30      	subs	r2, #48	; 0x30
 8008152:	2a09      	cmp	r2, #9
 8008154:	d9f3      	bls.n	800813e <_vfprintf_r+0x2d6>
 8008156:	e735      	b.n	8007fc4 <_vfprintf_r+0x15c>
 8008158:	f04b 0b08 	orr.w	fp, fp, #8
 800815c:	e7b6      	b.n	80080cc <_vfprintf_r+0x264>
 800815e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	2b68      	cmp	r3, #104	; 0x68
 8008164:	bf01      	itttt	eq
 8008166:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8008168:	3301      	addeq	r3, #1
 800816a:	930b      	streq	r3, [sp, #44]	; 0x2c
 800816c:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8008170:	bf18      	it	ne
 8008172:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8008176:	e7a9      	b.n	80080cc <_vfprintf_r+0x264>
 8008178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b6c      	cmp	r3, #108	; 0x6c
 800817e:	d105      	bne.n	800818c <_vfprintf_r+0x324>
 8008180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008182:	3301      	adds	r3, #1
 8008184:	930b      	str	r3, [sp, #44]	; 0x2c
 8008186:	f04b 0b20 	orr.w	fp, fp, #32
 800818a:	e79f      	b.n	80080cc <_vfprintf_r+0x264>
 800818c:	f04b 0b10 	orr.w	fp, fp, #16
 8008190:	e79c      	b.n	80080cc <_vfprintf_r+0x264>
 8008192:	4632      	mov	r2, r6
 8008194:	2000      	movs	r0, #0
 8008196:	f852 3b04 	ldr.w	r3, [r2], #4
 800819a:	9206      	str	r2, [sp, #24]
 800819c:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80081a0:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 80081a4:	ab35      	add	r3, sp, #212	; 0xd4
 80081a6:	e9cd 0008 	strd	r0, r0, [sp, #32]
 80081aa:	9004      	str	r0, [sp, #16]
 80081ac:	f04f 0801 	mov.w	r8, #1
 80081b0:	4606      	mov	r6, r0
 80081b2:	4605      	mov	r5, r0
 80081b4:	9303      	str	r3, [sp, #12]
 80081b6:	e1c3      	b.n	8008540 <_vfprintf_r+0x6d8>
	...
 80081c0:	f04b 0b10 	orr.w	fp, fp, #16
 80081c4:	f01b 0f20 	tst.w	fp, #32
 80081c8:	d012      	beq.n	80081f0 <_vfprintf_r+0x388>
 80081ca:	3607      	adds	r6, #7
 80081cc:	f026 0307 	bic.w	r3, r6, #7
 80081d0:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80081d4:	9306      	str	r3, [sp, #24]
 80081d6:	2e00      	cmp	r6, #0
 80081d8:	f177 0300 	sbcs.w	r3, r7, #0
 80081dc:	da06      	bge.n	80081ec <_vfprintf_r+0x384>
 80081de:	4276      	negs	r6, r6
 80081e0:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80081e4:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80081e8:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80081ec:	2301      	movs	r3, #1
 80081ee:	e392      	b.n	8008916 <_vfprintf_r+0xaae>
 80081f0:	1d33      	adds	r3, r6, #4
 80081f2:	f01b 0f10 	tst.w	fp, #16
 80081f6:	9306      	str	r3, [sp, #24]
 80081f8:	d002      	beq.n	8008200 <_vfprintf_r+0x398>
 80081fa:	6836      	ldr	r6, [r6, #0]
 80081fc:	17f7      	asrs	r7, r6, #31
 80081fe:	e7ea      	b.n	80081d6 <_vfprintf_r+0x36e>
 8008200:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8008204:	6836      	ldr	r6, [r6, #0]
 8008206:	d001      	beq.n	800820c <_vfprintf_r+0x3a4>
 8008208:	b236      	sxth	r6, r6
 800820a:	e7f7      	b.n	80081fc <_vfprintf_r+0x394>
 800820c:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8008210:	bf18      	it	ne
 8008212:	b276      	sxtbne	r6, r6
 8008214:	e7f2      	b.n	80081fc <_vfprintf_r+0x394>
 8008216:	3607      	adds	r6, #7
 8008218:	f026 0307 	bic.w	r3, r6, #7
 800821c:	ecb3 7b02 	vldmia	r3!, {d7}
 8008220:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008224:	9306      	str	r3, [sp, #24]
 8008226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008228:	ee09 3a10 	vmov	s18, r3
 800822c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800822e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008232:	ee09 3a90 	vmov	s19, r3
 8008236:	f04f 32ff 	mov.w	r2, #4294967295
 800823a:	4b39      	ldr	r3, [pc, #228]	; (8008320 <_vfprintf_r+0x4b8>)
 800823c:	ec51 0b19 	vmov	r0, r1, d9
 8008240:	f7f8 fc74 	bl	8000b2c <__aeabi_dcmpun>
 8008244:	bb20      	cbnz	r0, 8008290 <_vfprintf_r+0x428>
 8008246:	4b36      	ldr	r3, [pc, #216]	; (8008320 <_vfprintf_r+0x4b8>)
 8008248:	ec51 0b19 	vmov	r0, r1, d9
 800824c:	f04f 32ff 	mov.w	r2, #4294967295
 8008250:	f7f8 fc4e 	bl	8000af0 <__aeabi_dcmple>
 8008254:	b9e0      	cbnz	r0, 8008290 <_vfprintf_r+0x428>
 8008256:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800825a:	2200      	movs	r2, #0
 800825c:	2300      	movs	r3, #0
 800825e:	f7f8 fc3d 	bl	8000adc <__aeabi_dcmplt>
 8008262:	b110      	cbz	r0, 800826a <_vfprintf_r+0x402>
 8008264:	232d      	movs	r3, #45	; 0x2d
 8008266:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800826a:	4a2e      	ldr	r2, [pc, #184]	; (8008324 <_vfprintf_r+0x4bc>)
 800826c:	482e      	ldr	r0, [pc, #184]	; (8008328 <_vfprintf_r+0x4c0>)
 800826e:	9907      	ldr	r1, [sp, #28]
 8008270:	4613      	mov	r3, r2
 8008272:	2947      	cmp	r1, #71	; 0x47
 8008274:	bfc8      	it	gt
 8008276:	4603      	movgt	r3, r0
 8008278:	9303      	str	r3, [sp, #12]
 800827a:	2300      	movs	r3, #0
 800827c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8008280:	9304      	str	r3, [sp, #16]
 8008282:	f04f 0803 	mov.w	r8, #3
 8008286:	461e      	mov	r6, r3
 8008288:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800828c:	461d      	mov	r5, r3
 800828e:	e157      	b.n	8008540 <_vfprintf_r+0x6d8>
 8008290:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008294:	4610      	mov	r0, r2
 8008296:	4619      	mov	r1, r3
 8008298:	f7f8 fc48 	bl	8000b2c <__aeabi_dcmpun>
 800829c:	b140      	cbz	r0, 80082b0 <_vfprintf_r+0x448>
 800829e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082a0:	4a22      	ldr	r2, [pc, #136]	; (800832c <_vfprintf_r+0x4c4>)
 80082a2:	4823      	ldr	r0, [pc, #140]	; (8008330 <_vfprintf_r+0x4c8>)
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	bfbc      	itt	lt
 80082a8:	232d      	movlt	r3, #45	; 0x2d
 80082aa:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 80082ae:	e7de      	b.n	800826e <_vfprintf_r+0x406>
 80082b0:	9b07      	ldr	r3, [sp, #28]
 80082b2:	f023 0320 	bic.w	r3, r3, #32
 80082b6:	2b41      	cmp	r3, #65	; 0x41
 80082b8:	9308      	str	r3, [sp, #32]
 80082ba:	d13b      	bne.n	8008334 <_vfprintf_r+0x4cc>
 80082bc:	2330      	movs	r3, #48	; 0x30
 80082be:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80082c2:	9b07      	ldr	r3, [sp, #28]
 80082c4:	2b61      	cmp	r3, #97	; 0x61
 80082c6:	bf0c      	ite	eq
 80082c8:	2378      	moveq	r3, #120	; 0x78
 80082ca:	2358      	movne	r3, #88	; 0x58
 80082cc:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 80082d0:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80082d4:	f04b 0b02 	orr.w	fp, fp, #2
 80082d8:	f340 8209 	ble.w	80086ee <_vfprintf_r+0x886>
 80082dc:	f108 0101 	add.w	r1, r8, #1
 80082e0:	4650      	mov	r0, sl
 80082e2:	f002 f9df 	bl	800a6a4 <_malloc_r>
 80082e6:	9003      	str	r0, [sp, #12]
 80082e8:	2800      	cmp	r0, #0
 80082ea:	f040 8204 	bne.w	80086f6 <_vfprintf_r+0x88e>
 80082ee:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80082f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082f6:	f8a9 300c 	strh.w	r3, [r9, #12]
 80082fa:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80082fe:	07d9      	lsls	r1, r3, #31
 8008300:	d407      	bmi.n	8008312 <_vfprintf_r+0x4aa>
 8008302:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008306:	059a      	lsls	r2, r3, #22
 8008308:	d403      	bmi.n	8008312 <_vfprintf_r+0x4aa>
 800830a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 800830e:	f002 f95c 	bl	800a5ca <__retarget_lock_release_recursive>
 8008312:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008316:	065b      	lsls	r3, r3, #25
 8008318:	f57f adee 	bpl.w	8007ef8 <_vfprintf_r+0x90>
 800831c:	e5e9      	b.n	8007ef2 <_vfprintf_r+0x8a>
 800831e:	bf00      	nop
 8008320:	7fefffff 	.word	0x7fefffff
 8008324:	0800ca40 	.word	0x0800ca40
 8008328:	0800ca44 	.word	0x0800ca44
 800832c:	0800ca48 	.word	0x0800ca48
 8008330:	0800ca4c 	.word	0x0800ca4c
 8008334:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008338:	f000 81e0 	beq.w	80086fc <_vfprintf_r+0x894>
 800833c:	9b08      	ldr	r3, [sp, #32]
 800833e:	2b47      	cmp	r3, #71	; 0x47
 8008340:	f040 81e0 	bne.w	8008704 <_vfprintf_r+0x89c>
 8008344:	f1b8 0f00 	cmp.w	r8, #0
 8008348:	f040 81dc 	bne.w	8008704 <_vfprintf_r+0x89c>
 800834c:	f8cd 8010 	str.w	r8, [sp, #16]
 8008350:	f04f 0801 	mov.w	r8, #1
 8008354:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8008358:	9311      	str	r3, [sp, #68]	; 0x44
 800835a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800835c:	2b00      	cmp	r3, #0
 800835e:	f280 81d3 	bge.w	8008708 <_vfprintf_r+0x8a0>
 8008362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008364:	ee08 3a10 	vmov	s16, r3
 8008368:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800836a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800836e:	ee08 3a90 	vmov	s17, r3
 8008372:	232d      	movs	r3, #45	; 0x2d
 8008374:	9318      	str	r3, [sp, #96]	; 0x60
 8008376:	9b08      	ldr	r3, [sp, #32]
 8008378:	2b41      	cmp	r3, #65	; 0x41
 800837a:	f040 81e3 	bne.w	8008744 <_vfprintf_r+0x8dc>
 800837e:	eeb0 0a48 	vmov.f32	s0, s16
 8008382:	eef0 0a68 	vmov.f32	s1, s17
 8008386:	a81c      	add	r0, sp, #112	; 0x70
 8008388:	f002 ff18 	bl	800b1bc <frexp>
 800838c:	2200      	movs	r2, #0
 800838e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008392:	ec51 0b10 	vmov	r0, r1, d0
 8008396:	f7f8 f92f 	bl	80005f8 <__aeabi_dmul>
 800839a:	2200      	movs	r2, #0
 800839c:	2300      	movs	r3, #0
 800839e:	4606      	mov	r6, r0
 80083a0:	460f      	mov	r7, r1
 80083a2:	f7f8 fb91 	bl	8000ac8 <__aeabi_dcmpeq>
 80083a6:	b108      	cbz	r0, 80083ac <_vfprintf_r+0x544>
 80083a8:	2301      	movs	r3, #1
 80083aa:	931c      	str	r3, [sp, #112]	; 0x70
 80083ac:	4bb7      	ldr	r3, [pc, #732]	; (800868c <_vfprintf_r+0x824>)
 80083ae:	4ab8      	ldr	r2, [pc, #736]	; (8008690 <_vfprintf_r+0x828>)
 80083b0:	9907      	ldr	r1, [sp, #28]
 80083b2:	9d03      	ldr	r5, [sp, #12]
 80083b4:	2961      	cmp	r1, #97	; 0x61
 80083b6:	bf18      	it	ne
 80083b8:	461a      	movne	r2, r3
 80083ba:	f108 33ff 	add.w	r3, r8, #4294967295
 80083be:	9217      	str	r2, [sp, #92]	; 0x5c
 80083c0:	9305      	str	r3, [sp, #20]
 80083c2:	4bb4      	ldr	r3, [pc, #720]	; (8008694 <_vfprintf_r+0x82c>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	4630      	mov	r0, r6
 80083c8:	4639      	mov	r1, r7
 80083ca:	f7f8 f915 	bl	80005f8 <__aeabi_dmul>
 80083ce:	460f      	mov	r7, r1
 80083d0:	4606      	mov	r6, r0
 80083d2:	f7f8 fbc1 	bl	8000b58 <__aeabi_d2iz>
 80083d6:	9019      	str	r0, [sp, #100]	; 0x64
 80083d8:	f7f8 f8a4 	bl	8000524 <__aeabi_i2d>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	4630      	mov	r0, r6
 80083e2:	4639      	mov	r1, r7
 80083e4:	f7f7 ff50 	bl	8000288 <__aeabi_dsub>
 80083e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80083ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083ec:	5c9b      	ldrb	r3, [r3, r2]
 80083ee:	f805 3b01 	strb.w	r3, [r5], #1
 80083f2:	9b05      	ldr	r3, [sp, #20]
 80083f4:	9309      	str	r3, [sp, #36]	; 0x24
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	4606      	mov	r6, r0
 80083fa:	460f      	mov	r7, r1
 80083fc:	d007      	beq.n	800840e <_vfprintf_r+0x5a6>
 80083fe:	3b01      	subs	r3, #1
 8008400:	9305      	str	r3, [sp, #20]
 8008402:	2200      	movs	r2, #0
 8008404:	2300      	movs	r3, #0
 8008406:	f7f8 fb5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800840a:	2800      	cmp	r0, #0
 800840c:	d0d9      	beq.n	80083c2 <_vfprintf_r+0x55a>
 800840e:	4ba2      	ldr	r3, [pc, #648]	; (8008698 <_vfprintf_r+0x830>)
 8008410:	2200      	movs	r2, #0
 8008412:	4630      	mov	r0, r6
 8008414:	4639      	mov	r1, r7
 8008416:	f7f8 fb7f 	bl	8000b18 <__aeabi_dcmpgt>
 800841a:	b960      	cbnz	r0, 8008436 <_vfprintf_r+0x5ce>
 800841c:	4b9e      	ldr	r3, [pc, #632]	; (8008698 <_vfprintf_r+0x830>)
 800841e:	2200      	movs	r2, #0
 8008420:	4630      	mov	r0, r6
 8008422:	4639      	mov	r1, r7
 8008424:	f7f8 fb50 	bl	8000ac8 <__aeabi_dcmpeq>
 8008428:	2800      	cmp	r0, #0
 800842a:	f000 8186 	beq.w	800873a <_vfprintf_r+0x8d2>
 800842e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008430:	07df      	lsls	r7, r3, #31
 8008432:	f140 8182 	bpl.w	800873a <_vfprintf_r+0x8d2>
 8008436:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008438:	9520      	str	r5, [sp, #128]	; 0x80
 800843a:	7bd9      	ldrb	r1, [r3, #15]
 800843c:	2030      	movs	r0, #48	; 0x30
 800843e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008440:	1e53      	subs	r3, r2, #1
 8008442:	9320      	str	r3, [sp, #128]	; 0x80
 8008444:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8008448:	428b      	cmp	r3, r1
 800844a:	f000 8165 	beq.w	8008718 <_vfprintf_r+0x8b0>
 800844e:	2b39      	cmp	r3, #57	; 0x39
 8008450:	bf0b      	itete	eq
 8008452:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8008454:	3301      	addne	r3, #1
 8008456:	7a9b      	ldrbeq	r3, [r3, #10]
 8008458:	b2db      	uxtbne	r3, r3
 800845a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800845e:	9b03      	ldr	r3, [sp, #12]
 8008460:	1aeb      	subs	r3, r5, r3
 8008462:	9305      	str	r3, [sp, #20]
 8008464:	9b08      	ldr	r3, [sp, #32]
 8008466:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8008468:	2b47      	cmp	r3, #71	; 0x47
 800846a:	f040 81b3 	bne.w	80087d4 <_vfprintf_r+0x96c>
 800846e:	1cee      	adds	r6, r5, #3
 8008470:	db02      	blt.n	8008478 <_vfprintf_r+0x610>
 8008472:	4545      	cmp	r5, r8
 8008474:	f340 81d5 	ble.w	8008822 <_vfprintf_r+0x9ba>
 8008478:	9b07      	ldr	r3, [sp, #28]
 800847a:	3b02      	subs	r3, #2
 800847c:	9307      	str	r3, [sp, #28]
 800847e:	9907      	ldr	r1, [sp, #28]
 8008480:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8008484:	f021 0120 	bic.w	r1, r1, #32
 8008488:	2941      	cmp	r1, #65	; 0x41
 800848a:	bf08      	it	eq
 800848c:	320f      	addeq	r2, #15
 800848e:	f105 33ff 	add.w	r3, r5, #4294967295
 8008492:	bf06      	itte	eq
 8008494:	b2d2      	uxtbeq	r2, r2
 8008496:	2101      	moveq	r1, #1
 8008498:	2100      	movne	r1, #0
 800849a:	2b00      	cmp	r3, #0
 800849c:	931c      	str	r3, [sp, #112]	; 0x70
 800849e:	bfb8      	it	lt
 80084a0:	f1c5 0301 	rsblt	r3, r5, #1
 80084a4:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 80084a8:	bfb4      	ite	lt
 80084aa:	222d      	movlt	r2, #45	; 0x2d
 80084ac:	222b      	movge	r2, #43	; 0x2b
 80084ae:	2b09      	cmp	r3, #9
 80084b0:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 80084b4:	f340 81a4 	ble.w	8008800 <_vfprintf_r+0x998>
 80084b8:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 80084bc:	260a      	movs	r6, #10
 80084be:	4611      	mov	r1, r2
 80084c0:	fb93 f5f6 	sdiv	r5, r3, r6
 80084c4:	fb06 3015 	mls	r0, r6, r5, r3
 80084c8:	3030      	adds	r0, #48	; 0x30
 80084ca:	f801 0c01 	strb.w	r0, [r1, #-1]
 80084ce:	4618      	mov	r0, r3
 80084d0:	2863      	cmp	r0, #99	; 0x63
 80084d2:	f102 32ff 	add.w	r2, r2, #4294967295
 80084d6:	462b      	mov	r3, r5
 80084d8:	dcf1      	bgt.n	80084be <_vfprintf_r+0x656>
 80084da:	3330      	adds	r3, #48	; 0x30
 80084dc:	1e88      	subs	r0, r1, #2
 80084de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80084e2:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 80084e6:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80084ea:	4603      	mov	r3, r0
 80084ec:	42ab      	cmp	r3, r5
 80084ee:	f0c0 8182 	bcc.w	80087f6 <_vfprintf_r+0x98e>
 80084f2:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 80084f6:	1a52      	subs	r2, r2, r1
 80084f8:	42a8      	cmp	r0, r5
 80084fa:	bf88      	it	hi
 80084fc:	2200      	movhi	r2, #0
 80084fe:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8008502:	441a      	add	r2, r3
 8008504:	ab1e      	add	r3, sp, #120	; 0x78
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	9a05      	ldr	r2, [sp, #20]
 800850a:	9315      	str	r3, [sp, #84]	; 0x54
 800850c:	2a01      	cmp	r2, #1
 800850e:	eb03 0802 	add.w	r8, r3, r2
 8008512:	dc02      	bgt.n	800851a <_vfprintf_r+0x6b2>
 8008514:	f01b 0f01 	tst.w	fp, #1
 8008518:	d001      	beq.n	800851e <_vfprintf_r+0x6b6>
 800851a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800851c:	4498      	add	r8, r3
 800851e:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8008522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008526:	9311      	str	r3, [sp, #68]	; 0x44
 8008528:	2300      	movs	r3, #0
 800852a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800852e:	461d      	mov	r5, r3
 8008530:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008532:	b113      	cbz	r3, 800853a <_vfprintf_r+0x6d2>
 8008534:	232d      	movs	r3, #45	; 0x2d
 8008536:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800853a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800853e:	2600      	movs	r6, #0
 8008540:	4546      	cmp	r6, r8
 8008542:	4633      	mov	r3, r6
 8008544:	bfb8      	it	lt
 8008546:	4643      	movlt	r3, r8
 8008548:	9311      	str	r3, [sp, #68]	; 0x44
 800854a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800854e:	b113      	cbz	r3, 8008556 <_vfprintf_r+0x6ee>
 8008550:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008552:	3301      	adds	r3, #1
 8008554:	9311      	str	r3, [sp, #68]	; 0x44
 8008556:	f01b 0302 	ands.w	r3, fp, #2
 800855a:	9317      	str	r3, [sp, #92]	; 0x5c
 800855c:	bf1e      	ittt	ne
 800855e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8008560:	3302      	addne	r3, #2
 8008562:	9311      	strne	r3, [sp, #68]	; 0x44
 8008564:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8008568:	9318      	str	r3, [sp, #96]	; 0x60
 800856a:	d11f      	bne.n	80085ac <_vfprintf_r+0x744>
 800856c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8008570:	1a9f      	subs	r7, r3, r2
 8008572:	2f00      	cmp	r7, #0
 8008574:	dd1a      	ble.n	80085ac <_vfprintf_r+0x744>
 8008576:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800857a:	4848      	ldr	r0, [pc, #288]	; (800869c <_vfprintf_r+0x834>)
 800857c:	6020      	str	r0, [r4, #0]
 800857e:	2f10      	cmp	r7, #16
 8008580:	f103 0301 	add.w	r3, r3, #1
 8008584:	f104 0108 	add.w	r1, r4, #8
 8008588:	f300 82f0 	bgt.w	8008b6c <_vfprintf_r+0xd04>
 800858c:	6067      	str	r7, [r4, #4]
 800858e:	2b07      	cmp	r3, #7
 8008590:	4417      	add	r7, r2
 8008592:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8008596:	f340 82fc 	ble.w	8008b92 <_vfprintf_r+0xd2a>
 800859a:	aa22      	add	r2, sp, #136	; 0x88
 800859c:	4649      	mov	r1, r9
 800859e:	4650      	mov	r0, sl
 80085a0:	f002 ff32 	bl	800b408 <__sprint_r>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	f040 8632 	bne.w	800920e <_vfprintf_r+0x13a6>
 80085aa:	ac25      	add	r4, sp, #148	; 0x94
 80085ac:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80085b0:	b173      	cbz	r3, 80085d0 <_vfprintf_r+0x768>
 80085b2:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 80085b6:	6023      	str	r3, [r4, #0]
 80085b8:	2301      	movs	r3, #1
 80085ba:	6063      	str	r3, [r4, #4]
 80085bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80085be:	3301      	adds	r3, #1
 80085c0:	9324      	str	r3, [sp, #144]	; 0x90
 80085c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80085c4:	3301      	adds	r3, #1
 80085c6:	2b07      	cmp	r3, #7
 80085c8:	9323      	str	r3, [sp, #140]	; 0x8c
 80085ca:	f300 82e4 	bgt.w	8008b96 <_vfprintf_r+0xd2e>
 80085ce:	3408      	adds	r4, #8
 80085d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085d2:	b16b      	cbz	r3, 80085f0 <_vfprintf_r+0x788>
 80085d4:	ab1b      	add	r3, sp, #108	; 0x6c
 80085d6:	6023      	str	r3, [r4, #0]
 80085d8:	2302      	movs	r3, #2
 80085da:	6063      	str	r3, [r4, #4]
 80085dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80085de:	3302      	adds	r3, #2
 80085e0:	9324      	str	r3, [sp, #144]	; 0x90
 80085e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80085e4:	3301      	adds	r3, #1
 80085e6:	2b07      	cmp	r3, #7
 80085e8:	9323      	str	r3, [sp, #140]	; 0x8c
 80085ea:	f300 82de 	bgt.w	8008baa <_vfprintf_r+0xd42>
 80085ee:	3408      	adds	r4, #8
 80085f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80085f2:	2b80      	cmp	r3, #128	; 0x80
 80085f4:	d11f      	bne.n	8008636 <_vfprintf_r+0x7ce>
 80085f6:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80085fa:	1a9f      	subs	r7, r3, r2
 80085fc:	2f00      	cmp	r7, #0
 80085fe:	dd1a      	ble.n	8008636 <_vfprintf_r+0x7ce>
 8008600:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008604:	4826      	ldr	r0, [pc, #152]	; (80086a0 <_vfprintf_r+0x838>)
 8008606:	6020      	str	r0, [r4, #0]
 8008608:	2f10      	cmp	r7, #16
 800860a:	f103 0301 	add.w	r3, r3, #1
 800860e:	f104 0108 	add.w	r1, r4, #8
 8008612:	f300 82d4 	bgt.w	8008bbe <_vfprintf_r+0xd56>
 8008616:	6067      	str	r7, [r4, #4]
 8008618:	2b07      	cmp	r3, #7
 800861a:	4417      	add	r7, r2
 800861c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8008620:	f340 82e0 	ble.w	8008be4 <_vfprintf_r+0xd7c>
 8008624:	aa22      	add	r2, sp, #136	; 0x88
 8008626:	4649      	mov	r1, r9
 8008628:	4650      	mov	r0, sl
 800862a:	f002 feed 	bl	800b408 <__sprint_r>
 800862e:	2800      	cmp	r0, #0
 8008630:	f040 85ed 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008634:	ac25      	add	r4, sp, #148	; 0x94
 8008636:	eba6 0608 	sub.w	r6, r6, r8
 800863a:	2e00      	cmp	r6, #0
 800863c:	dd1a      	ble.n	8008674 <_vfprintf_r+0x80c>
 800863e:	4f18      	ldr	r7, [pc, #96]	; (80086a0 <_vfprintf_r+0x838>)
 8008640:	6027      	str	r7, [r4, #0]
 8008642:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008646:	2e10      	cmp	r6, #16
 8008648:	f103 0301 	add.w	r3, r3, #1
 800864c:	f104 0108 	add.w	r1, r4, #8
 8008650:	f300 82ca 	bgt.w	8008be8 <_vfprintf_r+0xd80>
 8008654:	6066      	str	r6, [r4, #4]
 8008656:	2b07      	cmp	r3, #7
 8008658:	4416      	add	r6, r2
 800865a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800865e:	f340 82d6 	ble.w	8008c0e <_vfprintf_r+0xda6>
 8008662:	aa22      	add	r2, sp, #136	; 0x88
 8008664:	4649      	mov	r1, r9
 8008666:	4650      	mov	r0, sl
 8008668:	f002 fece 	bl	800b408 <__sprint_r>
 800866c:	2800      	cmp	r0, #0
 800866e:	f040 85ce 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008672:	ac25      	add	r4, sp, #148	; 0x94
 8008674:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008678:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800867a:	f040 82cf 	bne.w	8008c1c <_vfprintf_r+0xdb4>
 800867e:	9b03      	ldr	r3, [sp, #12]
 8008680:	e9c4 3800 	strd	r3, r8, [r4]
 8008684:	4446      	add	r6, r8
 8008686:	9624      	str	r6, [sp, #144]	; 0x90
 8008688:	e00c      	b.n	80086a4 <_vfprintf_r+0x83c>
 800868a:	bf00      	nop
 800868c:	0800ca61 	.word	0x0800ca61
 8008690:	0800ca50 	.word	0x0800ca50
 8008694:	40300000 	.word	0x40300000
 8008698:	3fe00000 	.word	0x3fe00000
 800869c:	0800ca94 	.word	0x0800ca94
 80086a0:	0800caa4 	.word	0x0800caa4
 80086a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80086a6:	3301      	adds	r3, #1
 80086a8:	2b07      	cmp	r3, #7
 80086aa:	9323      	str	r3, [sp, #140]	; 0x8c
 80086ac:	f300 82fb 	bgt.w	8008ca6 <_vfprintf_r+0xe3e>
 80086b0:	3408      	adds	r4, #8
 80086b2:	f01b 0f04 	tst.w	fp, #4
 80086b6:	f040 858c 	bne.w	80091d2 <_vfprintf_r+0x136a>
 80086ba:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 80086be:	9911      	ldr	r1, [sp, #68]	; 0x44
 80086c0:	428a      	cmp	r2, r1
 80086c2:	bfac      	ite	ge
 80086c4:	189b      	addge	r3, r3, r2
 80086c6:	185b      	addlt	r3, r3, r1
 80086c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80086ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80086cc:	b13b      	cbz	r3, 80086de <_vfprintf_r+0x876>
 80086ce:	aa22      	add	r2, sp, #136	; 0x88
 80086d0:	4649      	mov	r1, r9
 80086d2:	4650      	mov	r0, sl
 80086d4:	f002 fe98 	bl	800b408 <__sprint_r>
 80086d8:	2800      	cmp	r0, #0
 80086da:	f040 8598 	bne.w	800920e <_vfprintf_r+0x13a6>
 80086de:	2300      	movs	r3, #0
 80086e0:	9323      	str	r3, [sp, #140]	; 0x8c
 80086e2:	9b04      	ldr	r3, [sp, #16]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f040 85ae 	bne.w	8009246 <_vfprintf_r+0x13de>
 80086ea:	ac25      	add	r4, sp, #148	; 0x94
 80086ec:	e0eb      	b.n	80088c6 <_vfprintf_r+0xa5e>
 80086ee:	ab35      	add	r3, sp, #212	; 0xd4
 80086f0:	9004      	str	r0, [sp, #16]
 80086f2:	9303      	str	r3, [sp, #12]
 80086f4:	e62e      	b.n	8008354 <_vfprintf_r+0x4ec>
 80086f6:	9b03      	ldr	r3, [sp, #12]
 80086f8:	9304      	str	r3, [sp, #16]
 80086fa:	e62b      	b.n	8008354 <_vfprintf_r+0x4ec>
 80086fc:	9004      	str	r0, [sp, #16]
 80086fe:	f04f 0806 	mov.w	r8, #6
 8008702:	e627      	b.n	8008354 <_vfprintf_r+0x4ec>
 8008704:	9004      	str	r0, [sp, #16]
 8008706:	e625      	b.n	8008354 <_vfprintf_r+0x4ec>
 8008708:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 800870c:	2300      	movs	r3, #0
 800870e:	eeb0 8a47 	vmov.f32	s16, s14
 8008712:	eef0 8a67 	vmov.f32	s17, s15
 8008716:	e62d      	b.n	8008374 <_vfprintf_r+0x50c>
 8008718:	f802 0c01 	strb.w	r0, [r2, #-1]
 800871c:	e68f      	b.n	800843e <_vfprintf_r+0x5d6>
 800871e:	f803 0b01 	strb.w	r0, [r3], #1
 8008722:	1aca      	subs	r2, r1, r3
 8008724:	2a00      	cmp	r2, #0
 8008726:	dafa      	bge.n	800871e <_vfprintf_r+0x8b6>
 8008728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800872a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800872c:	3201      	adds	r2, #1
 800872e:	f103 0301 	add.w	r3, r3, #1
 8008732:	bfb8      	it	lt
 8008734:	2300      	movlt	r3, #0
 8008736:	441d      	add	r5, r3
 8008738:	e691      	b.n	800845e <_vfprintf_r+0x5f6>
 800873a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800873c:	462b      	mov	r3, r5
 800873e:	18a9      	adds	r1, r5, r2
 8008740:	2030      	movs	r0, #48	; 0x30
 8008742:	e7ee      	b.n	8008722 <_vfprintf_r+0x8ba>
 8008744:	9b08      	ldr	r3, [sp, #32]
 8008746:	2b46      	cmp	r3, #70	; 0x46
 8008748:	d005      	beq.n	8008756 <_vfprintf_r+0x8ee>
 800874a:	2b45      	cmp	r3, #69	; 0x45
 800874c:	d11b      	bne.n	8008786 <_vfprintf_r+0x91e>
 800874e:	f108 0501 	add.w	r5, r8, #1
 8008752:	2102      	movs	r1, #2
 8008754:	e001      	b.n	800875a <_vfprintf_r+0x8f2>
 8008756:	4645      	mov	r5, r8
 8008758:	2103      	movs	r1, #3
 800875a:	ab20      	add	r3, sp, #128	; 0x80
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	ab1d      	add	r3, sp, #116	; 0x74
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	462a      	mov	r2, r5
 8008764:	ab1c      	add	r3, sp, #112	; 0x70
 8008766:	4650      	mov	r0, sl
 8008768:	eeb0 0a48 	vmov.f32	s0, s16
 800876c:	eef0 0a68 	vmov.f32	s1, s17
 8008770:	f000 fee6 	bl	8009540 <_dtoa_r>
 8008774:	9b08      	ldr	r3, [sp, #32]
 8008776:	9003      	str	r0, [sp, #12]
 8008778:	2b47      	cmp	r3, #71	; 0x47
 800877a:	d106      	bne.n	800878a <_vfprintf_r+0x922>
 800877c:	f01b 0f01 	tst.w	fp, #1
 8008780:	d103      	bne.n	800878a <_vfprintf_r+0x922>
 8008782:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8008784:	e66b      	b.n	800845e <_vfprintf_r+0x5f6>
 8008786:	4645      	mov	r5, r8
 8008788:	e7e3      	b.n	8008752 <_vfprintf_r+0x8ea>
 800878a:	9b03      	ldr	r3, [sp, #12]
 800878c:	195e      	adds	r6, r3, r5
 800878e:	9b08      	ldr	r3, [sp, #32]
 8008790:	2b46      	cmp	r3, #70	; 0x46
 8008792:	d10f      	bne.n	80087b4 <_vfprintf_r+0x94c>
 8008794:	9b03      	ldr	r3, [sp, #12]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	2b30      	cmp	r3, #48	; 0x30
 800879a:	d109      	bne.n	80087b0 <_vfprintf_r+0x948>
 800879c:	ec51 0b18 	vmov	r0, r1, d8
 80087a0:	2200      	movs	r2, #0
 80087a2:	2300      	movs	r3, #0
 80087a4:	f7f8 f990 	bl	8000ac8 <__aeabi_dcmpeq>
 80087a8:	b910      	cbnz	r0, 80087b0 <_vfprintf_r+0x948>
 80087aa:	f1c5 0501 	rsb	r5, r5, #1
 80087ae:	951c      	str	r5, [sp, #112]	; 0x70
 80087b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80087b2:	441e      	add	r6, r3
 80087b4:	ec51 0b18 	vmov	r0, r1, d8
 80087b8:	2200      	movs	r2, #0
 80087ba:	2300      	movs	r3, #0
 80087bc:	f7f8 f984 	bl	8000ac8 <__aeabi_dcmpeq>
 80087c0:	b100      	cbz	r0, 80087c4 <_vfprintf_r+0x95c>
 80087c2:	9620      	str	r6, [sp, #128]	; 0x80
 80087c4:	2230      	movs	r2, #48	; 0x30
 80087c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80087c8:	429e      	cmp	r6, r3
 80087ca:	d9da      	bls.n	8008782 <_vfprintf_r+0x91a>
 80087cc:	1c59      	adds	r1, r3, #1
 80087ce:	9120      	str	r1, [sp, #128]	; 0x80
 80087d0:	701a      	strb	r2, [r3, #0]
 80087d2:	e7f8      	b.n	80087c6 <_vfprintf_r+0x95e>
 80087d4:	9b08      	ldr	r3, [sp, #32]
 80087d6:	2b46      	cmp	r3, #70	; 0x46
 80087d8:	f47f ae51 	bne.w	800847e <_vfprintf_r+0x616>
 80087dc:	f00b 0301 	and.w	r3, fp, #1
 80087e0:	2d00      	cmp	r5, #0
 80087e2:	ea43 0308 	orr.w	r3, r3, r8
 80087e6:	dd18      	ble.n	800881a <_vfprintf_r+0x9b2>
 80087e8:	b383      	cbz	r3, 800884c <_vfprintf_r+0x9e4>
 80087ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087ec:	18eb      	adds	r3, r5, r3
 80087ee:	4498      	add	r8, r3
 80087f0:	2366      	movs	r3, #102	; 0x66
 80087f2:	9307      	str	r3, [sp, #28]
 80087f4:	e030      	b.n	8008858 <_vfprintf_r+0x9f0>
 80087f6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80087fa:	f802 6b01 	strb.w	r6, [r2], #1
 80087fe:	e675      	b.n	80084ec <_vfprintf_r+0x684>
 8008800:	b941      	cbnz	r1, 8008814 <_vfprintf_r+0x9ac>
 8008802:	2230      	movs	r2, #48	; 0x30
 8008804:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8008808:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800880c:	3330      	adds	r3, #48	; 0x30
 800880e:	f802 3b01 	strb.w	r3, [r2], #1
 8008812:	e677      	b.n	8008504 <_vfprintf_r+0x69c>
 8008814:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8008818:	e7f8      	b.n	800880c <_vfprintf_r+0x9a4>
 800881a:	b1cb      	cbz	r3, 8008850 <_vfprintf_r+0x9e8>
 800881c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800881e:	3301      	adds	r3, #1
 8008820:	e7e5      	b.n	80087ee <_vfprintf_r+0x986>
 8008822:	9b05      	ldr	r3, [sp, #20]
 8008824:	429d      	cmp	r5, r3
 8008826:	db07      	blt.n	8008838 <_vfprintf_r+0x9d0>
 8008828:	f01b 0f01 	tst.w	fp, #1
 800882c:	d029      	beq.n	8008882 <_vfprintf_r+0xa1a>
 800882e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008830:	eb05 0803 	add.w	r8, r5, r3
 8008834:	2367      	movs	r3, #103	; 0x67
 8008836:	e7dc      	b.n	80087f2 <_vfprintf_r+0x98a>
 8008838:	9b05      	ldr	r3, [sp, #20]
 800883a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800883c:	2d00      	cmp	r5, #0
 800883e:	eb03 0802 	add.w	r8, r3, r2
 8008842:	dcf7      	bgt.n	8008834 <_vfprintf_r+0x9cc>
 8008844:	f1c5 0301 	rsb	r3, r5, #1
 8008848:	4498      	add	r8, r3
 800884a:	e7f3      	b.n	8008834 <_vfprintf_r+0x9cc>
 800884c:	46a8      	mov	r8, r5
 800884e:	e7cf      	b.n	80087f0 <_vfprintf_r+0x988>
 8008850:	2366      	movs	r3, #102	; 0x66
 8008852:	9307      	str	r3, [sp, #28]
 8008854:	f04f 0801 	mov.w	r8, #1
 8008858:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 800885c:	9309      	str	r3, [sp, #36]	; 0x24
 800885e:	d023      	beq.n	80088a8 <_vfprintf_r+0xa40>
 8008860:	2300      	movs	r3, #0
 8008862:	2d00      	cmp	r5, #0
 8008864:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8008868:	f77f ae62 	ble.w	8008530 <_vfprintf_r+0x6c8>
 800886c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	2bff      	cmp	r3, #255	; 0xff
 8008872:	d108      	bne.n	8008886 <_vfprintf_r+0xa1e>
 8008874:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008878:	4413      	add	r3, r2
 800887a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800887c:	fb02 8803 	mla	r8, r2, r3, r8
 8008880:	e656      	b.n	8008530 <_vfprintf_r+0x6c8>
 8008882:	46a8      	mov	r8, r5
 8008884:	e7d6      	b.n	8008834 <_vfprintf_r+0x9cc>
 8008886:	42ab      	cmp	r3, r5
 8008888:	daf4      	bge.n	8008874 <_vfprintf_r+0xa0c>
 800888a:	1aed      	subs	r5, r5, r3
 800888c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800888e:	785b      	ldrb	r3, [r3, #1]
 8008890:	b133      	cbz	r3, 80088a0 <_vfprintf_r+0xa38>
 8008892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008894:	3301      	adds	r3, #1
 8008896:	9309      	str	r3, [sp, #36]	; 0x24
 8008898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800889a:	3301      	adds	r3, #1
 800889c:	930a      	str	r3, [sp, #40]	; 0x28
 800889e:	e7e5      	b.n	800886c <_vfprintf_r+0xa04>
 80088a0:	9b08      	ldr	r3, [sp, #32]
 80088a2:	3301      	adds	r3, #1
 80088a4:	9308      	str	r3, [sp, #32]
 80088a6:	e7e1      	b.n	800886c <_vfprintf_r+0xa04>
 80088a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088aa:	9308      	str	r3, [sp, #32]
 80088ac:	e640      	b.n	8008530 <_vfprintf_r+0x6c8>
 80088ae:	4632      	mov	r2, r6
 80088b0:	f01b 0f20 	tst.w	fp, #32
 80088b4:	f852 3b04 	ldr.w	r3, [r2], #4
 80088b8:	9206      	str	r2, [sp, #24]
 80088ba:	d009      	beq.n	80088d0 <_vfprintf_r+0xa68>
 80088bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088be:	4610      	mov	r0, r2
 80088c0:	17d1      	asrs	r1, r2, #31
 80088c2:	e9c3 0100 	strd	r0, r1, [r3]
 80088c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088c8:	9e06      	ldr	r6, [sp, #24]
 80088ca:	9303      	str	r3, [sp, #12]
 80088cc:	f7ff bb4f 	b.w	8007f6e <_vfprintf_r+0x106>
 80088d0:	f01b 0f10 	tst.w	fp, #16
 80088d4:	d002      	beq.n	80088dc <_vfprintf_r+0xa74>
 80088d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	e7f4      	b.n	80088c6 <_vfprintf_r+0xa5e>
 80088dc:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80088e0:	d002      	beq.n	80088e8 <_vfprintf_r+0xa80>
 80088e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088e4:	801a      	strh	r2, [r3, #0]
 80088e6:	e7ee      	b.n	80088c6 <_vfprintf_r+0xa5e>
 80088e8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80088ec:	d0f3      	beq.n	80088d6 <_vfprintf_r+0xa6e>
 80088ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088f0:	701a      	strb	r2, [r3, #0]
 80088f2:	e7e8      	b.n	80088c6 <_vfprintf_r+0xa5e>
 80088f4:	f04b 0b10 	orr.w	fp, fp, #16
 80088f8:	f01b 0f20 	tst.w	fp, #32
 80088fc:	d01e      	beq.n	800893c <_vfprintf_r+0xad4>
 80088fe:	3607      	adds	r6, #7
 8008900:	f026 0307 	bic.w	r3, r6, #7
 8008904:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8008908:	9306      	str	r3, [sp, #24]
 800890a:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800890e:	2300      	movs	r3, #0
 8008910:	2200      	movs	r2, #0
 8008912:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8008916:	f1b8 3fff 	cmp.w	r8, #4294967295
 800891a:	f000 84a9 	beq.w	8009270 <_vfprintf_r+0x1408>
 800891e:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8008922:	9204      	str	r2, [sp, #16]
 8008924:	ea56 0207 	orrs.w	r2, r6, r7
 8008928:	f040 84a8 	bne.w	800927c <_vfprintf_r+0x1414>
 800892c:	f1b8 0f00 	cmp.w	r8, #0
 8008930:	f000 8104 	beq.w	8008b3c <_vfprintf_r+0xcd4>
 8008934:	2b01      	cmp	r3, #1
 8008936:	f040 84a4 	bne.w	8009282 <_vfprintf_r+0x141a>
 800893a:	e09a      	b.n	8008a72 <_vfprintf_r+0xc0a>
 800893c:	1d33      	adds	r3, r6, #4
 800893e:	f01b 0f10 	tst.w	fp, #16
 8008942:	9306      	str	r3, [sp, #24]
 8008944:	d001      	beq.n	800894a <_vfprintf_r+0xae2>
 8008946:	6836      	ldr	r6, [r6, #0]
 8008948:	e003      	b.n	8008952 <_vfprintf_r+0xaea>
 800894a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800894e:	d002      	beq.n	8008956 <_vfprintf_r+0xaee>
 8008950:	8836      	ldrh	r6, [r6, #0]
 8008952:	2700      	movs	r7, #0
 8008954:	e7d9      	b.n	800890a <_vfprintf_r+0xaa2>
 8008956:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800895a:	d0f4      	beq.n	8008946 <_vfprintf_r+0xade>
 800895c:	7836      	ldrb	r6, [r6, #0]
 800895e:	e7f8      	b.n	8008952 <_vfprintf_r+0xaea>
 8008960:	4633      	mov	r3, r6
 8008962:	2278      	movs	r2, #120	; 0x78
 8008964:	f853 6b04 	ldr.w	r6, [r3], #4
 8008968:	9306      	str	r3, [sp, #24]
 800896a:	f647 0330 	movw	r3, #30768	; 0x7830
 800896e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8008972:	4ba8      	ldr	r3, [pc, #672]	; (8008c14 <_vfprintf_r+0xdac>)
 8008974:	9316      	str	r3, [sp, #88]	; 0x58
 8008976:	2700      	movs	r7, #0
 8008978:	f04b 0b02 	orr.w	fp, fp, #2
 800897c:	2302      	movs	r3, #2
 800897e:	9207      	str	r2, [sp, #28]
 8008980:	e7c6      	b.n	8008910 <_vfprintf_r+0xaa8>
 8008982:	4632      	mov	r2, r6
 8008984:	2500      	movs	r5, #0
 8008986:	f852 3b04 	ldr.w	r3, [r2], #4
 800898a:	9303      	str	r3, [sp, #12]
 800898c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008990:	9206      	str	r2, [sp, #24]
 8008992:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8008996:	d010      	beq.n	80089ba <_vfprintf_r+0xb52>
 8008998:	9803      	ldr	r0, [sp, #12]
 800899a:	4642      	mov	r2, r8
 800899c:	4629      	mov	r1, r5
 800899e:	f7f7 fc1f 	bl	80001e0 <memchr>
 80089a2:	9004      	str	r0, [sp, #16]
 80089a4:	2800      	cmp	r0, #0
 80089a6:	f000 80df 	beq.w	8008b68 <_vfprintf_r+0xd00>
 80089aa:	9a03      	ldr	r2, [sp, #12]
 80089ac:	9504      	str	r5, [sp, #16]
 80089ae:	e9cd 5508 	strd	r5, r5, [sp, #32]
 80089b2:	eba0 0802 	sub.w	r8, r0, r2
 80089b6:	462e      	mov	r6, r5
 80089b8:	e5c2      	b.n	8008540 <_vfprintf_r+0x6d8>
 80089ba:	9803      	ldr	r0, [sp, #12]
 80089bc:	f7f7 fc08 	bl	80001d0 <strlen>
 80089c0:	462e      	mov	r6, r5
 80089c2:	4680      	mov	r8, r0
 80089c4:	9504      	str	r5, [sp, #16]
 80089c6:	4633      	mov	r3, r6
 80089c8:	e45e      	b.n	8008288 <_vfprintf_r+0x420>
 80089ca:	f04b 0b10 	orr.w	fp, fp, #16
 80089ce:	f01b 0f20 	tst.w	fp, #32
 80089d2:	d007      	beq.n	80089e4 <_vfprintf_r+0xb7c>
 80089d4:	3607      	adds	r6, #7
 80089d6:	f026 0307 	bic.w	r3, r6, #7
 80089da:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80089de:	9306      	str	r3, [sp, #24]
 80089e0:	2301      	movs	r3, #1
 80089e2:	e795      	b.n	8008910 <_vfprintf_r+0xaa8>
 80089e4:	1d33      	adds	r3, r6, #4
 80089e6:	f01b 0f10 	tst.w	fp, #16
 80089ea:	9306      	str	r3, [sp, #24]
 80089ec:	d001      	beq.n	80089f2 <_vfprintf_r+0xb8a>
 80089ee:	6836      	ldr	r6, [r6, #0]
 80089f0:	e003      	b.n	80089fa <_vfprintf_r+0xb92>
 80089f2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80089f6:	d002      	beq.n	80089fe <_vfprintf_r+0xb96>
 80089f8:	8836      	ldrh	r6, [r6, #0]
 80089fa:	2700      	movs	r7, #0
 80089fc:	e7f0      	b.n	80089e0 <_vfprintf_r+0xb78>
 80089fe:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8008a02:	d0f4      	beq.n	80089ee <_vfprintf_r+0xb86>
 8008a04:	7836      	ldrb	r6, [r6, #0]
 8008a06:	e7f8      	b.n	80089fa <_vfprintf_r+0xb92>
 8008a08:	4b83      	ldr	r3, [pc, #524]	; (8008c18 <_vfprintf_r+0xdb0>)
 8008a0a:	9316      	str	r3, [sp, #88]	; 0x58
 8008a0c:	f01b 0f20 	tst.w	fp, #32
 8008a10:	d019      	beq.n	8008a46 <_vfprintf_r+0xbde>
 8008a12:	3607      	adds	r6, #7
 8008a14:	f026 0307 	bic.w	r3, r6, #7
 8008a18:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8008a1c:	9306      	str	r3, [sp, #24]
 8008a1e:	f01b 0f01 	tst.w	fp, #1
 8008a22:	d00a      	beq.n	8008a3a <_vfprintf_r+0xbd2>
 8008a24:	ea56 0307 	orrs.w	r3, r6, r7
 8008a28:	d007      	beq.n	8008a3a <_vfprintf_r+0xbd2>
 8008a2a:	2330      	movs	r3, #48	; 0x30
 8008a2c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8008a30:	9b07      	ldr	r3, [sp, #28]
 8008a32:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8008a36:	f04b 0b02 	orr.w	fp, fp, #2
 8008a3a:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8008a3e:	2302      	movs	r3, #2
 8008a40:	e766      	b.n	8008910 <_vfprintf_r+0xaa8>
 8008a42:	4b74      	ldr	r3, [pc, #464]	; (8008c14 <_vfprintf_r+0xdac>)
 8008a44:	e7e1      	b.n	8008a0a <_vfprintf_r+0xba2>
 8008a46:	1d33      	adds	r3, r6, #4
 8008a48:	f01b 0f10 	tst.w	fp, #16
 8008a4c:	9306      	str	r3, [sp, #24]
 8008a4e:	d001      	beq.n	8008a54 <_vfprintf_r+0xbec>
 8008a50:	6836      	ldr	r6, [r6, #0]
 8008a52:	e003      	b.n	8008a5c <_vfprintf_r+0xbf4>
 8008a54:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8008a58:	d002      	beq.n	8008a60 <_vfprintf_r+0xbf8>
 8008a5a:	8836      	ldrh	r6, [r6, #0]
 8008a5c:	2700      	movs	r7, #0
 8008a5e:	e7de      	b.n	8008a1e <_vfprintf_r+0xbb6>
 8008a60:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8008a64:	d0f4      	beq.n	8008a50 <_vfprintf_r+0xbe8>
 8008a66:	7836      	ldrb	r6, [r6, #0]
 8008a68:	e7f8      	b.n	8008a5c <_vfprintf_r+0xbf4>
 8008a6a:	2f00      	cmp	r7, #0
 8008a6c:	bf08      	it	eq
 8008a6e:	2e0a      	cmpeq	r6, #10
 8008a70:	d206      	bcs.n	8008a80 <_vfprintf_r+0xc18>
 8008a72:	3630      	adds	r6, #48	; 0x30
 8008a74:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8008a78:	f20d 1337 	addw	r3, sp, #311	; 0x137
 8008a7c:	f000 bc23 	b.w	80092c6 <_vfprintf_r+0x145e>
 8008a80:	2300      	movs	r3, #0
 8008a82:	9305      	str	r3, [sp, #20]
 8008a84:	9b04      	ldr	r3, [sp, #16]
 8008a86:	ad4e      	add	r5, sp, #312	; 0x138
 8008a88:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 8008a8c:	1e6b      	subs	r3, r5, #1
 8008a8e:	9303      	str	r3, [sp, #12]
 8008a90:	220a      	movs	r2, #10
 8008a92:	2300      	movs	r3, #0
 8008a94:	4630      	mov	r0, r6
 8008a96:	4639      	mov	r1, r7
 8008a98:	f7f8 f8d6 	bl	8000c48 <__aeabi_uldivmod>
 8008a9c:	9b05      	ldr	r3, [sp, #20]
 8008a9e:	3230      	adds	r2, #48	; 0x30
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	f805 2c01 	strb.w	r2, [r5, #-1]
 8008aa6:	9305      	str	r3, [sp, #20]
 8008aa8:	f1bb 0f00 	cmp.w	fp, #0
 8008aac:	d019      	beq.n	8008ae2 <_vfprintf_r+0xc7a>
 8008aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ab0:	9a05      	ldr	r2, [sp, #20]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d114      	bne.n	8008ae2 <_vfprintf_r+0xc7a>
 8008ab8:	2aff      	cmp	r2, #255	; 0xff
 8008aba:	d012      	beq.n	8008ae2 <_vfprintf_r+0xc7a>
 8008abc:	2f00      	cmp	r7, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2e0a      	cmpeq	r6, #10
 8008ac2:	d30e      	bcc.n	8008ae2 <_vfprintf_r+0xc7a>
 8008ac4:	9b03      	ldr	r3, [sp, #12]
 8008ac6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ac8:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008aca:	1a9b      	subs	r3, r3, r2
 8008acc:	4618      	mov	r0, r3
 8008ace:	9303      	str	r3, [sp, #12]
 8008ad0:	f002 fbff 	bl	800b2d2 <strncpy>
 8008ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad6:	785d      	ldrb	r5, [r3, #1]
 8008ad8:	b1e5      	cbz	r5, 8008b14 <_vfprintf_r+0xcac>
 8008ada:	3301      	adds	r3, #1
 8008adc:	930a      	str	r3, [sp, #40]	; 0x28
 8008ade:	2300      	movs	r3, #0
 8008ae0:	9305      	str	r3, [sp, #20]
 8008ae2:	220a      	movs	r2, #10
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	4639      	mov	r1, r7
 8008aea:	f7f8 f8ad 	bl	8000c48 <__aeabi_uldivmod>
 8008aee:	2f00      	cmp	r7, #0
 8008af0:	bf08      	it	eq
 8008af2:	2e0a      	cmpeq	r6, #10
 8008af4:	d20a      	bcs.n	8008b0c <_vfprintf_r+0xca4>
 8008af6:	9b03      	ldr	r3, [sp, #12]
 8008af8:	f8dd b010 	ldr.w	fp, [sp, #16]
 8008afc:	aa4e      	add	r2, sp, #312	; 0x138
 8008afe:	4646      	mov	r6, r8
 8008b00:	eba2 0803 	sub.w	r8, r2, r3
 8008b04:	2300      	movs	r3, #0
 8008b06:	9304      	str	r3, [sp, #16]
 8008b08:	f7ff bbbe 	b.w	8008288 <_vfprintf_r+0x420>
 8008b0c:	9d03      	ldr	r5, [sp, #12]
 8008b0e:	4606      	mov	r6, r0
 8008b10:	460f      	mov	r7, r1
 8008b12:	e7bb      	b.n	8008a8c <_vfprintf_r+0xc24>
 8008b14:	9505      	str	r5, [sp, #20]
 8008b16:	e7e4      	b.n	8008ae2 <_vfprintf_r+0xc7a>
 8008b18:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008b1a:	f006 030f 	and.w	r3, r6, #15
 8008b1e:	5cd3      	ldrb	r3, [r2, r3]
 8008b20:	9a03      	ldr	r2, [sp, #12]
 8008b22:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8008b26:	0933      	lsrs	r3, r6, #4
 8008b28:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8008b2c:	9203      	str	r2, [sp, #12]
 8008b2e:	093a      	lsrs	r2, r7, #4
 8008b30:	461e      	mov	r6, r3
 8008b32:	4617      	mov	r7, r2
 8008b34:	ea56 0307 	orrs.w	r3, r6, r7
 8008b38:	d1ee      	bne.n	8008b18 <_vfprintf_r+0xcb0>
 8008b3a:	e7dc      	b.n	8008af6 <_vfprintf_r+0xc8e>
 8008b3c:	b933      	cbnz	r3, 8008b4c <_vfprintf_r+0xce4>
 8008b3e:	f01b 0f01 	tst.w	fp, #1
 8008b42:	d003      	beq.n	8008b4c <_vfprintf_r+0xce4>
 8008b44:	2330      	movs	r3, #48	; 0x30
 8008b46:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8008b4a:	e795      	b.n	8008a78 <_vfprintf_r+0xc10>
 8008b4c:	ab4e      	add	r3, sp, #312	; 0x138
 8008b4e:	e3ba      	b.n	80092c6 <_vfprintf_r+0x145e>
 8008b50:	9b07      	ldr	r3, [sp, #28]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f000 837d 	beq.w	8009252 <_vfprintf_r+0x13ea>
 8008b58:	2000      	movs	r0, #0
 8008b5a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8008b5e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8008b62:	9606      	str	r6, [sp, #24]
 8008b64:	f7ff bb1e 	b.w	80081a4 <_vfprintf_r+0x33c>
 8008b68:	9e04      	ldr	r6, [sp, #16]
 8008b6a:	e72c      	b.n	80089c6 <_vfprintf_r+0xb5e>
 8008b6c:	2010      	movs	r0, #16
 8008b6e:	4402      	add	r2, r0
 8008b70:	2b07      	cmp	r3, #7
 8008b72:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8008b76:	6060      	str	r0, [r4, #4]
 8008b78:	dd08      	ble.n	8008b8c <_vfprintf_r+0xd24>
 8008b7a:	aa22      	add	r2, sp, #136	; 0x88
 8008b7c:	4649      	mov	r1, r9
 8008b7e:	4650      	mov	r0, sl
 8008b80:	f002 fc42 	bl	800b408 <__sprint_r>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	f040 8342 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008b8a:	a925      	add	r1, sp, #148	; 0x94
 8008b8c:	3f10      	subs	r7, #16
 8008b8e:	460c      	mov	r4, r1
 8008b90:	e4f1      	b.n	8008576 <_vfprintf_r+0x70e>
 8008b92:	460c      	mov	r4, r1
 8008b94:	e50a      	b.n	80085ac <_vfprintf_r+0x744>
 8008b96:	aa22      	add	r2, sp, #136	; 0x88
 8008b98:	4649      	mov	r1, r9
 8008b9a:	4650      	mov	r0, sl
 8008b9c:	f002 fc34 	bl	800b408 <__sprint_r>
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	f040 8334 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008ba6:	ac25      	add	r4, sp, #148	; 0x94
 8008ba8:	e512      	b.n	80085d0 <_vfprintf_r+0x768>
 8008baa:	aa22      	add	r2, sp, #136	; 0x88
 8008bac:	4649      	mov	r1, r9
 8008bae:	4650      	mov	r0, sl
 8008bb0:	f002 fc2a 	bl	800b408 <__sprint_r>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	f040 832a 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008bba:	ac25      	add	r4, sp, #148	; 0x94
 8008bbc:	e518      	b.n	80085f0 <_vfprintf_r+0x788>
 8008bbe:	2010      	movs	r0, #16
 8008bc0:	4402      	add	r2, r0
 8008bc2:	2b07      	cmp	r3, #7
 8008bc4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8008bc8:	6060      	str	r0, [r4, #4]
 8008bca:	dd08      	ble.n	8008bde <_vfprintf_r+0xd76>
 8008bcc:	aa22      	add	r2, sp, #136	; 0x88
 8008bce:	4649      	mov	r1, r9
 8008bd0:	4650      	mov	r0, sl
 8008bd2:	f002 fc19 	bl	800b408 <__sprint_r>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	f040 8319 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008bdc:	a925      	add	r1, sp, #148	; 0x94
 8008bde:	3f10      	subs	r7, #16
 8008be0:	460c      	mov	r4, r1
 8008be2:	e50d      	b.n	8008600 <_vfprintf_r+0x798>
 8008be4:	460c      	mov	r4, r1
 8008be6:	e526      	b.n	8008636 <_vfprintf_r+0x7ce>
 8008be8:	2010      	movs	r0, #16
 8008bea:	4402      	add	r2, r0
 8008bec:	2b07      	cmp	r3, #7
 8008bee:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8008bf2:	6060      	str	r0, [r4, #4]
 8008bf4:	dd08      	ble.n	8008c08 <_vfprintf_r+0xda0>
 8008bf6:	aa22      	add	r2, sp, #136	; 0x88
 8008bf8:	4649      	mov	r1, r9
 8008bfa:	4650      	mov	r0, sl
 8008bfc:	f002 fc04 	bl	800b408 <__sprint_r>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	f040 8304 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008c06:	a925      	add	r1, sp, #148	; 0x94
 8008c08:	3e10      	subs	r6, #16
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	e518      	b.n	8008640 <_vfprintf_r+0x7d8>
 8008c0e:	460c      	mov	r4, r1
 8008c10:	e530      	b.n	8008674 <_vfprintf_r+0x80c>
 8008c12:	bf00      	nop
 8008c14:	0800ca50 	.word	0x0800ca50
 8008c18:	0800ca61 	.word	0x0800ca61
 8008c1c:	9b07      	ldr	r3, [sp, #28]
 8008c1e:	2b65      	cmp	r3, #101	; 0x65
 8008c20:	f340 8242 	ble.w	80090a8 <_vfprintf_r+0x1240>
 8008c24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c28:	2200      	movs	r2, #0
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f7f7 ff4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d068      	beq.n	8008d06 <_vfprintf_r+0xe9e>
 8008c34:	4b6d      	ldr	r3, [pc, #436]	; (8008dec <_vfprintf_r+0xf84>)
 8008c36:	6023      	str	r3, [r4, #0]
 8008c38:	2301      	movs	r3, #1
 8008c3a:	441e      	add	r6, r3
 8008c3c:	6063      	str	r3, [r4, #4]
 8008c3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c40:	9624      	str	r6, [sp, #144]	; 0x90
 8008c42:	3301      	adds	r3, #1
 8008c44:	2b07      	cmp	r3, #7
 8008c46:	9323      	str	r3, [sp, #140]	; 0x8c
 8008c48:	dc37      	bgt.n	8008cba <_vfprintf_r+0xe52>
 8008c4a:	3408      	adds	r4, #8
 8008c4c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008c4e:	9a05      	ldr	r2, [sp, #20]
 8008c50:	4293      	cmp	r3, r2
 8008c52:	db03      	blt.n	8008c5c <_vfprintf_r+0xdf4>
 8008c54:	f01b 0f01 	tst.w	fp, #1
 8008c58:	f43f ad2b 	beq.w	80086b2 <_vfprintf_r+0x84a>
 8008c5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c5e:	6023      	str	r3, [r4, #0]
 8008c60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c64:	6063      	str	r3, [r4, #4]
 8008c66:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008c68:	4413      	add	r3, r2
 8008c6a:	9324      	str	r3, [sp, #144]	; 0x90
 8008c6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c6e:	3301      	adds	r3, #1
 8008c70:	2b07      	cmp	r3, #7
 8008c72:	9323      	str	r3, [sp, #140]	; 0x8c
 8008c74:	dc2b      	bgt.n	8008cce <_vfprintf_r+0xe66>
 8008c76:	3408      	adds	r4, #8
 8008c78:	9b05      	ldr	r3, [sp, #20]
 8008c7a:	1e5d      	subs	r5, r3, #1
 8008c7c:	2d00      	cmp	r5, #0
 8008c7e:	f77f ad18 	ble.w	80086b2 <_vfprintf_r+0x84a>
 8008c82:	4e5b      	ldr	r6, [pc, #364]	; (8008df0 <_vfprintf_r+0xf88>)
 8008c84:	2710      	movs	r7, #16
 8008c86:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008c8a:	2d10      	cmp	r5, #16
 8008c8c:	f103 0301 	add.w	r3, r3, #1
 8008c90:	f104 0108 	add.w	r1, r4, #8
 8008c94:	6026      	str	r6, [r4, #0]
 8008c96:	dc24      	bgt.n	8008ce2 <_vfprintf_r+0xe7a>
 8008c98:	6065      	str	r5, [r4, #4]
 8008c9a:	2b07      	cmp	r3, #7
 8008c9c:	4415      	add	r5, r2
 8008c9e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8008ca2:	f340 8293 	ble.w	80091cc <_vfprintf_r+0x1364>
 8008ca6:	aa22      	add	r2, sp, #136	; 0x88
 8008ca8:	4649      	mov	r1, r9
 8008caa:	4650      	mov	r0, sl
 8008cac:	f002 fbac 	bl	800b408 <__sprint_r>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	f040 82ac 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008cb6:	ac25      	add	r4, sp, #148	; 0x94
 8008cb8:	e4fb      	b.n	80086b2 <_vfprintf_r+0x84a>
 8008cba:	aa22      	add	r2, sp, #136	; 0x88
 8008cbc:	4649      	mov	r1, r9
 8008cbe:	4650      	mov	r0, sl
 8008cc0:	f002 fba2 	bl	800b408 <__sprint_r>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	f040 82a2 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008cca:	ac25      	add	r4, sp, #148	; 0x94
 8008ccc:	e7be      	b.n	8008c4c <_vfprintf_r+0xde4>
 8008cce:	aa22      	add	r2, sp, #136	; 0x88
 8008cd0:	4649      	mov	r1, r9
 8008cd2:	4650      	mov	r0, sl
 8008cd4:	f002 fb98 	bl	800b408 <__sprint_r>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	f040 8298 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008cde:	ac25      	add	r4, sp, #148	; 0x94
 8008ce0:	e7ca      	b.n	8008c78 <_vfprintf_r+0xe10>
 8008ce2:	3210      	adds	r2, #16
 8008ce4:	2b07      	cmp	r3, #7
 8008ce6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8008cea:	6067      	str	r7, [r4, #4]
 8008cec:	dd08      	ble.n	8008d00 <_vfprintf_r+0xe98>
 8008cee:	aa22      	add	r2, sp, #136	; 0x88
 8008cf0:	4649      	mov	r1, r9
 8008cf2:	4650      	mov	r0, sl
 8008cf4:	f002 fb88 	bl	800b408 <__sprint_r>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	f040 8288 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008cfe:	a925      	add	r1, sp, #148	; 0x94
 8008d00:	3d10      	subs	r5, #16
 8008d02:	460c      	mov	r4, r1
 8008d04:	e7bf      	b.n	8008c86 <_vfprintf_r+0xe1e>
 8008d06:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	dc73      	bgt.n	8008df4 <_vfprintf_r+0xf8c>
 8008d0c:	4b37      	ldr	r3, [pc, #220]	; (8008dec <_vfprintf_r+0xf84>)
 8008d0e:	6023      	str	r3, [r4, #0]
 8008d10:	2301      	movs	r3, #1
 8008d12:	441e      	add	r6, r3
 8008d14:	6063      	str	r3, [r4, #4]
 8008d16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d18:	9624      	str	r6, [sp, #144]	; 0x90
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	2b07      	cmp	r3, #7
 8008d1e:	9323      	str	r3, [sp, #140]	; 0x8c
 8008d20:	dc3d      	bgt.n	8008d9e <_vfprintf_r+0xf36>
 8008d22:	3408      	adds	r4, #8
 8008d24:	9905      	ldr	r1, [sp, #20]
 8008d26:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008d28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	f00b 0101 	and.w	r1, fp, #1
 8008d30:	430a      	orrs	r2, r1
 8008d32:	f43f acbe 	beq.w	80086b2 <_vfprintf_r+0x84a>
 8008d36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d38:	6022      	str	r2, [r4, #0]
 8008d3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d3c:	6062      	str	r2, [r4, #4]
 8008d3e:	4413      	add	r3, r2
 8008d40:	9324      	str	r3, [sp, #144]	; 0x90
 8008d42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d44:	3301      	adds	r3, #1
 8008d46:	2b07      	cmp	r3, #7
 8008d48:	9323      	str	r3, [sp, #140]	; 0x8c
 8008d4a:	dc32      	bgt.n	8008db2 <_vfprintf_r+0xf4a>
 8008d4c:	3408      	adds	r4, #8
 8008d4e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8008d50:	2d00      	cmp	r5, #0
 8008d52:	da1b      	bge.n	8008d8c <_vfprintf_r+0xf24>
 8008d54:	4e26      	ldr	r6, [pc, #152]	; (8008df0 <_vfprintf_r+0xf88>)
 8008d56:	426d      	negs	r5, r5
 8008d58:	4623      	mov	r3, r4
 8008d5a:	2710      	movs	r7, #16
 8008d5c:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8008d60:	2d10      	cmp	r5, #16
 8008d62:	f102 0201 	add.w	r2, r2, #1
 8008d66:	f104 0408 	add.w	r4, r4, #8
 8008d6a:	601e      	str	r6, [r3, #0]
 8008d6c:	dc2b      	bgt.n	8008dc6 <_vfprintf_r+0xf5e>
 8008d6e:	605d      	str	r5, [r3, #4]
 8008d70:	2a07      	cmp	r2, #7
 8008d72:	440d      	add	r5, r1
 8008d74:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8008d78:	dd08      	ble.n	8008d8c <_vfprintf_r+0xf24>
 8008d7a:	aa22      	add	r2, sp, #136	; 0x88
 8008d7c:	4649      	mov	r1, r9
 8008d7e:	4650      	mov	r0, sl
 8008d80:	f002 fb42 	bl	800b408 <__sprint_r>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	f040 8242 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008d8a:	ac25      	add	r4, sp, #148	; 0x94
 8008d8c:	9b03      	ldr	r3, [sp, #12]
 8008d8e:	6023      	str	r3, [r4, #0]
 8008d90:	9b05      	ldr	r3, [sp, #20]
 8008d92:	9a05      	ldr	r2, [sp, #20]
 8008d94:	6063      	str	r3, [r4, #4]
 8008d96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008d98:	4413      	add	r3, r2
 8008d9a:	9324      	str	r3, [sp, #144]	; 0x90
 8008d9c:	e482      	b.n	80086a4 <_vfprintf_r+0x83c>
 8008d9e:	aa22      	add	r2, sp, #136	; 0x88
 8008da0:	4649      	mov	r1, r9
 8008da2:	4650      	mov	r0, sl
 8008da4:	f002 fb30 	bl	800b408 <__sprint_r>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	f040 8230 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008dae:	ac25      	add	r4, sp, #148	; 0x94
 8008db0:	e7b8      	b.n	8008d24 <_vfprintf_r+0xebc>
 8008db2:	aa22      	add	r2, sp, #136	; 0x88
 8008db4:	4649      	mov	r1, r9
 8008db6:	4650      	mov	r0, sl
 8008db8:	f002 fb26 	bl	800b408 <__sprint_r>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	f040 8226 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008dc2:	ac25      	add	r4, sp, #148	; 0x94
 8008dc4:	e7c3      	b.n	8008d4e <_vfprintf_r+0xee6>
 8008dc6:	3110      	adds	r1, #16
 8008dc8:	2a07      	cmp	r2, #7
 8008dca:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8008dce:	605f      	str	r7, [r3, #4]
 8008dd0:	dd08      	ble.n	8008de4 <_vfprintf_r+0xf7c>
 8008dd2:	aa22      	add	r2, sp, #136	; 0x88
 8008dd4:	4649      	mov	r1, r9
 8008dd6:	4650      	mov	r0, sl
 8008dd8:	f002 fb16 	bl	800b408 <__sprint_r>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	f040 8216 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008de2:	ac25      	add	r4, sp, #148	; 0x94
 8008de4:	3d10      	subs	r5, #16
 8008de6:	4623      	mov	r3, r4
 8008de8:	e7b8      	b.n	8008d5c <_vfprintf_r+0xef4>
 8008dea:	bf00      	nop
 8008dec:	0800ca72 	.word	0x0800ca72
 8008df0:	0800caa4 	.word	0x0800caa4
 8008df4:	9b05      	ldr	r3, [sp, #20]
 8008df6:	42ab      	cmp	r3, r5
 8008df8:	bfa8      	it	ge
 8008dfa:	462b      	movge	r3, r5
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	461f      	mov	r7, r3
 8008e00:	dd0b      	ble.n	8008e1a <_vfprintf_r+0xfb2>
 8008e02:	9b03      	ldr	r3, [sp, #12]
 8008e04:	e9c4 3700 	strd	r3, r7, [r4]
 8008e08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	443e      	add	r6, r7
 8008e0e:	2b07      	cmp	r3, #7
 8008e10:	9624      	str	r6, [sp, #144]	; 0x90
 8008e12:	9323      	str	r3, [sp, #140]	; 0x8c
 8008e14:	f300 808c 	bgt.w	8008f30 <_vfprintf_r+0x10c8>
 8008e18:	3408      	adds	r4, #8
 8008e1a:	2f00      	cmp	r7, #0
 8008e1c:	bfac      	ite	ge
 8008e1e:	1bee      	subge	r6, r5, r7
 8008e20:	462e      	movlt	r6, r5
 8008e22:	2e00      	cmp	r6, #0
 8008e24:	dd1c      	ble.n	8008e60 <_vfprintf_r+0xff8>
 8008e26:	4f9f      	ldr	r7, [pc, #636]	; (80090a4 <_vfprintf_r+0x123c>)
 8008e28:	f04f 0810 	mov.w	r8, #16
 8008e2c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008e30:	2e10      	cmp	r6, #16
 8008e32:	f103 0301 	add.w	r3, r3, #1
 8008e36:	f104 0108 	add.w	r1, r4, #8
 8008e3a:	6027      	str	r7, [r4, #0]
 8008e3c:	f300 8082 	bgt.w	8008f44 <_vfprintf_r+0x10dc>
 8008e40:	6066      	str	r6, [r4, #4]
 8008e42:	2b07      	cmp	r3, #7
 8008e44:	4416      	add	r6, r2
 8008e46:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8008e4a:	f340 808e 	ble.w	8008f6a <_vfprintf_r+0x1102>
 8008e4e:	aa22      	add	r2, sp, #136	; 0x88
 8008e50:	4649      	mov	r1, r9
 8008e52:	4650      	mov	r0, sl
 8008e54:	f002 fad8 	bl	800b408 <__sprint_r>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	f040 81d8 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008e5e:	ac25      	add	r4, sp, #148	; 0x94
 8008e60:	9b03      	ldr	r3, [sp, #12]
 8008e62:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8008e66:	441d      	add	r5, r3
 8008e68:	d00d      	beq.n	8008e86 <_vfprintf_r+0x101e>
 8008e6a:	4e8e      	ldr	r6, [pc, #568]	; (80090a4 <_vfprintf_r+0x123c>)
 8008e6c:	2710      	movs	r7, #16
 8008e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d17c      	bne.n	8008f6e <_vfprintf_r+0x1106>
 8008e74:	9b08      	ldr	r3, [sp, #32]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d17c      	bne.n	8008f74 <_vfprintf_r+0x110c>
 8008e7a:	9b03      	ldr	r3, [sp, #12]
 8008e7c:	9a05      	ldr	r2, [sp, #20]
 8008e7e:	4413      	add	r3, r2
 8008e80:	429d      	cmp	r5, r3
 8008e82:	bf28      	it	cs
 8008e84:	461d      	movcs	r5, r3
 8008e86:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008e88:	9a05      	ldr	r2, [sp, #20]
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	db02      	blt.n	8008e94 <_vfprintf_r+0x102c>
 8008e8e:	f01b 0f01 	tst.w	fp, #1
 8008e92:	d00e      	beq.n	8008eb2 <_vfprintf_r+0x104a>
 8008e94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e96:	6023      	str	r3, [r4, #0]
 8008e98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e9c:	6063      	str	r3, [r4, #4]
 8008e9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008ea0:	4413      	add	r3, r2
 8008ea2:	9324      	str	r3, [sp, #144]	; 0x90
 8008ea4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	2b07      	cmp	r3, #7
 8008eaa:	9323      	str	r3, [sp, #140]	; 0x8c
 8008eac:	f300 80e5 	bgt.w	800907a <_vfprintf_r+0x1212>
 8008eb0:	3408      	adds	r4, #8
 8008eb2:	9905      	ldr	r1, [sp, #20]
 8008eb4:	9b03      	ldr	r3, [sp, #12]
 8008eb6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8008eb8:	440b      	add	r3, r1
 8008eba:	1b8e      	subs	r6, r1, r6
 8008ebc:	1b5a      	subs	r2, r3, r5
 8008ebe:	4296      	cmp	r6, r2
 8008ec0:	bfa8      	it	ge
 8008ec2:	4616      	movge	r6, r2
 8008ec4:	2e00      	cmp	r6, #0
 8008ec6:	dd0b      	ble.n	8008ee0 <_vfprintf_r+0x1078>
 8008ec8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008eca:	4433      	add	r3, r6
 8008ecc:	9324      	str	r3, [sp, #144]	; 0x90
 8008ece:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	2b07      	cmp	r3, #7
 8008ed4:	e9c4 5600 	strd	r5, r6, [r4]
 8008ed8:	9323      	str	r3, [sp, #140]	; 0x8c
 8008eda:	f300 80d8 	bgt.w	800908e <_vfprintf_r+0x1226>
 8008ede:	3408      	adds	r4, #8
 8008ee0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8008ee2:	9b05      	ldr	r3, [sp, #20]
 8008ee4:	2e00      	cmp	r6, #0
 8008ee6:	eba3 0505 	sub.w	r5, r3, r5
 8008eea:	bfa8      	it	ge
 8008eec:	1bad      	subge	r5, r5, r6
 8008eee:	2d00      	cmp	r5, #0
 8008ef0:	f77f abdf 	ble.w	80086b2 <_vfprintf_r+0x84a>
 8008ef4:	4e6b      	ldr	r6, [pc, #428]	; (80090a4 <_vfprintf_r+0x123c>)
 8008ef6:	2710      	movs	r7, #16
 8008ef8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008efc:	2d10      	cmp	r5, #16
 8008efe:	f103 0301 	add.w	r3, r3, #1
 8008f02:	f104 0108 	add.w	r1, r4, #8
 8008f06:	6026      	str	r6, [r4, #0]
 8008f08:	f77f aec6 	ble.w	8008c98 <_vfprintf_r+0xe30>
 8008f0c:	3210      	adds	r2, #16
 8008f0e:	2b07      	cmp	r3, #7
 8008f10:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8008f14:	6067      	str	r7, [r4, #4]
 8008f16:	dd08      	ble.n	8008f2a <_vfprintf_r+0x10c2>
 8008f18:	aa22      	add	r2, sp, #136	; 0x88
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	4650      	mov	r0, sl
 8008f1e:	f002 fa73 	bl	800b408 <__sprint_r>
 8008f22:	2800      	cmp	r0, #0
 8008f24:	f040 8173 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008f28:	a925      	add	r1, sp, #148	; 0x94
 8008f2a:	3d10      	subs	r5, #16
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	e7e3      	b.n	8008ef8 <_vfprintf_r+0x1090>
 8008f30:	aa22      	add	r2, sp, #136	; 0x88
 8008f32:	4649      	mov	r1, r9
 8008f34:	4650      	mov	r0, sl
 8008f36:	f002 fa67 	bl	800b408 <__sprint_r>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	f040 8167 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008f40:	ac25      	add	r4, sp, #148	; 0x94
 8008f42:	e76a      	b.n	8008e1a <_vfprintf_r+0xfb2>
 8008f44:	3210      	adds	r2, #16
 8008f46:	2b07      	cmp	r3, #7
 8008f48:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8008f4c:	f8c4 8004 	str.w	r8, [r4, #4]
 8008f50:	dd08      	ble.n	8008f64 <_vfprintf_r+0x10fc>
 8008f52:	aa22      	add	r2, sp, #136	; 0x88
 8008f54:	4649      	mov	r1, r9
 8008f56:	4650      	mov	r0, sl
 8008f58:	f002 fa56 	bl	800b408 <__sprint_r>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	f040 8156 	bne.w	800920e <_vfprintf_r+0x13a6>
 8008f62:	a925      	add	r1, sp, #148	; 0x94
 8008f64:	3e10      	subs	r6, #16
 8008f66:	460c      	mov	r4, r1
 8008f68:	e760      	b.n	8008e2c <_vfprintf_r+0xfc4>
 8008f6a:	460c      	mov	r4, r1
 8008f6c:	e778      	b.n	8008e60 <_vfprintf_r+0xff8>
 8008f6e:	9b08      	ldr	r3, [sp, #32]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d052      	beq.n	800901a <_vfprintf_r+0x11b2>
 8008f74:	9b08      	ldr	r3, [sp, #32]
 8008f76:	3b01      	subs	r3, #1
 8008f78:	9308      	str	r3, [sp, #32]
 8008f7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f82:	6063      	str	r3, [r4, #4]
 8008f84:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f86:	4413      	add	r3, r2
 8008f88:	9324      	str	r3, [sp, #144]	; 0x90
 8008f8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	2b07      	cmp	r3, #7
 8008f90:	9323      	str	r3, [sp, #140]	; 0x8c
 8008f92:	dc49      	bgt.n	8009028 <_vfprintf_r+0x11c0>
 8008f94:	3408      	adds	r4, #8
 8008f96:	9b03      	ldr	r3, [sp, #12]
 8008f98:	9a05      	ldr	r2, [sp, #20]
 8008f9a:	eb03 0802 	add.w	r8, r3, r2
 8008f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	eba8 0805 	sub.w	r8, r8, r5
 8008fa6:	4598      	cmp	r8, r3
 8008fa8:	bfa8      	it	ge
 8008faa:	4698      	movge	r8, r3
 8008fac:	f1b8 0f00 	cmp.w	r8, #0
 8008fb0:	dd0a      	ble.n	8008fc8 <_vfprintf_r+0x1160>
 8008fb2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008fb4:	4443      	add	r3, r8
 8008fb6:	9324      	str	r3, [sp, #144]	; 0x90
 8008fb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008fba:	3301      	adds	r3, #1
 8008fbc:	2b07      	cmp	r3, #7
 8008fbe:	e9c4 5800 	strd	r5, r8, [r4]
 8008fc2:	9323      	str	r3, [sp, #140]	; 0x8c
 8008fc4:	dc3a      	bgt.n	800903c <_vfprintf_r+0x11d4>
 8008fc6:	3408      	adds	r4, #8
 8008fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	f1b8 0f00 	cmp.w	r8, #0
 8008fd0:	bfac      	ite	ge
 8008fd2:	eba3 0808 	subge.w	r8, r3, r8
 8008fd6:	4698      	movlt	r8, r3
 8008fd8:	f1b8 0f00 	cmp.w	r8, #0
 8008fdc:	dd19      	ble.n	8009012 <_vfprintf_r+0x11aa>
 8008fde:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8008fe2:	f1b8 0f10 	cmp.w	r8, #16
 8008fe6:	f102 0201 	add.w	r2, r2, #1
 8008fea:	f104 0108 	add.w	r1, r4, #8
 8008fee:	6026      	str	r6, [r4, #0]
 8008ff0:	dc2e      	bgt.n	8009050 <_vfprintf_r+0x11e8>
 8008ff2:	4443      	add	r3, r8
 8008ff4:	2a07      	cmp	r2, #7
 8008ff6:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8008ffa:	f8c4 8004 	str.w	r8, [r4, #4]
 8008ffe:	dd3a      	ble.n	8009076 <_vfprintf_r+0x120e>
 8009000:	aa22      	add	r2, sp, #136	; 0x88
 8009002:	4649      	mov	r1, r9
 8009004:	4650      	mov	r0, sl
 8009006:	f002 f9ff 	bl	800b408 <__sprint_r>
 800900a:	2800      	cmp	r0, #0
 800900c:	f040 80ff 	bne.w	800920e <_vfprintf_r+0x13a6>
 8009010:	ac25      	add	r4, sp, #148	; 0x94
 8009012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	441d      	add	r5, r3
 8009018:	e729      	b.n	8008e6e <_vfprintf_r+0x1006>
 800901a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800901c:	3b01      	subs	r3, #1
 800901e:	930a      	str	r3, [sp, #40]	; 0x28
 8009020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009022:	3b01      	subs	r3, #1
 8009024:	9309      	str	r3, [sp, #36]	; 0x24
 8009026:	e7a8      	b.n	8008f7a <_vfprintf_r+0x1112>
 8009028:	aa22      	add	r2, sp, #136	; 0x88
 800902a:	4649      	mov	r1, r9
 800902c:	4650      	mov	r0, sl
 800902e:	f002 f9eb 	bl	800b408 <__sprint_r>
 8009032:	2800      	cmp	r0, #0
 8009034:	f040 80eb 	bne.w	800920e <_vfprintf_r+0x13a6>
 8009038:	ac25      	add	r4, sp, #148	; 0x94
 800903a:	e7ac      	b.n	8008f96 <_vfprintf_r+0x112e>
 800903c:	aa22      	add	r2, sp, #136	; 0x88
 800903e:	4649      	mov	r1, r9
 8009040:	4650      	mov	r0, sl
 8009042:	f002 f9e1 	bl	800b408 <__sprint_r>
 8009046:	2800      	cmp	r0, #0
 8009048:	f040 80e1 	bne.w	800920e <_vfprintf_r+0x13a6>
 800904c:	ac25      	add	r4, sp, #148	; 0x94
 800904e:	e7bb      	b.n	8008fc8 <_vfprintf_r+0x1160>
 8009050:	3310      	adds	r3, #16
 8009052:	2a07      	cmp	r2, #7
 8009054:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8009058:	6067      	str	r7, [r4, #4]
 800905a:	dd08      	ble.n	800906e <_vfprintf_r+0x1206>
 800905c:	aa22      	add	r2, sp, #136	; 0x88
 800905e:	4649      	mov	r1, r9
 8009060:	4650      	mov	r0, sl
 8009062:	f002 f9d1 	bl	800b408 <__sprint_r>
 8009066:	2800      	cmp	r0, #0
 8009068:	f040 80d1 	bne.w	800920e <_vfprintf_r+0x13a6>
 800906c:	a925      	add	r1, sp, #148	; 0x94
 800906e:	f1a8 0810 	sub.w	r8, r8, #16
 8009072:	460c      	mov	r4, r1
 8009074:	e7b3      	b.n	8008fde <_vfprintf_r+0x1176>
 8009076:	460c      	mov	r4, r1
 8009078:	e7cb      	b.n	8009012 <_vfprintf_r+0x11aa>
 800907a:	aa22      	add	r2, sp, #136	; 0x88
 800907c:	4649      	mov	r1, r9
 800907e:	4650      	mov	r0, sl
 8009080:	f002 f9c2 	bl	800b408 <__sprint_r>
 8009084:	2800      	cmp	r0, #0
 8009086:	f040 80c2 	bne.w	800920e <_vfprintf_r+0x13a6>
 800908a:	ac25      	add	r4, sp, #148	; 0x94
 800908c:	e711      	b.n	8008eb2 <_vfprintf_r+0x104a>
 800908e:	aa22      	add	r2, sp, #136	; 0x88
 8009090:	4649      	mov	r1, r9
 8009092:	4650      	mov	r0, sl
 8009094:	f002 f9b8 	bl	800b408 <__sprint_r>
 8009098:	2800      	cmp	r0, #0
 800909a:	f040 80b8 	bne.w	800920e <_vfprintf_r+0x13a6>
 800909e:	ac25      	add	r4, sp, #148	; 0x94
 80090a0:	e71e      	b.n	8008ee0 <_vfprintf_r+0x1078>
 80090a2:	bf00      	nop
 80090a4:	0800caa4 	.word	0x0800caa4
 80090a8:	9a05      	ldr	r2, [sp, #20]
 80090aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090ac:	2a01      	cmp	r2, #1
 80090ae:	9a03      	ldr	r2, [sp, #12]
 80090b0:	6022      	str	r2, [r4, #0]
 80090b2:	f106 0601 	add.w	r6, r6, #1
 80090b6:	f103 0301 	add.w	r3, r3, #1
 80090ba:	f04f 0201 	mov.w	r2, #1
 80090be:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80090c2:	f104 0508 	add.w	r5, r4, #8
 80090c6:	6062      	str	r2, [r4, #4]
 80090c8:	dc02      	bgt.n	80090d0 <_vfprintf_r+0x1268>
 80090ca:	f01b 0f01 	tst.w	fp, #1
 80090ce:	d078      	beq.n	80091c2 <_vfprintf_r+0x135a>
 80090d0:	2b07      	cmp	r3, #7
 80090d2:	dd08      	ble.n	80090e6 <_vfprintf_r+0x127e>
 80090d4:	aa22      	add	r2, sp, #136	; 0x88
 80090d6:	4649      	mov	r1, r9
 80090d8:	4650      	mov	r0, sl
 80090da:	f002 f995 	bl	800b408 <__sprint_r>
 80090de:	2800      	cmp	r0, #0
 80090e0:	f040 8095 	bne.w	800920e <_vfprintf_r+0x13a6>
 80090e4:	ad25      	add	r5, sp, #148	; 0x94
 80090e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090e8:	602b      	str	r3, [r5, #0]
 80090ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090ee:	606b      	str	r3, [r5, #4]
 80090f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80090f2:	4413      	add	r3, r2
 80090f4:	9324      	str	r3, [sp, #144]	; 0x90
 80090f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090f8:	3301      	adds	r3, #1
 80090fa:	2b07      	cmp	r3, #7
 80090fc:	9323      	str	r3, [sp, #140]	; 0x8c
 80090fe:	dc32      	bgt.n	8009166 <_vfprintf_r+0x12fe>
 8009100:	3508      	adds	r5, #8
 8009102:	9b05      	ldr	r3, [sp, #20]
 8009104:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009108:	1e5c      	subs	r4, r3, #1
 800910a:	2200      	movs	r2, #0
 800910c:	2300      	movs	r3, #0
 800910e:	f7f7 fcdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009112:	2800      	cmp	r0, #0
 8009114:	d130      	bne.n	8009178 <_vfprintf_r+0x1310>
 8009116:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8009118:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800911a:	9803      	ldr	r0, [sp, #12]
 800911c:	9a05      	ldr	r2, [sp, #20]
 800911e:	3101      	adds	r1, #1
 8009120:	3b01      	subs	r3, #1
 8009122:	3001      	adds	r0, #1
 8009124:	4413      	add	r3, r2
 8009126:	2907      	cmp	r1, #7
 8009128:	e9c5 0400 	strd	r0, r4, [r5]
 800912c:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8009130:	dd4a      	ble.n	80091c8 <_vfprintf_r+0x1360>
 8009132:	aa22      	add	r2, sp, #136	; 0x88
 8009134:	4649      	mov	r1, r9
 8009136:	4650      	mov	r0, sl
 8009138:	f002 f966 	bl	800b408 <__sprint_r>
 800913c:	2800      	cmp	r0, #0
 800913e:	d166      	bne.n	800920e <_vfprintf_r+0x13a6>
 8009140:	ad25      	add	r5, sp, #148	; 0x94
 8009142:	ab1e      	add	r3, sp, #120	; 0x78
 8009144:	602b      	str	r3, [r5, #0]
 8009146:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009148:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800914a:	606b      	str	r3, [r5, #4]
 800914c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800914e:	4413      	add	r3, r2
 8009150:	9324      	str	r3, [sp, #144]	; 0x90
 8009152:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009154:	3301      	adds	r3, #1
 8009156:	2b07      	cmp	r3, #7
 8009158:	9323      	str	r3, [sp, #140]	; 0x8c
 800915a:	f73f ada4 	bgt.w	8008ca6 <_vfprintf_r+0xe3e>
 800915e:	f105 0408 	add.w	r4, r5, #8
 8009162:	f7ff baa6 	b.w	80086b2 <_vfprintf_r+0x84a>
 8009166:	aa22      	add	r2, sp, #136	; 0x88
 8009168:	4649      	mov	r1, r9
 800916a:	4650      	mov	r0, sl
 800916c:	f002 f94c 	bl	800b408 <__sprint_r>
 8009170:	2800      	cmp	r0, #0
 8009172:	d14c      	bne.n	800920e <_vfprintf_r+0x13a6>
 8009174:	ad25      	add	r5, sp, #148	; 0x94
 8009176:	e7c4      	b.n	8009102 <_vfprintf_r+0x129a>
 8009178:	2c00      	cmp	r4, #0
 800917a:	dde2      	ble.n	8009142 <_vfprintf_r+0x12da>
 800917c:	4e53      	ldr	r6, [pc, #332]	; (80092cc <_vfprintf_r+0x1464>)
 800917e:	2710      	movs	r7, #16
 8009180:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009184:	2c10      	cmp	r4, #16
 8009186:	f103 0301 	add.w	r3, r3, #1
 800918a:	f105 0108 	add.w	r1, r5, #8
 800918e:	602e      	str	r6, [r5, #0]
 8009190:	dc07      	bgt.n	80091a2 <_vfprintf_r+0x133a>
 8009192:	606c      	str	r4, [r5, #4]
 8009194:	2b07      	cmp	r3, #7
 8009196:	4414      	add	r4, r2
 8009198:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800919c:	dcc9      	bgt.n	8009132 <_vfprintf_r+0x12ca>
 800919e:	460d      	mov	r5, r1
 80091a0:	e7cf      	b.n	8009142 <_vfprintf_r+0x12da>
 80091a2:	3210      	adds	r2, #16
 80091a4:	2b07      	cmp	r3, #7
 80091a6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80091aa:	606f      	str	r7, [r5, #4]
 80091ac:	dd06      	ble.n	80091bc <_vfprintf_r+0x1354>
 80091ae:	aa22      	add	r2, sp, #136	; 0x88
 80091b0:	4649      	mov	r1, r9
 80091b2:	4650      	mov	r0, sl
 80091b4:	f002 f928 	bl	800b408 <__sprint_r>
 80091b8:	bb48      	cbnz	r0, 800920e <_vfprintf_r+0x13a6>
 80091ba:	a925      	add	r1, sp, #148	; 0x94
 80091bc:	3c10      	subs	r4, #16
 80091be:	460d      	mov	r5, r1
 80091c0:	e7de      	b.n	8009180 <_vfprintf_r+0x1318>
 80091c2:	2b07      	cmp	r3, #7
 80091c4:	ddbd      	ble.n	8009142 <_vfprintf_r+0x12da>
 80091c6:	e7b4      	b.n	8009132 <_vfprintf_r+0x12ca>
 80091c8:	3508      	adds	r5, #8
 80091ca:	e7ba      	b.n	8009142 <_vfprintf_r+0x12da>
 80091cc:	460c      	mov	r4, r1
 80091ce:	f7ff ba70 	b.w	80086b2 <_vfprintf_r+0x84a>
 80091d2:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80091d6:	1a9d      	subs	r5, r3, r2
 80091d8:	2d00      	cmp	r5, #0
 80091da:	f77f aa6e 	ble.w	80086ba <_vfprintf_r+0x852>
 80091de:	4e3c      	ldr	r6, [pc, #240]	; (80092d0 <_vfprintf_r+0x1468>)
 80091e0:	2710      	movs	r7, #16
 80091e2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80091e6:	2d10      	cmp	r5, #16
 80091e8:	f103 0301 	add.w	r3, r3, #1
 80091ec:	6026      	str	r6, [r4, #0]
 80091ee:	dc18      	bgt.n	8009222 <_vfprintf_r+0x13ba>
 80091f0:	6065      	str	r5, [r4, #4]
 80091f2:	2b07      	cmp	r3, #7
 80091f4:	4415      	add	r5, r2
 80091f6:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 80091fa:	f77f aa5e 	ble.w	80086ba <_vfprintf_r+0x852>
 80091fe:	aa22      	add	r2, sp, #136	; 0x88
 8009200:	4649      	mov	r1, r9
 8009202:	4650      	mov	r0, sl
 8009204:	f002 f900 	bl	800b408 <__sprint_r>
 8009208:	2800      	cmp	r0, #0
 800920a:	f43f aa56 	beq.w	80086ba <_vfprintf_r+0x852>
 800920e:	9b04      	ldr	r3, [sp, #16]
 8009210:	2b00      	cmp	r3, #0
 8009212:	f43f a872 	beq.w	80082fa <_vfprintf_r+0x492>
 8009216:	4619      	mov	r1, r3
 8009218:	4650      	mov	r0, sl
 800921a:	f001 f8ef 	bl	800a3fc <_free_r>
 800921e:	f7ff b86c 	b.w	80082fa <_vfprintf_r+0x492>
 8009222:	3210      	adds	r2, #16
 8009224:	2b07      	cmp	r3, #7
 8009226:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800922a:	6067      	str	r7, [r4, #4]
 800922c:	dc02      	bgt.n	8009234 <_vfprintf_r+0x13cc>
 800922e:	3408      	adds	r4, #8
 8009230:	3d10      	subs	r5, #16
 8009232:	e7d6      	b.n	80091e2 <_vfprintf_r+0x137a>
 8009234:	aa22      	add	r2, sp, #136	; 0x88
 8009236:	4649      	mov	r1, r9
 8009238:	4650      	mov	r0, sl
 800923a:	f002 f8e5 	bl	800b408 <__sprint_r>
 800923e:	2800      	cmp	r0, #0
 8009240:	d1e5      	bne.n	800920e <_vfprintf_r+0x13a6>
 8009242:	ac25      	add	r4, sp, #148	; 0x94
 8009244:	e7f4      	b.n	8009230 <_vfprintf_r+0x13c8>
 8009246:	9904      	ldr	r1, [sp, #16]
 8009248:	4650      	mov	r0, sl
 800924a:	f001 f8d7 	bl	800a3fc <_free_r>
 800924e:	f7ff ba4c 	b.w	80086ea <_vfprintf_r+0x882>
 8009252:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009254:	b91b      	cbnz	r3, 800925e <_vfprintf_r+0x13f6>
 8009256:	2300      	movs	r3, #0
 8009258:	9323      	str	r3, [sp, #140]	; 0x8c
 800925a:	f7ff b84e 	b.w	80082fa <_vfprintf_r+0x492>
 800925e:	aa22      	add	r2, sp, #136	; 0x88
 8009260:	4649      	mov	r1, r9
 8009262:	4650      	mov	r0, sl
 8009264:	f002 f8d0 	bl	800b408 <__sprint_r>
 8009268:	2800      	cmp	r0, #0
 800926a:	d0f4      	beq.n	8009256 <_vfprintf_r+0x13ee>
 800926c:	f7ff b845 	b.w	80082fa <_vfprintf_r+0x492>
 8009270:	ea56 0207 	orrs.w	r2, r6, r7
 8009274:	f8cd b010 	str.w	fp, [sp, #16]
 8009278:	f43f ab5c 	beq.w	8008934 <_vfprintf_r+0xacc>
 800927c:	2b01      	cmp	r3, #1
 800927e:	f43f abf4 	beq.w	8008a6a <_vfprintf_r+0xc02>
 8009282:	2b02      	cmp	r3, #2
 8009284:	ab4e      	add	r3, sp, #312	; 0x138
 8009286:	9303      	str	r3, [sp, #12]
 8009288:	f43f ac46 	beq.w	8008b18 <_vfprintf_r+0xcb0>
 800928c:	9903      	ldr	r1, [sp, #12]
 800928e:	f006 0307 	and.w	r3, r6, #7
 8009292:	460a      	mov	r2, r1
 8009294:	3330      	adds	r3, #48	; 0x30
 8009296:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800929a:	9203      	str	r2, [sp, #12]
 800929c:	08f2      	lsrs	r2, r6, #3
 800929e:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80092a2:	08f8      	lsrs	r0, r7, #3
 80092a4:	4616      	mov	r6, r2
 80092a6:	4607      	mov	r7, r0
 80092a8:	ea56 0207 	orrs.w	r2, r6, r7
 80092ac:	d1ee      	bne.n	800928c <_vfprintf_r+0x1424>
 80092ae:	9a04      	ldr	r2, [sp, #16]
 80092b0:	07d0      	lsls	r0, r2, #31
 80092b2:	f57f ac20 	bpl.w	8008af6 <_vfprintf_r+0xc8e>
 80092b6:	2b30      	cmp	r3, #48	; 0x30
 80092b8:	f43f ac1d 	beq.w	8008af6 <_vfprintf_r+0xc8e>
 80092bc:	9a03      	ldr	r2, [sp, #12]
 80092be:	2330      	movs	r3, #48	; 0x30
 80092c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80092c4:	1e8b      	subs	r3, r1, #2
 80092c6:	9303      	str	r3, [sp, #12]
 80092c8:	e415      	b.n	8008af6 <_vfprintf_r+0xc8e>
 80092ca:	bf00      	nop
 80092cc:	0800caa4 	.word	0x0800caa4
 80092d0:	0800ca94 	.word	0x0800ca94

080092d4 <__sbprintf>:
 80092d4:	b570      	push	{r4, r5, r6, lr}
 80092d6:	460c      	mov	r4, r1
 80092d8:	8989      	ldrh	r1, [r1, #12]
 80092da:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 80092de:	f021 0102 	bic.w	r1, r1, #2
 80092e2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80092e6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80092e8:	911b      	str	r1, [sp, #108]	; 0x6c
 80092ea:	89e1      	ldrh	r1, [r4, #14]
 80092ec:	f8ad 1016 	strh.w	r1, [sp, #22]
 80092f0:	69e1      	ldr	r1, [r4, #28]
 80092f2:	9109      	str	r1, [sp, #36]	; 0x24
 80092f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80092f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80092f8:	a91c      	add	r1, sp, #112	; 0x70
 80092fa:	9102      	str	r1, [sp, #8]
 80092fc:	9106      	str	r1, [sp, #24]
 80092fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009302:	4606      	mov	r6, r0
 8009304:	9104      	str	r1, [sp, #16]
 8009306:	9107      	str	r1, [sp, #28]
 8009308:	a818      	add	r0, sp, #96	; 0x60
 800930a:	2100      	movs	r1, #0
 800930c:	e9cd 3200 	strd	r3, r2, [sp]
 8009310:	9108      	str	r1, [sp, #32]
 8009312:	f001 f957 	bl	800a5c4 <__retarget_lock_init_recursive>
 8009316:	e9dd 3200 	ldrd	r3, r2, [sp]
 800931a:	a902      	add	r1, sp, #8
 800931c:	4630      	mov	r0, r6
 800931e:	f7fe fda3 	bl	8007e68 <_vfprintf_r>
 8009322:	1e05      	subs	r5, r0, #0
 8009324:	db07      	blt.n	8009336 <__sbprintf+0x62>
 8009326:	a902      	add	r1, sp, #8
 8009328:	4630      	mov	r0, r6
 800932a:	f000 ff6b 	bl	800a204 <_fflush_r>
 800932e:	2800      	cmp	r0, #0
 8009330:	bf18      	it	ne
 8009332:	f04f 35ff 	movne.w	r5, #4294967295
 8009336:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800933a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800933c:	065b      	lsls	r3, r3, #25
 800933e:	bf42      	ittt	mi
 8009340:	89a3      	ldrhmi	r3, [r4, #12]
 8009342:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8009346:	81a3      	strhmi	r3, [r4, #12]
 8009348:	f001 f93d 	bl	800a5c6 <__retarget_lock_close_recursive>
 800934c:	4628      	mov	r0, r5
 800934e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8009352:	bd70      	pop	{r4, r5, r6, pc}

08009354 <__swsetup_r>:
 8009354:	b538      	push	{r3, r4, r5, lr}
 8009356:	4b2a      	ldr	r3, [pc, #168]	; (8009400 <__swsetup_r+0xac>)
 8009358:	4605      	mov	r5, r0
 800935a:	6818      	ldr	r0, [r3, #0]
 800935c:	460c      	mov	r4, r1
 800935e:	b118      	cbz	r0, 8009368 <__swsetup_r+0x14>
 8009360:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009362:	b90b      	cbnz	r3, 8009368 <__swsetup_r+0x14>
 8009364:	f000 ffba 	bl	800a2dc <__sinit>
 8009368:	89a3      	ldrh	r3, [r4, #12]
 800936a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800936e:	0718      	lsls	r0, r3, #28
 8009370:	d422      	bmi.n	80093b8 <__swsetup_r+0x64>
 8009372:	06d9      	lsls	r1, r3, #27
 8009374:	d407      	bmi.n	8009386 <__swsetup_r+0x32>
 8009376:	2309      	movs	r3, #9
 8009378:	602b      	str	r3, [r5, #0]
 800937a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800937e:	81a3      	strh	r3, [r4, #12]
 8009380:	f04f 30ff 	mov.w	r0, #4294967295
 8009384:	e034      	b.n	80093f0 <__swsetup_r+0x9c>
 8009386:	0758      	lsls	r0, r3, #29
 8009388:	d512      	bpl.n	80093b0 <__swsetup_r+0x5c>
 800938a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800938c:	b141      	cbz	r1, 80093a0 <__swsetup_r+0x4c>
 800938e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009392:	4299      	cmp	r1, r3
 8009394:	d002      	beq.n	800939c <__swsetup_r+0x48>
 8009396:	4628      	mov	r0, r5
 8009398:	f001 f830 	bl	800a3fc <_free_r>
 800939c:	2300      	movs	r3, #0
 800939e:	6323      	str	r3, [r4, #48]	; 0x30
 80093a0:	89a3      	ldrh	r3, [r4, #12]
 80093a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093a6:	81a3      	strh	r3, [r4, #12]
 80093a8:	2300      	movs	r3, #0
 80093aa:	6063      	str	r3, [r4, #4]
 80093ac:	6923      	ldr	r3, [r4, #16]
 80093ae:	6023      	str	r3, [r4, #0]
 80093b0:	89a3      	ldrh	r3, [r4, #12]
 80093b2:	f043 0308 	orr.w	r3, r3, #8
 80093b6:	81a3      	strh	r3, [r4, #12]
 80093b8:	6923      	ldr	r3, [r4, #16]
 80093ba:	b94b      	cbnz	r3, 80093d0 <__swsetup_r+0x7c>
 80093bc:	89a3      	ldrh	r3, [r4, #12]
 80093be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093c6:	d003      	beq.n	80093d0 <__swsetup_r+0x7c>
 80093c8:	4621      	mov	r1, r4
 80093ca:	4628      	mov	r0, r5
 80093cc:	f001 f92a 	bl	800a624 <__smakebuf_r>
 80093d0:	89a0      	ldrh	r0, [r4, #12]
 80093d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093d6:	f010 0301 	ands.w	r3, r0, #1
 80093da:	d00a      	beq.n	80093f2 <__swsetup_r+0x9e>
 80093dc:	2300      	movs	r3, #0
 80093de:	60a3      	str	r3, [r4, #8]
 80093e0:	6963      	ldr	r3, [r4, #20]
 80093e2:	425b      	negs	r3, r3
 80093e4:	61a3      	str	r3, [r4, #24]
 80093e6:	6923      	ldr	r3, [r4, #16]
 80093e8:	b943      	cbnz	r3, 80093fc <__swsetup_r+0xa8>
 80093ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093ee:	d1c4      	bne.n	800937a <__swsetup_r+0x26>
 80093f0:	bd38      	pop	{r3, r4, r5, pc}
 80093f2:	0781      	lsls	r1, r0, #30
 80093f4:	bf58      	it	pl
 80093f6:	6963      	ldrpl	r3, [r4, #20]
 80093f8:	60a3      	str	r3, [r4, #8]
 80093fa:	e7f4      	b.n	80093e6 <__swsetup_r+0x92>
 80093fc:	2000      	movs	r0, #0
 80093fe:	e7f7      	b.n	80093f0 <__swsetup_r+0x9c>
 8009400:	2000001c 	.word	0x2000001c

08009404 <register_fini>:
 8009404:	4b02      	ldr	r3, [pc, #8]	; (8009410 <register_fini+0xc>)
 8009406:	b113      	cbz	r3, 800940e <register_fini+0xa>
 8009408:	4802      	ldr	r0, [pc, #8]	; (8009414 <register_fini+0x10>)
 800940a:	f000 b805 	b.w	8009418 <atexit>
 800940e:	4770      	bx	lr
 8009410:	00000000 	.word	0x00000000
 8009414:	0800a32d 	.word	0x0800a32d

08009418 <atexit>:
 8009418:	2300      	movs	r3, #0
 800941a:	4601      	mov	r1, r0
 800941c:	461a      	mov	r2, r3
 800941e:	4618      	mov	r0, r3
 8009420:	f002 bcfe 	b.w	800be20 <__register_exitproc>

08009424 <quorem>:
 8009424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009428:	6903      	ldr	r3, [r0, #16]
 800942a:	690c      	ldr	r4, [r1, #16]
 800942c:	42a3      	cmp	r3, r4
 800942e:	4607      	mov	r7, r0
 8009430:	f2c0 8081 	blt.w	8009536 <quorem+0x112>
 8009434:	3c01      	subs	r4, #1
 8009436:	f101 0814 	add.w	r8, r1, #20
 800943a:	f100 0514 	add.w	r5, r0, #20
 800943e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009442:	9301      	str	r3, [sp, #4]
 8009444:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009448:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800944c:	3301      	adds	r3, #1
 800944e:	429a      	cmp	r2, r3
 8009450:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009454:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009458:	fbb2 f6f3 	udiv	r6, r2, r3
 800945c:	d331      	bcc.n	80094c2 <quorem+0x9e>
 800945e:	f04f 0e00 	mov.w	lr, #0
 8009462:	4640      	mov	r0, r8
 8009464:	46ac      	mov	ip, r5
 8009466:	46f2      	mov	sl, lr
 8009468:	f850 2b04 	ldr.w	r2, [r0], #4
 800946c:	b293      	uxth	r3, r2
 800946e:	fb06 e303 	mla	r3, r6, r3, lr
 8009472:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009476:	b29b      	uxth	r3, r3
 8009478:	ebaa 0303 	sub.w	r3, sl, r3
 800947c:	0c12      	lsrs	r2, r2, #16
 800947e:	f8dc a000 	ldr.w	sl, [ip]
 8009482:	fb06 e202 	mla	r2, r6, r2, lr
 8009486:	fa13 f38a 	uxtah	r3, r3, sl
 800948a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800948e:	fa1f fa82 	uxth.w	sl, r2
 8009492:	f8dc 2000 	ldr.w	r2, [ip]
 8009496:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800949a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800949e:	b29b      	uxth	r3, r3
 80094a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094a4:	4581      	cmp	r9, r0
 80094a6:	f84c 3b04 	str.w	r3, [ip], #4
 80094aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80094ae:	d2db      	bcs.n	8009468 <quorem+0x44>
 80094b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80094b4:	b92b      	cbnz	r3, 80094c2 <quorem+0x9e>
 80094b6:	9b01      	ldr	r3, [sp, #4]
 80094b8:	3b04      	subs	r3, #4
 80094ba:	429d      	cmp	r5, r3
 80094bc:	461a      	mov	r2, r3
 80094be:	d32e      	bcc.n	800951e <quorem+0xfa>
 80094c0:	613c      	str	r4, [r7, #16]
 80094c2:	4638      	mov	r0, r7
 80094c4:	f001 fd7a 	bl	800afbc <__mcmp>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	db24      	blt.n	8009516 <quorem+0xf2>
 80094cc:	3601      	adds	r6, #1
 80094ce:	4628      	mov	r0, r5
 80094d0:	f04f 0c00 	mov.w	ip, #0
 80094d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80094d8:	f8d0 e000 	ldr.w	lr, [r0]
 80094dc:	b293      	uxth	r3, r2
 80094de:	ebac 0303 	sub.w	r3, ip, r3
 80094e2:	0c12      	lsrs	r2, r2, #16
 80094e4:	fa13 f38e 	uxtah	r3, r3, lr
 80094e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80094ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094f6:	45c1      	cmp	r9, r8
 80094f8:	f840 3b04 	str.w	r3, [r0], #4
 80094fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009500:	d2e8      	bcs.n	80094d4 <quorem+0xb0>
 8009502:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009506:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800950a:	b922      	cbnz	r2, 8009516 <quorem+0xf2>
 800950c:	3b04      	subs	r3, #4
 800950e:	429d      	cmp	r5, r3
 8009510:	461a      	mov	r2, r3
 8009512:	d30a      	bcc.n	800952a <quorem+0x106>
 8009514:	613c      	str	r4, [r7, #16]
 8009516:	4630      	mov	r0, r6
 8009518:	b003      	add	sp, #12
 800951a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951e:	6812      	ldr	r2, [r2, #0]
 8009520:	3b04      	subs	r3, #4
 8009522:	2a00      	cmp	r2, #0
 8009524:	d1cc      	bne.n	80094c0 <quorem+0x9c>
 8009526:	3c01      	subs	r4, #1
 8009528:	e7c7      	b.n	80094ba <quorem+0x96>
 800952a:	6812      	ldr	r2, [r2, #0]
 800952c:	3b04      	subs	r3, #4
 800952e:	2a00      	cmp	r2, #0
 8009530:	d1f0      	bne.n	8009514 <quorem+0xf0>
 8009532:	3c01      	subs	r4, #1
 8009534:	e7eb      	b.n	800950e <quorem+0xea>
 8009536:	2000      	movs	r0, #0
 8009538:	e7ee      	b.n	8009518 <quorem+0xf4>
 800953a:	0000      	movs	r0, r0
 800953c:	0000      	movs	r0, r0
	...

08009540 <_dtoa_r>:
 8009540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009544:	ed2d 8b02 	vpush	{d8}
 8009548:	b095      	sub	sp, #84	; 0x54
 800954a:	ec57 6b10 	vmov	r6, r7, d0
 800954e:	9105      	str	r1, [sp, #20]
 8009550:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8009552:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8009554:	9209      	str	r2, [sp, #36]	; 0x24
 8009556:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800955a:	4604      	mov	r4, r0
 800955c:	930f      	str	r3, [sp, #60]	; 0x3c
 800955e:	b141      	cbz	r1, 8009572 <_dtoa_r+0x32>
 8009560:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009562:	604a      	str	r2, [r1, #4]
 8009564:	2301      	movs	r3, #1
 8009566:	4093      	lsls	r3, r2
 8009568:	608b      	str	r3, [r1, #8]
 800956a:	f001 fb1c 	bl	800aba6 <_Bfree>
 800956e:	2300      	movs	r3, #0
 8009570:	6423      	str	r3, [r4, #64]	; 0x40
 8009572:	1e3b      	subs	r3, r7, #0
 8009574:	bfb9      	ittee	lt
 8009576:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800957a:	9303      	strlt	r3, [sp, #12]
 800957c:	2300      	movge	r3, #0
 800957e:	602b      	strge	r3, [r5, #0]
 8009580:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009584:	4ba2      	ldr	r3, [pc, #648]	; (8009810 <_dtoa_r+0x2d0>)
 8009586:	bfbc      	itt	lt
 8009588:	2201      	movlt	r2, #1
 800958a:	602a      	strlt	r2, [r5, #0]
 800958c:	ea33 0309 	bics.w	r3, r3, r9
 8009590:	d11b      	bne.n	80095ca <_dtoa_r+0x8a>
 8009592:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009594:	f242 730f 	movw	r3, #9999	; 0x270f
 8009598:	6013      	str	r3, [r2, #0]
 800959a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800959e:	4333      	orrs	r3, r6
 80095a0:	f000 8578 	beq.w	800a094 <_dtoa_r+0xb54>
 80095a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095a6:	b90b      	cbnz	r3, 80095ac <_dtoa_r+0x6c>
 80095a8:	4b9a      	ldr	r3, [pc, #616]	; (8009814 <_dtoa_r+0x2d4>)
 80095aa:	e024      	b.n	80095f6 <_dtoa_r+0xb6>
 80095ac:	4b99      	ldr	r3, [pc, #612]	; (8009814 <_dtoa_r+0x2d4>)
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	3303      	adds	r3, #3
 80095b2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80095b4:	6013      	str	r3, [r2, #0]
 80095b6:	9800      	ldr	r0, [sp, #0]
 80095b8:	b015      	add	sp, #84	; 0x54
 80095ba:	ecbd 8b02 	vpop	{d8}
 80095be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c2:	4b95      	ldr	r3, [pc, #596]	; (8009818 <_dtoa_r+0x2d8>)
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	3308      	adds	r3, #8
 80095c8:	e7f3      	b.n	80095b2 <_dtoa_r+0x72>
 80095ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095ce:	2200      	movs	r2, #0
 80095d0:	ec51 0b17 	vmov	r0, r1, d7
 80095d4:	2300      	movs	r3, #0
 80095d6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80095da:	f7f7 fa75 	bl	8000ac8 <__aeabi_dcmpeq>
 80095de:	4680      	mov	r8, r0
 80095e0:	b158      	cbz	r0, 80095fa <_dtoa_r+0xba>
 80095e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095e4:	2301      	movs	r3, #1
 80095e6:	6013      	str	r3, [r2, #0]
 80095e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f000 854f 	beq.w	800a08e <_dtoa_r+0xb4e>
 80095f0:	488a      	ldr	r0, [pc, #552]	; (800981c <_dtoa_r+0x2dc>)
 80095f2:	6018      	str	r0, [r3, #0]
 80095f4:	1e43      	subs	r3, r0, #1
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	e7dd      	b.n	80095b6 <_dtoa_r+0x76>
 80095fa:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80095fe:	aa12      	add	r2, sp, #72	; 0x48
 8009600:	a913      	add	r1, sp, #76	; 0x4c
 8009602:	4620      	mov	r0, r4
 8009604:	f001 fd7e 	bl	800b104 <__d2b>
 8009608:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800960c:	4683      	mov	fp, r0
 800960e:	2d00      	cmp	r5, #0
 8009610:	d07c      	beq.n	800970c <_dtoa_r+0x1cc>
 8009612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009614:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009618:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800961c:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009620:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009624:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009628:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800962c:	4b7c      	ldr	r3, [pc, #496]	; (8009820 <_dtoa_r+0x2e0>)
 800962e:	2200      	movs	r2, #0
 8009630:	4630      	mov	r0, r6
 8009632:	4639      	mov	r1, r7
 8009634:	f7f6 fe28 	bl	8000288 <__aeabi_dsub>
 8009638:	a36f      	add	r3, pc, #444	; (adr r3, 80097f8 <_dtoa_r+0x2b8>)
 800963a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963e:	f7f6 ffdb 	bl	80005f8 <__aeabi_dmul>
 8009642:	a36f      	add	r3, pc, #444	; (adr r3, 8009800 <_dtoa_r+0x2c0>)
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	f7f6 fe20 	bl	800028c <__adddf3>
 800964c:	4606      	mov	r6, r0
 800964e:	4628      	mov	r0, r5
 8009650:	460f      	mov	r7, r1
 8009652:	f7f6 ff67 	bl	8000524 <__aeabi_i2d>
 8009656:	a36c      	add	r3, pc, #432	; (adr r3, 8009808 <_dtoa_r+0x2c8>)
 8009658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965c:	f7f6 ffcc 	bl	80005f8 <__aeabi_dmul>
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	4630      	mov	r0, r6
 8009666:	4639      	mov	r1, r7
 8009668:	f7f6 fe10 	bl	800028c <__adddf3>
 800966c:	4606      	mov	r6, r0
 800966e:	460f      	mov	r7, r1
 8009670:	f7f7 fa72 	bl	8000b58 <__aeabi_d2iz>
 8009674:	2200      	movs	r2, #0
 8009676:	4682      	mov	sl, r0
 8009678:	2300      	movs	r3, #0
 800967a:	4630      	mov	r0, r6
 800967c:	4639      	mov	r1, r7
 800967e:	f7f7 fa2d 	bl	8000adc <__aeabi_dcmplt>
 8009682:	b148      	cbz	r0, 8009698 <_dtoa_r+0x158>
 8009684:	4650      	mov	r0, sl
 8009686:	f7f6 ff4d 	bl	8000524 <__aeabi_i2d>
 800968a:	4632      	mov	r2, r6
 800968c:	463b      	mov	r3, r7
 800968e:	f7f7 fa1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009692:	b908      	cbnz	r0, 8009698 <_dtoa_r+0x158>
 8009694:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009698:	f1ba 0f16 	cmp.w	sl, #22
 800969c:	d854      	bhi.n	8009748 <_dtoa_r+0x208>
 800969e:	4b61      	ldr	r3, [pc, #388]	; (8009824 <_dtoa_r+0x2e4>)
 80096a0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80096a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80096ac:	f7f7 fa16 	bl	8000adc <__aeabi_dcmplt>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d04b      	beq.n	800974c <_dtoa_r+0x20c>
 80096b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096b8:	2300      	movs	r3, #0
 80096ba:	930e      	str	r3, [sp, #56]	; 0x38
 80096bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096be:	1b5d      	subs	r5, r3, r5
 80096c0:	1e6b      	subs	r3, r5, #1
 80096c2:	9304      	str	r3, [sp, #16]
 80096c4:	bf43      	ittte	mi
 80096c6:	2300      	movmi	r3, #0
 80096c8:	f1c5 0801 	rsbmi	r8, r5, #1
 80096cc:	9304      	strmi	r3, [sp, #16]
 80096ce:	f04f 0800 	movpl.w	r8, #0
 80096d2:	f1ba 0f00 	cmp.w	sl, #0
 80096d6:	db3b      	blt.n	8009750 <_dtoa_r+0x210>
 80096d8:	9b04      	ldr	r3, [sp, #16]
 80096da:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80096de:	4453      	add	r3, sl
 80096e0:	9304      	str	r3, [sp, #16]
 80096e2:	2300      	movs	r3, #0
 80096e4:	9306      	str	r3, [sp, #24]
 80096e6:	9b05      	ldr	r3, [sp, #20]
 80096e8:	2b09      	cmp	r3, #9
 80096ea:	d86a      	bhi.n	80097c2 <_dtoa_r+0x282>
 80096ec:	2b05      	cmp	r3, #5
 80096ee:	bfc4      	itt	gt
 80096f0:	3b04      	subgt	r3, #4
 80096f2:	9305      	strgt	r3, [sp, #20]
 80096f4:	9b05      	ldr	r3, [sp, #20]
 80096f6:	f1a3 0302 	sub.w	r3, r3, #2
 80096fa:	bfcc      	ite	gt
 80096fc:	2500      	movgt	r5, #0
 80096fe:	2501      	movle	r5, #1
 8009700:	2b03      	cmp	r3, #3
 8009702:	d86a      	bhi.n	80097da <_dtoa_r+0x29a>
 8009704:	e8df f003 	tbb	[pc, r3]
 8009708:	5b4d4f2c 	.word	0x5b4d4f2c
 800970c:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009710:	441d      	add	r5, r3
 8009712:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009716:	2b20      	cmp	r3, #32
 8009718:	bfc1      	itttt	gt
 800971a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800971e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009722:	fa09 f303 	lslgt.w	r3, r9, r3
 8009726:	fa26 f000 	lsrgt.w	r0, r6, r0
 800972a:	bfda      	itte	le
 800972c:	f1c3 0320 	rsble	r3, r3, #32
 8009730:	fa06 f003 	lslle.w	r0, r6, r3
 8009734:	4318      	orrgt	r0, r3
 8009736:	f7f6 fee5 	bl	8000504 <__aeabi_ui2d>
 800973a:	2301      	movs	r3, #1
 800973c:	4606      	mov	r6, r0
 800973e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009742:	3d01      	subs	r5, #1
 8009744:	9310      	str	r3, [sp, #64]	; 0x40
 8009746:	e771      	b.n	800962c <_dtoa_r+0xec>
 8009748:	2301      	movs	r3, #1
 800974a:	e7b6      	b.n	80096ba <_dtoa_r+0x17a>
 800974c:	900e      	str	r0, [sp, #56]	; 0x38
 800974e:	e7b5      	b.n	80096bc <_dtoa_r+0x17c>
 8009750:	f1ca 0300 	rsb	r3, sl, #0
 8009754:	9306      	str	r3, [sp, #24]
 8009756:	2300      	movs	r3, #0
 8009758:	eba8 080a 	sub.w	r8, r8, sl
 800975c:	930d      	str	r3, [sp, #52]	; 0x34
 800975e:	e7c2      	b.n	80096e6 <_dtoa_r+0x1a6>
 8009760:	2300      	movs	r3, #0
 8009762:	9308      	str	r3, [sp, #32]
 8009764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009766:	2b00      	cmp	r3, #0
 8009768:	dc3a      	bgt.n	80097e0 <_dtoa_r+0x2a0>
 800976a:	f04f 0901 	mov.w	r9, #1
 800976e:	f8cd 9004 	str.w	r9, [sp, #4]
 8009772:	464b      	mov	r3, r9
 8009774:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009778:	2200      	movs	r2, #0
 800977a:	6462      	str	r2, [r4, #68]	; 0x44
 800977c:	2204      	movs	r2, #4
 800977e:	f102 0014 	add.w	r0, r2, #20
 8009782:	4298      	cmp	r0, r3
 8009784:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009786:	d931      	bls.n	80097ec <_dtoa_r+0x2ac>
 8009788:	4620      	mov	r0, r4
 800978a:	f001 f9e7 	bl	800ab5c <_Balloc>
 800978e:	9000      	str	r0, [sp, #0]
 8009790:	2800      	cmp	r0, #0
 8009792:	d14d      	bne.n	8009830 <_dtoa_r+0x2f0>
 8009794:	4b24      	ldr	r3, [pc, #144]	; (8009828 <_dtoa_r+0x2e8>)
 8009796:	4602      	mov	r2, r0
 8009798:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800979c:	4823      	ldr	r0, [pc, #140]	; (800982c <_dtoa_r+0x2ec>)
 800979e:	f002 fb7f 	bl	800bea0 <__assert_func>
 80097a2:	2301      	movs	r3, #1
 80097a4:	e7dd      	b.n	8009762 <_dtoa_r+0x222>
 80097a6:	2300      	movs	r3, #0
 80097a8:	9308      	str	r3, [sp, #32]
 80097aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ac:	eb0a 0903 	add.w	r9, sl, r3
 80097b0:	f109 0301 	add.w	r3, r9, #1
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	9301      	str	r3, [sp, #4]
 80097b8:	bfb8      	it	lt
 80097ba:	2301      	movlt	r3, #1
 80097bc:	e7dc      	b.n	8009778 <_dtoa_r+0x238>
 80097be:	2301      	movs	r3, #1
 80097c0:	e7f2      	b.n	80097a8 <_dtoa_r+0x268>
 80097c2:	2501      	movs	r5, #1
 80097c4:	2300      	movs	r3, #0
 80097c6:	9305      	str	r3, [sp, #20]
 80097c8:	9508      	str	r5, [sp, #32]
 80097ca:	f04f 39ff 	mov.w	r9, #4294967295
 80097ce:	2200      	movs	r2, #0
 80097d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80097d4:	2312      	movs	r3, #18
 80097d6:	9209      	str	r2, [sp, #36]	; 0x24
 80097d8:	e7ce      	b.n	8009778 <_dtoa_r+0x238>
 80097da:	2301      	movs	r3, #1
 80097dc:	9308      	str	r3, [sp, #32]
 80097de:	e7f4      	b.n	80097ca <_dtoa_r+0x28a>
 80097e0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80097e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80097e8:	464b      	mov	r3, r9
 80097ea:	e7c5      	b.n	8009778 <_dtoa_r+0x238>
 80097ec:	3101      	adds	r1, #1
 80097ee:	6461      	str	r1, [r4, #68]	; 0x44
 80097f0:	0052      	lsls	r2, r2, #1
 80097f2:	e7c4      	b.n	800977e <_dtoa_r+0x23e>
 80097f4:	f3af 8000 	nop.w
 80097f8:	636f4361 	.word	0x636f4361
 80097fc:	3fd287a7 	.word	0x3fd287a7
 8009800:	8b60c8b3 	.word	0x8b60c8b3
 8009804:	3fc68a28 	.word	0x3fc68a28
 8009808:	509f79fb 	.word	0x509f79fb
 800980c:	3fd34413 	.word	0x3fd34413
 8009810:	7ff00000 	.word	0x7ff00000
 8009814:	0800cab4 	.word	0x0800cab4
 8009818:	0800cab8 	.word	0x0800cab8
 800981c:	0800ca73 	.word	0x0800ca73
 8009820:	3ff80000 	.word	0x3ff80000
 8009824:	0800cbc0 	.word	0x0800cbc0
 8009828:	0800cac1 	.word	0x0800cac1
 800982c:	0800cad2 	.word	0x0800cad2
 8009830:	9b00      	ldr	r3, [sp, #0]
 8009832:	6423      	str	r3, [r4, #64]	; 0x40
 8009834:	9b01      	ldr	r3, [sp, #4]
 8009836:	2b0e      	cmp	r3, #14
 8009838:	f200 80ad 	bhi.w	8009996 <_dtoa_r+0x456>
 800983c:	2d00      	cmp	r5, #0
 800983e:	f000 80aa 	beq.w	8009996 <_dtoa_r+0x456>
 8009842:	f1ba 0f00 	cmp.w	sl, #0
 8009846:	dd36      	ble.n	80098b6 <_dtoa_r+0x376>
 8009848:	4ac2      	ldr	r2, [pc, #776]	; (8009b54 <_dtoa_r+0x614>)
 800984a:	f00a 030f 	and.w	r3, sl, #15
 800984e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009852:	ed93 7b00 	vldr	d7, [r3]
 8009856:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800985a:	ea4f 172a 	mov.w	r7, sl, asr #4
 800985e:	eeb0 8a47 	vmov.f32	s16, s14
 8009862:	eef0 8a67 	vmov.f32	s17, s15
 8009866:	d016      	beq.n	8009896 <_dtoa_r+0x356>
 8009868:	4bbb      	ldr	r3, [pc, #748]	; (8009b58 <_dtoa_r+0x618>)
 800986a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800986e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009872:	f7f6 ffeb 	bl	800084c <__aeabi_ddiv>
 8009876:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800987a:	f007 070f 	and.w	r7, r7, #15
 800987e:	2503      	movs	r5, #3
 8009880:	4eb5      	ldr	r6, [pc, #724]	; (8009b58 <_dtoa_r+0x618>)
 8009882:	b957      	cbnz	r7, 800989a <_dtoa_r+0x35a>
 8009884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009888:	ec53 2b18 	vmov	r2, r3, d8
 800988c:	f7f6 ffde 	bl	800084c <__aeabi_ddiv>
 8009890:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009894:	e029      	b.n	80098ea <_dtoa_r+0x3aa>
 8009896:	2502      	movs	r5, #2
 8009898:	e7f2      	b.n	8009880 <_dtoa_r+0x340>
 800989a:	07f9      	lsls	r1, r7, #31
 800989c:	d508      	bpl.n	80098b0 <_dtoa_r+0x370>
 800989e:	ec51 0b18 	vmov	r0, r1, d8
 80098a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80098a6:	f7f6 fea7 	bl	80005f8 <__aeabi_dmul>
 80098aa:	ec41 0b18 	vmov	d8, r0, r1
 80098ae:	3501      	adds	r5, #1
 80098b0:	107f      	asrs	r7, r7, #1
 80098b2:	3608      	adds	r6, #8
 80098b4:	e7e5      	b.n	8009882 <_dtoa_r+0x342>
 80098b6:	f000 80a6 	beq.w	8009a06 <_dtoa_r+0x4c6>
 80098ba:	f1ca 0600 	rsb	r6, sl, #0
 80098be:	4ba5      	ldr	r3, [pc, #660]	; (8009b54 <_dtoa_r+0x614>)
 80098c0:	4fa5      	ldr	r7, [pc, #660]	; (8009b58 <_dtoa_r+0x618>)
 80098c2:	f006 020f 	and.w	r2, r6, #15
 80098c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80098d2:	f7f6 fe91 	bl	80005f8 <__aeabi_dmul>
 80098d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098da:	1136      	asrs	r6, r6, #4
 80098dc:	2300      	movs	r3, #0
 80098de:	2502      	movs	r5, #2
 80098e0:	2e00      	cmp	r6, #0
 80098e2:	f040 8085 	bne.w	80099f0 <_dtoa_r+0x4b0>
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1d2      	bne.n	8009890 <_dtoa_r+0x350>
 80098ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 808c 	beq.w	8009a0a <_dtoa_r+0x4ca>
 80098f2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80098f6:	4b99      	ldr	r3, [pc, #612]	; (8009b5c <_dtoa_r+0x61c>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	4630      	mov	r0, r6
 80098fc:	4639      	mov	r1, r7
 80098fe:	f7f7 f8ed 	bl	8000adc <__aeabi_dcmplt>
 8009902:	2800      	cmp	r0, #0
 8009904:	f000 8081 	beq.w	8009a0a <_dtoa_r+0x4ca>
 8009908:	9b01      	ldr	r3, [sp, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d07d      	beq.n	8009a0a <_dtoa_r+0x4ca>
 800990e:	f1b9 0f00 	cmp.w	r9, #0
 8009912:	dd3c      	ble.n	800998e <_dtoa_r+0x44e>
 8009914:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009918:	9307      	str	r3, [sp, #28]
 800991a:	2200      	movs	r2, #0
 800991c:	4b90      	ldr	r3, [pc, #576]	; (8009b60 <_dtoa_r+0x620>)
 800991e:	4630      	mov	r0, r6
 8009920:	4639      	mov	r1, r7
 8009922:	f7f6 fe69 	bl	80005f8 <__aeabi_dmul>
 8009926:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800992a:	3501      	adds	r5, #1
 800992c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009930:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009934:	4628      	mov	r0, r5
 8009936:	f7f6 fdf5 	bl	8000524 <__aeabi_i2d>
 800993a:	4632      	mov	r2, r6
 800993c:	463b      	mov	r3, r7
 800993e:	f7f6 fe5b 	bl	80005f8 <__aeabi_dmul>
 8009942:	4b88      	ldr	r3, [pc, #544]	; (8009b64 <_dtoa_r+0x624>)
 8009944:	2200      	movs	r2, #0
 8009946:	f7f6 fca1 	bl	800028c <__adddf3>
 800994a:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800994e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009952:	9303      	str	r3, [sp, #12]
 8009954:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009956:	2b00      	cmp	r3, #0
 8009958:	d15c      	bne.n	8009a14 <_dtoa_r+0x4d4>
 800995a:	4b83      	ldr	r3, [pc, #524]	; (8009b68 <_dtoa_r+0x628>)
 800995c:	2200      	movs	r2, #0
 800995e:	4630      	mov	r0, r6
 8009960:	4639      	mov	r1, r7
 8009962:	f7f6 fc91 	bl	8000288 <__aeabi_dsub>
 8009966:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800996a:	4606      	mov	r6, r0
 800996c:	460f      	mov	r7, r1
 800996e:	f7f7 f8d3 	bl	8000b18 <__aeabi_dcmpgt>
 8009972:	2800      	cmp	r0, #0
 8009974:	f040 8295 	bne.w	8009ea2 <_dtoa_r+0x962>
 8009978:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800997c:	4630      	mov	r0, r6
 800997e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009982:	4639      	mov	r1, r7
 8009984:	f7f7 f8aa 	bl	8000adc <__aeabi_dcmplt>
 8009988:	2800      	cmp	r0, #0
 800998a:	f040 8287 	bne.w	8009e9c <_dtoa_r+0x95c>
 800998e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009992:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009996:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009998:	2b00      	cmp	r3, #0
 800999a:	f2c0 8157 	blt.w	8009c4c <_dtoa_r+0x70c>
 800999e:	f1ba 0f0e 	cmp.w	sl, #14
 80099a2:	f300 8153 	bgt.w	8009c4c <_dtoa_r+0x70c>
 80099a6:	4b6b      	ldr	r3, [pc, #428]	; (8009b54 <_dtoa_r+0x614>)
 80099a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80099ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f280 80e2 	bge.w	8009b7c <_dtoa_r+0x63c>
 80099b8:	9b01      	ldr	r3, [sp, #4]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f300 80de 	bgt.w	8009b7c <_dtoa_r+0x63c>
 80099c0:	f040 826c 	bne.w	8009e9c <_dtoa_r+0x95c>
 80099c4:	4b68      	ldr	r3, [pc, #416]	; (8009b68 <_dtoa_r+0x628>)
 80099c6:	2200      	movs	r2, #0
 80099c8:	4640      	mov	r0, r8
 80099ca:	4649      	mov	r1, r9
 80099cc:	f7f6 fe14 	bl	80005f8 <__aeabi_dmul>
 80099d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099d4:	f7f7 f896 	bl	8000b04 <__aeabi_dcmpge>
 80099d8:	9e01      	ldr	r6, [sp, #4]
 80099da:	4637      	mov	r7, r6
 80099dc:	2800      	cmp	r0, #0
 80099de:	f040 8242 	bne.w	8009e66 <_dtoa_r+0x926>
 80099e2:	9d00      	ldr	r5, [sp, #0]
 80099e4:	2331      	movs	r3, #49	; 0x31
 80099e6:	f805 3b01 	strb.w	r3, [r5], #1
 80099ea:	f10a 0a01 	add.w	sl, sl, #1
 80099ee:	e23e      	b.n	8009e6e <_dtoa_r+0x92e>
 80099f0:	07f2      	lsls	r2, r6, #31
 80099f2:	d505      	bpl.n	8009a00 <_dtoa_r+0x4c0>
 80099f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099f8:	f7f6 fdfe 	bl	80005f8 <__aeabi_dmul>
 80099fc:	3501      	adds	r5, #1
 80099fe:	2301      	movs	r3, #1
 8009a00:	1076      	asrs	r6, r6, #1
 8009a02:	3708      	adds	r7, #8
 8009a04:	e76c      	b.n	80098e0 <_dtoa_r+0x3a0>
 8009a06:	2502      	movs	r5, #2
 8009a08:	e76f      	b.n	80098ea <_dtoa_r+0x3aa>
 8009a0a:	9b01      	ldr	r3, [sp, #4]
 8009a0c:	f8cd a01c 	str.w	sl, [sp, #28]
 8009a10:	930c      	str	r3, [sp, #48]	; 0x30
 8009a12:	e78d      	b.n	8009930 <_dtoa_r+0x3f0>
 8009a14:	9900      	ldr	r1, [sp, #0]
 8009a16:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009a18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a1a:	4b4e      	ldr	r3, [pc, #312]	; (8009b54 <_dtoa_r+0x614>)
 8009a1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a20:	4401      	add	r1, r0
 8009a22:	9102      	str	r1, [sp, #8]
 8009a24:	9908      	ldr	r1, [sp, #32]
 8009a26:	eeb0 8a47 	vmov.f32	s16, s14
 8009a2a:	eef0 8a67 	vmov.f32	s17, s15
 8009a2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a36:	2900      	cmp	r1, #0
 8009a38:	d045      	beq.n	8009ac6 <_dtoa_r+0x586>
 8009a3a:	494c      	ldr	r1, [pc, #304]	; (8009b6c <_dtoa_r+0x62c>)
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	f7f6 ff05 	bl	800084c <__aeabi_ddiv>
 8009a42:	ec53 2b18 	vmov	r2, r3, d8
 8009a46:	f7f6 fc1f 	bl	8000288 <__aeabi_dsub>
 8009a4a:	9d00      	ldr	r5, [sp, #0]
 8009a4c:	ec41 0b18 	vmov	d8, r0, r1
 8009a50:	4639      	mov	r1, r7
 8009a52:	4630      	mov	r0, r6
 8009a54:	f7f7 f880 	bl	8000b58 <__aeabi_d2iz>
 8009a58:	900c      	str	r0, [sp, #48]	; 0x30
 8009a5a:	f7f6 fd63 	bl	8000524 <__aeabi_i2d>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	4630      	mov	r0, r6
 8009a64:	4639      	mov	r1, r7
 8009a66:	f7f6 fc0f 	bl	8000288 <__aeabi_dsub>
 8009a6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a6c:	3330      	adds	r3, #48	; 0x30
 8009a6e:	f805 3b01 	strb.w	r3, [r5], #1
 8009a72:	ec53 2b18 	vmov	r2, r3, d8
 8009a76:	4606      	mov	r6, r0
 8009a78:	460f      	mov	r7, r1
 8009a7a:	f7f7 f82f 	bl	8000adc <__aeabi_dcmplt>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d165      	bne.n	8009b4e <_dtoa_r+0x60e>
 8009a82:	4632      	mov	r2, r6
 8009a84:	463b      	mov	r3, r7
 8009a86:	4935      	ldr	r1, [pc, #212]	; (8009b5c <_dtoa_r+0x61c>)
 8009a88:	2000      	movs	r0, #0
 8009a8a:	f7f6 fbfd 	bl	8000288 <__aeabi_dsub>
 8009a8e:	ec53 2b18 	vmov	r2, r3, d8
 8009a92:	f7f7 f823 	bl	8000adc <__aeabi_dcmplt>
 8009a96:	2800      	cmp	r0, #0
 8009a98:	f040 80b8 	bne.w	8009c0c <_dtoa_r+0x6cc>
 8009a9c:	9b02      	ldr	r3, [sp, #8]
 8009a9e:	429d      	cmp	r5, r3
 8009aa0:	f43f af75 	beq.w	800998e <_dtoa_r+0x44e>
 8009aa4:	4b2e      	ldr	r3, [pc, #184]	; (8009b60 <_dtoa_r+0x620>)
 8009aa6:	ec51 0b18 	vmov	r0, r1, d8
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f7f6 fda4 	bl	80005f8 <__aeabi_dmul>
 8009ab0:	4b2b      	ldr	r3, [pc, #172]	; (8009b60 <_dtoa_r+0x620>)
 8009ab2:	ec41 0b18 	vmov	d8, r0, r1
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	4630      	mov	r0, r6
 8009aba:	4639      	mov	r1, r7
 8009abc:	f7f6 fd9c 	bl	80005f8 <__aeabi_dmul>
 8009ac0:	4606      	mov	r6, r0
 8009ac2:	460f      	mov	r7, r1
 8009ac4:	e7c4      	b.n	8009a50 <_dtoa_r+0x510>
 8009ac6:	ec51 0b17 	vmov	r0, r1, d7
 8009aca:	f7f6 fd95 	bl	80005f8 <__aeabi_dmul>
 8009ace:	9b02      	ldr	r3, [sp, #8]
 8009ad0:	9d00      	ldr	r5, [sp, #0]
 8009ad2:	930c      	str	r3, [sp, #48]	; 0x30
 8009ad4:	ec41 0b18 	vmov	d8, r0, r1
 8009ad8:	4639      	mov	r1, r7
 8009ada:	4630      	mov	r0, r6
 8009adc:	f7f7 f83c 	bl	8000b58 <__aeabi_d2iz>
 8009ae0:	9011      	str	r0, [sp, #68]	; 0x44
 8009ae2:	f7f6 fd1f 	bl	8000524 <__aeabi_i2d>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4630      	mov	r0, r6
 8009aec:	4639      	mov	r1, r7
 8009aee:	f7f6 fbcb 	bl	8000288 <__aeabi_dsub>
 8009af2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009af4:	3330      	adds	r3, #48	; 0x30
 8009af6:	f805 3b01 	strb.w	r3, [r5], #1
 8009afa:	9b02      	ldr	r3, [sp, #8]
 8009afc:	429d      	cmp	r5, r3
 8009afe:	4606      	mov	r6, r0
 8009b00:	460f      	mov	r7, r1
 8009b02:	f04f 0200 	mov.w	r2, #0
 8009b06:	d133      	bne.n	8009b70 <_dtoa_r+0x630>
 8009b08:	4b18      	ldr	r3, [pc, #96]	; (8009b6c <_dtoa_r+0x62c>)
 8009b0a:	ec51 0b18 	vmov	r0, r1, d8
 8009b0e:	f7f6 fbbd 	bl	800028c <__adddf3>
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	4630      	mov	r0, r6
 8009b18:	4639      	mov	r1, r7
 8009b1a:	f7f6 fffd 	bl	8000b18 <__aeabi_dcmpgt>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d174      	bne.n	8009c0c <_dtoa_r+0x6cc>
 8009b22:	ec53 2b18 	vmov	r2, r3, d8
 8009b26:	4911      	ldr	r1, [pc, #68]	; (8009b6c <_dtoa_r+0x62c>)
 8009b28:	2000      	movs	r0, #0
 8009b2a:	f7f6 fbad 	bl	8000288 <__aeabi_dsub>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	4630      	mov	r0, r6
 8009b34:	4639      	mov	r1, r7
 8009b36:	f7f6 ffd1 	bl	8000adc <__aeabi_dcmplt>
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	f43f af27 	beq.w	800998e <_dtoa_r+0x44e>
 8009b40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b42:	1e6b      	subs	r3, r5, #1
 8009b44:	930c      	str	r3, [sp, #48]	; 0x30
 8009b46:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b4a:	2b30      	cmp	r3, #48	; 0x30
 8009b4c:	d0f8      	beq.n	8009b40 <_dtoa_r+0x600>
 8009b4e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009b52:	e049      	b.n	8009be8 <_dtoa_r+0x6a8>
 8009b54:	0800cbc0 	.word	0x0800cbc0
 8009b58:	0800cb98 	.word	0x0800cb98
 8009b5c:	3ff00000 	.word	0x3ff00000
 8009b60:	40240000 	.word	0x40240000
 8009b64:	401c0000 	.word	0x401c0000
 8009b68:	40140000 	.word	0x40140000
 8009b6c:	3fe00000 	.word	0x3fe00000
 8009b70:	4baf      	ldr	r3, [pc, #700]	; (8009e30 <_dtoa_r+0x8f0>)
 8009b72:	f7f6 fd41 	bl	80005f8 <__aeabi_dmul>
 8009b76:	4606      	mov	r6, r0
 8009b78:	460f      	mov	r7, r1
 8009b7a:	e7ad      	b.n	8009ad8 <_dtoa_r+0x598>
 8009b7c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b80:	9d00      	ldr	r5, [sp, #0]
 8009b82:	4642      	mov	r2, r8
 8009b84:	464b      	mov	r3, r9
 8009b86:	4630      	mov	r0, r6
 8009b88:	4639      	mov	r1, r7
 8009b8a:	f7f6 fe5f 	bl	800084c <__aeabi_ddiv>
 8009b8e:	f7f6 ffe3 	bl	8000b58 <__aeabi_d2iz>
 8009b92:	9002      	str	r0, [sp, #8]
 8009b94:	f7f6 fcc6 	bl	8000524 <__aeabi_i2d>
 8009b98:	4642      	mov	r2, r8
 8009b9a:	464b      	mov	r3, r9
 8009b9c:	f7f6 fd2c 	bl	80005f8 <__aeabi_dmul>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	4639      	mov	r1, r7
 8009ba8:	f7f6 fb6e 	bl	8000288 <__aeabi_dsub>
 8009bac:	9e02      	ldr	r6, [sp, #8]
 8009bae:	9f01      	ldr	r7, [sp, #4]
 8009bb0:	3630      	adds	r6, #48	; 0x30
 8009bb2:	f805 6b01 	strb.w	r6, [r5], #1
 8009bb6:	9e00      	ldr	r6, [sp, #0]
 8009bb8:	1bae      	subs	r6, r5, r6
 8009bba:	42b7      	cmp	r7, r6
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	d137      	bne.n	8009c32 <_dtoa_r+0x6f2>
 8009bc2:	f7f6 fb63 	bl	800028c <__adddf3>
 8009bc6:	4642      	mov	r2, r8
 8009bc8:	464b      	mov	r3, r9
 8009bca:	4606      	mov	r6, r0
 8009bcc:	460f      	mov	r7, r1
 8009bce:	f7f6 ffa3 	bl	8000b18 <__aeabi_dcmpgt>
 8009bd2:	b9c8      	cbnz	r0, 8009c08 <_dtoa_r+0x6c8>
 8009bd4:	4642      	mov	r2, r8
 8009bd6:	464b      	mov	r3, r9
 8009bd8:	4630      	mov	r0, r6
 8009bda:	4639      	mov	r1, r7
 8009bdc:	f7f6 ff74 	bl	8000ac8 <__aeabi_dcmpeq>
 8009be0:	b110      	cbz	r0, 8009be8 <_dtoa_r+0x6a8>
 8009be2:	9b02      	ldr	r3, [sp, #8]
 8009be4:	07d9      	lsls	r1, r3, #31
 8009be6:	d40f      	bmi.n	8009c08 <_dtoa_r+0x6c8>
 8009be8:	4620      	mov	r0, r4
 8009bea:	4659      	mov	r1, fp
 8009bec:	f000 ffdb 	bl	800aba6 <_Bfree>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	702b      	strb	r3, [r5, #0]
 8009bf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bf6:	f10a 0001 	add.w	r0, sl, #1
 8009bfa:	6018      	str	r0, [r3, #0]
 8009bfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f43f acd9 	beq.w	80095b6 <_dtoa_r+0x76>
 8009c04:	601d      	str	r5, [r3, #0]
 8009c06:	e4d6      	b.n	80095b6 <_dtoa_r+0x76>
 8009c08:	f8cd a01c 	str.w	sl, [sp, #28]
 8009c0c:	462b      	mov	r3, r5
 8009c0e:	461d      	mov	r5, r3
 8009c10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c14:	2a39      	cmp	r2, #57	; 0x39
 8009c16:	d108      	bne.n	8009c2a <_dtoa_r+0x6ea>
 8009c18:	9a00      	ldr	r2, [sp, #0]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d1f7      	bne.n	8009c0e <_dtoa_r+0x6ce>
 8009c1e:	9a07      	ldr	r2, [sp, #28]
 8009c20:	9900      	ldr	r1, [sp, #0]
 8009c22:	3201      	adds	r2, #1
 8009c24:	9207      	str	r2, [sp, #28]
 8009c26:	2230      	movs	r2, #48	; 0x30
 8009c28:	700a      	strb	r2, [r1, #0]
 8009c2a:	781a      	ldrb	r2, [r3, #0]
 8009c2c:	3201      	adds	r2, #1
 8009c2e:	701a      	strb	r2, [r3, #0]
 8009c30:	e78d      	b.n	8009b4e <_dtoa_r+0x60e>
 8009c32:	4b7f      	ldr	r3, [pc, #508]	; (8009e30 <_dtoa_r+0x8f0>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	f7f6 fcdf 	bl	80005f8 <__aeabi_dmul>
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	4606      	mov	r6, r0
 8009c40:	460f      	mov	r7, r1
 8009c42:	f7f6 ff41 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d09b      	beq.n	8009b82 <_dtoa_r+0x642>
 8009c4a:	e7cd      	b.n	8009be8 <_dtoa_r+0x6a8>
 8009c4c:	9a08      	ldr	r2, [sp, #32]
 8009c4e:	2a00      	cmp	r2, #0
 8009c50:	f000 80c4 	beq.w	8009ddc <_dtoa_r+0x89c>
 8009c54:	9a05      	ldr	r2, [sp, #20]
 8009c56:	2a01      	cmp	r2, #1
 8009c58:	f300 80a8 	bgt.w	8009dac <_dtoa_r+0x86c>
 8009c5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c5e:	2a00      	cmp	r2, #0
 8009c60:	f000 80a0 	beq.w	8009da4 <_dtoa_r+0x864>
 8009c64:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c68:	9e06      	ldr	r6, [sp, #24]
 8009c6a:	4645      	mov	r5, r8
 8009c6c:	9a04      	ldr	r2, [sp, #16]
 8009c6e:	2101      	movs	r1, #1
 8009c70:	441a      	add	r2, r3
 8009c72:	4620      	mov	r0, r4
 8009c74:	4498      	add	r8, r3
 8009c76:	9204      	str	r2, [sp, #16]
 8009c78:	f001 f838 	bl	800acec <__i2b>
 8009c7c:	4607      	mov	r7, r0
 8009c7e:	2d00      	cmp	r5, #0
 8009c80:	dd0b      	ble.n	8009c9a <_dtoa_r+0x75a>
 8009c82:	9b04      	ldr	r3, [sp, #16]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	dd08      	ble.n	8009c9a <_dtoa_r+0x75a>
 8009c88:	42ab      	cmp	r3, r5
 8009c8a:	9a04      	ldr	r2, [sp, #16]
 8009c8c:	bfa8      	it	ge
 8009c8e:	462b      	movge	r3, r5
 8009c90:	eba8 0803 	sub.w	r8, r8, r3
 8009c94:	1aed      	subs	r5, r5, r3
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	9304      	str	r3, [sp, #16]
 8009c9a:	9b06      	ldr	r3, [sp, #24]
 8009c9c:	b1fb      	cbz	r3, 8009cde <_dtoa_r+0x79e>
 8009c9e:	9b08      	ldr	r3, [sp, #32]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 809f 	beq.w	8009de4 <_dtoa_r+0x8a4>
 8009ca6:	2e00      	cmp	r6, #0
 8009ca8:	dd11      	ble.n	8009cce <_dtoa_r+0x78e>
 8009caa:	4639      	mov	r1, r7
 8009cac:	4632      	mov	r2, r6
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f001 f8d8 	bl	800ae64 <__pow5mult>
 8009cb4:	465a      	mov	r2, fp
 8009cb6:	4601      	mov	r1, r0
 8009cb8:	4607      	mov	r7, r0
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f001 f82c 	bl	800ad18 <__multiply>
 8009cc0:	4659      	mov	r1, fp
 8009cc2:	9007      	str	r0, [sp, #28]
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f000 ff6e 	bl	800aba6 <_Bfree>
 8009cca:	9b07      	ldr	r3, [sp, #28]
 8009ccc:	469b      	mov	fp, r3
 8009cce:	9b06      	ldr	r3, [sp, #24]
 8009cd0:	1b9a      	subs	r2, r3, r6
 8009cd2:	d004      	beq.n	8009cde <_dtoa_r+0x79e>
 8009cd4:	4659      	mov	r1, fp
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f001 f8c4 	bl	800ae64 <__pow5mult>
 8009cdc:	4683      	mov	fp, r0
 8009cde:	2101      	movs	r1, #1
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f001 f803 	bl	800acec <__i2b>
 8009ce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	4606      	mov	r6, r0
 8009cec:	dd7c      	ble.n	8009de8 <_dtoa_r+0x8a8>
 8009cee:	461a      	mov	r2, r3
 8009cf0:	4601      	mov	r1, r0
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	f001 f8b6 	bl	800ae64 <__pow5mult>
 8009cf8:	9b05      	ldr	r3, [sp, #20]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	dd76      	ble.n	8009dee <_dtoa_r+0x8ae>
 8009d00:	2300      	movs	r3, #0
 8009d02:	9306      	str	r3, [sp, #24]
 8009d04:	6933      	ldr	r3, [r6, #16]
 8009d06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d0a:	6918      	ldr	r0, [r3, #16]
 8009d0c:	f000 ff9e 	bl	800ac4c <__hi0bits>
 8009d10:	f1c0 0020 	rsb	r0, r0, #32
 8009d14:	9b04      	ldr	r3, [sp, #16]
 8009d16:	4418      	add	r0, r3
 8009d18:	f010 001f 	ands.w	r0, r0, #31
 8009d1c:	f000 8086 	beq.w	8009e2c <_dtoa_r+0x8ec>
 8009d20:	f1c0 0320 	rsb	r3, r0, #32
 8009d24:	2b04      	cmp	r3, #4
 8009d26:	dd7f      	ble.n	8009e28 <_dtoa_r+0x8e8>
 8009d28:	f1c0 001c 	rsb	r0, r0, #28
 8009d2c:	9b04      	ldr	r3, [sp, #16]
 8009d2e:	4403      	add	r3, r0
 8009d30:	4480      	add	r8, r0
 8009d32:	4405      	add	r5, r0
 8009d34:	9304      	str	r3, [sp, #16]
 8009d36:	f1b8 0f00 	cmp.w	r8, #0
 8009d3a:	dd05      	ble.n	8009d48 <_dtoa_r+0x808>
 8009d3c:	4659      	mov	r1, fp
 8009d3e:	4642      	mov	r2, r8
 8009d40:	4620      	mov	r0, r4
 8009d42:	f001 f8cf 	bl	800aee4 <__lshift>
 8009d46:	4683      	mov	fp, r0
 8009d48:	9b04      	ldr	r3, [sp, #16]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	dd05      	ble.n	8009d5a <_dtoa_r+0x81a>
 8009d4e:	4631      	mov	r1, r6
 8009d50:	461a      	mov	r2, r3
 8009d52:	4620      	mov	r0, r4
 8009d54:	f001 f8c6 	bl	800aee4 <__lshift>
 8009d58:	4606      	mov	r6, r0
 8009d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d069      	beq.n	8009e34 <_dtoa_r+0x8f4>
 8009d60:	4631      	mov	r1, r6
 8009d62:	4658      	mov	r0, fp
 8009d64:	f001 f92a 	bl	800afbc <__mcmp>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	da63      	bge.n	8009e34 <_dtoa_r+0x8f4>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	4659      	mov	r1, fp
 8009d70:	220a      	movs	r2, #10
 8009d72:	4620      	mov	r0, r4
 8009d74:	f000 ff20 	bl	800abb8 <__multadd>
 8009d78:	9b08      	ldr	r3, [sp, #32]
 8009d7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d7e:	4683      	mov	fp, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 818e 	beq.w	800a0a2 <_dtoa_r+0xb62>
 8009d86:	4639      	mov	r1, r7
 8009d88:	2300      	movs	r3, #0
 8009d8a:	220a      	movs	r2, #10
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f000 ff13 	bl	800abb8 <__multadd>
 8009d92:	f1b9 0f00 	cmp.w	r9, #0
 8009d96:	4607      	mov	r7, r0
 8009d98:	f300 808e 	bgt.w	8009eb8 <_dtoa_r+0x978>
 8009d9c:	9b05      	ldr	r3, [sp, #20]
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	dc50      	bgt.n	8009e44 <_dtoa_r+0x904>
 8009da2:	e089      	b.n	8009eb8 <_dtoa_r+0x978>
 8009da4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009da6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009daa:	e75d      	b.n	8009c68 <_dtoa_r+0x728>
 8009dac:	9b01      	ldr	r3, [sp, #4]
 8009dae:	1e5e      	subs	r6, r3, #1
 8009db0:	9b06      	ldr	r3, [sp, #24]
 8009db2:	42b3      	cmp	r3, r6
 8009db4:	bfbf      	itttt	lt
 8009db6:	9b06      	ldrlt	r3, [sp, #24]
 8009db8:	9606      	strlt	r6, [sp, #24]
 8009dba:	1af2      	sublt	r2, r6, r3
 8009dbc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009dbe:	bfb6      	itet	lt
 8009dc0:	189b      	addlt	r3, r3, r2
 8009dc2:	1b9e      	subge	r6, r3, r6
 8009dc4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009dc6:	9b01      	ldr	r3, [sp, #4]
 8009dc8:	bfb8      	it	lt
 8009dca:	2600      	movlt	r6, #0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	bfb5      	itete	lt
 8009dd0:	eba8 0503 	sublt.w	r5, r8, r3
 8009dd4:	9b01      	ldrge	r3, [sp, #4]
 8009dd6:	2300      	movlt	r3, #0
 8009dd8:	4645      	movge	r5, r8
 8009dda:	e747      	b.n	8009c6c <_dtoa_r+0x72c>
 8009ddc:	9e06      	ldr	r6, [sp, #24]
 8009dde:	9f08      	ldr	r7, [sp, #32]
 8009de0:	4645      	mov	r5, r8
 8009de2:	e74c      	b.n	8009c7e <_dtoa_r+0x73e>
 8009de4:	9a06      	ldr	r2, [sp, #24]
 8009de6:	e775      	b.n	8009cd4 <_dtoa_r+0x794>
 8009de8:	9b05      	ldr	r3, [sp, #20]
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	dc18      	bgt.n	8009e20 <_dtoa_r+0x8e0>
 8009dee:	9b02      	ldr	r3, [sp, #8]
 8009df0:	b9b3      	cbnz	r3, 8009e20 <_dtoa_r+0x8e0>
 8009df2:	9b03      	ldr	r3, [sp, #12]
 8009df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009df8:	b9a3      	cbnz	r3, 8009e24 <_dtoa_r+0x8e4>
 8009dfa:	9b03      	ldr	r3, [sp, #12]
 8009dfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e00:	0d1b      	lsrs	r3, r3, #20
 8009e02:	051b      	lsls	r3, r3, #20
 8009e04:	b12b      	cbz	r3, 8009e12 <_dtoa_r+0x8d2>
 8009e06:	9b04      	ldr	r3, [sp, #16]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	9304      	str	r3, [sp, #16]
 8009e0c:	f108 0801 	add.w	r8, r8, #1
 8009e10:	2301      	movs	r3, #1
 8009e12:	9306      	str	r3, [sp, #24]
 8009e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f47f af74 	bne.w	8009d04 <_dtoa_r+0x7c4>
 8009e1c:	2001      	movs	r0, #1
 8009e1e:	e779      	b.n	8009d14 <_dtoa_r+0x7d4>
 8009e20:	2300      	movs	r3, #0
 8009e22:	e7f6      	b.n	8009e12 <_dtoa_r+0x8d2>
 8009e24:	9b02      	ldr	r3, [sp, #8]
 8009e26:	e7f4      	b.n	8009e12 <_dtoa_r+0x8d2>
 8009e28:	d085      	beq.n	8009d36 <_dtoa_r+0x7f6>
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	301c      	adds	r0, #28
 8009e2e:	e77d      	b.n	8009d2c <_dtoa_r+0x7ec>
 8009e30:	40240000 	.word	0x40240000
 8009e34:	9b01      	ldr	r3, [sp, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	dc38      	bgt.n	8009eac <_dtoa_r+0x96c>
 8009e3a:	9b05      	ldr	r3, [sp, #20]
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	dd35      	ble.n	8009eac <_dtoa_r+0x96c>
 8009e40:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009e44:	f1b9 0f00 	cmp.w	r9, #0
 8009e48:	d10d      	bne.n	8009e66 <_dtoa_r+0x926>
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	464b      	mov	r3, r9
 8009e4e:	2205      	movs	r2, #5
 8009e50:	4620      	mov	r0, r4
 8009e52:	f000 feb1 	bl	800abb8 <__multadd>
 8009e56:	4601      	mov	r1, r0
 8009e58:	4606      	mov	r6, r0
 8009e5a:	4658      	mov	r0, fp
 8009e5c:	f001 f8ae 	bl	800afbc <__mcmp>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	f73f adbe 	bgt.w	80099e2 <_dtoa_r+0x4a2>
 8009e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e68:	9d00      	ldr	r5, [sp, #0]
 8009e6a:	ea6f 0a03 	mvn.w	sl, r3
 8009e6e:	f04f 0800 	mov.w	r8, #0
 8009e72:	4631      	mov	r1, r6
 8009e74:	4620      	mov	r0, r4
 8009e76:	f000 fe96 	bl	800aba6 <_Bfree>
 8009e7a:	2f00      	cmp	r7, #0
 8009e7c:	f43f aeb4 	beq.w	8009be8 <_dtoa_r+0x6a8>
 8009e80:	f1b8 0f00 	cmp.w	r8, #0
 8009e84:	d005      	beq.n	8009e92 <_dtoa_r+0x952>
 8009e86:	45b8      	cmp	r8, r7
 8009e88:	d003      	beq.n	8009e92 <_dtoa_r+0x952>
 8009e8a:	4641      	mov	r1, r8
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f000 fe8a 	bl	800aba6 <_Bfree>
 8009e92:	4639      	mov	r1, r7
 8009e94:	4620      	mov	r0, r4
 8009e96:	f000 fe86 	bl	800aba6 <_Bfree>
 8009e9a:	e6a5      	b.n	8009be8 <_dtoa_r+0x6a8>
 8009e9c:	2600      	movs	r6, #0
 8009e9e:	4637      	mov	r7, r6
 8009ea0:	e7e1      	b.n	8009e66 <_dtoa_r+0x926>
 8009ea2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009ea4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009ea8:	4637      	mov	r7, r6
 8009eaa:	e59a      	b.n	80099e2 <_dtoa_r+0x4a2>
 8009eac:	9b08      	ldr	r3, [sp, #32]
 8009eae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	f000 80fc 	beq.w	800a0b0 <_dtoa_r+0xb70>
 8009eb8:	2d00      	cmp	r5, #0
 8009eba:	dd05      	ble.n	8009ec8 <_dtoa_r+0x988>
 8009ebc:	4639      	mov	r1, r7
 8009ebe:	462a      	mov	r2, r5
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f001 f80f 	bl	800aee4 <__lshift>
 8009ec6:	4607      	mov	r7, r0
 8009ec8:	9b06      	ldr	r3, [sp, #24]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d05b      	beq.n	8009f86 <_dtoa_r+0xa46>
 8009ece:	6879      	ldr	r1, [r7, #4]
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f000 fe43 	bl	800ab5c <_Balloc>
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	b920      	cbnz	r0, 8009ee4 <_dtoa_r+0x9a4>
 8009eda:	4b80      	ldr	r3, [pc, #512]	; (800a0dc <_dtoa_r+0xb9c>)
 8009edc:	4602      	mov	r2, r0
 8009ede:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009ee2:	e45b      	b.n	800979c <_dtoa_r+0x25c>
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	3202      	adds	r2, #2
 8009ee8:	0092      	lsls	r2, r2, #2
 8009eea:	f107 010c 	add.w	r1, r7, #12
 8009eee:	300c      	adds	r0, #12
 8009ef0:	f000 fe1a 	bl	800ab28 <memcpy>
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f000 fff3 	bl	800aee4 <__lshift>
 8009efe:	9b00      	ldr	r3, [sp, #0]
 8009f00:	3301      	adds	r3, #1
 8009f02:	9301      	str	r3, [sp, #4]
 8009f04:	9b00      	ldr	r3, [sp, #0]
 8009f06:	444b      	add	r3, r9
 8009f08:	9307      	str	r3, [sp, #28]
 8009f0a:	9b02      	ldr	r3, [sp, #8]
 8009f0c:	f003 0301 	and.w	r3, r3, #1
 8009f10:	46b8      	mov	r8, r7
 8009f12:	9306      	str	r3, [sp, #24]
 8009f14:	4607      	mov	r7, r0
 8009f16:	9b01      	ldr	r3, [sp, #4]
 8009f18:	4631      	mov	r1, r6
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	4658      	mov	r0, fp
 8009f1e:	9302      	str	r3, [sp, #8]
 8009f20:	f7ff fa80 	bl	8009424 <quorem>
 8009f24:	4603      	mov	r3, r0
 8009f26:	3330      	adds	r3, #48	; 0x30
 8009f28:	9004      	str	r0, [sp, #16]
 8009f2a:	4641      	mov	r1, r8
 8009f2c:	4658      	mov	r0, fp
 8009f2e:	9308      	str	r3, [sp, #32]
 8009f30:	f001 f844 	bl	800afbc <__mcmp>
 8009f34:	463a      	mov	r2, r7
 8009f36:	4681      	mov	r9, r0
 8009f38:	4631      	mov	r1, r6
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f001 f85a 	bl	800aff4 <__mdiff>
 8009f40:	68c2      	ldr	r2, [r0, #12]
 8009f42:	9b08      	ldr	r3, [sp, #32]
 8009f44:	4605      	mov	r5, r0
 8009f46:	bb02      	cbnz	r2, 8009f8a <_dtoa_r+0xa4a>
 8009f48:	4601      	mov	r1, r0
 8009f4a:	4658      	mov	r0, fp
 8009f4c:	f001 f836 	bl	800afbc <__mcmp>
 8009f50:	9b08      	ldr	r3, [sp, #32]
 8009f52:	4602      	mov	r2, r0
 8009f54:	4629      	mov	r1, r5
 8009f56:	4620      	mov	r0, r4
 8009f58:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009f5c:	f000 fe23 	bl	800aba6 <_Bfree>
 8009f60:	9b05      	ldr	r3, [sp, #20]
 8009f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f64:	9d01      	ldr	r5, [sp, #4]
 8009f66:	ea43 0102 	orr.w	r1, r3, r2
 8009f6a:	9b06      	ldr	r3, [sp, #24]
 8009f6c:	430b      	orrs	r3, r1
 8009f6e:	9b08      	ldr	r3, [sp, #32]
 8009f70:	d10d      	bne.n	8009f8e <_dtoa_r+0xa4e>
 8009f72:	2b39      	cmp	r3, #57	; 0x39
 8009f74:	d029      	beq.n	8009fca <_dtoa_r+0xa8a>
 8009f76:	f1b9 0f00 	cmp.w	r9, #0
 8009f7a:	dd01      	ble.n	8009f80 <_dtoa_r+0xa40>
 8009f7c:	9b04      	ldr	r3, [sp, #16]
 8009f7e:	3331      	adds	r3, #49	; 0x31
 8009f80:	9a02      	ldr	r2, [sp, #8]
 8009f82:	7013      	strb	r3, [r2, #0]
 8009f84:	e775      	b.n	8009e72 <_dtoa_r+0x932>
 8009f86:	4638      	mov	r0, r7
 8009f88:	e7b9      	b.n	8009efe <_dtoa_r+0x9be>
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	e7e2      	b.n	8009f54 <_dtoa_r+0xa14>
 8009f8e:	f1b9 0f00 	cmp.w	r9, #0
 8009f92:	db06      	blt.n	8009fa2 <_dtoa_r+0xa62>
 8009f94:	9905      	ldr	r1, [sp, #20]
 8009f96:	ea41 0909 	orr.w	r9, r1, r9
 8009f9a:	9906      	ldr	r1, [sp, #24]
 8009f9c:	ea59 0101 	orrs.w	r1, r9, r1
 8009fa0:	d120      	bne.n	8009fe4 <_dtoa_r+0xaa4>
 8009fa2:	2a00      	cmp	r2, #0
 8009fa4:	ddec      	ble.n	8009f80 <_dtoa_r+0xa40>
 8009fa6:	4659      	mov	r1, fp
 8009fa8:	2201      	movs	r2, #1
 8009faa:	4620      	mov	r0, r4
 8009fac:	9301      	str	r3, [sp, #4]
 8009fae:	f000 ff99 	bl	800aee4 <__lshift>
 8009fb2:	4631      	mov	r1, r6
 8009fb4:	4683      	mov	fp, r0
 8009fb6:	f001 f801 	bl	800afbc <__mcmp>
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	9b01      	ldr	r3, [sp, #4]
 8009fbe:	dc02      	bgt.n	8009fc6 <_dtoa_r+0xa86>
 8009fc0:	d1de      	bne.n	8009f80 <_dtoa_r+0xa40>
 8009fc2:	07da      	lsls	r2, r3, #31
 8009fc4:	d5dc      	bpl.n	8009f80 <_dtoa_r+0xa40>
 8009fc6:	2b39      	cmp	r3, #57	; 0x39
 8009fc8:	d1d8      	bne.n	8009f7c <_dtoa_r+0xa3c>
 8009fca:	9a02      	ldr	r2, [sp, #8]
 8009fcc:	2339      	movs	r3, #57	; 0x39
 8009fce:	7013      	strb	r3, [r2, #0]
 8009fd0:	462b      	mov	r3, r5
 8009fd2:	461d      	mov	r5, r3
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009fda:	2a39      	cmp	r2, #57	; 0x39
 8009fdc:	d050      	beq.n	800a080 <_dtoa_r+0xb40>
 8009fde:	3201      	adds	r2, #1
 8009fe0:	701a      	strb	r2, [r3, #0]
 8009fe2:	e746      	b.n	8009e72 <_dtoa_r+0x932>
 8009fe4:	2a00      	cmp	r2, #0
 8009fe6:	dd03      	ble.n	8009ff0 <_dtoa_r+0xab0>
 8009fe8:	2b39      	cmp	r3, #57	; 0x39
 8009fea:	d0ee      	beq.n	8009fca <_dtoa_r+0xa8a>
 8009fec:	3301      	adds	r3, #1
 8009fee:	e7c7      	b.n	8009f80 <_dtoa_r+0xa40>
 8009ff0:	9a01      	ldr	r2, [sp, #4]
 8009ff2:	9907      	ldr	r1, [sp, #28]
 8009ff4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009ff8:	428a      	cmp	r2, r1
 8009ffa:	d02a      	beq.n	800a052 <_dtoa_r+0xb12>
 8009ffc:	4659      	mov	r1, fp
 8009ffe:	2300      	movs	r3, #0
 800a000:	220a      	movs	r2, #10
 800a002:	4620      	mov	r0, r4
 800a004:	f000 fdd8 	bl	800abb8 <__multadd>
 800a008:	45b8      	cmp	r8, r7
 800a00a:	4683      	mov	fp, r0
 800a00c:	f04f 0300 	mov.w	r3, #0
 800a010:	f04f 020a 	mov.w	r2, #10
 800a014:	4641      	mov	r1, r8
 800a016:	4620      	mov	r0, r4
 800a018:	d107      	bne.n	800a02a <_dtoa_r+0xaea>
 800a01a:	f000 fdcd 	bl	800abb8 <__multadd>
 800a01e:	4680      	mov	r8, r0
 800a020:	4607      	mov	r7, r0
 800a022:	9b01      	ldr	r3, [sp, #4]
 800a024:	3301      	adds	r3, #1
 800a026:	9301      	str	r3, [sp, #4]
 800a028:	e775      	b.n	8009f16 <_dtoa_r+0x9d6>
 800a02a:	f000 fdc5 	bl	800abb8 <__multadd>
 800a02e:	4639      	mov	r1, r7
 800a030:	4680      	mov	r8, r0
 800a032:	2300      	movs	r3, #0
 800a034:	220a      	movs	r2, #10
 800a036:	4620      	mov	r0, r4
 800a038:	f000 fdbe 	bl	800abb8 <__multadd>
 800a03c:	4607      	mov	r7, r0
 800a03e:	e7f0      	b.n	800a022 <_dtoa_r+0xae2>
 800a040:	f1b9 0f00 	cmp.w	r9, #0
 800a044:	9a00      	ldr	r2, [sp, #0]
 800a046:	bfcc      	ite	gt
 800a048:	464d      	movgt	r5, r9
 800a04a:	2501      	movle	r5, #1
 800a04c:	4415      	add	r5, r2
 800a04e:	f04f 0800 	mov.w	r8, #0
 800a052:	4659      	mov	r1, fp
 800a054:	2201      	movs	r2, #1
 800a056:	4620      	mov	r0, r4
 800a058:	9301      	str	r3, [sp, #4]
 800a05a:	f000 ff43 	bl	800aee4 <__lshift>
 800a05e:	4631      	mov	r1, r6
 800a060:	4683      	mov	fp, r0
 800a062:	f000 ffab 	bl	800afbc <__mcmp>
 800a066:	2800      	cmp	r0, #0
 800a068:	dcb2      	bgt.n	8009fd0 <_dtoa_r+0xa90>
 800a06a:	d102      	bne.n	800a072 <_dtoa_r+0xb32>
 800a06c:	9b01      	ldr	r3, [sp, #4]
 800a06e:	07db      	lsls	r3, r3, #31
 800a070:	d4ae      	bmi.n	8009fd0 <_dtoa_r+0xa90>
 800a072:	462b      	mov	r3, r5
 800a074:	461d      	mov	r5, r3
 800a076:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a07a:	2a30      	cmp	r2, #48	; 0x30
 800a07c:	d0fa      	beq.n	800a074 <_dtoa_r+0xb34>
 800a07e:	e6f8      	b.n	8009e72 <_dtoa_r+0x932>
 800a080:	9a00      	ldr	r2, [sp, #0]
 800a082:	429a      	cmp	r2, r3
 800a084:	d1a5      	bne.n	8009fd2 <_dtoa_r+0xa92>
 800a086:	f10a 0a01 	add.w	sl, sl, #1
 800a08a:	2331      	movs	r3, #49	; 0x31
 800a08c:	e779      	b.n	8009f82 <_dtoa_r+0xa42>
 800a08e:	4b14      	ldr	r3, [pc, #80]	; (800a0e0 <_dtoa_r+0xba0>)
 800a090:	f7ff bab1 	b.w	80095f6 <_dtoa_r+0xb6>
 800a094:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a096:	2b00      	cmp	r3, #0
 800a098:	f47f aa93 	bne.w	80095c2 <_dtoa_r+0x82>
 800a09c:	4b11      	ldr	r3, [pc, #68]	; (800a0e4 <_dtoa_r+0xba4>)
 800a09e:	f7ff baaa 	b.w	80095f6 <_dtoa_r+0xb6>
 800a0a2:	f1b9 0f00 	cmp.w	r9, #0
 800a0a6:	dc03      	bgt.n	800a0b0 <_dtoa_r+0xb70>
 800a0a8:	9b05      	ldr	r3, [sp, #20]
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	f73f aeca 	bgt.w	8009e44 <_dtoa_r+0x904>
 800a0b0:	9d00      	ldr	r5, [sp, #0]
 800a0b2:	4631      	mov	r1, r6
 800a0b4:	4658      	mov	r0, fp
 800a0b6:	f7ff f9b5 	bl	8009424 <quorem>
 800a0ba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a0be:	f805 3b01 	strb.w	r3, [r5], #1
 800a0c2:	9a00      	ldr	r2, [sp, #0]
 800a0c4:	1aaa      	subs	r2, r5, r2
 800a0c6:	4591      	cmp	r9, r2
 800a0c8:	ddba      	ble.n	800a040 <_dtoa_r+0xb00>
 800a0ca:	4659      	mov	r1, fp
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	220a      	movs	r2, #10
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	f000 fd71 	bl	800abb8 <__multadd>
 800a0d6:	4683      	mov	fp, r0
 800a0d8:	e7eb      	b.n	800a0b2 <_dtoa_r+0xb72>
 800a0da:	bf00      	nop
 800a0dc:	0800cac1 	.word	0x0800cac1
 800a0e0:	0800ca72 	.word	0x0800ca72
 800a0e4:	0800cab8 	.word	0x0800cab8

0800a0e8 <__sflush_r>:
 800a0e8:	898b      	ldrh	r3, [r1, #12]
 800a0ea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f2:	4605      	mov	r5, r0
 800a0f4:	0718      	lsls	r0, r3, #28
 800a0f6:	460c      	mov	r4, r1
 800a0f8:	d45f      	bmi.n	800a1ba <__sflush_r+0xd2>
 800a0fa:	684b      	ldr	r3, [r1, #4]
 800a0fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a100:	2b00      	cmp	r3, #0
 800a102:	818a      	strh	r2, [r1, #12]
 800a104:	dc05      	bgt.n	800a112 <__sflush_r+0x2a>
 800a106:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a108:	2b00      	cmp	r3, #0
 800a10a:	dc02      	bgt.n	800a112 <__sflush_r+0x2a>
 800a10c:	2000      	movs	r0, #0
 800a10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a112:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a114:	2e00      	cmp	r6, #0
 800a116:	d0f9      	beq.n	800a10c <__sflush_r+0x24>
 800a118:	2300      	movs	r3, #0
 800a11a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a11e:	682f      	ldr	r7, [r5, #0]
 800a120:	602b      	str	r3, [r5, #0]
 800a122:	d036      	beq.n	800a192 <__sflush_r+0xaa>
 800a124:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a126:	89a3      	ldrh	r3, [r4, #12]
 800a128:	075a      	lsls	r2, r3, #29
 800a12a:	d505      	bpl.n	800a138 <__sflush_r+0x50>
 800a12c:	6863      	ldr	r3, [r4, #4]
 800a12e:	1ac0      	subs	r0, r0, r3
 800a130:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a132:	b10b      	cbz	r3, 800a138 <__sflush_r+0x50>
 800a134:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a136:	1ac0      	subs	r0, r0, r3
 800a138:	2300      	movs	r3, #0
 800a13a:	4602      	mov	r2, r0
 800a13c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a13e:	69e1      	ldr	r1, [r4, #28]
 800a140:	4628      	mov	r0, r5
 800a142:	47b0      	blx	r6
 800a144:	1c43      	adds	r3, r0, #1
 800a146:	89a3      	ldrh	r3, [r4, #12]
 800a148:	d106      	bne.n	800a158 <__sflush_r+0x70>
 800a14a:	6829      	ldr	r1, [r5, #0]
 800a14c:	291d      	cmp	r1, #29
 800a14e:	d830      	bhi.n	800a1b2 <__sflush_r+0xca>
 800a150:	4a2b      	ldr	r2, [pc, #172]	; (800a200 <__sflush_r+0x118>)
 800a152:	40ca      	lsrs	r2, r1
 800a154:	07d6      	lsls	r6, r2, #31
 800a156:	d52c      	bpl.n	800a1b2 <__sflush_r+0xca>
 800a158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a15c:	b21b      	sxth	r3, r3
 800a15e:	2200      	movs	r2, #0
 800a160:	6062      	str	r2, [r4, #4]
 800a162:	04d9      	lsls	r1, r3, #19
 800a164:	6922      	ldr	r2, [r4, #16]
 800a166:	81a3      	strh	r3, [r4, #12]
 800a168:	6022      	str	r2, [r4, #0]
 800a16a:	d504      	bpl.n	800a176 <__sflush_r+0x8e>
 800a16c:	1c42      	adds	r2, r0, #1
 800a16e:	d101      	bne.n	800a174 <__sflush_r+0x8c>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	b903      	cbnz	r3, 800a176 <__sflush_r+0x8e>
 800a174:	6520      	str	r0, [r4, #80]	; 0x50
 800a176:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a178:	602f      	str	r7, [r5, #0]
 800a17a:	2900      	cmp	r1, #0
 800a17c:	d0c6      	beq.n	800a10c <__sflush_r+0x24>
 800a17e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a182:	4299      	cmp	r1, r3
 800a184:	d002      	beq.n	800a18c <__sflush_r+0xa4>
 800a186:	4628      	mov	r0, r5
 800a188:	f000 f938 	bl	800a3fc <_free_r>
 800a18c:	2000      	movs	r0, #0
 800a18e:	6320      	str	r0, [r4, #48]	; 0x30
 800a190:	e7bd      	b.n	800a10e <__sflush_r+0x26>
 800a192:	69e1      	ldr	r1, [r4, #28]
 800a194:	2301      	movs	r3, #1
 800a196:	4628      	mov	r0, r5
 800a198:	47b0      	blx	r6
 800a19a:	1c41      	adds	r1, r0, #1
 800a19c:	d1c3      	bne.n	800a126 <__sflush_r+0x3e>
 800a19e:	682b      	ldr	r3, [r5, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d0c0      	beq.n	800a126 <__sflush_r+0x3e>
 800a1a4:	2b1d      	cmp	r3, #29
 800a1a6:	d001      	beq.n	800a1ac <__sflush_r+0xc4>
 800a1a8:	2b16      	cmp	r3, #22
 800a1aa:	d101      	bne.n	800a1b0 <__sflush_r+0xc8>
 800a1ac:	602f      	str	r7, [r5, #0]
 800a1ae:	e7ad      	b.n	800a10c <__sflush_r+0x24>
 800a1b0:	89a3      	ldrh	r3, [r4, #12]
 800a1b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1b6:	81a3      	strh	r3, [r4, #12]
 800a1b8:	e7a9      	b.n	800a10e <__sflush_r+0x26>
 800a1ba:	690f      	ldr	r7, [r1, #16]
 800a1bc:	2f00      	cmp	r7, #0
 800a1be:	d0a5      	beq.n	800a10c <__sflush_r+0x24>
 800a1c0:	079b      	lsls	r3, r3, #30
 800a1c2:	680e      	ldr	r6, [r1, #0]
 800a1c4:	bf08      	it	eq
 800a1c6:	694b      	ldreq	r3, [r1, #20]
 800a1c8:	600f      	str	r7, [r1, #0]
 800a1ca:	bf18      	it	ne
 800a1cc:	2300      	movne	r3, #0
 800a1ce:	eba6 0807 	sub.w	r8, r6, r7
 800a1d2:	608b      	str	r3, [r1, #8]
 800a1d4:	f1b8 0f00 	cmp.w	r8, #0
 800a1d8:	dd98      	ble.n	800a10c <__sflush_r+0x24>
 800a1da:	69e1      	ldr	r1, [r4, #28]
 800a1dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1de:	4643      	mov	r3, r8
 800a1e0:	463a      	mov	r2, r7
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	47b0      	blx	r6
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	dc06      	bgt.n	800a1f8 <__sflush_r+0x110>
 800a1ea:	89a3      	ldrh	r3, [r4, #12]
 800a1ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1f0:	81a3      	strh	r3, [r4, #12]
 800a1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f6:	e78a      	b.n	800a10e <__sflush_r+0x26>
 800a1f8:	4407      	add	r7, r0
 800a1fa:	eba8 0800 	sub.w	r8, r8, r0
 800a1fe:	e7e9      	b.n	800a1d4 <__sflush_r+0xec>
 800a200:	20400001 	.word	0x20400001

0800a204 <_fflush_r>:
 800a204:	b538      	push	{r3, r4, r5, lr}
 800a206:	460c      	mov	r4, r1
 800a208:	4605      	mov	r5, r0
 800a20a:	b118      	cbz	r0, 800a214 <_fflush_r+0x10>
 800a20c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a20e:	b90b      	cbnz	r3, 800a214 <_fflush_r+0x10>
 800a210:	f000 f864 	bl	800a2dc <__sinit>
 800a214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a218:	b1bb      	cbz	r3, 800a24a <_fflush_r+0x46>
 800a21a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a21c:	07d0      	lsls	r0, r2, #31
 800a21e:	d404      	bmi.n	800a22a <_fflush_r+0x26>
 800a220:	0599      	lsls	r1, r3, #22
 800a222:	d402      	bmi.n	800a22a <_fflush_r+0x26>
 800a224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a226:	f000 f9cf 	bl	800a5c8 <__retarget_lock_acquire_recursive>
 800a22a:	4628      	mov	r0, r5
 800a22c:	4621      	mov	r1, r4
 800a22e:	f7ff ff5b 	bl	800a0e8 <__sflush_r>
 800a232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a234:	07da      	lsls	r2, r3, #31
 800a236:	4605      	mov	r5, r0
 800a238:	d405      	bmi.n	800a246 <_fflush_r+0x42>
 800a23a:	89a3      	ldrh	r3, [r4, #12]
 800a23c:	059b      	lsls	r3, r3, #22
 800a23e:	d402      	bmi.n	800a246 <_fflush_r+0x42>
 800a240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a242:	f000 f9c2 	bl	800a5ca <__retarget_lock_release_recursive>
 800a246:	4628      	mov	r0, r5
 800a248:	bd38      	pop	{r3, r4, r5, pc}
 800a24a:	461d      	mov	r5, r3
 800a24c:	e7fb      	b.n	800a246 <_fflush_r+0x42>
	...

0800a250 <std>:
 800a250:	2300      	movs	r3, #0
 800a252:	b510      	push	{r4, lr}
 800a254:	4604      	mov	r4, r0
 800a256:	e9c0 3300 	strd	r3, r3, [r0]
 800a25a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a25e:	6083      	str	r3, [r0, #8]
 800a260:	8181      	strh	r1, [r0, #12]
 800a262:	6643      	str	r3, [r0, #100]	; 0x64
 800a264:	81c2      	strh	r2, [r0, #14]
 800a266:	6183      	str	r3, [r0, #24]
 800a268:	4619      	mov	r1, r3
 800a26a:	2208      	movs	r2, #8
 800a26c:	305c      	adds	r0, #92	; 0x5c
 800a26e:	f7fc fbe1 	bl	8006a34 <memset>
 800a272:	4b07      	ldr	r3, [pc, #28]	; (800a290 <std+0x40>)
 800a274:	6223      	str	r3, [r4, #32]
 800a276:	4b07      	ldr	r3, [pc, #28]	; (800a294 <std+0x44>)
 800a278:	6263      	str	r3, [r4, #36]	; 0x24
 800a27a:	4b07      	ldr	r3, [pc, #28]	; (800a298 <std+0x48>)
 800a27c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a27e:	4b07      	ldr	r3, [pc, #28]	; (800a29c <std+0x4c>)
 800a280:	61e4      	str	r4, [r4, #28]
 800a282:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a284:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a28c:	f000 b99a 	b.w	800a5c4 <__retarget_lock_init_recursive>
 800a290:	0800b24d 	.word	0x0800b24d
 800a294:	0800b26f 	.word	0x0800b26f
 800a298:	0800b2a7 	.word	0x0800b2a7
 800a29c:	0800b2cb 	.word	0x0800b2cb

0800a2a0 <_cleanup_r>:
 800a2a0:	4901      	ldr	r1, [pc, #4]	; (800a2a8 <_cleanup_r+0x8>)
 800a2a2:	f000 b96b 	b.w	800a57c <_fwalk_reent>
 800a2a6:	bf00      	nop
 800a2a8:	0800bf59 	.word	0x0800bf59

0800a2ac <__sfp_lock_acquire>:
 800a2ac:	4801      	ldr	r0, [pc, #4]	; (800a2b4 <__sfp_lock_acquire+0x8>)
 800a2ae:	f000 b98b 	b.w	800a5c8 <__retarget_lock_acquire_recursive>
 800a2b2:	bf00      	nop
 800a2b4:	20000c08 	.word	0x20000c08

0800a2b8 <__sfp_lock_release>:
 800a2b8:	4801      	ldr	r0, [pc, #4]	; (800a2c0 <__sfp_lock_release+0x8>)
 800a2ba:	f000 b986 	b.w	800a5ca <__retarget_lock_release_recursive>
 800a2be:	bf00      	nop
 800a2c0:	20000c08 	.word	0x20000c08

0800a2c4 <__sinit_lock_acquire>:
 800a2c4:	4801      	ldr	r0, [pc, #4]	; (800a2cc <__sinit_lock_acquire+0x8>)
 800a2c6:	f000 b97f 	b.w	800a5c8 <__retarget_lock_acquire_recursive>
 800a2ca:	bf00      	nop
 800a2cc:	20000c03 	.word	0x20000c03

0800a2d0 <__sinit_lock_release>:
 800a2d0:	4801      	ldr	r0, [pc, #4]	; (800a2d8 <__sinit_lock_release+0x8>)
 800a2d2:	f000 b97a 	b.w	800a5ca <__retarget_lock_release_recursive>
 800a2d6:	bf00      	nop
 800a2d8:	20000c03 	.word	0x20000c03

0800a2dc <__sinit>:
 800a2dc:	b510      	push	{r4, lr}
 800a2de:	4604      	mov	r4, r0
 800a2e0:	f7ff fff0 	bl	800a2c4 <__sinit_lock_acquire>
 800a2e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a2e6:	b11a      	cbz	r2, 800a2f0 <__sinit+0x14>
 800a2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2ec:	f7ff bff0 	b.w	800a2d0 <__sinit_lock_release>
 800a2f0:	4b0d      	ldr	r3, [pc, #52]	; (800a328 <__sinit+0x4c>)
 800a2f2:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800a2fa:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800a2fe:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800a302:	6860      	ldr	r0, [r4, #4]
 800a304:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800a308:	2104      	movs	r1, #4
 800a30a:	f7ff ffa1 	bl	800a250 <std>
 800a30e:	68a0      	ldr	r0, [r4, #8]
 800a310:	2201      	movs	r2, #1
 800a312:	2109      	movs	r1, #9
 800a314:	f7ff ff9c 	bl	800a250 <std>
 800a318:	68e0      	ldr	r0, [r4, #12]
 800a31a:	2202      	movs	r2, #2
 800a31c:	2112      	movs	r1, #18
 800a31e:	f7ff ff97 	bl	800a250 <std>
 800a322:	2301      	movs	r3, #1
 800a324:	63a3      	str	r3, [r4, #56]	; 0x38
 800a326:	e7df      	b.n	800a2e8 <__sinit+0xc>
 800a328:	0800a2a1 	.word	0x0800a2a1

0800a32c <__libc_fini_array>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	4d07      	ldr	r5, [pc, #28]	; (800a34c <__libc_fini_array+0x20>)
 800a330:	4c07      	ldr	r4, [pc, #28]	; (800a350 <__libc_fini_array+0x24>)
 800a332:	1b64      	subs	r4, r4, r5
 800a334:	10a4      	asrs	r4, r4, #2
 800a336:	b91c      	cbnz	r4, 800a340 <__libc_fini_array+0x14>
 800a338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a33c:	f002 bb0a 	b.w	800c954 <_fini>
 800a340:	3c01      	subs	r4, #1
 800a342:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800a346:	4798      	blx	r3
 800a348:	e7f5      	b.n	800a336 <__libc_fini_array+0xa>
 800a34a:	bf00      	nop
 800a34c:	0800ce0c 	.word	0x0800ce0c
 800a350:	0800ce10 	.word	0x0800ce10

0800a354 <_malloc_trim_r>:
 800a354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a358:	4606      	mov	r6, r0
 800a35a:	2008      	movs	r0, #8
 800a35c:	460c      	mov	r4, r1
 800a35e:	f001 f846 	bl	800b3ee <sysconf>
 800a362:	4f23      	ldr	r7, [pc, #140]	; (800a3f0 <_malloc_trim_r+0x9c>)
 800a364:	4680      	mov	r8, r0
 800a366:	4630      	mov	r0, r6
 800a368:	f000 fbec 	bl	800ab44 <__malloc_lock>
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	685d      	ldr	r5, [r3, #4]
 800a370:	f025 0503 	bic.w	r5, r5, #3
 800a374:	1b2c      	subs	r4, r5, r4
 800a376:	3c11      	subs	r4, #17
 800a378:	4444      	add	r4, r8
 800a37a:	fbb4 f4f8 	udiv	r4, r4, r8
 800a37e:	3c01      	subs	r4, #1
 800a380:	fb08 f404 	mul.w	r4, r8, r4
 800a384:	45a0      	cmp	r8, r4
 800a386:	dd05      	ble.n	800a394 <_malloc_trim_r+0x40>
 800a388:	4630      	mov	r0, r6
 800a38a:	f000 fbe1 	bl	800ab50 <__malloc_unlock>
 800a38e:	2000      	movs	r0, #0
 800a390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a394:	2100      	movs	r1, #0
 800a396:	4630      	mov	r0, r6
 800a398:	f000 ff48 	bl	800b22c <_sbrk_r>
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	442b      	add	r3, r5
 800a3a0:	4298      	cmp	r0, r3
 800a3a2:	d1f1      	bne.n	800a388 <_malloc_trim_r+0x34>
 800a3a4:	4261      	negs	r1, r4
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	f000 ff40 	bl	800b22c <_sbrk_r>
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	d110      	bne.n	800a3d2 <_malloc_trim_r+0x7e>
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	f000 ff3a 	bl	800b22c <_sbrk_r>
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	1a83      	subs	r3, r0, r2
 800a3bc:	2b0f      	cmp	r3, #15
 800a3be:	dde3      	ble.n	800a388 <_malloc_trim_r+0x34>
 800a3c0:	490c      	ldr	r1, [pc, #48]	; (800a3f4 <_malloc_trim_r+0xa0>)
 800a3c2:	6809      	ldr	r1, [r1, #0]
 800a3c4:	1a40      	subs	r0, r0, r1
 800a3c6:	490c      	ldr	r1, [pc, #48]	; (800a3f8 <_malloc_trim_r+0xa4>)
 800a3c8:	f043 0301 	orr.w	r3, r3, #1
 800a3cc:	6008      	str	r0, [r1, #0]
 800a3ce:	6053      	str	r3, [r2, #4]
 800a3d0:	e7da      	b.n	800a388 <_malloc_trim_r+0x34>
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	4a08      	ldr	r2, [pc, #32]	; (800a3f8 <_malloc_trim_r+0xa4>)
 800a3d6:	1b2d      	subs	r5, r5, r4
 800a3d8:	f045 0501 	orr.w	r5, r5, #1
 800a3dc:	605d      	str	r5, [r3, #4]
 800a3de:	6813      	ldr	r3, [r2, #0]
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	1b1c      	subs	r4, r3, r4
 800a3e4:	6014      	str	r4, [r2, #0]
 800a3e6:	f000 fbb3 	bl	800ab50 <__malloc_unlock>
 800a3ea:	2001      	movs	r0, #1
 800a3ec:	e7d0      	b.n	800a390 <_malloc_trim_r+0x3c>
 800a3ee:	bf00      	nop
 800a3f0:	2000044c 	.word	0x2000044c
 800a3f4:	20000854 	.word	0x20000854
 800a3f8:	200009f0 	.word	0x200009f0

0800a3fc <_free_r>:
 800a3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fe:	4605      	mov	r5, r0
 800a400:	460f      	mov	r7, r1
 800a402:	2900      	cmp	r1, #0
 800a404:	f000 80b1 	beq.w	800a56a <_free_r+0x16e>
 800a408:	f000 fb9c 	bl	800ab44 <__malloc_lock>
 800a40c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a410:	4856      	ldr	r0, [pc, #344]	; (800a56c <_free_r+0x170>)
 800a412:	f022 0401 	bic.w	r4, r2, #1
 800a416:	f1a7 0308 	sub.w	r3, r7, #8
 800a41a:	eb03 0c04 	add.w	ip, r3, r4
 800a41e:	6881      	ldr	r1, [r0, #8]
 800a420:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800a424:	4561      	cmp	r1, ip
 800a426:	f026 0603 	bic.w	r6, r6, #3
 800a42a:	f002 0201 	and.w	r2, r2, #1
 800a42e:	d11b      	bne.n	800a468 <_free_r+0x6c>
 800a430:	4434      	add	r4, r6
 800a432:	b93a      	cbnz	r2, 800a444 <_free_r+0x48>
 800a434:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800a438:	1a9b      	subs	r3, r3, r2
 800a43a:	4414      	add	r4, r2
 800a43c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800a440:	60ca      	str	r2, [r1, #12]
 800a442:	6091      	str	r1, [r2, #8]
 800a444:	f044 0201 	orr.w	r2, r4, #1
 800a448:	605a      	str	r2, [r3, #4]
 800a44a:	6083      	str	r3, [r0, #8]
 800a44c:	4b48      	ldr	r3, [pc, #288]	; (800a570 <_free_r+0x174>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	42a3      	cmp	r3, r4
 800a452:	d804      	bhi.n	800a45e <_free_r+0x62>
 800a454:	4b47      	ldr	r3, [pc, #284]	; (800a574 <_free_r+0x178>)
 800a456:	4628      	mov	r0, r5
 800a458:	6819      	ldr	r1, [r3, #0]
 800a45a:	f7ff ff7b 	bl	800a354 <_malloc_trim_r>
 800a45e:	4628      	mov	r0, r5
 800a460:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a464:	f000 bb74 	b.w	800ab50 <__malloc_unlock>
 800a468:	f8cc 6004 	str.w	r6, [ip, #4]
 800a46c:	2a00      	cmp	r2, #0
 800a46e:	d138      	bne.n	800a4e2 <_free_r+0xe6>
 800a470:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800a474:	1a5b      	subs	r3, r3, r1
 800a476:	440c      	add	r4, r1
 800a478:	6899      	ldr	r1, [r3, #8]
 800a47a:	f100 0708 	add.w	r7, r0, #8
 800a47e:	42b9      	cmp	r1, r7
 800a480:	d031      	beq.n	800a4e6 <_free_r+0xea>
 800a482:	68df      	ldr	r7, [r3, #12]
 800a484:	60cf      	str	r7, [r1, #12]
 800a486:	60b9      	str	r1, [r7, #8]
 800a488:	eb0c 0106 	add.w	r1, ip, r6
 800a48c:	6849      	ldr	r1, [r1, #4]
 800a48e:	07c9      	lsls	r1, r1, #31
 800a490:	d40b      	bmi.n	800a4aa <_free_r+0xae>
 800a492:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800a496:	4434      	add	r4, r6
 800a498:	bb3a      	cbnz	r2, 800a4ea <_free_r+0xee>
 800a49a:	4e37      	ldr	r6, [pc, #220]	; (800a578 <_free_r+0x17c>)
 800a49c:	42b1      	cmp	r1, r6
 800a49e:	d124      	bne.n	800a4ea <_free_r+0xee>
 800a4a0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4a4:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	f044 0101 	orr.w	r1, r4, #1
 800a4ae:	6059      	str	r1, [r3, #4]
 800a4b0:	511c      	str	r4, [r3, r4]
 800a4b2:	2a00      	cmp	r2, #0
 800a4b4:	d1d3      	bne.n	800a45e <_free_r+0x62>
 800a4b6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800a4ba:	d21b      	bcs.n	800a4f4 <_free_r+0xf8>
 800a4bc:	0961      	lsrs	r1, r4, #5
 800a4be:	08e2      	lsrs	r2, r4, #3
 800a4c0:	2401      	movs	r4, #1
 800a4c2:	408c      	lsls	r4, r1
 800a4c4:	6841      	ldr	r1, [r0, #4]
 800a4c6:	3201      	adds	r2, #1
 800a4c8:	430c      	orrs	r4, r1
 800a4ca:	6044      	str	r4, [r0, #4]
 800a4cc:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800a4d0:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800a4d4:	3908      	subs	r1, #8
 800a4d6:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800a4da:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800a4de:	60e3      	str	r3, [r4, #12]
 800a4e0:	e7bd      	b.n	800a45e <_free_r+0x62>
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	e7d0      	b.n	800a488 <_free_r+0x8c>
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	e7ce      	b.n	800a488 <_free_r+0x8c>
 800a4ea:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800a4ee:	60ce      	str	r6, [r1, #12]
 800a4f0:	60b1      	str	r1, [r6, #8]
 800a4f2:	e7da      	b.n	800a4aa <_free_r+0xae>
 800a4f4:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800a4f8:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800a4fc:	d214      	bcs.n	800a528 <_free_r+0x12c>
 800a4fe:	09a2      	lsrs	r2, r4, #6
 800a500:	3238      	adds	r2, #56	; 0x38
 800a502:	1c51      	adds	r1, r2, #1
 800a504:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800a508:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800a50c:	428e      	cmp	r6, r1
 800a50e:	d125      	bne.n	800a55c <_free_r+0x160>
 800a510:	2401      	movs	r4, #1
 800a512:	1092      	asrs	r2, r2, #2
 800a514:	fa04 f202 	lsl.w	r2, r4, r2
 800a518:	6844      	ldr	r4, [r0, #4]
 800a51a:	4322      	orrs	r2, r4
 800a51c:	6042      	str	r2, [r0, #4]
 800a51e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800a522:	60b3      	str	r3, [r6, #8]
 800a524:	60cb      	str	r3, [r1, #12]
 800a526:	e79a      	b.n	800a45e <_free_r+0x62>
 800a528:	2a14      	cmp	r2, #20
 800a52a:	d801      	bhi.n	800a530 <_free_r+0x134>
 800a52c:	325b      	adds	r2, #91	; 0x5b
 800a52e:	e7e8      	b.n	800a502 <_free_r+0x106>
 800a530:	2a54      	cmp	r2, #84	; 0x54
 800a532:	d802      	bhi.n	800a53a <_free_r+0x13e>
 800a534:	0b22      	lsrs	r2, r4, #12
 800a536:	326e      	adds	r2, #110	; 0x6e
 800a538:	e7e3      	b.n	800a502 <_free_r+0x106>
 800a53a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a53e:	d802      	bhi.n	800a546 <_free_r+0x14a>
 800a540:	0be2      	lsrs	r2, r4, #15
 800a542:	3277      	adds	r2, #119	; 0x77
 800a544:	e7dd      	b.n	800a502 <_free_r+0x106>
 800a546:	f240 5154 	movw	r1, #1364	; 0x554
 800a54a:	428a      	cmp	r2, r1
 800a54c:	bf9a      	itte	ls
 800a54e:	0ca2      	lsrls	r2, r4, #18
 800a550:	327c      	addls	r2, #124	; 0x7c
 800a552:	227e      	movhi	r2, #126	; 0x7e
 800a554:	e7d5      	b.n	800a502 <_free_r+0x106>
 800a556:	6889      	ldr	r1, [r1, #8]
 800a558:	428e      	cmp	r6, r1
 800a55a:	d004      	beq.n	800a566 <_free_r+0x16a>
 800a55c:	684a      	ldr	r2, [r1, #4]
 800a55e:	f022 0203 	bic.w	r2, r2, #3
 800a562:	42a2      	cmp	r2, r4
 800a564:	d8f7      	bhi.n	800a556 <_free_r+0x15a>
 800a566:	68ce      	ldr	r6, [r1, #12]
 800a568:	e7d9      	b.n	800a51e <_free_r+0x122>
 800a56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a56c:	2000044c 	.word	0x2000044c
 800a570:	20000858 	.word	0x20000858
 800a574:	20000a20 	.word	0x20000a20
 800a578:	20000454 	.word	0x20000454

0800a57c <_fwalk_reent>:
 800a57c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a580:	4606      	mov	r6, r0
 800a582:	4688      	mov	r8, r1
 800a584:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800a588:	2700      	movs	r7, #0
 800a58a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a58e:	f1b9 0901 	subs.w	r9, r9, #1
 800a592:	d505      	bpl.n	800a5a0 <_fwalk_reent+0x24>
 800a594:	6824      	ldr	r4, [r4, #0]
 800a596:	2c00      	cmp	r4, #0
 800a598:	d1f7      	bne.n	800a58a <_fwalk_reent+0xe>
 800a59a:	4638      	mov	r0, r7
 800a59c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5a0:	89ab      	ldrh	r3, [r5, #12]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d907      	bls.n	800a5b6 <_fwalk_reent+0x3a>
 800a5a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	d003      	beq.n	800a5b6 <_fwalk_reent+0x3a>
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	47c0      	blx	r8
 800a5b4:	4307      	orrs	r7, r0
 800a5b6:	3568      	adds	r5, #104	; 0x68
 800a5b8:	e7e9      	b.n	800a58e <_fwalk_reent+0x12>
	...

0800a5bc <_localeconv_r>:
 800a5bc:	4800      	ldr	r0, [pc, #0]	; (800a5c0 <_localeconv_r+0x4>)
 800a5be:	4770      	bx	lr
 800a5c0:	2000094c 	.word	0x2000094c

0800a5c4 <__retarget_lock_init_recursive>:
 800a5c4:	4770      	bx	lr

0800a5c6 <__retarget_lock_close_recursive>:
 800a5c6:	4770      	bx	lr

0800a5c8 <__retarget_lock_acquire_recursive>:
 800a5c8:	4770      	bx	lr

0800a5ca <__retarget_lock_release_recursive>:
 800a5ca:	4770      	bx	lr

0800a5cc <__swhatbuf_r>:
 800a5cc:	b570      	push	{r4, r5, r6, lr}
 800a5ce:	460e      	mov	r6, r1
 800a5d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d4:	2900      	cmp	r1, #0
 800a5d6:	b096      	sub	sp, #88	; 0x58
 800a5d8:	4614      	mov	r4, r2
 800a5da:	461d      	mov	r5, r3
 800a5dc:	da09      	bge.n	800a5f2 <__swhatbuf_r+0x26>
 800a5de:	89b3      	ldrh	r3, [r6, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a5e6:	602a      	str	r2, [r5, #0]
 800a5e8:	d116      	bne.n	800a618 <__swhatbuf_r+0x4c>
 800a5ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5ee:	6023      	str	r3, [r4, #0]
 800a5f0:	e015      	b.n	800a61e <__swhatbuf_r+0x52>
 800a5f2:	466a      	mov	r2, sp
 800a5f4:	f001 fd86 	bl	800c104 <_fstat_r>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	dbf0      	blt.n	800a5de <__swhatbuf_r+0x12>
 800a5fc:	9a01      	ldr	r2, [sp, #4]
 800a5fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a602:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a606:	425a      	negs	r2, r3
 800a608:	415a      	adcs	r2, r3
 800a60a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a60e:	602a      	str	r2, [r5, #0]
 800a610:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a614:	6023      	str	r3, [r4, #0]
 800a616:	e002      	b.n	800a61e <__swhatbuf_r+0x52>
 800a618:	2340      	movs	r3, #64	; 0x40
 800a61a:	6023      	str	r3, [r4, #0]
 800a61c:	4610      	mov	r0, r2
 800a61e:	b016      	add	sp, #88	; 0x58
 800a620:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a624 <__smakebuf_r>:
 800a624:	898b      	ldrh	r3, [r1, #12]
 800a626:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a628:	079d      	lsls	r5, r3, #30
 800a62a:	4606      	mov	r6, r0
 800a62c:	460c      	mov	r4, r1
 800a62e:	d507      	bpl.n	800a640 <__smakebuf_r+0x1c>
 800a630:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	6123      	str	r3, [r4, #16]
 800a638:	2301      	movs	r3, #1
 800a63a:	6163      	str	r3, [r4, #20]
 800a63c:	b002      	add	sp, #8
 800a63e:	bd70      	pop	{r4, r5, r6, pc}
 800a640:	ab01      	add	r3, sp, #4
 800a642:	466a      	mov	r2, sp
 800a644:	f7ff ffc2 	bl	800a5cc <__swhatbuf_r>
 800a648:	9900      	ldr	r1, [sp, #0]
 800a64a:	4605      	mov	r5, r0
 800a64c:	4630      	mov	r0, r6
 800a64e:	f000 f829 	bl	800a6a4 <_malloc_r>
 800a652:	b948      	cbnz	r0, 800a668 <__smakebuf_r+0x44>
 800a654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a658:	059a      	lsls	r2, r3, #22
 800a65a:	d4ef      	bmi.n	800a63c <__smakebuf_r+0x18>
 800a65c:	f023 0303 	bic.w	r3, r3, #3
 800a660:	f043 0302 	orr.w	r3, r3, #2
 800a664:	81a3      	strh	r3, [r4, #12]
 800a666:	e7e3      	b.n	800a630 <__smakebuf_r+0xc>
 800a668:	4b0d      	ldr	r3, [pc, #52]	; (800a6a0 <__smakebuf_r+0x7c>)
 800a66a:	63f3      	str	r3, [r6, #60]	; 0x3c
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	6020      	str	r0, [r4, #0]
 800a670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a674:	81a3      	strh	r3, [r4, #12]
 800a676:	9b00      	ldr	r3, [sp, #0]
 800a678:	6163      	str	r3, [r4, #20]
 800a67a:	9b01      	ldr	r3, [sp, #4]
 800a67c:	6120      	str	r0, [r4, #16]
 800a67e:	b15b      	cbz	r3, 800a698 <__smakebuf_r+0x74>
 800a680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a684:	4630      	mov	r0, r6
 800a686:	f001 fe99 	bl	800c3bc <_isatty_r>
 800a68a:	b128      	cbz	r0, 800a698 <__smakebuf_r+0x74>
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	f023 0303 	bic.w	r3, r3, #3
 800a692:	f043 0301 	orr.w	r3, r3, #1
 800a696:	81a3      	strh	r3, [r4, #12]
 800a698:	89a0      	ldrh	r0, [r4, #12]
 800a69a:	4305      	orrs	r5, r0
 800a69c:	81a5      	strh	r5, [r4, #12]
 800a69e:	e7cd      	b.n	800a63c <__smakebuf_r+0x18>
 800a6a0:	0800a2a1 	.word	0x0800a2a1

0800a6a4 <_malloc_r>:
 800a6a4:	f101 030b 	add.w	r3, r1, #11
 800a6a8:	2b16      	cmp	r3, #22
 800a6aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ae:	4605      	mov	r5, r0
 800a6b0:	d906      	bls.n	800a6c0 <_malloc_r+0x1c>
 800a6b2:	f033 0707 	bics.w	r7, r3, #7
 800a6b6:	d504      	bpl.n	800a6c2 <_malloc_r+0x1e>
 800a6b8:	230c      	movs	r3, #12
 800a6ba:	602b      	str	r3, [r5, #0]
 800a6bc:	2400      	movs	r4, #0
 800a6be:	e1ae      	b.n	800aa1e <_malloc_r+0x37a>
 800a6c0:	2710      	movs	r7, #16
 800a6c2:	42b9      	cmp	r1, r7
 800a6c4:	d8f8      	bhi.n	800a6b8 <_malloc_r+0x14>
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	f000 fa3c 	bl	800ab44 <__malloc_lock>
 800a6cc:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800a6d0:	4ec3      	ldr	r6, [pc, #780]	; (800a9e0 <_malloc_r+0x33c>)
 800a6d2:	d238      	bcs.n	800a746 <_malloc_r+0xa2>
 800a6d4:	f107 0208 	add.w	r2, r7, #8
 800a6d8:	4432      	add	r2, r6
 800a6da:	f1a2 0108 	sub.w	r1, r2, #8
 800a6de:	6854      	ldr	r4, [r2, #4]
 800a6e0:	428c      	cmp	r4, r1
 800a6e2:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800a6e6:	d102      	bne.n	800a6ee <_malloc_r+0x4a>
 800a6e8:	68d4      	ldr	r4, [r2, #12]
 800a6ea:	42a2      	cmp	r2, r4
 800a6ec:	d010      	beq.n	800a710 <_malloc_r+0x6c>
 800a6ee:	6863      	ldr	r3, [r4, #4]
 800a6f0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800a6f4:	f023 0303 	bic.w	r3, r3, #3
 800a6f8:	60ca      	str	r2, [r1, #12]
 800a6fa:	4423      	add	r3, r4
 800a6fc:	6091      	str	r1, [r2, #8]
 800a6fe:	685a      	ldr	r2, [r3, #4]
 800a700:	f042 0201 	orr.w	r2, r2, #1
 800a704:	605a      	str	r2, [r3, #4]
 800a706:	4628      	mov	r0, r5
 800a708:	f000 fa22 	bl	800ab50 <__malloc_unlock>
 800a70c:	3408      	adds	r4, #8
 800a70e:	e186      	b.n	800aa1e <_malloc_r+0x37a>
 800a710:	3302      	adds	r3, #2
 800a712:	4ab4      	ldr	r2, [pc, #720]	; (800a9e4 <_malloc_r+0x340>)
 800a714:	6934      	ldr	r4, [r6, #16]
 800a716:	4294      	cmp	r4, r2
 800a718:	4611      	mov	r1, r2
 800a71a:	d077      	beq.n	800a80c <_malloc_r+0x168>
 800a71c:	6860      	ldr	r0, [r4, #4]
 800a71e:	f020 0c03 	bic.w	ip, r0, #3
 800a722:	ebac 0007 	sub.w	r0, ip, r7
 800a726:	280f      	cmp	r0, #15
 800a728:	dd48      	ble.n	800a7bc <_malloc_r+0x118>
 800a72a:	19e1      	adds	r1, r4, r7
 800a72c:	f040 0301 	orr.w	r3, r0, #1
 800a730:	f047 0701 	orr.w	r7, r7, #1
 800a734:	6067      	str	r7, [r4, #4]
 800a736:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800a73a:	e9c1 2202 	strd	r2, r2, [r1, #8]
 800a73e:	604b      	str	r3, [r1, #4]
 800a740:	f844 000c 	str.w	r0, [r4, ip]
 800a744:	e7df      	b.n	800a706 <_malloc_r+0x62>
 800a746:	0a7b      	lsrs	r3, r7, #9
 800a748:	d02a      	beq.n	800a7a0 <_malloc_r+0xfc>
 800a74a:	2b04      	cmp	r3, #4
 800a74c:	d812      	bhi.n	800a774 <_malloc_r+0xd0>
 800a74e:	09bb      	lsrs	r3, r7, #6
 800a750:	3338      	adds	r3, #56	; 0x38
 800a752:	1c5a      	adds	r2, r3, #1
 800a754:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800a758:	f1a2 0c08 	sub.w	ip, r2, #8
 800a75c:	6854      	ldr	r4, [r2, #4]
 800a75e:	4564      	cmp	r4, ip
 800a760:	d006      	beq.n	800a770 <_malloc_r+0xcc>
 800a762:	6862      	ldr	r2, [r4, #4]
 800a764:	f022 0203 	bic.w	r2, r2, #3
 800a768:	1bd0      	subs	r0, r2, r7
 800a76a:	280f      	cmp	r0, #15
 800a76c:	dd1c      	ble.n	800a7a8 <_malloc_r+0x104>
 800a76e:	3b01      	subs	r3, #1
 800a770:	3301      	adds	r3, #1
 800a772:	e7ce      	b.n	800a712 <_malloc_r+0x6e>
 800a774:	2b14      	cmp	r3, #20
 800a776:	d801      	bhi.n	800a77c <_malloc_r+0xd8>
 800a778:	335b      	adds	r3, #91	; 0x5b
 800a77a:	e7ea      	b.n	800a752 <_malloc_r+0xae>
 800a77c:	2b54      	cmp	r3, #84	; 0x54
 800a77e:	d802      	bhi.n	800a786 <_malloc_r+0xe2>
 800a780:	0b3b      	lsrs	r3, r7, #12
 800a782:	336e      	adds	r3, #110	; 0x6e
 800a784:	e7e5      	b.n	800a752 <_malloc_r+0xae>
 800a786:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a78a:	d802      	bhi.n	800a792 <_malloc_r+0xee>
 800a78c:	0bfb      	lsrs	r3, r7, #15
 800a78e:	3377      	adds	r3, #119	; 0x77
 800a790:	e7df      	b.n	800a752 <_malloc_r+0xae>
 800a792:	f240 5254 	movw	r2, #1364	; 0x554
 800a796:	4293      	cmp	r3, r2
 800a798:	d804      	bhi.n	800a7a4 <_malloc_r+0x100>
 800a79a:	0cbb      	lsrs	r3, r7, #18
 800a79c:	337c      	adds	r3, #124	; 0x7c
 800a79e:	e7d8      	b.n	800a752 <_malloc_r+0xae>
 800a7a0:	233f      	movs	r3, #63	; 0x3f
 800a7a2:	e7d6      	b.n	800a752 <_malloc_r+0xae>
 800a7a4:	237e      	movs	r3, #126	; 0x7e
 800a7a6:	e7d4      	b.n	800a752 <_malloc_r+0xae>
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	68e1      	ldr	r1, [r4, #12]
 800a7ac:	db04      	blt.n	800a7b8 <_malloc_r+0x114>
 800a7ae:	68a3      	ldr	r3, [r4, #8]
 800a7b0:	60d9      	str	r1, [r3, #12]
 800a7b2:	608b      	str	r3, [r1, #8]
 800a7b4:	18a3      	adds	r3, r4, r2
 800a7b6:	e7a2      	b.n	800a6fe <_malloc_r+0x5a>
 800a7b8:	460c      	mov	r4, r1
 800a7ba:	e7d0      	b.n	800a75e <_malloc_r+0xba>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800a7c2:	db07      	blt.n	800a7d4 <_malloc_r+0x130>
 800a7c4:	44a4      	add	ip, r4
 800a7c6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800a7ca:	f043 0301 	orr.w	r3, r3, #1
 800a7ce:	f8cc 3004 	str.w	r3, [ip, #4]
 800a7d2:	e798      	b.n	800a706 <_malloc_r+0x62>
 800a7d4:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800a7d8:	6870      	ldr	r0, [r6, #4]
 800a7da:	f080 809e 	bcs.w	800a91a <_malloc_r+0x276>
 800a7de:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800a7e2:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800a7e6:	f04f 0c01 	mov.w	ip, #1
 800a7ea:	3201      	adds	r2, #1
 800a7ec:	fa0c fc0e 	lsl.w	ip, ip, lr
 800a7f0:	ea4c 0000 	orr.w	r0, ip, r0
 800a7f4:	6070      	str	r0, [r6, #4]
 800a7f6:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800a7fa:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800a7fe:	3808      	subs	r0, #8
 800a800:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800a804:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800a808:	f8cc 400c 	str.w	r4, [ip, #12]
 800a80c:	2001      	movs	r0, #1
 800a80e:	109a      	asrs	r2, r3, #2
 800a810:	fa00 f202 	lsl.w	r2, r0, r2
 800a814:	6870      	ldr	r0, [r6, #4]
 800a816:	4290      	cmp	r0, r2
 800a818:	d326      	bcc.n	800a868 <_malloc_r+0x1c4>
 800a81a:	4210      	tst	r0, r2
 800a81c:	d106      	bne.n	800a82c <_malloc_r+0x188>
 800a81e:	f023 0303 	bic.w	r3, r3, #3
 800a822:	0052      	lsls	r2, r2, #1
 800a824:	4210      	tst	r0, r2
 800a826:	f103 0304 	add.w	r3, r3, #4
 800a82a:	d0fa      	beq.n	800a822 <_malloc_r+0x17e>
 800a82c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800a830:	46c1      	mov	r9, r8
 800a832:	469e      	mov	lr, r3
 800a834:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800a838:	454c      	cmp	r4, r9
 800a83a:	f040 80b3 	bne.w	800a9a4 <_malloc_r+0x300>
 800a83e:	f10e 0e01 	add.w	lr, lr, #1
 800a842:	f01e 0f03 	tst.w	lr, #3
 800a846:	f109 0908 	add.w	r9, r9, #8
 800a84a:	d1f3      	bne.n	800a834 <_malloc_r+0x190>
 800a84c:	0798      	lsls	r0, r3, #30
 800a84e:	f040 80ec 	bne.w	800aa2a <_malloc_r+0x386>
 800a852:	6873      	ldr	r3, [r6, #4]
 800a854:	ea23 0302 	bic.w	r3, r3, r2
 800a858:	6073      	str	r3, [r6, #4]
 800a85a:	6870      	ldr	r0, [r6, #4]
 800a85c:	0052      	lsls	r2, r2, #1
 800a85e:	4290      	cmp	r0, r2
 800a860:	d302      	bcc.n	800a868 <_malloc_r+0x1c4>
 800a862:	2a00      	cmp	r2, #0
 800a864:	f040 80ee 	bne.w	800aa44 <_malloc_r+0x3a0>
 800a868:	f8d6 b008 	ldr.w	fp, [r6, #8]
 800a86c:	f8db 1004 	ldr.w	r1, [fp, #4]
 800a870:	f021 0903 	bic.w	r9, r1, #3
 800a874:	45b9      	cmp	r9, r7
 800a876:	d304      	bcc.n	800a882 <_malloc_r+0x1de>
 800a878:	eba9 0207 	sub.w	r2, r9, r7
 800a87c:	2a0f      	cmp	r2, #15
 800a87e:	f300 8149 	bgt.w	800ab14 <_malloc_r+0x470>
 800a882:	4a59      	ldr	r2, [pc, #356]	; (800a9e8 <_malloc_r+0x344>)
 800a884:	6811      	ldr	r1, [r2, #0]
 800a886:	3110      	adds	r1, #16
 800a888:	eb0b 0309 	add.w	r3, fp, r9
 800a88c:	4439      	add	r1, r7
 800a88e:	2008      	movs	r0, #8
 800a890:	9301      	str	r3, [sp, #4]
 800a892:	9100      	str	r1, [sp, #0]
 800a894:	f000 fdab 	bl	800b3ee <sysconf>
 800a898:	4a54      	ldr	r2, [pc, #336]	; (800a9ec <_malloc_r+0x348>)
 800a89a:	e9dd 1300 	ldrd	r1, r3, [sp]
 800a89e:	4680      	mov	r8, r0
 800a8a0:	6810      	ldr	r0, [r2, #0]
 800a8a2:	3001      	adds	r0, #1
 800a8a4:	bf1f      	itttt	ne
 800a8a6:	f101 31ff 	addne.w	r1, r1, #4294967295
 800a8aa:	4441      	addne	r1, r8
 800a8ac:	f1c8 0000 	rsbne	r0, r8, #0
 800a8b0:	4001      	andne	r1, r0
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	e9cd 1300 	strd	r1, r3, [sp]
 800a8b8:	f000 fcb8 	bl	800b22c <_sbrk_r>
 800a8bc:	1c42      	adds	r2, r0, #1
 800a8be:	4604      	mov	r4, r0
 800a8c0:	f000 80fc 	beq.w	800aabc <_malloc_r+0x418>
 800a8c4:	9b01      	ldr	r3, [sp, #4]
 800a8c6:	9900      	ldr	r1, [sp, #0]
 800a8c8:	4a48      	ldr	r2, [pc, #288]	; (800a9ec <_malloc_r+0x348>)
 800a8ca:	4283      	cmp	r3, r0
 800a8cc:	d902      	bls.n	800a8d4 <_malloc_r+0x230>
 800a8ce:	45b3      	cmp	fp, r6
 800a8d0:	f040 80f4 	bne.w	800aabc <_malloc_r+0x418>
 800a8d4:	f8df a120 	ldr.w	sl, [pc, #288]	; 800a9f8 <_malloc_r+0x354>
 800a8d8:	f8da 0000 	ldr.w	r0, [sl]
 800a8dc:	42a3      	cmp	r3, r4
 800a8de:	eb00 0e01 	add.w	lr, r0, r1
 800a8e2:	f8ca e000 	str.w	lr, [sl]
 800a8e6:	f108 3cff 	add.w	ip, r8, #4294967295
 800a8ea:	f040 80ad 	bne.w	800aa48 <_malloc_r+0x3a4>
 800a8ee:	ea13 0f0c 	tst.w	r3, ip
 800a8f2:	f040 80a9 	bne.w	800aa48 <_malloc_r+0x3a4>
 800a8f6:	68b3      	ldr	r3, [r6, #8]
 800a8f8:	4449      	add	r1, r9
 800a8fa:	f041 0101 	orr.w	r1, r1, #1
 800a8fe:	6059      	str	r1, [r3, #4]
 800a900:	4a3b      	ldr	r2, [pc, #236]	; (800a9f0 <_malloc_r+0x34c>)
 800a902:	f8da 3000 	ldr.w	r3, [sl]
 800a906:	6811      	ldr	r1, [r2, #0]
 800a908:	428b      	cmp	r3, r1
 800a90a:	bf88      	it	hi
 800a90c:	6013      	strhi	r3, [r2, #0]
 800a90e:	4a39      	ldr	r2, [pc, #228]	; (800a9f4 <_malloc_r+0x350>)
 800a910:	6811      	ldr	r1, [r2, #0]
 800a912:	428b      	cmp	r3, r1
 800a914:	bf88      	it	hi
 800a916:	6013      	strhi	r3, [r2, #0]
 800a918:	e0d0      	b.n	800aabc <_malloc_r+0x418>
 800a91a:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800a91e:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800a922:	d218      	bcs.n	800a956 <_malloc_r+0x2b2>
 800a924:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800a928:	3238      	adds	r2, #56	; 0x38
 800a92a:	f102 0e01 	add.w	lr, r2, #1
 800a92e:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800a932:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800a936:	45f0      	cmp	r8, lr
 800a938:	d12b      	bne.n	800a992 <_malloc_r+0x2ee>
 800a93a:	1092      	asrs	r2, r2, #2
 800a93c:	f04f 0c01 	mov.w	ip, #1
 800a940:	fa0c f202 	lsl.w	r2, ip, r2
 800a944:	4310      	orrs	r0, r2
 800a946:	6070      	str	r0, [r6, #4]
 800a948:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800a94c:	f8c8 4008 	str.w	r4, [r8, #8]
 800a950:	f8ce 400c 	str.w	r4, [lr, #12]
 800a954:	e75a      	b.n	800a80c <_malloc_r+0x168>
 800a956:	2a14      	cmp	r2, #20
 800a958:	d801      	bhi.n	800a95e <_malloc_r+0x2ba>
 800a95a:	325b      	adds	r2, #91	; 0x5b
 800a95c:	e7e5      	b.n	800a92a <_malloc_r+0x286>
 800a95e:	2a54      	cmp	r2, #84	; 0x54
 800a960:	d803      	bhi.n	800a96a <_malloc_r+0x2c6>
 800a962:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800a966:	326e      	adds	r2, #110	; 0x6e
 800a968:	e7df      	b.n	800a92a <_malloc_r+0x286>
 800a96a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a96e:	d803      	bhi.n	800a978 <_malloc_r+0x2d4>
 800a970:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800a974:	3277      	adds	r2, #119	; 0x77
 800a976:	e7d8      	b.n	800a92a <_malloc_r+0x286>
 800a978:	f240 5e54 	movw	lr, #1364	; 0x554
 800a97c:	4572      	cmp	r2, lr
 800a97e:	bf9a      	itte	ls
 800a980:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800a984:	327c      	addls	r2, #124	; 0x7c
 800a986:	227e      	movhi	r2, #126	; 0x7e
 800a988:	e7cf      	b.n	800a92a <_malloc_r+0x286>
 800a98a:	f8de e008 	ldr.w	lr, [lr, #8]
 800a98e:	45f0      	cmp	r8, lr
 800a990:	d005      	beq.n	800a99e <_malloc_r+0x2fa>
 800a992:	f8de 2004 	ldr.w	r2, [lr, #4]
 800a996:	f022 0203 	bic.w	r2, r2, #3
 800a99a:	4562      	cmp	r2, ip
 800a99c:	d8f5      	bhi.n	800a98a <_malloc_r+0x2e6>
 800a99e:	f8de 800c 	ldr.w	r8, [lr, #12]
 800a9a2:	e7d1      	b.n	800a948 <_malloc_r+0x2a4>
 800a9a4:	6860      	ldr	r0, [r4, #4]
 800a9a6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800a9aa:	f020 0003 	bic.w	r0, r0, #3
 800a9ae:	eba0 0a07 	sub.w	sl, r0, r7
 800a9b2:	f1ba 0f0f 	cmp.w	sl, #15
 800a9b6:	dd21      	ble.n	800a9fc <_malloc_r+0x358>
 800a9b8:	68a3      	ldr	r3, [r4, #8]
 800a9ba:	19e2      	adds	r2, r4, r7
 800a9bc:	f047 0701 	orr.w	r7, r7, #1
 800a9c0:	6067      	str	r7, [r4, #4]
 800a9c2:	f8c3 c00c 	str.w	ip, [r3, #12]
 800a9c6:	f8cc 3008 	str.w	r3, [ip, #8]
 800a9ca:	f04a 0301 	orr.w	r3, sl, #1
 800a9ce:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800a9d2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800a9d6:	6053      	str	r3, [r2, #4]
 800a9d8:	f844 a000 	str.w	sl, [r4, r0]
 800a9dc:	e693      	b.n	800a706 <_malloc_r+0x62>
 800a9de:	bf00      	nop
 800a9e0:	2000044c 	.word	0x2000044c
 800a9e4:	20000454 	.word	0x20000454
 800a9e8:	20000a20 	.word	0x20000a20
 800a9ec:	20000854 	.word	0x20000854
 800a9f0:	20000a18 	.word	0x20000a18
 800a9f4:	20000a1c 	.word	0x20000a1c
 800a9f8:	200009f0 	.word	0x200009f0
 800a9fc:	f1ba 0f00 	cmp.w	sl, #0
 800aa00:	db11      	blt.n	800aa26 <_malloc_r+0x382>
 800aa02:	4420      	add	r0, r4
 800aa04:	6843      	ldr	r3, [r0, #4]
 800aa06:	f043 0301 	orr.w	r3, r3, #1
 800aa0a:	6043      	str	r3, [r0, #4]
 800aa0c:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800aa10:	4628      	mov	r0, r5
 800aa12:	f8c3 c00c 	str.w	ip, [r3, #12]
 800aa16:	f8cc 3008 	str.w	r3, [ip, #8]
 800aa1a:	f000 f899 	bl	800ab50 <__malloc_unlock>
 800aa1e:	4620      	mov	r0, r4
 800aa20:	b003      	add	sp, #12
 800aa22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa26:	4664      	mov	r4, ip
 800aa28:	e706      	b.n	800a838 <_malloc_r+0x194>
 800aa2a:	f858 0908 	ldr.w	r0, [r8], #-8
 800aa2e:	4540      	cmp	r0, r8
 800aa30:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa34:	f43f af0a 	beq.w	800a84c <_malloc_r+0x1a8>
 800aa38:	e70f      	b.n	800a85a <_malloc_r+0x1b6>
 800aa3a:	3304      	adds	r3, #4
 800aa3c:	0052      	lsls	r2, r2, #1
 800aa3e:	4210      	tst	r0, r2
 800aa40:	d0fb      	beq.n	800aa3a <_malloc_r+0x396>
 800aa42:	e6f3      	b.n	800a82c <_malloc_r+0x188>
 800aa44:	4673      	mov	r3, lr
 800aa46:	e7fa      	b.n	800aa3e <_malloc_r+0x39a>
 800aa48:	6810      	ldr	r0, [r2, #0]
 800aa4a:	3001      	adds	r0, #1
 800aa4c:	bf1b      	ittet	ne
 800aa4e:	1ae3      	subne	r3, r4, r3
 800aa50:	4473      	addne	r3, lr
 800aa52:	6014      	streq	r4, [r2, #0]
 800aa54:	f8ca 3000 	strne.w	r3, [sl]
 800aa58:	f014 0307 	ands.w	r3, r4, #7
 800aa5c:	bf1a      	itte	ne
 800aa5e:	f1c3 0008 	rsbne	r0, r3, #8
 800aa62:	1824      	addne	r4, r4, r0
 800aa64:	4618      	moveq	r0, r3
 800aa66:	1862      	adds	r2, r4, r1
 800aa68:	ea02 010c 	and.w	r1, r2, ip
 800aa6c:	4480      	add	r8, r0
 800aa6e:	eba8 0801 	sub.w	r8, r8, r1
 800aa72:	ea08 080c 	and.w	r8, r8, ip
 800aa76:	4641      	mov	r1, r8
 800aa78:	4628      	mov	r0, r5
 800aa7a:	9301      	str	r3, [sp, #4]
 800aa7c:	9200      	str	r2, [sp, #0]
 800aa7e:	f000 fbd5 	bl	800b22c <_sbrk_r>
 800aa82:	1c43      	adds	r3, r0, #1
 800aa84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa88:	d105      	bne.n	800aa96 <_malloc_r+0x3f2>
 800aa8a:	b32b      	cbz	r3, 800aad8 <_malloc_r+0x434>
 800aa8c:	f1a3 0008 	sub.w	r0, r3, #8
 800aa90:	4410      	add	r0, r2
 800aa92:	f04f 0800 	mov.w	r8, #0
 800aa96:	f8da 2000 	ldr.w	r2, [sl]
 800aa9a:	60b4      	str	r4, [r6, #8]
 800aa9c:	1b00      	subs	r0, r0, r4
 800aa9e:	4440      	add	r0, r8
 800aaa0:	4442      	add	r2, r8
 800aaa2:	f040 0001 	orr.w	r0, r0, #1
 800aaa6:	45b3      	cmp	fp, r6
 800aaa8:	f8ca 2000 	str.w	r2, [sl]
 800aaac:	6060      	str	r0, [r4, #4]
 800aaae:	f43f af27 	beq.w	800a900 <_malloc_r+0x25c>
 800aab2:	f1b9 0f0f 	cmp.w	r9, #15
 800aab6:	d812      	bhi.n	800aade <_malloc_r+0x43a>
 800aab8:	2301      	movs	r3, #1
 800aaba:	6063      	str	r3, [r4, #4]
 800aabc:	68b3      	ldr	r3, [r6, #8]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	f023 0303 	bic.w	r3, r3, #3
 800aac4:	42bb      	cmp	r3, r7
 800aac6:	eba3 0207 	sub.w	r2, r3, r7
 800aaca:	d301      	bcc.n	800aad0 <_malloc_r+0x42c>
 800aacc:	2a0f      	cmp	r2, #15
 800aace:	dc21      	bgt.n	800ab14 <_malloc_r+0x470>
 800aad0:	4628      	mov	r0, r5
 800aad2:	f000 f83d 	bl	800ab50 <__malloc_unlock>
 800aad6:	e5f1      	b.n	800a6bc <_malloc_r+0x18>
 800aad8:	4610      	mov	r0, r2
 800aada:	4698      	mov	r8, r3
 800aadc:	e7db      	b.n	800aa96 <_malloc_r+0x3f2>
 800aade:	f8db 3004 	ldr.w	r3, [fp, #4]
 800aae2:	f1a9 090c 	sub.w	r9, r9, #12
 800aae6:	f029 0907 	bic.w	r9, r9, #7
 800aaea:	f003 0301 	and.w	r3, r3, #1
 800aaee:	ea43 0309 	orr.w	r3, r3, r9
 800aaf2:	f8cb 3004 	str.w	r3, [fp, #4]
 800aaf6:	2205      	movs	r2, #5
 800aaf8:	eb0b 0309 	add.w	r3, fp, r9
 800aafc:	f1b9 0f0f 	cmp.w	r9, #15
 800ab00:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800ab04:	f67f aefc 	bls.w	800a900 <_malloc_r+0x25c>
 800ab08:	f10b 0108 	add.w	r1, fp, #8
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	f7ff fc75 	bl	800a3fc <_free_r>
 800ab12:	e6f5      	b.n	800a900 <_malloc_r+0x25c>
 800ab14:	68b4      	ldr	r4, [r6, #8]
 800ab16:	f047 0301 	orr.w	r3, r7, #1
 800ab1a:	4427      	add	r7, r4
 800ab1c:	f042 0201 	orr.w	r2, r2, #1
 800ab20:	6063      	str	r3, [r4, #4]
 800ab22:	60b7      	str	r7, [r6, #8]
 800ab24:	607a      	str	r2, [r7, #4]
 800ab26:	e5ee      	b.n	800a706 <_malloc_r+0x62>

0800ab28 <memcpy>:
 800ab28:	440a      	add	r2, r1
 800ab2a:	4291      	cmp	r1, r2
 800ab2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab30:	d100      	bne.n	800ab34 <memcpy+0xc>
 800ab32:	4770      	bx	lr
 800ab34:	b510      	push	{r4, lr}
 800ab36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab3e:	4291      	cmp	r1, r2
 800ab40:	d1f9      	bne.n	800ab36 <memcpy+0xe>
 800ab42:	bd10      	pop	{r4, pc}

0800ab44 <__malloc_lock>:
 800ab44:	4801      	ldr	r0, [pc, #4]	; (800ab4c <__malloc_lock+0x8>)
 800ab46:	f7ff bd3f 	b.w	800a5c8 <__retarget_lock_acquire_recursive>
 800ab4a:	bf00      	nop
 800ab4c:	20000c04 	.word	0x20000c04

0800ab50 <__malloc_unlock>:
 800ab50:	4801      	ldr	r0, [pc, #4]	; (800ab58 <__malloc_unlock+0x8>)
 800ab52:	f7ff bd3a 	b.w	800a5ca <__retarget_lock_release_recursive>
 800ab56:	bf00      	nop
 800ab58:	20000c04 	.word	0x20000c04

0800ab5c <_Balloc>:
 800ab5c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ab5e:	b570      	push	{r4, r5, r6, lr}
 800ab60:	4605      	mov	r5, r0
 800ab62:	460c      	mov	r4, r1
 800ab64:	b17b      	cbz	r3, 800ab86 <_Balloc+0x2a>
 800ab66:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800ab68:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ab6c:	b9a0      	cbnz	r0, 800ab98 <_Balloc+0x3c>
 800ab6e:	2101      	movs	r1, #1
 800ab70:	fa01 f604 	lsl.w	r6, r1, r4
 800ab74:	1d72      	adds	r2, r6, #5
 800ab76:	0092      	lsls	r2, r2, #2
 800ab78:	4628      	mov	r0, r5
 800ab7a:	f001 f9af 	bl	800bedc <_calloc_r>
 800ab7e:	b148      	cbz	r0, 800ab94 <_Balloc+0x38>
 800ab80:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800ab84:	e00b      	b.n	800ab9e <_Balloc+0x42>
 800ab86:	2221      	movs	r2, #33	; 0x21
 800ab88:	2104      	movs	r1, #4
 800ab8a:	f001 f9a7 	bl	800bedc <_calloc_r>
 800ab8e:	64e8      	str	r0, [r5, #76]	; 0x4c
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d1e8      	bne.n	800ab66 <_Balloc+0xa>
 800ab94:	2000      	movs	r0, #0
 800ab96:	bd70      	pop	{r4, r5, r6, pc}
 800ab98:	6802      	ldr	r2, [r0, #0]
 800ab9a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800ab9e:	2300      	movs	r3, #0
 800aba0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aba4:	e7f7      	b.n	800ab96 <_Balloc+0x3a>

0800aba6 <_Bfree>:
 800aba6:	b131      	cbz	r1, 800abb6 <_Bfree+0x10>
 800aba8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800abaa:	684a      	ldr	r2, [r1, #4]
 800abac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800abb0:	6008      	str	r0, [r1, #0]
 800abb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800abb6:	4770      	bx	lr

0800abb8 <__multadd>:
 800abb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abbc:	690e      	ldr	r6, [r1, #16]
 800abbe:	4607      	mov	r7, r0
 800abc0:	4698      	mov	r8, r3
 800abc2:	460c      	mov	r4, r1
 800abc4:	f101 0014 	add.w	r0, r1, #20
 800abc8:	2300      	movs	r3, #0
 800abca:	6805      	ldr	r5, [r0, #0]
 800abcc:	b2a9      	uxth	r1, r5
 800abce:	fb02 8101 	mla	r1, r2, r1, r8
 800abd2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800abd6:	0c2d      	lsrs	r5, r5, #16
 800abd8:	fb02 c505 	mla	r5, r2, r5, ip
 800abdc:	b289      	uxth	r1, r1
 800abde:	3301      	adds	r3, #1
 800abe0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800abe4:	429e      	cmp	r6, r3
 800abe6:	f840 1b04 	str.w	r1, [r0], #4
 800abea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800abee:	dcec      	bgt.n	800abca <__multadd+0x12>
 800abf0:	f1b8 0f00 	cmp.w	r8, #0
 800abf4:	d022      	beq.n	800ac3c <__multadd+0x84>
 800abf6:	68a3      	ldr	r3, [r4, #8]
 800abf8:	42b3      	cmp	r3, r6
 800abfa:	dc19      	bgt.n	800ac30 <__multadd+0x78>
 800abfc:	6861      	ldr	r1, [r4, #4]
 800abfe:	4638      	mov	r0, r7
 800ac00:	3101      	adds	r1, #1
 800ac02:	f7ff ffab 	bl	800ab5c <_Balloc>
 800ac06:	4605      	mov	r5, r0
 800ac08:	b928      	cbnz	r0, 800ac16 <__multadd+0x5e>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	4b0d      	ldr	r3, [pc, #52]	; (800ac44 <__multadd+0x8c>)
 800ac0e:	480e      	ldr	r0, [pc, #56]	; (800ac48 <__multadd+0x90>)
 800ac10:	21b5      	movs	r1, #181	; 0xb5
 800ac12:	f001 f945 	bl	800bea0 <__assert_func>
 800ac16:	6922      	ldr	r2, [r4, #16]
 800ac18:	3202      	adds	r2, #2
 800ac1a:	f104 010c 	add.w	r1, r4, #12
 800ac1e:	0092      	lsls	r2, r2, #2
 800ac20:	300c      	adds	r0, #12
 800ac22:	f7ff ff81 	bl	800ab28 <memcpy>
 800ac26:	4621      	mov	r1, r4
 800ac28:	4638      	mov	r0, r7
 800ac2a:	f7ff ffbc 	bl	800aba6 <_Bfree>
 800ac2e:	462c      	mov	r4, r5
 800ac30:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ac34:	3601      	adds	r6, #1
 800ac36:	f8c3 8014 	str.w	r8, [r3, #20]
 800ac3a:	6126      	str	r6, [r4, #16]
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac42:	bf00      	nop
 800ac44:	0800cac1 	.word	0x0800cac1
 800ac48:	0800cb31 	.word	0x0800cb31

0800ac4c <__hi0bits>:
 800ac4c:	0c03      	lsrs	r3, r0, #16
 800ac4e:	041b      	lsls	r3, r3, #16
 800ac50:	b9d3      	cbnz	r3, 800ac88 <__hi0bits+0x3c>
 800ac52:	0400      	lsls	r0, r0, #16
 800ac54:	2310      	movs	r3, #16
 800ac56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ac5a:	bf04      	itt	eq
 800ac5c:	0200      	lsleq	r0, r0, #8
 800ac5e:	3308      	addeq	r3, #8
 800ac60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ac64:	bf04      	itt	eq
 800ac66:	0100      	lsleq	r0, r0, #4
 800ac68:	3304      	addeq	r3, #4
 800ac6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ac6e:	bf04      	itt	eq
 800ac70:	0080      	lsleq	r0, r0, #2
 800ac72:	3302      	addeq	r3, #2
 800ac74:	2800      	cmp	r0, #0
 800ac76:	db05      	blt.n	800ac84 <__hi0bits+0x38>
 800ac78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ac7c:	f103 0301 	add.w	r3, r3, #1
 800ac80:	bf08      	it	eq
 800ac82:	2320      	moveq	r3, #32
 800ac84:	4618      	mov	r0, r3
 800ac86:	4770      	bx	lr
 800ac88:	2300      	movs	r3, #0
 800ac8a:	e7e4      	b.n	800ac56 <__hi0bits+0xa>

0800ac8c <__lo0bits>:
 800ac8c:	6803      	ldr	r3, [r0, #0]
 800ac8e:	f013 0207 	ands.w	r2, r3, #7
 800ac92:	4601      	mov	r1, r0
 800ac94:	d00b      	beq.n	800acae <__lo0bits+0x22>
 800ac96:	07da      	lsls	r2, r3, #31
 800ac98:	d424      	bmi.n	800ace4 <__lo0bits+0x58>
 800ac9a:	0798      	lsls	r0, r3, #30
 800ac9c:	bf49      	itett	mi
 800ac9e:	085b      	lsrmi	r3, r3, #1
 800aca0:	089b      	lsrpl	r3, r3, #2
 800aca2:	2001      	movmi	r0, #1
 800aca4:	600b      	strmi	r3, [r1, #0]
 800aca6:	bf5c      	itt	pl
 800aca8:	600b      	strpl	r3, [r1, #0]
 800acaa:	2002      	movpl	r0, #2
 800acac:	4770      	bx	lr
 800acae:	b298      	uxth	r0, r3
 800acb0:	b9b0      	cbnz	r0, 800ace0 <__lo0bits+0x54>
 800acb2:	0c1b      	lsrs	r3, r3, #16
 800acb4:	2010      	movs	r0, #16
 800acb6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800acba:	bf04      	itt	eq
 800acbc:	0a1b      	lsreq	r3, r3, #8
 800acbe:	3008      	addeq	r0, #8
 800acc0:	071a      	lsls	r2, r3, #28
 800acc2:	bf04      	itt	eq
 800acc4:	091b      	lsreq	r3, r3, #4
 800acc6:	3004      	addeq	r0, #4
 800acc8:	079a      	lsls	r2, r3, #30
 800acca:	bf04      	itt	eq
 800accc:	089b      	lsreq	r3, r3, #2
 800acce:	3002      	addeq	r0, #2
 800acd0:	07da      	lsls	r2, r3, #31
 800acd2:	d403      	bmi.n	800acdc <__lo0bits+0x50>
 800acd4:	085b      	lsrs	r3, r3, #1
 800acd6:	f100 0001 	add.w	r0, r0, #1
 800acda:	d005      	beq.n	800ace8 <__lo0bits+0x5c>
 800acdc:	600b      	str	r3, [r1, #0]
 800acde:	4770      	bx	lr
 800ace0:	4610      	mov	r0, r2
 800ace2:	e7e8      	b.n	800acb6 <__lo0bits+0x2a>
 800ace4:	2000      	movs	r0, #0
 800ace6:	4770      	bx	lr
 800ace8:	2020      	movs	r0, #32
 800acea:	4770      	bx	lr

0800acec <__i2b>:
 800acec:	b510      	push	{r4, lr}
 800acee:	460c      	mov	r4, r1
 800acf0:	2101      	movs	r1, #1
 800acf2:	f7ff ff33 	bl	800ab5c <_Balloc>
 800acf6:	4602      	mov	r2, r0
 800acf8:	b928      	cbnz	r0, 800ad06 <__i2b+0x1a>
 800acfa:	4b05      	ldr	r3, [pc, #20]	; (800ad10 <__i2b+0x24>)
 800acfc:	4805      	ldr	r0, [pc, #20]	; (800ad14 <__i2b+0x28>)
 800acfe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad02:	f001 f8cd 	bl	800bea0 <__assert_func>
 800ad06:	2301      	movs	r3, #1
 800ad08:	6144      	str	r4, [r0, #20]
 800ad0a:	6103      	str	r3, [r0, #16]
 800ad0c:	bd10      	pop	{r4, pc}
 800ad0e:	bf00      	nop
 800ad10:	0800cac1 	.word	0x0800cac1
 800ad14:	0800cb31 	.word	0x0800cb31

0800ad18 <__multiply>:
 800ad18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad1c:	4614      	mov	r4, r2
 800ad1e:	690a      	ldr	r2, [r1, #16]
 800ad20:	6923      	ldr	r3, [r4, #16]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	bfb8      	it	lt
 800ad26:	460b      	movlt	r3, r1
 800ad28:	460d      	mov	r5, r1
 800ad2a:	bfbc      	itt	lt
 800ad2c:	4625      	movlt	r5, r4
 800ad2e:	461c      	movlt	r4, r3
 800ad30:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ad34:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ad38:	68ab      	ldr	r3, [r5, #8]
 800ad3a:	6869      	ldr	r1, [r5, #4]
 800ad3c:	eb0a 0709 	add.w	r7, sl, r9
 800ad40:	42bb      	cmp	r3, r7
 800ad42:	b085      	sub	sp, #20
 800ad44:	bfb8      	it	lt
 800ad46:	3101      	addlt	r1, #1
 800ad48:	f7ff ff08 	bl	800ab5c <_Balloc>
 800ad4c:	b930      	cbnz	r0, 800ad5c <__multiply+0x44>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	4b42      	ldr	r3, [pc, #264]	; (800ae5c <__multiply+0x144>)
 800ad52:	4843      	ldr	r0, [pc, #268]	; (800ae60 <__multiply+0x148>)
 800ad54:	f240 115d 	movw	r1, #349	; 0x15d
 800ad58:	f001 f8a2 	bl	800bea0 <__assert_func>
 800ad5c:	f100 0614 	add.w	r6, r0, #20
 800ad60:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ad64:	4633      	mov	r3, r6
 800ad66:	2200      	movs	r2, #0
 800ad68:	4543      	cmp	r3, r8
 800ad6a:	d31e      	bcc.n	800adaa <__multiply+0x92>
 800ad6c:	f105 0c14 	add.w	ip, r5, #20
 800ad70:	f104 0314 	add.w	r3, r4, #20
 800ad74:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ad78:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ad7c:	9202      	str	r2, [sp, #8]
 800ad7e:	ebac 0205 	sub.w	r2, ip, r5
 800ad82:	3a15      	subs	r2, #21
 800ad84:	f022 0203 	bic.w	r2, r2, #3
 800ad88:	3204      	adds	r2, #4
 800ad8a:	f105 0115 	add.w	r1, r5, #21
 800ad8e:	458c      	cmp	ip, r1
 800ad90:	bf38      	it	cc
 800ad92:	2204      	movcc	r2, #4
 800ad94:	9201      	str	r2, [sp, #4]
 800ad96:	9a02      	ldr	r2, [sp, #8]
 800ad98:	9303      	str	r3, [sp, #12]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d808      	bhi.n	800adb0 <__multiply+0x98>
 800ad9e:	2f00      	cmp	r7, #0
 800ada0:	dc55      	bgt.n	800ae4e <__multiply+0x136>
 800ada2:	6107      	str	r7, [r0, #16]
 800ada4:	b005      	add	sp, #20
 800ada6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adaa:	f843 2b04 	str.w	r2, [r3], #4
 800adae:	e7db      	b.n	800ad68 <__multiply+0x50>
 800adb0:	f8b3 a000 	ldrh.w	sl, [r3]
 800adb4:	f1ba 0f00 	cmp.w	sl, #0
 800adb8:	d020      	beq.n	800adfc <__multiply+0xe4>
 800adba:	f105 0e14 	add.w	lr, r5, #20
 800adbe:	46b1      	mov	r9, r6
 800adc0:	2200      	movs	r2, #0
 800adc2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800adc6:	f8d9 b000 	ldr.w	fp, [r9]
 800adca:	b2a1      	uxth	r1, r4
 800adcc:	fa1f fb8b 	uxth.w	fp, fp
 800add0:	fb0a b101 	mla	r1, sl, r1, fp
 800add4:	4411      	add	r1, r2
 800add6:	f8d9 2000 	ldr.w	r2, [r9]
 800adda:	0c24      	lsrs	r4, r4, #16
 800addc:	0c12      	lsrs	r2, r2, #16
 800adde:	fb0a 2404 	mla	r4, sl, r4, r2
 800ade2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ade6:	b289      	uxth	r1, r1
 800ade8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800adec:	45f4      	cmp	ip, lr
 800adee:	f849 1b04 	str.w	r1, [r9], #4
 800adf2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800adf6:	d8e4      	bhi.n	800adc2 <__multiply+0xaa>
 800adf8:	9901      	ldr	r1, [sp, #4]
 800adfa:	5072      	str	r2, [r6, r1]
 800adfc:	9a03      	ldr	r2, [sp, #12]
 800adfe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae02:	3304      	adds	r3, #4
 800ae04:	f1b9 0f00 	cmp.w	r9, #0
 800ae08:	d01f      	beq.n	800ae4a <__multiply+0x132>
 800ae0a:	6834      	ldr	r4, [r6, #0]
 800ae0c:	f105 0114 	add.w	r1, r5, #20
 800ae10:	46b6      	mov	lr, r6
 800ae12:	f04f 0a00 	mov.w	sl, #0
 800ae16:	880a      	ldrh	r2, [r1, #0]
 800ae18:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ae1c:	fb09 b202 	mla	r2, r9, r2, fp
 800ae20:	4492      	add	sl, r2
 800ae22:	b2a4      	uxth	r4, r4
 800ae24:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ae28:	f84e 4b04 	str.w	r4, [lr], #4
 800ae2c:	f851 4b04 	ldr.w	r4, [r1], #4
 800ae30:	f8be 2000 	ldrh.w	r2, [lr]
 800ae34:	0c24      	lsrs	r4, r4, #16
 800ae36:	fb09 2404 	mla	r4, r9, r4, r2
 800ae3a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ae3e:	458c      	cmp	ip, r1
 800ae40:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ae44:	d8e7      	bhi.n	800ae16 <__multiply+0xfe>
 800ae46:	9a01      	ldr	r2, [sp, #4]
 800ae48:	50b4      	str	r4, [r6, r2]
 800ae4a:	3604      	adds	r6, #4
 800ae4c:	e7a3      	b.n	800ad96 <__multiply+0x7e>
 800ae4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d1a5      	bne.n	800ada2 <__multiply+0x8a>
 800ae56:	3f01      	subs	r7, #1
 800ae58:	e7a1      	b.n	800ad9e <__multiply+0x86>
 800ae5a:	bf00      	nop
 800ae5c:	0800cac1 	.word	0x0800cac1
 800ae60:	0800cb31 	.word	0x0800cb31

0800ae64 <__pow5mult>:
 800ae64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae68:	4615      	mov	r5, r2
 800ae6a:	f012 0203 	ands.w	r2, r2, #3
 800ae6e:	4606      	mov	r6, r0
 800ae70:	460f      	mov	r7, r1
 800ae72:	d007      	beq.n	800ae84 <__pow5mult+0x20>
 800ae74:	4c1a      	ldr	r4, [pc, #104]	; (800aee0 <__pow5mult+0x7c>)
 800ae76:	3a01      	subs	r2, #1
 800ae78:	2300      	movs	r3, #0
 800ae7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae7e:	f7ff fe9b 	bl	800abb8 <__multadd>
 800ae82:	4607      	mov	r7, r0
 800ae84:	10ad      	asrs	r5, r5, #2
 800ae86:	d027      	beq.n	800aed8 <__pow5mult+0x74>
 800ae88:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800ae8a:	b944      	cbnz	r4, 800ae9e <__pow5mult+0x3a>
 800ae8c:	f240 2171 	movw	r1, #625	; 0x271
 800ae90:	4630      	mov	r0, r6
 800ae92:	f7ff ff2b 	bl	800acec <__i2b>
 800ae96:	2300      	movs	r3, #0
 800ae98:	64b0      	str	r0, [r6, #72]	; 0x48
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	6003      	str	r3, [r0, #0]
 800ae9e:	f04f 0900 	mov.w	r9, #0
 800aea2:	07eb      	lsls	r3, r5, #31
 800aea4:	d50a      	bpl.n	800aebc <__pow5mult+0x58>
 800aea6:	4639      	mov	r1, r7
 800aea8:	4622      	mov	r2, r4
 800aeaa:	4630      	mov	r0, r6
 800aeac:	f7ff ff34 	bl	800ad18 <__multiply>
 800aeb0:	4639      	mov	r1, r7
 800aeb2:	4680      	mov	r8, r0
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	f7ff fe76 	bl	800aba6 <_Bfree>
 800aeba:	4647      	mov	r7, r8
 800aebc:	106d      	asrs	r5, r5, #1
 800aebe:	d00b      	beq.n	800aed8 <__pow5mult+0x74>
 800aec0:	6820      	ldr	r0, [r4, #0]
 800aec2:	b938      	cbnz	r0, 800aed4 <__pow5mult+0x70>
 800aec4:	4622      	mov	r2, r4
 800aec6:	4621      	mov	r1, r4
 800aec8:	4630      	mov	r0, r6
 800aeca:	f7ff ff25 	bl	800ad18 <__multiply>
 800aece:	6020      	str	r0, [r4, #0]
 800aed0:	f8c0 9000 	str.w	r9, [r0]
 800aed4:	4604      	mov	r4, r0
 800aed6:	e7e4      	b.n	800aea2 <__pow5mult+0x3e>
 800aed8:	4638      	mov	r0, r7
 800aeda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aede:	bf00      	nop
 800aee0:	0800cc88 	.word	0x0800cc88

0800aee4 <__lshift>:
 800aee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee8:	460c      	mov	r4, r1
 800aeea:	6849      	ldr	r1, [r1, #4]
 800aeec:	6923      	ldr	r3, [r4, #16]
 800aeee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aef2:	68a3      	ldr	r3, [r4, #8]
 800aef4:	4607      	mov	r7, r0
 800aef6:	4691      	mov	r9, r2
 800aef8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aefc:	f108 0601 	add.w	r6, r8, #1
 800af00:	42b3      	cmp	r3, r6
 800af02:	db0b      	blt.n	800af1c <__lshift+0x38>
 800af04:	4638      	mov	r0, r7
 800af06:	f7ff fe29 	bl	800ab5c <_Balloc>
 800af0a:	4605      	mov	r5, r0
 800af0c:	b948      	cbnz	r0, 800af22 <__lshift+0x3e>
 800af0e:	4602      	mov	r2, r0
 800af10:	4b28      	ldr	r3, [pc, #160]	; (800afb4 <__lshift+0xd0>)
 800af12:	4829      	ldr	r0, [pc, #164]	; (800afb8 <__lshift+0xd4>)
 800af14:	f240 11d9 	movw	r1, #473	; 0x1d9
 800af18:	f000 ffc2 	bl	800bea0 <__assert_func>
 800af1c:	3101      	adds	r1, #1
 800af1e:	005b      	lsls	r3, r3, #1
 800af20:	e7ee      	b.n	800af00 <__lshift+0x1c>
 800af22:	2300      	movs	r3, #0
 800af24:	f100 0114 	add.w	r1, r0, #20
 800af28:	f100 0210 	add.w	r2, r0, #16
 800af2c:	4618      	mov	r0, r3
 800af2e:	4553      	cmp	r3, sl
 800af30:	db33      	blt.n	800af9a <__lshift+0xb6>
 800af32:	6920      	ldr	r0, [r4, #16]
 800af34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af38:	f104 0314 	add.w	r3, r4, #20
 800af3c:	f019 091f 	ands.w	r9, r9, #31
 800af40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af48:	d02b      	beq.n	800afa2 <__lshift+0xbe>
 800af4a:	f1c9 0e20 	rsb	lr, r9, #32
 800af4e:	468a      	mov	sl, r1
 800af50:	2200      	movs	r2, #0
 800af52:	6818      	ldr	r0, [r3, #0]
 800af54:	fa00 f009 	lsl.w	r0, r0, r9
 800af58:	4302      	orrs	r2, r0
 800af5a:	f84a 2b04 	str.w	r2, [sl], #4
 800af5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af62:	459c      	cmp	ip, r3
 800af64:	fa22 f20e 	lsr.w	r2, r2, lr
 800af68:	d8f3      	bhi.n	800af52 <__lshift+0x6e>
 800af6a:	ebac 0304 	sub.w	r3, ip, r4
 800af6e:	3b15      	subs	r3, #21
 800af70:	f023 0303 	bic.w	r3, r3, #3
 800af74:	3304      	adds	r3, #4
 800af76:	f104 0015 	add.w	r0, r4, #21
 800af7a:	4584      	cmp	ip, r0
 800af7c:	bf38      	it	cc
 800af7e:	2304      	movcc	r3, #4
 800af80:	50ca      	str	r2, [r1, r3]
 800af82:	b10a      	cbz	r2, 800af88 <__lshift+0xa4>
 800af84:	f108 0602 	add.w	r6, r8, #2
 800af88:	3e01      	subs	r6, #1
 800af8a:	4638      	mov	r0, r7
 800af8c:	612e      	str	r6, [r5, #16]
 800af8e:	4621      	mov	r1, r4
 800af90:	f7ff fe09 	bl	800aba6 <_Bfree>
 800af94:	4628      	mov	r0, r5
 800af96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800af9e:	3301      	adds	r3, #1
 800afa0:	e7c5      	b.n	800af2e <__lshift+0x4a>
 800afa2:	3904      	subs	r1, #4
 800afa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800afa8:	f841 2f04 	str.w	r2, [r1, #4]!
 800afac:	459c      	cmp	ip, r3
 800afae:	d8f9      	bhi.n	800afa4 <__lshift+0xc0>
 800afb0:	e7ea      	b.n	800af88 <__lshift+0xa4>
 800afb2:	bf00      	nop
 800afb4:	0800cac1 	.word	0x0800cac1
 800afb8:	0800cb31 	.word	0x0800cb31

0800afbc <__mcmp>:
 800afbc:	b530      	push	{r4, r5, lr}
 800afbe:	6902      	ldr	r2, [r0, #16]
 800afc0:	690c      	ldr	r4, [r1, #16]
 800afc2:	1b12      	subs	r2, r2, r4
 800afc4:	d10e      	bne.n	800afe4 <__mcmp+0x28>
 800afc6:	f100 0314 	add.w	r3, r0, #20
 800afca:	3114      	adds	r1, #20
 800afcc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800afd0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800afd4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800afd8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800afdc:	42a5      	cmp	r5, r4
 800afde:	d003      	beq.n	800afe8 <__mcmp+0x2c>
 800afe0:	d305      	bcc.n	800afee <__mcmp+0x32>
 800afe2:	2201      	movs	r2, #1
 800afe4:	4610      	mov	r0, r2
 800afe6:	bd30      	pop	{r4, r5, pc}
 800afe8:	4283      	cmp	r3, r0
 800afea:	d3f3      	bcc.n	800afd4 <__mcmp+0x18>
 800afec:	e7fa      	b.n	800afe4 <__mcmp+0x28>
 800afee:	f04f 32ff 	mov.w	r2, #4294967295
 800aff2:	e7f7      	b.n	800afe4 <__mcmp+0x28>

0800aff4 <__mdiff>:
 800aff4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff8:	460c      	mov	r4, r1
 800affa:	4606      	mov	r6, r0
 800affc:	4611      	mov	r1, r2
 800affe:	4620      	mov	r0, r4
 800b000:	4617      	mov	r7, r2
 800b002:	f7ff ffdb 	bl	800afbc <__mcmp>
 800b006:	1e05      	subs	r5, r0, #0
 800b008:	d110      	bne.n	800b02c <__mdiff+0x38>
 800b00a:	4629      	mov	r1, r5
 800b00c:	4630      	mov	r0, r6
 800b00e:	f7ff fda5 	bl	800ab5c <_Balloc>
 800b012:	b930      	cbnz	r0, 800b022 <__mdiff+0x2e>
 800b014:	4b39      	ldr	r3, [pc, #228]	; (800b0fc <__mdiff+0x108>)
 800b016:	4602      	mov	r2, r0
 800b018:	f240 2132 	movw	r1, #562	; 0x232
 800b01c:	4838      	ldr	r0, [pc, #224]	; (800b100 <__mdiff+0x10c>)
 800b01e:	f000 ff3f 	bl	800bea0 <__assert_func>
 800b022:	2301      	movs	r3, #1
 800b024:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b02c:	bfa4      	itt	ge
 800b02e:	463b      	movge	r3, r7
 800b030:	4627      	movge	r7, r4
 800b032:	4630      	mov	r0, r6
 800b034:	6879      	ldr	r1, [r7, #4]
 800b036:	bfa6      	itte	ge
 800b038:	461c      	movge	r4, r3
 800b03a:	2500      	movge	r5, #0
 800b03c:	2501      	movlt	r5, #1
 800b03e:	f7ff fd8d 	bl	800ab5c <_Balloc>
 800b042:	b920      	cbnz	r0, 800b04e <__mdiff+0x5a>
 800b044:	4b2d      	ldr	r3, [pc, #180]	; (800b0fc <__mdiff+0x108>)
 800b046:	4602      	mov	r2, r0
 800b048:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b04c:	e7e6      	b.n	800b01c <__mdiff+0x28>
 800b04e:	693e      	ldr	r6, [r7, #16]
 800b050:	60c5      	str	r5, [r0, #12]
 800b052:	6925      	ldr	r5, [r4, #16]
 800b054:	f107 0114 	add.w	r1, r7, #20
 800b058:	f104 0914 	add.w	r9, r4, #20
 800b05c:	f100 0e14 	add.w	lr, r0, #20
 800b060:	f107 0210 	add.w	r2, r7, #16
 800b064:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b068:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b06c:	46f2      	mov	sl, lr
 800b06e:	2700      	movs	r7, #0
 800b070:	f859 3b04 	ldr.w	r3, [r9], #4
 800b074:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b078:	fa1f f883 	uxth.w	r8, r3
 800b07c:	fa17 f78b 	uxtah	r7, r7, fp
 800b080:	0c1b      	lsrs	r3, r3, #16
 800b082:	eba7 0808 	sub.w	r8, r7, r8
 800b086:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b08a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b08e:	fa1f f888 	uxth.w	r8, r8
 800b092:	141f      	asrs	r7, r3, #16
 800b094:	454d      	cmp	r5, r9
 800b096:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b09a:	f84a 3b04 	str.w	r3, [sl], #4
 800b09e:	d8e7      	bhi.n	800b070 <__mdiff+0x7c>
 800b0a0:	1b2b      	subs	r3, r5, r4
 800b0a2:	3b15      	subs	r3, #21
 800b0a4:	f023 0303 	bic.w	r3, r3, #3
 800b0a8:	3304      	adds	r3, #4
 800b0aa:	3415      	adds	r4, #21
 800b0ac:	42a5      	cmp	r5, r4
 800b0ae:	bf38      	it	cc
 800b0b0:	2304      	movcc	r3, #4
 800b0b2:	4419      	add	r1, r3
 800b0b4:	4473      	add	r3, lr
 800b0b6:	469e      	mov	lr, r3
 800b0b8:	460d      	mov	r5, r1
 800b0ba:	4565      	cmp	r5, ip
 800b0bc:	d30e      	bcc.n	800b0dc <__mdiff+0xe8>
 800b0be:	f10c 0203 	add.w	r2, ip, #3
 800b0c2:	1a52      	subs	r2, r2, r1
 800b0c4:	f022 0203 	bic.w	r2, r2, #3
 800b0c8:	3903      	subs	r1, #3
 800b0ca:	458c      	cmp	ip, r1
 800b0cc:	bf38      	it	cc
 800b0ce:	2200      	movcc	r2, #0
 800b0d0:	441a      	add	r2, r3
 800b0d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b0d6:	b17b      	cbz	r3, 800b0f8 <__mdiff+0x104>
 800b0d8:	6106      	str	r6, [r0, #16]
 800b0da:	e7a5      	b.n	800b028 <__mdiff+0x34>
 800b0dc:	f855 8b04 	ldr.w	r8, [r5], #4
 800b0e0:	fa17 f488 	uxtah	r4, r7, r8
 800b0e4:	1422      	asrs	r2, r4, #16
 800b0e6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b0ea:	b2a4      	uxth	r4, r4
 800b0ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b0f0:	f84e 4b04 	str.w	r4, [lr], #4
 800b0f4:	1417      	asrs	r7, r2, #16
 800b0f6:	e7e0      	b.n	800b0ba <__mdiff+0xc6>
 800b0f8:	3e01      	subs	r6, #1
 800b0fa:	e7ea      	b.n	800b0d2 <__mdiff+0xde>
 800b0fc:	0800cac1 	.word	0x0800cac1
 800b100:	0800cb31 	.word	0x0800cb31

0800b104 <__d2b>:
 800b104:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b108:	4689      	mov	r9, r1
 800b10a:	2101      	movs	r1, #1
 800b10c:	ec57 6b10 	vmov	r6, r7, d0
 800b110:	4690      	mov	r8, r2
 800b112:	f7ff fd23 	bl	800ab5c <_Balloc>
 800b116:	4604      	mov	r4, r0
 800b118:	b930      	cbnz	r0, 800b128 <__d2b+0x24>
 800b11a:	4602      	mov	r2, r0
 800b11c:	4b25      	ldr	r3, [pc, #148]	; (800b1b4 <__d2b+0xb0>)
 800b11e:	4826      	ldr	r0, [pc, #152]	; (800b1b8 <__d2b+0xb4>)
 800b120:	f240 310a 	movw	r1, #778	; 0x30a
 800b124:	f000 febc 	bl	800bea0 <__assert_func>
 800b128:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b12c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b130:	bb35      	cbnz	r5, 800b180 <__d2b+0x7c>
 800b132:	2e00      	cmp	r6, #0
 800b134:	9301      	str	r3, [sp, #4]
 800b136:	d028      	beq.n	800b18a <__d2b+0x86>
 800b138:	4668      	mov	r0, sp
 800b13a:	9600      	str	r6, [sp, #0]
 800b13c:	f7ff fda6 	bl	800ac8c <__lo0bits>
 800b140:	9900      	ldr	r1, [sp, #0]
 800b142:	b300      	cbz	r0, 800b186 <__d2b+0x82>
 800b144:	9a01      	ldr	r2, [sp, #4]
 800b146:	f1c0 0320 	rsb	r3, r0, #32
 800b14a:	fa02 f303 	lsl.w	r3, r2, r3
 800b14e:	430b      	orrs	r3, r1
 800b150:	40c2      	lsrs	r2, r0
 800b152:	6163      	str	r3, [r4, #20]
 800b154:	9201      	str	r2, [sp, #4]
 800b156:	9b01      	ldr	r3, [sp, #4]
 800b158:	61a3      	str	r3, [r4, #24]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	bf14      	ite	ne
 800b15e:	2202      	movne	r2, #2
 800b160:	2201      	moveq	r2, #1
 800b162:	6122      	str	r2, [r4, #16]
 800b164:	b1d5      	cbz	r5, 800b19c <__d2b+0x98>
 800b166:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b16a:	4405      	add	r5, r0
 800b16c:	f8c9 5000 	str.w	r5, [r9]
 800b170:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b174:	f8c8 0000 	str.w	r0, [r8]
 800b178:	4620      	mov	r0, r4
 800b17a:	b003      	add	sp, #12
 800b17c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b184:	e7d5      	b.n	800b132 <__d2b+0x2e>
 800b186:	6161      	str	r1, [r4, #20]
 800b188:	e7e5      	b.n	800b156 <__d2b+0x52>
 800b18a:	a801      	add	r0, sp, #4
 800b18c:	f7ff fd7e 	bl	800ac8c <__lo0bits>
 800b190:	9b01      	ldr	r3, [sp, #4]
 800b192:	6163      	str	r3, [r4, #20]
 800b194:	2201      	movs	r2, #1
 800b196:	6122      	str	r2, [r4, #16]
 800b198:	3020      	adds	r0, #32
 800b19a:	e7e3      	b.n	800b164 <__d2b+0x60>
 800b19c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b1a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b1a4:	f8c9 0000 	str.w	r0, [r9]
 800b1a8:	6918      	ldr	r0, [r3, #16]
 800b1aa:	f7ff fd4f 	bl	800ac4c <__hi0bits>
 800b1ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b1b2:	e7df      	b.n	800b174 <__d2b+0x70>
 800b1b4:	0800cac1 	.word	0x0800cac1
 800b1b8:	0800cb31 	.word	0x0800cb31

0800b1bc <frexp>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	2100      	movs	r1, #0
 800b1c0:	ec55 4b10 	vmov	r4, r5, d0
 800b1c4:	6001      	str	r1, [r0, #0]
 800b1c6:	4916      	ldr	r1, [pc, #88]	; (800b220 <frexp+0x64>)
 800b1c8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800b1cc:	428a      	cmp	r2, r1
 800b1ce:	4606      	mov	r6, r0
 800b1d0:	462b      	mov	r3, r5
 800b1d2:	dc22      	bgt.n	800b21a <frexp+0x5e>
 800b1d4:	ee10 1a10 	vmov	r1, s0
 800b1d8:	4311      	orrs	r1, r2
 800b1da:	d01e      	beq.n	800b21a <frexp+0x5e>
 800b1dc:	4911      	ldr	r1, [pc, #68]	; (800b224 <frexp+0x68>)
 800b1de:	4029      	ands	r1, r5
 800b1e0:	b969      	cbnz	r1, 800b1fe <frexp+0x42>
 800b1e2:	4b11      	ldr	r3, [pc, #68]	; (800b228 <frexp+0x6c>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	ee10 0a10 	vmov	r0, s0
 800b1ea:	4629      	mov	r1, r5
 800b1ec:	f7f5 fa04 	bl	80005f8 <__aeabi_dmul>
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b1f6:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	6031      	str	r1, [r6, #0]
 800b1fe:	6831      	ldr	r1, [r6, #0]
 800b200:	1512      	asrs	r2, r2, #20
 800b202:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b206:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800b20a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b20e:	440a      	add	r2, r1
 800b210:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800b214:	6032      	str	r2, [r6, #0]
 800b216:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800b21a:	ec45 4b10 	vmov	d0, r4, r5
 800b21e:	bd70      	pop	{r4, r5, r6, pc}
 800b220:	7fefffff 	.word	0x7fefffff
 800b224:	7ff00000 	.word	0x7ff00000
 800b228:	43500000 	.word	0x43500000

0800b22c <_sbrk_r>:
 800b22c:	b538      	push	{r3, r4, r5, lr}
 800b22e:	4d06      	ldr	r5, [pc, #24]	; (800b248 <_sbrk_r+0x1c>)
 800b230:	2300      	movs	r3, #0
 800b232:	4604      	mov	r4, r0
 800b234:	4608      	mov	r0, r1
 800b236:	602b      	str	r3, [r5, #0]
 800b238:	f7f6 fe42 	bl	8001ec0 <_sbrk>
 800b23c:	1c43      	adds	r3, r0, #1
 800b23e:	d102      	bne.n	800b246 <_sbrk_r+0x1a>
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	b103      	cbz	r3, 800b246 <_sbrk_r+0x1a>
 800b244:	6023      	str	r3, [r4, #0]
 800b246:	bd38      	pop	{r3, r4, r5, pc}
 800b248:	20000c0c 	.word	0x20000c0c

0800b24c <__sread>:
 800b24c:	b510      	push	{r4, lr}
 800b24e:	460c      	mov	r4, r1
 800b250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b254:	f001 f906 	bl	800c464 <_read_r>
 800b258:	2800      	cmp	r0, #0
 800b25a:	bfab      	itete	ge
 800b25c:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800b25e:	89a3      	ldrhlt	r3, [r4, #12]
 800b260:	181b      	addge	r3, r3, r0
 800b262:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b266:	bfac      	ite	ge
 800b268:	6523      	strge	r3, [r4, #80]	; 0x50
 800b26a:	81a3      	strhlt	r3, [r4, #12]
 800b26c:	bd10      	pop	{r4, pc}

0800b26e <__swrite>:
 800b26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b272:	461f      	mov	r7, r3
 800b274:	898b      	ldrh	r3, [r1, #12]
 800b276:	05db      	lsls	r3, r3, #23
 800b278:	4605      	mov	r5, r0
 800b27a:	460c      	mov	r4, r1
 800b27c:	4616      	mov	r6, r2
 800b27e:	d505      	bpl.n	800b28c <__swrite+0x1e>
 800b280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b284:	2302      	movs	r3, #2
 800b286:	2200      	movs	r2, #0
 800b288:	f001 f8ae 	bl	800c3e8 <_lseek_r>
 800b28c:	89a3      	ldrh	r3, [r4, #12]
 800b28e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b292:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b296:	81a3      	strh	r3, [r4, #12]
 800b298:	4632      	mov	r2, r6
 800b29a:	463b      	mov	r3, r7
 800b29c:	4628      	mov	r0, r5
 800b29e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a2:	f000 bdab 	b.w	800bdfc <_write_r>

0800b2a6 <__sseek>:
 800b2a6:	b510      	push	{r4, lr}
 800b2a8:	460c      	mov	r4, r1
 800b2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ae:	f001 f89b 	bl	800c3e8 <_lseek_r>
 800b2b2:	1c43      	adds	r3, r0, #1
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	bf15      	itete	ne
 800b2b8:	6520      	strne	r0, [r4, #80]	; 0x50
 800b2ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2c2:	81a3      	strheq	r3, [r4, #12]
 800b2c4:	bf18      	it	ne
 800b2c6:	81a3      	strhne	r3, [r4, #12]
 800b2c8:	bd10      	pop	{r4, pc}

0800b2ca <__sclose>:
 800b2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ce:	f000 be33 	b.w	800bf38 <_close_r>

0800b2d2 <strncpy>:
 800b2d2:	b510      	push	{r4, lr}
 800b2d4:	3901      	subs	r1, #1
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	b132      	cbz	r2, 800b2e8 <strncpy+0x16>
 800b2da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b2de:	f803 4b01 	strb.w	r4, [r3], #1
 800b2e2:	3a01      	subs	r2, #1
 800b2e4:	2c00      	cmp	r4, #0
 800b2e6:	d1f7      	bne.n	800b2d8 <strncpy+0x6>
 800b2e8:	441a      	add	r2, r3
 800b2ea:	2100      	movs	r1, #0
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d100      	bne.n	800b2f2 <strncpy+0x20>
 800b2f0:	bd10      	pop	{r4, pc}
 800b2f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b2f6:	e7f9      	b.n	800b2ec <strncpy+0x1a>

0800b2f8 <__ssprint_r>:
 800b2f8:	6893      	ldr	r3, [r2, #8]
 800b2fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fe:	4680      	mov	r8, r0
 800b300:	460c      	mov	r4, r1
 800b302:	4617      	mov	r7, r2
 800b304:	2b00      	cmp	r3, #0
 800b306:	d061      	beq.n	800b3cc <__ssprint_r+0xd4>
 800b308:	2300      	movs	r3, #0
 800b30a:	f8d2 a000 	ldr.w	sl, [r2]
 800b30e:	9301      	str	r3, [sp, #4]
 800b310:	469b      	mov	fp, r3
 800b312:	f1bb 0f00 	cmp.w	fp, #0
 800b316:	d02b      	beq.n	800b370 <__ssprint_r+0x78>
 800b318:	68a6      	ldr	r6, [r4, #8]
 800b31a:	45b3      	cmp	fp, r6
 800b31c:	d342      	bcc.n	800b3a4 <__ssprint_r+0xac>
 800b31e:	89a2      	ldrh	r2, [r4, #12]
 800b320:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b324:	d03e      	beq.n	800b3a4 <__ssprint_r+0xac>
 800b326:	6825      	ldr	r5, [r4, #0]
 800b328:	6921      	ldr	r1, [r4, #16]
 800b32a:	eba5 0901 	sub.w	r9, r5, r1
 800b32e:	6965      	ldr	r5, [r4, #20]
 800b330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b338:	f109 0001 	add.w	r0, r9, #1
 800b33c:	106d      	asrs	r5, r5, #1
 800b33e:	4458      	add	r0, fp
 800b340:	4285      	cmp	r5, r0
 800b342:	bf38      	it	cc
 800b344:	4605      	movcc	r5, r0
 800b346:	0553      	lsls	r3, r2, #21
 800b348:	d545      	bpl.n	800b3d6 <__ssprint_r+0xde>
 800b34a:	4629      	mov	r1, r5
 800b34c:	4640      	mov	r0, r8
 800b34e:	f7ff f9a9 	bl	800a6a4 <_malloc_r>
 800b352:	4606      	mov	r6, r0
 800b354:	b9a0      	cbnz	r0, 800b380 <__ssprint_r+0x88>
 800b356:	230c      	movs	r3, #12
 800b358:	f8c8 3000 	str.w	r3, [r8]
 800b35c:	89a3      	ldrh	r3, [r4, #12]
 800b35e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b362:	81a3      	strh	r3, [r4, #12]
 800b364:	2300      	movs	r3, #0
 800b366:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800b36a:	f04f 30ff 	mov.w	r0, #4294967295
 800b36e:	e02f      	b.n	800b3d0 <__ssprint_r+0xd8>
 800b370:	f8da 3000 	ldr.w	r3, [sl]
 800b374:	f8da b004 	ldr.w	fp, [sl, #4]
 800b378:	9301      	str	r3, [sp, #4]
 800b37a:	f10a 0a08 	add.w	sl, sl, #8
 800b37e:	e7c8      	b.n	800b312 <__ssprint_r+0x1a>
 800b380:	464a      	mov	r2, r9
 800b382:	6921      	ldr	r1, [r4, #16]
 800b384:	f7ff fbd0 	bl	800ab28 <memcpy>
 800b388:	89a2      	ldrh	r2, [r4, #12]
 800b38a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800b38e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b392:	81a2      	strh	r2, [r4, #12]
 800b394:	6126      	str	r6, [r4, #16]
 800b396:	6165      	str	r5, [r4, #20]
 800b398:	444e      	add	r6, r9
 800b39a:	eba5 0509 	sub.w	r5, r5, r9
 800b39e:	6026      	str	r6, [r4, #0]
 800b3a0:	60a5      	str	r5, [r4, #8]
 800b3a2:	465e      	mov	r6, fp
 800b3a4:	455e      	cmp	r6, fp
 800b3a6:	bf28      	it	cs
 800b3a8:	465e      	movcs	r6, fp
 800b3aa:	4632      	mov	r2, r6
 800b3ac:	9901      	ldr	r1, [sp, #4]
 800b3ae:	6820      	ldr	r0, [r4, #0]
 800b3b0:	f001 f83e 	bl	800c430 <memmove>
 800b3b4:	68a2      	ldr	r2, [r4, #8]
 800b3b6:	1b92      	subs	r2, r2, r6
 800b3b8:	60a2      	str	r2, [r4, #8]
 800b3ba:	6822      	ldr	r2, [r4, #0]
 800b3bc:	4432      	add	r2, r6
 800b3be:	6022      	str	r2, [r4, #0]
 800b3c0:	68ba      	ldr	r2, [r7, #8]
 800b3c2:	eba2 030b 	sub.w	r3, r2, fp
 800b3c6:	60bb      	str	r3, [r7, #8]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d1d1      	bne.n	800b370 <__ssprint_r+0x78>
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	b003      	add	sp, #12
 800b3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d6:	462a      	mov	r2, r5
 800b3d8:	4640      	mov	r0, r8
 800b3da:	f001 f855 	bl	800c488 <_realloc_r>
 800b3de:	4606      	mov	r6, r0
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	d1d7      	bne.n	800b394 <__ssprint_r+0x9c>
 800b3e4:	6921      	ldr	r1, [r4, #16]
 800b3e6:	4640      	mov	r0, r8
 800b3e8:	f7ff f808 	bl	800a3fc <_free_r>
 800b3ec:	e7b3      	b.n	800b356 <__ssprint_r+0x5e>

0800b3ee <sysconf>:
 800b3ee:	2808      	cmp	r0, #8
 800b3f0:	b508      	push	{r3, lr}
 800b3f2:	d006      	beq.n	800b402 <sysconf+0x14>
 800b3f4:	f7fb faf4 	bl	80069e0 <__errno>
 800b3f8:	2316      	movs	r3, #22
 800b3fa:	6003      	str	r3, [r0, #0]
 800b3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b400:	bd08      	pop	{r3, pc}
 800b402:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b406:	e7fb      	b.n	800b400 <sysconf+0x12>

0800b408 <__sprint_r>:
 800b408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b40c:	6893      	ldr	r3, [r2, #8]
 800b40e:	4680      	mov	r8, r0
 800b410:	460f      	mov	r7, r1
 800b412:	4614      	mov	r4, r2
 800b414:	b91b      	cbnz	r3, 800b41e <__sprint_r+0x16>
 800b416:	6053      	str	r3, [r2, #4]
 800b418:	4618      	mov	r0, r3
 800b41a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b41e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b420:	049d      	lsls	r5, r3, #18
 800b422:	d520      	bpl.n	800b466 <__sprint_r+0x5e>
 800b424:	6815      	ldr	r5, [r2, #0]
 800b426:	3508      	adds	r5, #8
 800b428:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800b42c:	f04f 0900 	mov.w	r9, #0
 800b430:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800b434:	45ca      	cmp	sl, r9
 800b436:	dc0b      	bgt.n	800b450 <__sprint_r+0x48>
 800b438:	68a3      	ldr	r3, [r4, #8]
 800b43a:	f026 0003 	bic.w	r0, r6, #3
 800b43e:	1a18      	subs	r0, r3, r0
 800b440:	60a0      	str	r0, [r4, #8]
 800b442:	3508      	adds	r5, #8
 800b444:	2800      	cmp	r0, #0
 800b446:	d1ef      	bne.n	800b428 <__sprint_r+0x20>
 800b448:	2300      	movs	r3, #0
 800b44a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800b44e:	e7e4      	b.n	800b41a <__sprint_r+0x12>
 800b450:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800b454:	463a      	mov	r2, r7
 800b456:	4640      	mov	r0, r8
 800b458:	f000 fe29 	bl	800c0ae <_fputwc_r>
 800b45c:	1c43      	adds	r3, r0, #1
 800b45e:	d0f3      	beq.n	800b448 <__sprint_r+0x40>
 800b460:	f109 0901 	add.w	r9, r9, #1
 800b464:	e7e6      	b.n	800b434 <__sprint_r+0x2c>
 800b466:	f000 fe5f 	bl	800c128 <__sfvwrite_r>
 800b46a:	e7ed      	b.n	800b448 <__sprint_r+0x40>

0800b46c <_vfiprintf_r>:
 800b46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b470:	ed2d 8b02 	vpush	{d8}
 800b474:	b0b9      	sub	sp, #228	; 0xe4
 800b476:	460f      	mov	r7, r1
 800b478:	9201      	str	r2, [sp, #4]
 800b47a:	461d      	mov	r5, r3
 800b47c:	461c      	mov	r4, r3
 800b47e:	4681      	mov	r9, r0
 800b480:	b118      	cbz	r0, 800b48a <_vfiprintf_r+0x1e>
 800b482:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b484:	b90b      	cbnz	r3, 800b48a <_vfiprintf_r+0x1e>
 800b486:	f7fe ff29 	bl	800a2dc <__sinit>
 800b48a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b48c:	07d8      	lsls	r0, r3, #31
 800b48e:	d405      	bmi.n	800b49c <_vfiprintf_r+0x30>
 800b490:	89bb      	ldrh	r3, [r7, #12]
 800b492:	0599      	lsls	r1, r3, #22
 800b494:	d402      	bmi.n	800b49c <_vfiprintf_r+0x30>
 800b496:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b498:	f7ff f896 	bl	800a5c8 <__retarget_lock_acquire_recursive>
 800b49c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b4a0:	049a      	lsls	r2, r3, #18
 800b4a2:	d406      	bmi.n	800b4b2 <_vfiprintf_r+0x46>
 800b4a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b4a8:	81bb      	strh	r3, [r7, #12]
 800b4aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b4b0:	667b      	str	r3, [r7, #100]	; 0x64
 800b4b2:	89bb      	ldrh	r3, [r7, #12]
 800b4b4:	071e      	lsls	r6, r3, #28
 800b4b6:	d501      	bpl.n	800b4bc <_vfiprintf_r+0x50>
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	b9bb      	cbnz	r3, 800b4ec <_vfiprintf_r+0x80>
 800b4bc:	4639      	mov	r1, r7
 800b4be:	4648      	mov	r0, r9
 800b4c0:	f7fd ff48 	bl	8009354 <__swsetup_r>
 800b4c4:	b190      	cbz	r0, 800b4ec <_vfiprintf_r+0x80>
 800b4c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4c8:	07d8      	lsls	r0, r3, #31
 800b4ca:	d508      	bpl.n	800b4de <_vfiprintf_r+0x72>
 800b4cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d0:	9302      	str	r3, [sp, #8]
 800b4d2:	9802      	ldr	r0, [sp, #8]
 800b4d4:	b039      	add	sp, #228	; 0xe4
 800b4d6:	ecbd 8b02 	vpop	{d8}
 800b4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4de:	89bb      	ldrh	r3, [r7, #12]
 800b4e0:	0599      	lsls	r1, r3, #22
 800b4e2:	d4f3      	bmi.n	800b4cc <_vfiprintf_r+0x60>
 800b4e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b4e6:	f7ff f870 	bl	800a5ca <__retarget_lock_release_recursive>
 800b4ea:	e7ef      	b.n	800b4cc <_vfiprintf_r+0x60>
 800b4ec:	89bb      	ldrh	r3, [r7, #12]
 800b4ee:	f003 021a 	and.w	r2, r3, #26
 800b4f2:	2a0a      	cmp	r2, #10
 800b4f4:	d113      	bne.n	800b51e <_vfiprintf_r+0xb2>
 800b4f6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b4fa:	2a00      	cmp	r2, #0
 800b4fc:	db0f      	blt.n	800b51e <_vfiprintf_r+0xb2>
 800b4fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b500:	07d2      	lsls	r2, r2, #31
 800b502:	d404      	bmi.n	800b50e <_vfiprintf_r+0xa2>
 800b504:	059e      	lsls	r6, r3, #22
 800b506:	d402      	bmi.n	800b50e <_vfiprintf_r+0xa2>
 800b508:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b50a:	f7ff f85e 	bl	800a5ca <__retarget_lock_release_recursive>
 800b50e:	9a01      	ldr	r2, [sp, #4]
 800b510:	462b      	mov	r3, r5
 800b512:	4639      	mov	r1, r7
 800b514:	4648      	mov	r0, r9
 800b516:	f000 fc31 	bl	800bd7c <__sbprintf>
 800b51a:	9002      	str	r0, [sp, #8]
 800b51c:	e7d9      	b.n	800b4d2 <_vfiprintf_r+0x66>
 800b51e:	2300      	movs	r3, #0
 800b520:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800b524:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800b528:	ae0f      	add	r6, sp, #60	; 0x3c
 800b52a:	ee08 3a10 	vmov	s16, r3
 800b52e:	960c      	str	r6, [sp, #48]	; 0x30
 800b530:	9307      	str	r3, [sp, #28]
 800b532:	9302      	str	r3, [sp, #8]
 800b534:	9b01      	ldr	r3, [sp, #4]
 800b536:	461d      	mov	r5, r3
 800b538:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b53c:	b10a      	cbz	r2, 800b542 <_vfiprintf_r+0xd6>
 800b53e:	2a25      	cmp	r2, #37	; 0x25
 800b540:	d1f9      	bne.n	800b536 <_vfiprintf_r+0xca>
 800b542:	9b01      	ldr	r3, [sp, #4]
 800b544:	ebb5 0803 	subs.w	r8, r5, r3
 800b548:	d00d      	beq.n	800b566 <_vfiprintf_r+0xfa>
 800b54a:	e9c6 3800 	strd	r3, r8, [r6]
 800b54e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b550:	4443      	add	r3, r8
 800b552:	930e      	str	r3, [sp, #56]	; 0x38
 800b554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b556:	3301      	adds	r3, #1
 800b558:	2b07      	cmp	r3, #7
 800b55a:	930d      	str	r3, [sp, #52]	; 0x34
 800b55c:	dc75      	bgt.n	800b64a <_vfiprintf_r+0x1de>
 800b55e:	3608      	adds	r6, #8
 800b560:	9b02      	ldr	r3, [sp, #8]
 800b562:	4443      	add	r3, r8
 800b564:	9302      	str	r3, [sp, #8]
 800b566:	782b      	ldrb	r3, [r5, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f000 83c8 	beq.w	800bcfe <_vfiprintf_r+0x892>
 800b56e:	2300      	movs	r3, #0
 800b570:	f04f 31ff 	mov.w	r1, #4294967295
 800b574:	1c6a      	adds	r2, r5, #1
 800b576:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800b57a:	9100      	str	r1, [sp, #0]
 800b57c:	9303      	str	r3, [sp, #12]
 800b57e:	469a      	mov	sl, r3
 800b580:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b584:	9201      	str	r2, [sp, #4]
 800b586:	f1a3 0220 	sub.w	r2, r3, #32
 800b58a:	2a5a      	cmp	r2, #90	; 0x5a
 800b58c:	f200 8310 	bhi.w	800bbb0 <_vfiprintf_r+0x744>
 800b590:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b594:	030e0099 	.word	0x030e0099
 800b598:	00a1030e 	.word	0x00a1030e
 800b59c:	030e030e 	.word	0x030e030e
 800b5a0:	0080030e 	.word	0x0080030e
 800b5a4:	030e030e 	.word	0x030e030e
 800b5a8:	00ae00a4 	.word	0x00ae00a4
 800b5ac:	00ab030e 	.word	0x00ab030e
 800b5b0:	030e00b0 	.word	0x030e00b0
 800b5b4:	00ce00cb 	.word	0x00ce00cb
 800b5b8:	00ce00ce 	.word	0x00ce00ce
 800b5bc:	00ce00ce 	.word	0x00ce00ce
 800b5c0:	00ce00ce 	.word	0x00ce00ce
 800b5c4:	00ce00ce 	.word	0x00ce00ce
 800b5c8:	030e030e 	.word	0x030e030e
 800b5cc:	030e030e 	.word	0x030e030e
 800b5d0:	030e030e 	.word	0x030e030e
 800b5d4:	030e030e 	.word	0x030e030e
 800b5d8:	00f8030e 	.word	0x00f8030e
 800b5dc:	030e0106 	.word	0x030e0106
 800b5e0:	030e030e 	.word	0x030e030e
 800b5e4:	030e030e 	.word	0x030e030e
 800b5e8:	030e030e 	.word	0x030e030e
 800b5ec:	030e030e 	.word	0x030e030e
 800b5f0:	014d030e 	.word	0x014d030e
 800b5f4:	030e030e 	.word	0x030e030e
 800b5f8:	0192030e 	.word	0x0192030e
 800b5fc:	0270030e 	.word	0x0270030e
 800b600:	030e030e 	.word	0x030e030e
 800b604:	030e028e 	.word	0x030e028e
 800b608:	030e030e 	.word	0x030e030e
 800b60c:	030e030e 	.word	0x030e030e
 800b610:	030e030e 	.word	0x030e030e
 800b614:	030e030e 	.word	0x030e030e
 800b618:	00f8030e 	.word	0x00f8030e
 800b61c:	030e0108 	.word	0x030e0108
 800b620:	030e030e 	.word	0x030e030e
 800b624:	010800de 	.word	0x010800de
 800b628:	030e00f2 	.word	0x030e00f2
 800b62c:	030e00eb 	.word	0x030e00eb
 800b630:	014f0130 	.word	0x014f0130
 800b634:	00f20182 	.word	0x00f20182
 800b638:	0192030e 	.word	0x0192030e
 800b63c:	02720097 	.word	0x02720097
 800b640:	030e030e 	.word	0x030e030e
 800b644:	030e0065 	.word	0x030e0065
 800b648:	0097      	.short	0x0097
 800b64a:	aa0c      	add	r2, sp, #48	; 0x30
 800b64c:	4639      	mov	r1, r7
 800b64e:	4648      	mov	r0, r9
 800b650:	f7ff feda 	bl	800b408 <__sprint_r>
 800b654:	2800      	cmp	r0, #0
 800b656:	f040 8331 	bne.w	800bcbc <_vfiprintf_r+0x850>
 800b65a:	ae0f      	add	r6, sp, #60	; 0x3c
 800b65c:	e780      	b.n	800b560 <_vfiprintf_r+0xf4>
 800b65e:	4a95      	ldr	r2, [pc, #596]	; (800b8b4 <_vfiprintf_r+0x448>)
 800b660:	9205      	str	r2, [sp, #20]
 800b662:	f01a 0f20 	tst.w	sl, #32
 800b666:	f000 8225 	beq.w	800bab4 <_vfiprintf_r+0x648>
 800b66a:	3407      	adds	r4, #7
 800b66c:	f024 0b07 	bic.w	fp, r4, #7
 800b670:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800b674:	f01a 0f01 	tst.w	sl, #1
 800b678:	d009      	beq.n	800b68e <_vfiprintf_r+0x222>
 800b67a:	ea54 0205 	orrs.w	r2, r4, r5
 800b67e:	bf1f      	itttt	ne
 800b680:	2230      	movne	r2, #48	; 0x30
 800b682:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800b686:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800b68a:	f04a 0a02 	orrne.w	sl, sl, #2
 800b68e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800b692:	e10d      	b.n	800b8b0 <_vfiprintf_r+0x444>
 800b694:	4648      	mov	r0, r9
 800b696:	f7fe ff91 	bl	800a5bc <_localeconv_r>
 800b69a:	6843      	ldr	r3, [r0, #4]
 800b69c:	4618      	mov	r0, r3
 800b69e:	ee08 3a10 	vmov	s16, r3
 800b6a2:	f7f4 fd95 	bl	80001d0 <strlen>
 800b6a6:	9007      	str	r0, [sp, #28]
 800b6a8:	4648      	mov	r0, r9
 800b6aa:	f7fe ff87 	bl	800a5bc <_localeconv_r>
 800b6ae:	6883      	ldr	r3, [r0, #8]
 800b6b0:	9306      	str	r3, [sp, #24]
 800b6b2:	9b07      	ldr	r3, [sp, #28]
 800b6b4:	b12b      	cbz	r3, 800b6c2 <_vfiprintf_r+0x256>
 800b6b6:	9b06      	ldr	r3, [sp, #24]
 800b6b8:	b11b      	cbz	r3, 800b6c2 <_vfiprintf_r+0x256>
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	b10b      	cbz	r3, 800b6c2 <_vfiprintf_r+0x256>
 800b6be:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800b6c2:	9a01      	ldr	r2, [sp, #4]
 800b6c4:	e75c      	b.n	800b580 <_vfiprintf_r+0x114>
 800b6c6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1f9      	bne.n	800b6c2 <_vfiprintf_r+0x256>
 800b6ce:	2320      	movs	r3, #32
 800b6d0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800b6d4:	e7f5      	b.n	800b6c2 <_vfiprintf_r+0x256>
 800b6d6:	f04a 0a01 	orr.w	sl, sl, #1
 800b6da:	e7f2      	b.n	800b6c2 <_vfiprintf_r+0x256>
 800b6dc:	f854 3b04 	ldr.w	r3, [r4], #4
 800b6e0:	9303      	str	r3, [sp, #12]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	daed      	bge.n	800b6c2 <_vfiprintf_r+0x256>
 800b6e6:	425b      	negs	r3, r3
 800b6e8:	9303      	str	r3, [sp, #12]
 800b6ea:	f04a 0a04 	orr.w	sl, sl, #4
 800b6ee:	e7e8      	b.n	800b6c2 <_vfiprintf_r+0x256>
 800b6f0:	232b      	movs	r3, #43	; 0x2b
 800b6f2:	e7ed      	b.n	800b6d0 <_vfiprintf_r+0x264>
 800b6f4:	9a01      	ldr	r2, [sp, #4]
 800b6f6:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b6fa:	2b2a      	cmp	r3, #42	; 0x2a
 800b6fc:	d112      	bne.n	800b724 <_vfiprintf_r+0x2b8>
 800b6fe:	f854 0b04 	ldr.w	r0, [r4], #4
 800b702:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800b706:	e9cd 3200 	strd	r3, r2, [sp]
 800b70a:	e7da      	b.n	800b6c2 <_vfiprintf_r+0x256>
 800b70c:	9b00      	ldr	r3, [sp, #0]
 800b70e:	200a      	movs	r0, #10
 800b710:	fb00 1303 	mla	r3, r0, r3, r1
 800b714:	9300      	str	r3, [sp, #0]
 800b716:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b71a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b71e:	2909      	cmp	r1, #9
 800b720:	d9f4      	bls.n	800b70c <_vfiprintf_r+0x2a0>
 800b722:	e72f      	b.n	800b584 <_vfiprintf_r+0x118>
 800b724:	2100      	movs	r1, #0
 800b726:	9100      	str	r1, [sp, #0]
 800b728:	e7f7      	b.n	800b71a <_vfiprintf_r+0x2ae>
 800b72a:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800b72e:	e7c8      	b.n	800b6c2 <_vfiprintf_r+0x256>
 800b730:	2100      	movs	r1, #0
 800b732:	9a01      	ldr	r2, [sp, #4]
 800b734:	9103      	str	r1, [sp, #12]
 800b736:	9903      	ldr	r1, [sp, #12]
 800b738:	3b30      	subs	r3, #48	; 0x30
 800b73a:	200a      	movs	r0, #10
 800b73c:	fb00 3301 	mla	r3, r0, r1, r3
 800b740:	9303      	str	r3, [sp, #12]
 800b742:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b746:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b74a:	2909      	cmp	r1, #9
 800b74c:	d9f3      	bls.n	800b736 <_vfiprintf_r+0x2ca>
 800b74e:	e719      	b.n	800b584 <_vfiprintf_r+0x118>
 800b750:	9b01      	ldr	r3, [sp, #4]
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	2b68      	cmp	r3, #104	; 0x68
 800b756:	bf01      	itttt	eq
 800b758:	9b01      	ldreq	r3, [sp, #4]
 800b75a:	3301      	addeq	r3, #1
 800b75c:	9301      	streq	r3, [sp, #4]
 800b75e:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800b762:	bf18      	it	ne
 800b764:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800b768:	e7ab      	b.n	800b6c2 <_vfiprintf_r+0x256>
 800b76a:	9b01      	ldr	r3, [sp, #4]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	2b6c      	cmp	r3, #108	; 0x6c
 800b770:	d105      	bne.n	800b77e <_vfiprintf_r+0x312>
 800b772:	9b01      	ldr	r3, [sp, #4]
 800b774:	3301      	adds	r3, #1
 800b776:	9301      	str	r3, [sp, #4]
 800b778:	f04a 0a20 	orr.w	sl, sl, #32
 800b77c:	e7a1      	b.n	800b6c2 <_vfiprintf_r+0x256>
 800b77e:	f04a 0a10 	orr.w	sl, sl, #16
 800b782:	e79e      	b.n	800b6c2 <_vfiprintf_r+0x256>
 800b784:	46a3      	mov	fp, r4
 800b786:	2100      	movs	r1, #0
 800b788:	f85b 3b04 	ldr.w	r3, [fp], #4
 800b78c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800b790:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800b794:	2301      	movs	r3, #1
 800b796:	9300      	str	r3, [sp, #0]
 800b798:	460d      	mov	r5, r1
 800b79a:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800b79e:	e0a0      	b.n	800b8e2 <_vfiprintf_r+0x476>
 800b7a0:	f04a 0a10 	orr.w	sl, sl, #16
 800b7a4:	f01a 0f20 	tst.w	sl, #32
 800b7a8:	d011      	beq.n	800b7ce <_vfiprintf_r+0x362>
 800b7aa:	3407      	adds	r4, #7
 800b7ac:	f024 0b07 	bic.w	fp, r4, #7
 800b7b0:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800b7b4:	2c00      	cmp	r4, #0
 800b7b6:	f175 0300 	sbcs.w	r3, r5, #0
 800b7ba:	da06      	bge.n	800b7ca <_vfiprintf_r+0x35e>
 800b7bc:	4264      	negs	r4, r4
 800b7be:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800b7c2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800b7c6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e03f      	b.n	800b84e <_vfiprintf_r+0x3e2>
 800b7ce:	f01a 0f10 	tst.w	sl, #16
 800b7d2:	f104 0b04 	add.w	fp, r4, #4
 800b7d6:	d002      	beq.n	800b7de <_vfiprintf_r+0x372>
 800b7d8:	6824      	ldr	r4, [r4, #0]
 800b7da:	17e5      	asrs	r5, r4, #31
 800b7dc:	e7ea      	b.n	800b7b4 <_vfiprintf_r+0x348>
 800b7de:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800b7e2:	6824      	ldr	r4, [r4, #0]
 800b7e4:	d001      	beq.n	800b7ea <_vfiprintf_r+0x37e>
 800b7e6:	b224      	sxth	r4, r4
 800b7e8:	e7f7      	b.n	800b7da <_vfiprintf_r+0x36e>
 800b7ea:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800b7ee:	bf18      	it	ne
 800b7f0:	b264      	sxtbne	r4, r4
 800b7f2:	e7f2      	b.n	800b7da <_vfiprintf_r+0x36e>
 800b7f4:	f01a 0f20 	tst.w	sl, #32
 800b7f8:	f854 3b04 	ldr.w	r3, [r4], #4
 800b7fc:	d005      	beq.n	800b80a <_vfiprintf_r+0x39e>
 800b7fe:	9a02      	ldr	r2, [sp, #8]
 800b800:	4610      	mov	r0, r2
 800b802:	17d1      	asrs	r1, r2, #31
 800b804:	e9c3 0100 	strd	r0, r1, [r3]
 800b808:	e694      	b.n	800b534 <_vfiprintf_r+0xc8>
 800b80a:	f01a 0f10 	tst.w	sl, #16
 800b80e:	d002      	beq.n	800b816 <_vfiprintf_r+0x3aa>
 800b810:	9a02      	ldr	r2, [sp, #8]
 800b812:	601a      	str	r2, [r3, #0]
 800b814:	e68e      	b.n	800b534 <_vfiprintf_r+0xc8>
 800b816:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800b81a:	d002      	beq.n	800b822 <_vfiprintf_r+0x3b6>
 800b81c:	9a02      	ldr	r2, [sp, #8]
 800b81e:	801a      	strh	r2, [r3, #0]
 800b820:	e688      	b.n	800b534 <_vfiprintf_r+0xc8>
 800b822:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800b826:	d0f3      	beq.n	800b810 <_vfiprintf_r+0x3a4>
 800b828:	9a02      	ldr	r2, [sp, #8]
 800b82a:	701a      	strb	r2, [r3, #0]
 800b82c:	e682      	b.n	800b534 <_vfiprintf_r+0xc8>
 800b82e:	f04a 0a10 	orr.w	sl, sl, #16
 800b832:	f01a 0f20 	tst.w	sl, #32
 800b836:	d01d      	beq.n	800b874 <_vfiprintf_r+0x408>
 800b838:	3407      	adds	r4, #7
 800b83a:	f024 0b07 	bic.w	fp, r4, #7
 800b83e:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800b842:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800b846:	2300      	movs	r3, #0
 800b848:	2200      	movs	r2, #0
 800b84a:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800b84e:	9a00      	ldr	r2, [sp, #0]
 800b850:	3201      	adds	r2, #1
 800b852:	f000 8261 	beq.w	800bd18 <_vfiprintf_r+0x8ac>
 800b856:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800b85a:	9204      	str	r2, [sp, #16]
 800b85c:	ea54 0205 	orrs.w	r2, r4, r5
 800b860:	f040 8260 	bne.w	800bd24 <_vfiprintf_r+0x8b8>
 800b864:	9a00      	ldr	r2, [sp, #0]
 800b866:	2a00      	cmp	r2, #0
 800b868:	f000 8197 	beq.w	800bb9a <_vfiprintf_r+0x72e>
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	f040 825c 	bne.w	800bd2a <_vfiprintf_r+0x8be>
 800b872:	e135      	b.n	800bae0 <_vfiprintf_r+0x674>
 800b874:	f01a 0f10 	tst.w	sl, #16
 800b878:	f104 0b04 	add.w	fp, r4, #4
 800b87c:	d001      	beq.n	800b882 <_vfiprintf_r+0x416>
 800b87e:	6824      	ldr	r4, [r4, #0]
 800b880:	e003      	b.n	800b88a <_vfiprintf_r+0x41e>
 800b882:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800b886:	d002      	beq.n	800b88e <_vfiprintf_r+0x422>
 800b888:	8824      	ldrh	r4, [r4, #0]
 800b88a:	2500      	movs	r5, #0
 800b88c:	e7d9      	b.n	800b842 <_vfiprintf_r+0x3d6>
 800b88e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800b892:	d0f4      	beq.n	800b87e <_vfiprintf_r+0x412>
 800b894:	7824      	ldrb	r4, [r4, #0]
 800b896:	e7f8      	b.n	800b88a <_vfiprintf_r+0x41e>
 800b898:	46a3      	mov	fp, r4
 800b89a:	f647 0330 	movw	r3, #30768	; 0x7830
 800b89e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800b8a2:	f85b 4b04 	ldr.w	r4, [fp], #4
 800b8a6:	4b03      	ldr	r3, [pc, #12]	; (800b8b4 <_vfiprintf_r+0x448>)
 800b8a8:	9305      	str	r3, [sp, #20]
 800b8aa:	2500      	movs	r5, #0
 800b8ac:	f04a 0a02 	orr.w	sl, sl, #2
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	e7c9      	b.n	800b848 <_vfiprintf_r+0x3dc>
 800b8b4:	0800ca50 	.word	0x0800ca50
 800b8b8:	9b00      	ldr	r3, [sp, #0]
 800b8ba:	46a3      	mov	fp, r4
 800b8bc:	2500      	movs	r5, #0
 800b8be:	1c5c      	adds	r4, r3, #1
 800b8c0:	f85b 8b04 	ldr.w	r8, [fp], #4
 800b8c4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800b8c8:	f000 80cf 	beq.w	800ba6a <_vfiprintf_r+0x5fe>
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	4629      	mov	r1, r5
 800b8d0:	4640      	mov	r0, r8
 800b8d2:	f7f4 fc85 	bl	80001e0 <memchr>
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	f000 8174 	beq.w	800bbc4 <_vfiprintf_r+0x758>
 800b8dc:	eba0 0308 	sub.w	r3, r0, r8
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	9b00      	ldr	r3, [sp, #0]
 800b8e4:	42ab      	cmp	r3, r5
 800b8e6:	bfb8      	it	lt
 800b8e8:	462b      	movlt	r3, r5
 800b8ea:	9304      	str	r3, [sp, #16]
 800b8ec:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800b8f0:	b113      	cbz	r3, 800b8f8 <_vfiprintf_r+0x48c>
 800b8f2:	9b04      	ldr	r3, [sp, #16]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	9304      	str	r3, [sp, #16]
 800b8f8:	f01a 0302 	ands.w	r3, sl, #2
 800b8fc:	9308      	str	r3, [sp, #32]
 800b8fe:	bf1e      	ittt	ne
 800b900:	9b04      	ldrne	r3, [sp, #16]
 800b902:	3302      	addne	r3, #2
 800b904:	9304      	strne	r3, [sp, #16]
 800b906:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800b90a:	9309      	str	r3, [sp, #36]	; 0x24
 800b90c:	d11f      	bne.n	800b94e <_vfiprintf_r+0x4e2>
 800b90e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800b912:	1a9c      	subs	r4, r3, r2
 800b914:	2c00      	cmp	r4, #0
 800b916:	dd1a      	ble.n	800b94e <_vfiprintf_r+0x4e2>
 800b918:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b91c:	48b9      	ldr	r0, [pc, #740]	; (800bc04 <_vfiprintf_r+0x798>)
 800b91e:	6030      	str	r0, [r6, #0]
 800b920:	2c10      	cmp	r4, #16
 800b922:	f103 0301 	add.w	r3, r3, #1
 800b926:	f106 0108 	add.w	r1, r6, #8
 800b92a:	f300 814d 	bgt.w	800bbc8 <_vfiprintf_r+0x75c>
 800b92e:	6074      	str	r4, [r6, #4]
 800b930:	2b07      	cmp	r3, #7
 800b932:	4414      	add	r4, r2
 800b934:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800b938:	f340 8158 	ble.w	800bbec <_vfiprintf_r+0x780>
 800b93c:	aa0c      	add	r2, sp, #48	; 0x30
 800b93e:	4639      	mov	r1, r7
 800b940:	4648      	mov	r0, r9
 800b942:	f7ff fd61 	bl	800b408 <__sprint_r>
 800b946:	2800      	cmp	r0, #0
 800b948:	f040 81b8 	bne.w	800bcbc <_vfiprintf_r+0x850>
 800b94c:	ae0f      	add	r6, sp, #60	; 0x3c
 800b94e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800b952:	b173      	cbz	r3, 800b972 <_vfiprintf_r+0x506>
 800b954:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800b958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b95a:	6032      	str	r2, [r6, #0]
 800b95c:	2201      	movs	r2, #1
 800b95e:	6072      	str	r2, [r6, #4]
 800b960:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b962:	3301      	adds	r3, #1
 800b964:	3201      	adds	r2, #1
 800b966:	2b07      	cmp	r3, #7
 800b968:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800b96c:	f300 8140 	bgt.w	800bbf0 <_vfiprintf_r+0x784>
 800b970:	3608      	adds	r6, #8
 800b972:	9b08      	ldr	r3, [sp, #32]
 800b974:	b16b      	cbz	r3, 800b992 <_vfiprintf_r+0x526>
 800b976:	aa0b      	add	r2, sp, #44	; 0x2c
 800b978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b97a:	6032      	str	r2, [r6, #0]
 800b97c:	2202      	movs	r2, #2
 800b97e:	6072      	str	r2, [r6, #4]
 800b980:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b982:	3301      	adds	r3, #1
 800b984:	3202      	adds	r2, #2
 800b986:	2b07      	cmp	r3, #7
 800b988:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800b98c:	f300 8140 	bgt.w	800bc10 <_vfiprintf_r+0x7a4>
 800b990:	3608      	adds	r6, #8
 800b992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b994:	2b80      	cmp	r3, #128	; 0x80
 800b996:	d11f      	bne.n	800b9d8 <_vfiprintf_r+0x56c>
 800b998:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800b99c:	1a9c      	subs	r4, r3, r2
 800b99e:	2c00      	cmp	r4, #0
 800b9a0:	dd1a      	ble.n	800b9d8 <_vfiprintf_r+0x56c>
 800b9a2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b9a6:	4898      	ldr	r0, [pc, #608]	; (800bc08 <_vfiprintf_r+0x79c>)
 800b9a8:	6030      	str	r0, [r6, #0]
 800b9aa:	2c10      	cmp	r4, #16
 800b9ac:	f103 0301 	add.w	r3, r3, #1
 800b9b0:	f106 0108 	add.w	r1, r6, #8
 800b9b4:	f300 8135 	bgt.w	800bc22 <_vfiprintf_r+0x7b6>
 800b9b8:	6074      	str	r4, [r6, #4]
 800b9ba:	2b07      	cmp	r3, #7
 800b9bc:	4414      	add	r4, r2
 800b9be:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800b9c2:	f340 8140 	ble.w	800bc46 <_vfiprintf_r+0x7da>
 800b9c6:	aa0c      	add	r2, sp, #48	; 0x30
 800b9c8:	4639      	mov	r1, r7
 800b9ca:	4648      	mov	r0, r9
 800b9cc:	f7ff fd1c 	bl	800b408 <__sprint_r>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	f040 8173 	bne.w	800bcbc <_vfiprintf_r+0x850>
 800b9d6:	ae0f      	add	r6, sp, #60	; 0x3c
 800b9d8:	9b00      	ldr	r3, [sp, #0]
 800b9da:	1aec      	subs	r4, r5, r3
 800b9dc:	2c00      	cmp	r4, #0
 800b9de:	dd1a      	ble.n	800ba16 <_vfiprintf_r+0x5aa>
 800b9e0:	4d89      	ldr	r5, [pc, #548]	; (800bc08 <_vfiprintf_r+0x79c>)
 800b9e2:	6035      	str	r5, [r6, #0]
 800b9e4:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800b9e8:	2c10      	cmp	r4, #16
 800b9ea:	f103 0301 	add.w	r3, r3, #1
 800b9ee:	f106 0208 	add.w	r2, r6, #8
 800b9f2:	f300 812a 	bgt.w	800bc4a <_vfiprintf_r+0x7de>
 800b9f6:	6074      	str	r4, [r6, #4]
 800b9f8:	2b07      	cmp	r3, #7
 800b9fa:	440c      	add	r4, r1
 800b9fc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800ba00:	f340 8134 	ble.w	800bc6c <_vfiprintf_r+0x800>
 800ba04:	aa0c      	add	r2, sp, #48	; 0x30
 800ba06:	4639      	mov	r1, r7
 800ba08:	4648      	mov	r0, r9
 800ba0a:	f7ff fcfd 	bl	800b408 <__sprint_r>
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	f040 8154 	bne.w	800bcbc <_vfiprintf_r+0x850>
 800ba14:	ae0f      	add	r6, sp, #60	; 0x3c
 800ba16:	9b00      	ldr	r3, [sp, #0]
 800ba18:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ba1a:	6073      	str	r3, [r6, #4]
 800ba1c:	4418      	add	r0, r3
 800ba1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba20:	f8c6 8000 	str.w	r8, [r6]
 800ba24:	3301      	adds	r3, #1
 800ba26:	2b07      	cmp	r3, #7
 800ba28:	900e      	str	r0, [sp, #56]	; 0x38
 800ba2a:	930d      	str	r3, [sp, #52]	; 0x34
 800ba2c:	f300 8120 	bgt.w	800bc70 <_vfiprintf_r+0x804>
 800ba30:	f106 0308 	add.w	r3, r6, #8
 800ba34:	f01a 0f04 	tst.w	sl, #4
 800ba38:	f040 8122 	bne.w	800bc80 <_vfiprintf_r+0x814>
 800ba3c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ba40:	9904      	ldr	r1, [sp, #16]
 800ba42:	428a      	cmp	r2, r1
 800ba44:	bfac      	ite	ge
 800ba46:	189b      	addge	r3, r3, r2
 800ba48:	185b      	addlt	r3, r3, r1
 800ba4a:	9302      	str	r3, [sp, #8]
 800ba4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba4e:	b13b      	cbz	r3, 800ba60 <_vfiprintf_r+0x5f4>
 800ba50:	aa0c      	add	r2, sp, #48	; 0x30
 800ba52:	4639      	mov	r1, r7
 800ba54:	4648      	mov	r0, r9
 800ba56:	f7ff fcd7 	bl	800b408 <__sprint_r>
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	f040 812e 	bne.w	800bcbc <_vfiprintf_r+0x850>
 800ba60:	2300      	movs	r3, #0
 800ba62:	930d      	str	r3, [sp, #52]	; 0x34
 800ba64:	465c      	mov	r4, fp
 800ba66:	ae0f      	add	r6, sp, #60	; 0x3c
 800ba68:	e564      	b.n	800b534 <_vfiprintf_r+0xc8>
 800ba6a:	4640      	mov	r0, r8
 800ba6c:	f7f4 fbb0 	bl	80001d0 <strlen>
 800ba70:	9000      	str	r0, [sp, #0]
 800ba72:	e736      	b.n	800b8e2 <_vfiprintf_r+0x476>
 800ba74:	f04a 0a10 	orr.w	sl, sl, #16
 800ba78:	f01a 0f20 	tst.w	sl, #32
 800ba7c:	d006      	beq.n	800ba8c <_vfiprintf_r+0x620>
 800ba7e:	3407      	adds	r4, #7
 800ba80:	f024 0b07 	bic.w	fp, r4, #7
 800ba84:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e6dd      	b.n	800b848 <_vfiprintf_r+0x3dc>
 800ba8c:	f01a 0f10 	tst.w	sl, #16
 800ba90:	f104 0b04 	add.w	fp, r4, #4
 800ba94:	d001      	beq.n	800ba9a <_vfiprintf_r+0x62e>
 800ba96:	6824      	ldr	r4, [r4, #0]
 800ba98:	e003      	b.n	800baa2 <_vfiprintf_r+0x636>
 800ba9a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800ba9e:	d002      	beq.n	800baa6 <_vfiprintf_r+0x63a>
 800baa0:	8824      	ldrh	r4, [r4, #0]
 800baa2:	2500      	movs	r5, #0
 800baa4:	e7f0      	b.n	800ba88 <_vfiprintf_r+0x61c>
 800baa6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800baaa:	d0f4      	beq.n	800ba96 <_vfiprintf_r+0x62a>
 800baac:	7824      	ldrb	r4, [r4, #0]
 800baae:	e7f8      	b.n	800baa2 <_vfiprintf_r+0x636>
 800bab0:	4a56      	ldr	r2, [pc, #344]	; (800bc0c <_vfiprintf_r+0x7a0>)
 800bab2:	e5d5      	b.n	800b660 <_vfiprintf_r+0x1f4>
 800bab4:	f01a 0f10 	tst.w	sl, #16
 800bab8:	f104 0b04 	add.w	fp, r4, #4
 800babc:	d001      	beq.n	800bac2 <_vfiprintf_r+0x656>
 800babe:	6824      	ldr	r4, [r4, #0]
 800bac0:	e003      	b.n	800baca <_vfiprintf_r+0x65e>
 800bac2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800bac6:	d002      	beq.n	800bace <_vfiprintf_r+0x662>
 800bac8:	8824      	ldrh	r4, [r4, #0]
 800baca:	2500      	movs	r5, #0
 800bacc:	e5d2      	b.n	800b674 <_vfiprintf_r+0x208>
 800bace:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800bad2:	d0f4      	beq.n	800babe <_vfiprintf_r+0x652>
 800bad4:	7824      	ldrb	r4, [r4, #0]
 800bad6:	e7f8      	b.n	800baca <_vfiprintf_r+0x65e>
 800bad8:	2d00      	cmp	r5, #0
 800bada:	bf08      	it	eq
 800badc:	2c0a      	cmpeq	r4, #10
 800bade:	d205      	bcs.n	800baec <_vfiprintf_r+0x680>
 800bae0:	3430      	adds	r4, #48	; 0x30
 800bae2:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800bae6:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800baea:	e13c      	b.n	800bd66 <_vfiprintf_r+0x8fa>
 800baec:	ab38      	add	r3, sp, #224	; 0xe0
 800baee:	9308      	str	r3, [sp, #32]
 800baf0:	9b04      	ldr	r3, [sp, #16]
 800baf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800baf6:	f04f 0a00 	mov.w	sl, #0
 800bafa:	9309      	str	r3, [sp, #36]	; 0x24
 800bafc:	9b08      	ldr	r3, [sp, #32]
 800bafe:	220a      	movs	r2, #10
 800bb00:	f103 38ff 	add.w	r8, r3, #4294967295
 800bb04:	4620      	mov	r0, r4
 800bb06:	2300      	movs	r3, #0
 800bb08:	4629      	mov	r1, r5
 800bb0a:	f7f5 f89d 	bl	8000c48 <__aeabi_uldivmod>
 800bb0e:	9b08      	ldr	r3, [sp, #32]
 800bb10:	3230      	adds	r2, #48	; 0x30
 800bb12:	f803 2c01 	strb.w	r2, [r3, #-1]
 800bb16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb18:	f10a 0a01 	add.w	sl, sl, #1
 800bb1c:	b1db      	cbz	r3, 800bb56 <_vfiprintf_r+0x6ea>
 800bb1e:	9b06      	ldr	r3, [sp, #24]
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	4553      	cmp	r3, sl
 800bb24:	d117      	bne.n	800bb56 <_vfiprintf_r+0x6ea>
 800bb26:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800bb2a:	d014      	beq.n	800bb56 <_vfiprintf_r+0x6ea>
 800bb2c:	2d00      	cmp	r5, #0
 800bb2e:	bf08      	it	eq
 800bb30:	2c0a      	cmpeq	r4, #10
 800bb32:	d310      	bcc.n	800bb56 <_vfiprintf_r+0x6ea>
 800bb34:	9b07      	ldr	r3, [sp, #28]
 800bb36:	eba8 0803 	sub.w	r8, r8, r3
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	ee18 1a10 	vmov	r1, s16
 800bb40:	4640      	mov	r0, r8
 800bb42:	f7ff fbc6 	bl	800b2d2 <strncpy>
 800bb46:	9b06      	ldr	r3, [sp, #24]
 800bb48:	785b      	ldrb	r3, [r3, #1]
 800bb4a:	b1a3      	cbz	r3, 800bb76 <_vfiprintf_r+0x70a>
 800bb4c:	9b06      	ldr	r3, [sp, #24]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	9306      	str	r3, [sp, #24]
 800bb52:	f04f 0a00 	mov.w	sl, #0
 800bb56:	220a      	movs	r2, #10
 800bb58:	2300      	movs	r3, #0
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	4629      	mov	r1, r5
 800bb5e:	f7f5 f873 	bl	8000c48 <__aeabi_uldivmod>
 800bb62:	2d00      	cmp	r5, #0
 800bb64:	bf08      	it	eq
 800bb66:	2c0a      	cmpeq	r4, #10
 800bb68:	f0c0 80fd 	bcc.w	800bd66 <_vfiprintf_r+0x8fa>
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	460d      	mov	r5, r1
 800bb70:	f8cd 8020 	str.w	r8, [sp, #32]
 800bb74:	e7c2      	b.n	800bafc <_vfiprintf_r+0x690>
 800bb76:	469a      	mov	sl, r3
 800bb78:	e7ed      	b.n	800bb56 <_vfiprintf_r+0x6ea>
 800bb7a:	9a05      	ldr	r2, [sp, #20]
 800bb7c:	f004 030f 	and.w	r3, r4, #15
 800bb80:	5cd3      	ldrb	r3, [r2, r3]
 800bb82:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800bb86:	0923      	lsrs	r3, r4, #4
 800bb88:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800bb8c:	092a      	lsrs	r2, r5, #4
 800bb8e:	461c      	mov	r4, r3
 800bb90:	4615      	mov	r5, r2
 800bb92:	ea54 0305 	orrs.w	r3, r4, r5
 800bb96:	d1f0      	bne.n	800bb7a <_vfiprintf_r+0x70e>
 800bb98:	e0e5      	b.n	800bd66 <_vfiprintf_r+0x8fa>
 800bb9a:	b933      	cbnz	r3, 800bbaa <_vfiprintf_r+0x73e>
 800bb9c:	f01a 0f01 	tst.w	sl, #1
 800bba0:	d003      	beq.n	800bbaa <_vfiprintf_r+0x73e>
 800bba2:	2330      	movs	r3, #48	; 0x30
 800bba4:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800bba8:	e79d      	b.n	800bae6 <_vfiprintf_r+0x67a>
 800bbaa:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800bbae:	e0da      	b.n	800bd66 <_vfiprintf_r+0x8fa>
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f000 80a4 	beq.w	800bcfe <_vfiprintf_r+0x892>
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800bbbc:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800bbc0:	46a3      	mov	fp, r4
 800bbc2:	e5e7      	b.n	800b794 <_vfiprintf_r+0x328>
 800bbc4:	4605      	mov	r5, r0
 800bbc6:	e68c      	b.n	800b8e2 <_vfiprintf_r+0x476>
 800bbc8:	2010      	movs	r0, #16
 800bbca:	4402      	add	r2, r0
 800bbcc:	2b07      	cmp	r3, #7
 800bbce:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800bbd2:	6070      	str	r0, [r6, #4]
 800bbd4:	dd07      	ble.n	800bbe6 <_vfiprintf_r+0x77a>
 800bbd6:	aa0c      	add	r2, sp, #48	; 0x30
 800bbd8:	4639      	mov	r1, r7
 800bbda:	4648      	mov	r0, r9
 800bbdc:	f7ff fc14 	bl	800b408 <__sprint_r>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	d16b      	bne.n	800bcbc <_vfiprintf_r+0x850>
 800bbe4:	a90f      	add	r1, sp, #60	; 0x3c
 800bbe6:	3c10      	subs	r4, #16
 800bbe8:	460e      	mov	r6, r1
 800bbea:	e695      	b.n	800b918 <_vfiprintf_r+0x4ac>
 800bbec:	460e      	mov	r6, r1
 800bbee:	e6ae      	b.n	800b94e <_vfiprintf_r+0x4e2>
 800bbf0:	aa0c      	add	r2, sp, #48	; 0x30
 800bbf2:	4639      	mov	r1, r7
 800bbf4:	4648      	mov	r0, r9
 800bbf6:	f7ff fc07 	bl	800b408 <__sprint_r>
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	d15e      	bne.n	800bcbc <_vfiprintf_r+0x850>
 800bbfe:	ae0f      	add	r6, sp, #60	; 0x3c
 800bc00:	e6b7      	b.n	800b972 <_vfiprintf_r+0x506>
 800bc02:	bf00      	nop
 800bc04:	0800cc94 	.word	0x0800cc94
 800bc08:	0800cca4 	.word	0x0800cca4
 800bc0c:	0800ca61 	.word	0x0800ca61
 800bc10:	aa0c      	add	r2, sp, #48	; 0x30
 800bc12:	4639      	mov	r1, r7
 800bc14:	4648      	mov	r0, r9
 800bc16:	f7ff fbf7 	bl	800b408 <__sprint_r>
 800bc1a:	2800      	cmp	r0, #0
 800bc1c:	d14e      	bne.n	800bcbc <_vfiprintf_r+0x850>
 800bc1e:	ae0f      	add	r6, sp, #60	; 0x3c
 800bc20:	e6b7      	b.n	800b992 <_vfiprintf_r+0x526>
 800bc22:	2010      	movs	r0, #16
 800bc24:	4402      	add	r2, r0
 800bc26:	2b07      	cmp	r3, #7
 800bc28:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800bc2c:	6070      	str	r0, [r6, #4]
 800bc2e:	dd07      	ble.n	800bc40 <_vfiprintf_r+0x7d4>
 800bc30:	aa0c      	add	r2, sp, #48	; 0x30
 800bc32:	4639      	mov	r1, r7
 800bc34:	4648      	mov	r0, r9
 800bc36:	f7ff fbe7 	bl	800b408 <__sprint_r>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	d13e      	bne.n	800bcbc <_vfiprintf_r+0x850>
 800bc3e:	a90f      	add	r1, sp, #60	; 0x3c
 800bc40:	3c10      	subs	r4, #16
 800bc42:	460e      	mov	r6, r1
 800bc44:	e6ad      	b.n	800b9a2 <_vfiprintf_r+0x536>
 800bc46:	460e      	mov	r6, r1
 800bc48:	e6c6      	b.n	800b9d8 <_vfiprintf_r+0x56c>
 800bc4a:	2010      	movs	r0, #16
 800bc4c:	4401      	add	r1, r0
 800bc4e:	2b07      	cmp	r3, #7
 800bc50:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800bc54:	6070      	str	r0, [r6, #4]
 800bc56:	dd06      	ble.n	800bc66 <_vfiprintf_r+0x7fa>
 800bc58:	aa0c      	add	r2, sp, #48	; 0x30
 800bc5a:	4639      	mov	r1, r7
 800bc5c:	4648      	mov	r0, r9
 800bc5e:	f7ff fbd3 	bl	800b408 <__sprint_r>
 800bc62:	bb58      	cbnz	r0, 800bcbc <_vfiprintf_r+0x850>
 800bc64:	aa0f      	add	r2, sp, #60	; 0x3c
 800bc66:	3c10      	subs	r4, #16
 800bc68:	4616      	mov	r6, r2
 800bc6a:	e6ba      	b.n	800b9e2 <_vfiprintf_r+0x576>
 800bc6c:	4616      	mov	r6, r2
 800bc6e:	e6d2      	b.n	800ba16 <_vfiprintf_r+0x5aa>
 800bc70:	aa0c      	add	r2, sp, #48	; 0x30
 800bc72:	4639      	mov	r1, r7
 800bc74:	4648      	mov	r0, r9
 800bc76:	f7ff fbc7 	bl	800b408 <__sprint_r>
 800bc7a:	b9f8      	cbnz	r0, 800bcbc <_vfiprintf_r+0x850>
 800bc7c:	ab0f      	add	r3, sp, #60	; 0x3c
 800bc7e:	e6d9      	b.n	800ba34 <_vfiprintf_r+0x5c8>
 800bc80:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800bc84:	1a54      	subs	r4, r2, r1
 800bc86:	2c00      	cmp	r4, #0
 800bc88:	f77f aed8 	ble.w	800ba3c <_vfiprintf_r+0x5d0>
 800bc8c:	4d3a      	ldr	r5, [pc, #232]	; (800bd78 <_vfiprintf_r+0x90c>)
 800bc8e:	2610      	movs	r6, #16
 800bc90:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800bc94:	2c10      	cmp	r4, #16
 800bc96:	f102 0201 	add.w	r2, r2, #1
 800bc9a:	601d      	str	r5, [r3, #0]
 800bc9c:	dc1d      	bgt.n	800bcda <_vfiprintf_r+0x86e>
 800bc9e:	605c      	str	r4, [r3, #4]
 800bca0:	2a07      	cmp	r2, #7
 800bca2:	440c      	add	r4, r1
 800bca4:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800bca8:	f77f aec8 	ble.w	800ba3c <_vfiprintf_r+0x5d0>
 800bcac:	aa0c      	add	r2, sp, #48	; 0x30
 800bcae:	4639      	mov	r1, r7
 800bcb0:	4648      	mov	r0, r9
 800bcb2:	f7ff fba9 	bl	800b408 <__sprint_r>
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	f43f aec0 	beq.w	800ba3c <_vfiprintf_r+0x5d0>
 800bcbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcbe:	07d9      	lsls	r1, r3, #31
 800bcc0:	d405      	bmi.n	800bcce <_vfiprintf_r+0x862>
 800bcc2:	89bb      	ldrh	r3, [r7, #12]
 800bcc4:	059a      	lsls	r2, r3, #22
 800bcc6:	d402      	bmi.n	800bcce <_vfiprintf_r+0x862>
 800bcc8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bcca:	f7fe fc7e 	bl	800a5ca <__retarget_lock_release_recursive>
 800bcce:	89bb      	ldrh	r3, [r7, #12]
 800bcd0:	065b      	lsls	r3, r3, #25
 800bcd2:	f57f abfe 	bpl.w	800b4d2 <_vfiprintf_r+0x66>
 800bcd6:	f7ff bbf9 	b.w	800b4cc <_vfiprintf_r+0x60>
 800bcda:	3110      	adds	r1, #16
 800bcdc:	2a07      	cmp	r2, #7
 800bcde:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 800bce2:	605e      	str	r6, [r3, #4]
 800bce4:	dc02      	bgt.n	800bcec <_vfiprintf_r+0x880>
 800bce6:	3308      	adds	r3, #8
 800bce8:	3c10      	subs	r4, #16
 800bcea:	e7d1      	b.n	800bc90 <_vfiprintf_r+0x824>
 800bcec:	aa0c      	add	r2, sp, #48	; 0x30
 800bcee:	4639      	mov	r1, r7
 800bcf0:	4648      	mov	r0, r9
 800bcf2:	f7ff fb89 	bl	800b408 <__sprint_r>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d1e0      	bne.n	800bcbc <_vfiprintf_r+0x850>
 800bcfa:	ab0f      	add	r3, sp, #60	; 0x3c
 800bcfc:	e7f4      	b.n	800bce8 <_vfiprintf_r+0x87c>
 800bcfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd00:	b913      	cbnz	r3, 800bd08 <_vfiprintf_r+0x89c>
 800bd02:	2300      	movs	r3, #0
 800bd04:	930d      	str	r3, [sp, #52]	; 0x34
 800bd06:	e7d9      	b.n	800bcbc <_vfiprintf_r+0x850>
 800bd08:	aa0c      	add	r2, sp, #48	; 0x30
 800bd0a:	4639      	mov	r1, r7
 800bd0c:	4648      	mov	r0, r9
 800bd0e:	f7ff fb7b 	bl	800b408 <__sprint_r>
 800bd12:	2800      	cmp	r0, #0
 800bd14:	d0f5      	beq.n	800bd02 <_vfiprintf_r+0x896>
 800bd16:	e7d1      	b.n	800bcbc <_vfiprintf_r+0x850>
 800bd18:	ea54 0205 	orrs.w	r2, r4, r5
 800bd1c:	f8cd a010 	str.w	sl, [sp, #16]
 800bd20:	f43f ada4 	beq.w	800b86c <_vfiprintf_r+0x400>
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	f43f aed7 	beq.w	800bad8 <_vfiprintf_r+0x66c>
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800bd30:	f43f af23 	beq.w	800bb7a <_vfiprintf_r+0x70e>
 800bd34:	08e2      	lsrs	r2, r4, #3
 800bd36:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800bd3a:	08e8      	lsrs	r0, r5, #3
 800bd3c:	f004 0307 	and.w	r3, r4, #7
 800bd40:	4605      	mov	r5, r0
 800bd42:	4614      	mov	r4, r2
 800bd44:	3330      	adds	r3, #48	; 0x30
 800bd46:	ea54 0205 	orrs.w	r2, r4, r5
 800bd4a:	4641      	mov	r1, r8
 800bd4c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800bd50:	d1f0      	bne.n	800bd34 <_vfiprintf_r+0x8c8>
 800bd52:	9a04      	ldr	r2, [sp, #16]
 800bd54:	07d0      	lsls	r0, r2, #31
 800bd56:	d506      	bpl.n	800bd66 <_vfiprintf_r+0x8fa>
 800bd58:	2b30      	cmp	r3, #48	; 0x30
 800bd5a:	d004      	beq.n	800bd66 <_vfiprintf_r+0x8fa>
 800bd5c:	2330      	movs	r3, #48	; 0x30
 800bd5e:	f808 3c01 	strb.w	r3, [r8, #-1]
 800bd62:	f1a1 0802 	sub.w	r8, r1, #2
 800bd66:	ab38      	add	r3, sp, #224	; 0xe0
 800bd68:	eba3 0308 	sub.w	r3, r3, r8
 800bd6c:	9d00      	ldr	r5, [sp, #0]
 800bd6e:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bd72:	9300      	str	r3, [sp, #0]
 800bd74:	e5b5      	b.n	800b8e2 <_vfiprintf_r+0x476>
 800bd76:	bf00      	nop
 800bd78:	0800cc94 	.word	0x0800cc94

0800bd7c <__sbprintf>:
 800bd7c:	b570      	push	{r4, r5, r6, lr}
 800bd7e:	460c      	mov	r4, r1
 800bd80:	8989      	ldrh	r1, [r1, #12]
 800bd82:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800bd86:	f021 0102 	bic.w	r1, r1, #2
 800bd8a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800bd8e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800bd90:	911b      	str	r1, [sp, #108]	; 0x6c
 800bd92:	89e1      	ldrh	r1, [r4, #14]
 800bd94:	f8ad 1016 	strh.w	r1, [sp, #22]
 800bd98:	69e1      	ldr	r1, [r4, #28]
 800bd9a:	9109      	str	r1, [sp, #36]	; 0x24
 800bd9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bd9e:	910b      	str	r1, [sp, #44]	; 0x2c
 800bda0:	a91c      	add	r1, sp, #112	; 0x70
 800bda2:	9102      	str	r1, [sp, #8]
 800bda4:	9106      	str	r1, [sp, #24]
 800bda6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bdaa:	4606      	mov	r6, r0
 800bdac:	9104      	str	r1, [sp, #16]
 800bdae:	9107      	str	r1, [sp, #28]
 800bdb0:	a818      	add	r0, sp, #96	; 0x60
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	e9cd 3200 	strd	r3, r2, [sp]
 800bdb8:	9108      	str	r1, [sp, #32]
 800bdba:	f7fe fc03 	bl	800a5c4 <__retarget_lock_init_recursive>
 800bdbe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bdc2:	a902      	add	r1, sp, #8
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	f7ff fb51 	bl	800b46c <_vfiprintf_r>
 800bdca:	1e05      	subs	r5, r0, #0
 800bdcc:	db07      	blt.n	800bdde <__sbprintf+0x62>
 800bdce:	a902      	add	r1, sp, #8
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	f7fe fa17 	bl	800a204 <_fflush_r>
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	bf18      	it	ne
 800bdda:	f04f 35ff 	movne.w	r5, #4294967295
 800bdde:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800bde2:	9818      	ldr	r0, [sp, #96]	; 0x60
 800bde4:	065b      	lsls	r3, r3, #25
 800bde6:	bf42      	ittt	mi
 800bde8:	89a3      	ldrhmi	r3, [r4, #12]
 800bdea:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800bdee:	81a3      	strhmi	r3, [r4, #12]
 800bdf0:	f7fe fbe9 	bl	800a5c6 <__retarget_lock_close_recursive>
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800bdfa:	bd70      	pop	{r4, r5, r6, pc}

0800bdfc <_write_r>:
 800bdfc:	b538      	push	{r3, r4, r5, lr}
 800bdfe:	4d07      	ldr	r5, [pc, #28]	; (800be1c <_write_r+0x20>)
 800be00:	4604      	mov	r4, r0
 800be02:	4608      	mov	r0, r1
 800be04:	4611      	mov	r1, r2
 800be06:	2200      	movs	r2, #0
 800be08:	602a      	str	r2, [r5, #0]
 800be0a:	461a      	mov	r2, r3
 800be0c:	f7f6 f802 	bl	8001e14 <_write>
 800be10:	1c43      	adds	r3, r0, #1
 800be12:	d102      	bne.n	800be1a <_write_r+0x1e>
 800be14:	682b      	ldr	r3, [r5, #0]
 800be16:	b103      	cbz	r3, 800be1a <_write_r+0x1e>
 800be18:	6023      	str	r3, [r4, #0]
 800be1a:	bd38      	pop	{r3, r4, r5, pc}
 800be1c:	20000c0c 	.word	0x20000c0c

0800be20 <__register_exitproc>:
 800be20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be24:	4d1c      	ldr	r5, [pc, #112]	; (800be98 <__register_exitproc+0x78>)
 800be26:	4606      	mov	r6, r0
 800be28:	6828      	ldr	r0, [r5, #0]
 800be2a:	4698      	mov	r8, r3
 800be2c:	460f      	mov	r7, r1
 800be2e:	4691      	mov	r9, r2
 800be30:	f7fe fbca 	bl	800a5c8 <__retarget_lock_acquire_recursive>
 800be34:	4b19      	ldr	r3, [pc, #100]	; (800be9c <__register_exitproc+0x7c>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800be3c:	4628      	mov	r0, r5
 800be3e:	b91c      	cbnz	r4, 800be48 <__register_exitproc+0x28>
 800be40:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800be44:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800be48:	6865      	ldr	r5, [r4, #4]
 800be4a:	6800      	ldr	r0, [r0, #0]
 800be4c:	2d1f      	cmp	r5, #31
 800be4e:	dd05      	ble.n	800be5c <__register_exitproc+0x3c>
 800be50:	f7fe fbbb 	bl	800a5ca <__retarget_lock_release_recursive>
 800be54:	f04f 30ff 	mov.w	r0, #4294967295
 800be58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be5c:	b19e      	cbz	r6, 800be86 <__register_exitproc+0x66>
 800be5e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800be62:	2201      	movs	r2, #1
 800be64:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800be68:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800be6c:	40aa      	lsls	r2, r5
 800be6e:	4313      	orrs	r3, r2
 800be70:	2e02      	cmp	r6, #2
 800be72:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800be76:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800be7a:	bf02      	ittt	eq
 800be7c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800be80:	431a      	orreq	r2, r3
 800be82:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 800be86:	1c6b      	adds	r3, r5, #1
 800be88:	3502      	adds	r5, #2
 800be8a:	6063      	str	r3, [r4, #4]
 800be8c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800be90:	f7fe fb9b 	bl	800a5ca <__retarget_lock_release_recursive>
 800be94:	2000      	movs	r0, #0
 800be96:	e7df      	b.n	800be58 <__register_exitproc+0x38>
 800be98:	20000448 	.word	0x20000448
 800be9c:	0800ca3c 	.word	0x0800ca3c

0800bea0 <__assert_func>:
 800bea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bea2:	4614      	mov	r4, r2
 800bea4:	461a      	mov	r2, r3
 800bea6:	4b09      	ldr	r3, [pc, #36]	; (800becc <__assert_func+0x2c>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4605      	mov	r5, r0
 800beac:	68d8      	ldr	r0, [r3, #12]
 800beae:	b14c      	cbz	r4, 800bec4 <__assert_func+0x24>
 800beb0:	4b07      	ldr	r3, [pc, #28]	; (800bed0 <__assert_func+0x30>)
 800beb2:	9100      	str	r1, [sp, #0]
 800beb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800beb8:	4906      	ldr	r1, [pc, #24]	; (800bed4 <__assert_func+0x34>)
 800beba:	462b      	mov	r3, r5
 800bebc:	f000 f8a4 	bl	800c008 <fiprintf>
 800bec0:	f000 fcf5 	bl	800c8ae <abort>
 800bec4:	4b04      	ldr	r3, [pc, #16]	; (800bed8 <__assert_func+0x38>)
 800bec6:	461c      	mov	r4, r3
 800bec8:	e7f3      	b.n	800beb2 <__assert_func+0x12>
 800beca:	bf00      	nop
 800becc:	2000001c 	.word	0x2000001c
 800bed0:	0800ccb4 	.word	0x0800ccb4
 800bed4:	0800ccc1 	.word	0x0800ccc1
 800bed8:	0800ccef 	.word	0x0800ccef

0800bedc <_calloc_r>:
 800bedc:	b510      	push	{r4, lr}
 800bede:	4351      	muls	r1, r2
 800bee0:	f7fe fbe0 	bl	800a6a4 <_malloc_r>
 800bee4:	4604      	mov	r4, r0
 800bee6:	b198      	cbz	r0, 800bf10 <_calloc_r+0x34>
 800bee8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800beec:	f022 0203 	bic.w	r2, r2, #3
 800bef0:	3a04      	subs	r2, #4
 800bef2:	2a24      	cmp	r2, #36	; 0x24
 800bef4:	d81b      	bhi.n	800bf2e <_calloc_r+0x52>
 800bef6:	2a13      	cmp	r2, #19
 800bef8:	d917      	bls.n	800bf2a <_calloc_r+0x4e>
 800befa:	2100      	movs	r1, #0
 800befc:	2a1b      	cmp	r2, #27
 800befe:	e9c0 1100 	strd	r1, r1, [r0]
 800bf02:	d807      	bhi.n	800bf14 <_calloc_r+0x38>
 800bf04:	f100 0308 	add.w	r3, r0, #8
 800bf08:	2200      	movs	r2, #0
 800bf0a:	e9c3 2200 	strd	r2, r2, [r3]
 800bf0e:	609a      	str	r2, [r3, #8]
 800bf10:	4620      	mov	r0, r4
 800bf12:	bd10      	pop	{r4, pc}
 800bf14:	2a24      	cmp	r2, #36	; 0x24
 800bf16:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800bf1a:	bf11      	iteee	ne
 800bf1c:	f100 0310 	addne.w	r3, r0, #16
 800bf20:	6101      	streq	r1, [r0, #16]
 800bf22:	f100 0318 	addeq.w	r3, r0, #24
 800bf26:	6141      	streq	r1, [r0, #20]
 800bf28:	e7ee      	b.n	800bf08 <_calloc_r+0x2c>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	e7ec      	b.n	800bf08 <_calloc_r+0x2c>
 800bf2e:	2100      	movs	r1, #0
 800bf30:	f7fa fd80 	bl	8006a34 <memset>
 800bf34:	e7ec      	b.n	800bf10 <_calloc_r+0x34>
	...

0800bf38 <_close_r>:
 800bf38:	b538      	push	{r3, r4, r5, lr}
 800bf3a:	4d06      	ldr	r5, [pc, #24]	; (800bf54 <_close_r+0x1c>)
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	4604      	mov	r4, r0
 800bf40:	4608      	mov	r0, r1
 800bf42:	602b      	str	r3, [r5, #0]
 800bf44:	f7f5 ff88 	bl	8001e58 <_close>
 800bf48:	1c43      	adds	r3, r0, #1
 800bf4a:	d102      	bne.n	800bf52 <_close_r+0x1a>
 800bf4c:	682b      	ldr	r3, [r5, #0]
 800bf4e:	b103      	cbz	r3, 800bf52 <_close_r+0x1a>
 800bf50:	6023      	str	r3, [r4, #0]
 800bf52:	bd38      	pop	{r3, r4, r5, pc}
 800bf54:	20000c0c 	.word	0x20000c0c

0800bf58 <_fclose_r>:
 800bf58:	b570      	push	{r4, r5, r6, lr}
 800bf5a:	4606      	mov	r6, r0
 800bf5c:	460c      	mov	r4, r1
 800bf5e:	b911      	cbnz	r1, 800bf66 <_fclose_r+0xe>
 800bf60:	2500      	movs	r5, #0
 800bf62:	4628      	mov	r0, r5
 800bf64:	bd70      	pop	{r4, r5, r6, pc}
 800bf66:	b118      	cbz	r0, 800bf70 <_fclose_r+0x18>
 800bf68:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bf6a:	b90b      	cbnz	r3, 800bf70 <_fclose_r+0x18>
 800bf6c:	f7fe f9b6 	bl	800a2dc <__sinit>
 800bf70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf72:	07d8      	lsls	r0, r3, #31
 800bf74:	d405      	bmi.n	800bf82 <_fclose_r+0x2a>
 800bf76:	89a3      	ldrh	r3, [r4, #12]
 800bf78:	0599      	lsls	r1, r3, #22
 800bf7a:	d402      	bmi.n	800bf82 <_fclose_r+0x2a>
 800bf7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf7e:	f7fe fb23 	bl	800a5c8 <__retarget_lock_acquire_recursive>
 800bf82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf86:	b93b      	cbnz	r3, 800bf98 <_fclose_r+0x40>
 800bf88:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800bf8a:	f015 0501 	ands.w	r5, r5, #1
 800bf8e:	d1e7      	bne.n	800bf60 <_fclose_r+0x8>
 800bf90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf92:	f7fe fb1a 	bl	800a5ca <__retarget_lock_release_recursive>
 800bf96:	e7e4      	b.n	800bf62 <_fclose_r+0xa>
 800bf98:	4621      	mov	r1, r4
 800bf9a:	4630      	mov	r0, r6
 800bf9c:	f7fe f8a4 	bl	800a0e8 <__sflush_r>
 800bfa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bfa2:	4605      	mov	r5, r0
 800bfa4:	b133      	cbz	r3, 800bfb4 <_fclose_r+0x5c>
 800bfa6:	69e1      	ldr	r1, [r4, #28]
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	4798      	blx	r3
 800bfac:	2800      	cmp	r0, #0
 800bfae:	bfb8      	it	lt
 800bfb0:	f04f 35ff 	movlt.w	r5, #4294967295
 800bfb4:	89a3      	ldrh	r3, [r4, #12]
 800bfb6:	061a      	lsls	r2, r3, #24
 800bfb8:	d503      	bpl.n	800bfc2 <_fclose_r+0x6a>
 800bfba:	6921      	ldr	r1, [r4, #16]
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	f7fe fa1d 	bl	800a3fc <_free_r>
 800bfc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bfc4:	b141      	cbz	r1, 800bfd8 <_fclose_r+0x80>
 800bfc6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800bfca:	4299      	cmp	r1, r3
 800bfcc:	d002      	beq.n	800bfd4 <_fclose_r+0x7c>
 800bfce:	4630      	mov	r0, r6
 800bfd0:	f7fe fa14 	bl	800a3fc <_free_r>
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	6323      	str	r3, [r4, #48]	; 0x30
 800bfd8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bfda:	b121      	cbz	r1, 800bfe6 <_fclose_r+0x8e>
 800bfdc:	4630      	mov	r0, r6
 800bfde:	f7fe fa0d 	bl	800a3fc <_free_r>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	6463      	str	r3, [r4, #68]	; 0x44
 800bfe6:	f7fe f961 	bl	800a2ac <__sfp_lock_acquire>
 800bfea:	2300      	movs	r3, #0
 800bfec:	81a3      	strh	r3, [r4, #12]
 800bfee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bff0:	07db      	lsls	r3, r3, #31
 800bff2:	d402      	bmi.n	800bffa <_fclose_r+0xa2>
 800bff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bff6:	f7fe fae8 	bl	800a5ca <__retarget_lock_release_recursive>
 800bffa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bffc:	f7fe fae3 	bl	800a5c6 <__retarget_lock_close_recursive>
 800c000:	f7fe f95a 	bl	800a2b8 <__sfp_lock_release>
 800c004:	e7ad      	b.n	800bf62 <_fclose_r+0xa>
	...

0800c008 <fiprintf>:
 800c008:	b40e      	push	{r1, r2, r3}
 800c00a:	b503      	push	{r0, r1, lr}
 800c00c:	4601      	mov	r1, r0
 800c00e:	ab03      	add	r3, sp, #12
 800c010:	4805      	ldr	r0, [pc, #20]	; (800c028 <fiprintf+0x20>)
 800c012:	f853 2b04 	ldr.w	r2, [r3], #4
 800c016:	6800      	ldr	r0, [r0, #0]
 800c018:	9301      	str	r3, [sp, #4]
 800c01a:	f7ff fa27 	bl	800b46c <_vfiprintf_r>
 800c01e:	b002      	add	sp, #8
 800c020:	f85d eb04 	ldr.w	lr, [sp], #4
 800c024:	b003      	add	sp, #12
 800c026:	4770      	bx	lr
 800c028:	2000001c 	.word	0x2000001c

0800c02c <__fputwc>:
 800c02c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c030:	4680      	mov	r8, r0
 800c032:	460e      	mov	r6, r1
 800c034:	4615      	mov	r5, r2
 800c036:	f000 f9d1 	bl	800c3dc <__locale_mb_cur_max>
 800c03a:	2801      	cmp	r0, #1
 800c03c:	d11c      	bne.n	800c078 <__fputwc+0x4c>
 800c03e:	1e73      	subs	r3, r6, #1
 800c040:	2bfe      	cmp	r3, #254	; 0xfe
 800c042:	d819      	bhi.n	800c078 <__fputwc+0x4c>
 800c044:	f88d 6004 	strb.w	r6, [sp, #4]
 800c048:	4604      	mov	r4, r0
 800c04a:	2700      	movs	r7, #0
 800c04c:	f10d 0904 	add.w	r9, sp, #4
 800c050:	42a7      	cmp	r7, r4
 800c052:	d020      	beq.n	800c096 <__fputwc+0x6a>
 800c054:	68ab      	ldr	r3, [r5, #8]
 800c056:	f817 1009 	ldrb.w	r1, [r7, r9]
 800c05a:	3b01      	subs	r3, #1
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	60ab      	str	r3, [r5, #8]
 800c060:	da04      	bge.n	800c06c <__fputwc+0x40>
 800c062:	69aa      	ldr	r2, [r5, #24]
 800c064:	4293      	cmp	r3, r2
 800c066:	db1a      	blt.n	800c09e <__fputwc+0x72>
 800c068:	290a      	cmp	r1, #10
 800c06a:	d018      	beq.n	800c09e <__fputwc+0x72>
 800c06c:	682b      	ldr	r3, [r5, #0]
 800c06e:	1c5a      	adds	r2, r3, #1
 800c070:	602a      	str	r2, [r5, #0]
 800c072:	7019      	strb	r1, [r3, #0]
 800c074:	3701      	adds	r7, #1
 800c076:	e7eb      	b.n	800c050 <__fputwc+0x24>
 800c078:	4632      	mov	r2, r6
 800c07a:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800c07e:	a901      	add	r1, sp, #4
 800c080:	4640      	mov	r0, r8
 800c082:	f000 fbf1 	bl	800c868 <_wcrtomb_r>
 800c086:	1c42      	adds	r2, r0, #1
 800c088:	4604      	mov	r4, r0
 800c08a:	d1de      	bne.n	800c04a <__fputwc+0x1e>
 800c08c:	89ab      	ldrh	r3, [r5, #12]
 800c08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c092:	81ab      	strh	r3, [r5, #12]
 800c094:	4606      	mov	r6, r0
 800c096:	4630      	mov	r0, r6
 800c098:	b003      	add	sp, #12
 800c09a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c09e:	462a      	mov	r2, r5
 800c0a0:	4640      	mov	r0, r8
 800c0a2:	f000 fb97 	bl	800c7d4 <__swbuf_r>
 800c0a6:	1c43      	adds	r3, r0, #1
 800c0a8:	d1e4      	bne.n	800c074 <__fputwc+0x48>
 800c0aa:	4606      	mov	r6, r0
 800c0ac:	e7f3      	b.n	800c096 <__fputwc+0x6a>

0800c0ae <_fputwc_r>:
 800c0ae:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800c0b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0b2:	4614      	mov	r4, r2
 800c0b4:	07da      	lsls	r2, r3, #31
 800c0b6:	4605      	mov	r5, r0
 800c0b8:	d407      	bmi.n	800c0ca <_fputwc_r+0x1c>
 800c0ba:	89a3      	ldrh	r3, [r4, #12]
 800c0bc:	059b      	lsls	r3, r3, #22
 800c0be:	d404      	bmi.n	800c0ca <_fputwc_r+0x1c>
 800c0c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0c2:	9101      	str	r1, [sp, #4]
 800c0c4:	f7fe fa80 	bl	800a5c8 <__retarget_lock_acquire_recursive>
 800c0c8:	9901      	ldr	r1, [sp, #4]
 800c0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0ce:	0498      	lsls	r0, r3, #18
 800c0d0:	d406      	bmi.n	800c0e0 <_fputwc_r+0x32>
 800c0d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c0d6:	81a3      	strh	r3, [r4, #12]
 800c0d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c0de:	6663      	str	r3, [r4, #100]	; 0x64
 800c0e0:	4622      	mov	r2, r4
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	f7ff ffa2 	bl	800c02c <__fputwc>
 800c0e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0ea:	07da      	lsls	r2, r3, #31
 800c0ec:	4605      	mov	r5, r0
 800c0ee:	d405      	bmi.n	800c0fc <_fputwc_r+0x4e>
 800c0f0:	89a3      	ldrh	r3, [r4, #12]
 800c0f2:	059b      	lsls	r3, r3, #22
 800c0f4:	d402      	bmi.n	800c0fc <_fputwc_r+0x4e>
 800c0f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0f8:	f7fe fa67 	bl	800a5ca <__retarget_lock_release_recursive>
 800c0fc:	4628      	mov	r0, r5
 800c0fe:	b003      	add	sp, #12
 800c100:	bd30      	pop	{r4, r5, pc}
	...

0800c104 <_fstat_r>:
 800c104:	b538      	push	{r3, r4, r5, lr}
 800c106:	4d07      	ldr	r5, [pc, #28]	; (800c124 <_fstat_r+0x20>)
 800c108:	2300      	movs	r3, #0
 800c10a:	4604      	mov	r4, r0
 800c10c:	4608      	mov	r0, r1
 800c10e:	4611      	mov	r1, r2
 800c110:	602b      	str	r3, [r5, #0]
 800c112:	f7f5 fead 	bl	8001e70 <_fstat>
 800c116:	1c43      	adds	r3, r0, #1
 800c118:	d102      	bne.n	800c120 <_fstat_r+0x1c>
 800c11a:	682b      	ldr	r3, [r5, #0]
 800c11c:	b103      	cbz	r3, 800c120 <_fstat_r+0x1c>
 800c11e:	6023      	str	r3, [r4, #0]
 800c120:	bd38      	pop	{r3, r4, r5, pc}
 800c122:	bf00      	nop
 800c124:	20000c0c 	.word	0x20000c0c

0800c128 <__sfvwrite_r>:
 800c128:	6893      	ldr	r3, [r2, #8]
 800c12a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12e:	4606      	mov	r6, r0
 800c130:	460c      	mov	r4, r1
 800c132:	4690      	mov	r8, r2
 800c134:	b91b      	cbnz	r3, 800c13e <__sfvwrite_r+0x16>
 800c136:	2000      	movs	r0, #0
 800c138:	b003      	add	sp, #12
 800c13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c13e:	898b      	ldrh	r3, [r1, #12]
 800c140:	0718      	lsls	r0, r3, #28
 800c142:	d550      	bpl.n	800c1e6 <__sfvwrite_r+0xbe>
 800c144:	690b      	ldr	r3, [r1, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d04d      	beq.n	800c1e6 <__sfvwrite_r+0xbe>
 800c14a:	89a3      	ldrh	r3, [r4, #12]
 800c14c:	f8d8 7000 	ldr.w	r7, [r8]
 800c150:	f013 0902 	ands.w	r9, r3, #2
 800c154:	d16c      	bne.n	800c230 <__sfvwrite_r+0x108>
 800c156:	f013 0301 	ands.w	r3, r3, #1
 800c15a:	f000 809c 	beq.w	800c296 <__sfvwrite_r+0x16e>
 800c15e:	4648      	mov	r0, r9
 800c160:	46ca      	mov	sl, r9
 800c162:	46cb      	mov	fp, r9
 800c164:	f1bb 0f00 	cmp.w	fp, #0
 800c168:	f000 8103 	beq.w	800c372 <__sfvwrite_r+0x24a>
 800c16c:	b950      	cbnz	r0, 800c184 <__sfvwrite_r+0x5c>
 800c16e:	465a      	mov	r2, fp
 800c170:	210a      	movs	r1, #10
 800c172:	4650      	mov	r0, sl
 800c174:	f7f4 f834 	bl	80001e0 <memchr>
 800c178:	2800      	cmp	r0, #0
 800c17a:	f000 80ff 	beq.w	800c37c <__sfvwrite_r+0x254>
 800c17e:	3001      	adds	r0, #1
 800c180:	eba0 090a 	sub.w	r9, r0, sl
 800c184:	6820      	ldr	r0, [r4, #0]
 800c186:	6921      	ldr	r1, [r4, #16]
 800c188:	6963      	ldr	r3, [r4, #20]
 800c18a:	45d9      	cmp	r9, fp
 800c18c:	464a      	mov	r2, r9
 800c18e:	bf28      	it	cs
 800c190:	465a      	movcs	r2, fp
 800c192:	4288      	cmp	r0, r1
 800c194:	f240 80f5 	bls.w	800c382 <__sfvwrite_r+0x25a>
 800c198:	68a5      	ldr	r5, [r4, #8]
 800c19a:	441d      	add	r5, r3
 800c19c:	42aa      	cmp	r2, r5
 800c19e:	f340 80f0 	ble.w	800c382 <__sfvwrite_r+0x25a>
 800c1a2:	4651      	mov	r1, sl
 800c1a4:	462a      	mov	r2, r5
 800c1a6:	f000 f943 	bl	800c430 <memmove>
 800c1aa:	6823      	ldr	r3, [r4, #0]
 800c1ac:	442b      	add	r3, r5
 800c1ae:	6023      	str	r3, [r4, #0]
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	f7fe f826 	bl	800a204 <_fflush_r>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d167      	bne.n	800c28c <__sfvwrite_r+0x164>
 800c1bc:	ebb9 0905 	subs.w	r9, r9, r5
 800c1c0:	f040 80f7 	bne.w	800c3b2 <__sfvwrite_r+0x28a>
 800c1c4:	4621      	mov	r1, r4
 800c1c6:	4630      	mov	r0, r6
 800c1c8:	f7fe f81c 	bl	800a204 <_fflush_r>
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d15d      	bne.n	800c28c <__sfvwrite_r+0x164>
 800c1d0:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800c1d4:	44aa      	add	sl, r5
 800c1d6:	ebab 0b05 	sub.w	fp, fp, r5
 800c1da:	1b55      	subs	r5, r2, r5
 800c1dc:	f8c8 5008 	str.w	r5, [r8, #8]
 800c1e0:	2d00      	cmp	r5, #0
 800c1e2:	d1bf      	bne.n	800c164 <__sfvwrite_r+0x3c>
 800c1e4:	e7a7      	b.n	800c136 <__sfvwrite_r+0xe>
 800c1e6:	4621      	mov	r1, r4
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	f7fd f8b3 	bl	8009354 <__swsetup_r>
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	d0ab      	beq.n	800c14a <__sfvwrite_r+0x22>
 800c1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f6:	e79f      	b.n	800c138 <__sfvwrite_r+0x10>
 800c1f8:	e9d7 b900 	ldrd	fp, r9, [r7]
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	f1b9 0f00 	cmp.w	r9, #0
 800c202:	d0f9      	beq.n	800c1f8 <__sfvwrite_r+0xd0>
 800c204:	45d1      	cmp	r9, sl
 800c206:	464b      	mov	r3, r9
 800c208:	69e1      	ldr	r1, [r4, #28]
 800c20a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c20c:	bf28      	it	cs
 800c20e:	4653      	movcs	r3, sl
 800c210:	465a      	mov	r2, fp
 800c212:	4630      	mov	r0, r6
 800c214:	47a8      	blx	r5
 800c216:	2800      	cmp	r0, #0
 800c218:	dd38      	ble.n	800c28c <__sfvwrite_r+0x164>
 800c21a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c21e:	4483      	add	fp, r0
 800c220:	eba9 0900 	sub.w	r9, r9, r0
 800c224:	1a18      	subs	r0, r3, r0
 800c226:	f8c8 0008 	str.w	r0, [r8, #8]
 800c22a:	2800      	cmp	r0, #0
 800c22c:	d1e7      	bne.n	800c1fe <__sfvwrite_r+0xd6>
 800c22e:	e782      	b.n	800c136 <__sfvwrite_r+0xe>
 800c230:	f04f 0b00 	mov.w	fp, #0
 800c234:	f8df a180 	ldr.w	sl, [pc, #384]	; 800c3b8 <__sfvwrite_r+0x290>
 800c238:	46d9      	mov	r9, fp
 800c23a:	e7e0      	b.n	800c1fe <__sfvwrite_r+0xd6>
 800c23c:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800c240:	3708      	adds	r7, #8
 800c242:	f1ba 0f00 	cmp.w	sl, #0
 800c246:	d0f9      	beq.n	800c23c <__sfvwrite_r+0x114>
 800c248:	89a3      	ldrh	r3, [r4, #12]
 800c24a:	68a2      	ldr	r2, [r4, #8]
 800c24c:	6820      	ldr	r0, [r4, #0]
 800c24e:	0599      	lsls	r1, r3, #22
 800c250:	d563      	bpl.n	800c31a <__sfvwrite_r+0x1f2>
 800c252:	4552      	cmp	r2, sl
 800c254:	d836      	bhi.n	800c2c4 <__sfvwrite_r+0x19c>
 800c256:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800c25a:	d033      	beq.n	800c2c4 <__sfvwrite_r+0x19c>
 800c25c:	6921      	ldr	r1, [r4, #16]
 800c25e:	6965      	ldr	r5, [r4, #20]
 800c260:	eba0 0b01 	sub.w	fp, r0, r1
 800c264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c268:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c26c:	f10b 0201 	add.w	r2, fp, #1
 800c270:	106d      	asrs	r5, r5, #1
 800c272:	4452      	add	r2, sl
 800c274:	4295      	cmp	r5, r2
 800c276:	bf38      	it	cc
 800c278:	4615      	movcc	r5, r2
 800c27a:	055b      	lsls	r3, r3, #21
 800c27c:	d53d      	bpl.n	800c2fa <__sfvwrite_r+0x1d2>
 800c27e:	4629      	mov	r1, r5
 800c280:	4630      	mov	r0, r6
 800c282:	f7fe fa0f 	bl	800a6a4 <_malloc_r>
 800c286:	b948      	cbnz	r0, 800c29c <__sfvwrite_r+0x174>
 800c288:	230c      	movs	r3, #12
 800c28a:	6033      	str	r3, [r6, #0]
 800c28c:	89a3      	ldrh	r3, [r4, #12]
 800c28e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c292:	81a3      	strh	r3, [r4, #12]
 800c294:	e7ad      	b.n	800c1f2 <__sfvwrite_r+0xca>
 800c296:	4699      	mov	r9, r3
 800c298:	469a      	mov	sl, r3
 800c29a:	e7d2      	b.n	800c242 <__sfvwrite_r+0x11a>
 800c29c:	465a      	mov	r2, fp
 800c29e:	6921      	ldr	r1, [r4, #16]
 800c2a0:	9001      	str	r0, [sp, #4]
 800c2a2:	f7fe fc41 	bl	800ab28 <memcpy>
 800c2a6:	89a2      	ldrh	r2, [r4, #12]
 800c2a8:	9b01      	ldr	r3, [sp, #4]
 800c2aa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c2ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c2b2:	81a2      	strh	r2, [r4, #12]
 800c2b4:	6123      	str	r3, [r4, #16]
 800c2b6:	6165      	str	r5, [r4, #20]
 800c2b8:	445b      	add	r3, fp
 800c2ba:	eba5 050b 	sub.w	r5, r5, fp
 800c2be:	6023      	str	r3, [r4, #0]
 800c2c0:	4652      	mov	r2, sl
 800c2c2:	60a5      	str	r5, [r4, #8]
 800c2c4:	4552      	cmp	r2, sl
 800c2c6:	bf28      	it	cs
 800c2c8:	4652      	movcs	r2, sl
 800c2ca:	6820      	ldr	r0, [r4, #0]
 800c2cc:	9201      	str	r2, [sp, #4]
 800c2ce:	4649      	mov	r1, r9
 800c2d0:	f000 f8ae 	bl	800c430 <memmove>
 800c2d4:	68a3      	ldr	r3, [r4, #8]
 800c2d6:	9a01      	ldr	r2, [sp, #4]
 800c2d8:	1a9b      	subs	r3, r3, r2
 800c2da:	60a3      	str	r3, [r4, #8]
 800c2dc:	6823      	ldr	r3, [r4, #0]
 800c2de:	441a      	add	r2, r3
 800c2e0:	4655      	mov	r5, sl
 800c2e2:	6022      	str	r2, [r4, #0]
 800c2e4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800c2e8:	44a9      	add	r9, r5
 800c2ea:	ebaa 0a05 	sub.w	sl, sl, r5
 800c2ee:	1b45      	subs	r5, r0, r5
 800c2f0:	f8c8 5008 	str.w	r5, [r8, #8]
 800c2f4:	2d00      	cmp	r5, #0
 800c2f6:	d1a4      	bne.n	800c242 <__sfvwrite_r+0x11a>
 800c2f8:	e71d      	b.n	800c136 <__sfvwrite_r+0xe>
 800c2fa:	462a      	mov	r2, r5
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	f000 f8c3 	bl	800c488 <_realloc_r>
 800c302:	4603      	mov	r3, r0
 800c304:	2800      	cmp	r0, #0
 800c306:	d1d5      	bne.n	800c2b4 <__sfvwrite_r+0x18c>
 800c308:	6921      	ldr	r1, [r4, #16]
 800c30a:	4630      	mov	r0, r6
 800c30c:	f7fe f876 	bl	800a3fc <_free_r>
 800c310:	89a3      	ldrh	r3, [r4, #12]
 800c312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c316:	81a3      	strh	r3, [r4, #12]
 800c318:	e7b6      	b.n	800c288 <__sfvwrite_r+0x160>
 800c31a:	6923      	ldr	r3, [r4, #16]
 800c31c:	4283      	cmp	r3, r0
 800c31e:	d302      	bcc.n	800c326 <__sfvwrite_r+0x1fe>
 800c320:	6961      	ldr	r1, [r4, #20]
 800c322:	4551      	cmp	r1, sl
 800c324:	d915      	bls.n	800c352 <__sfvwrite_r+0x22a>
 800c326:	4552      	cmp	r2, sl
 800c328:	bf28      	it	cs
 800c32a:	4652      	movcs	r2, sl
 800c32c:	4649      	mov	r1, r9
 800c32e:	4615      	mov	r5, r2
 800c330:	f000 f87e 	bl	800c430 <memmove>
 800c334:	68a3      	ldr	r3, [r4, #8]
 800c336:	6822      	ldr	r2, [r4, #0]
 800c338:	1b5b      	subs	r3, r3, r5
 800c33a:	442a      	add	r2, r5
 800c33c:	60a3      	str	r3, [r4, #8]
 800c33e:	6022      	str	r2, [r4, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d1cf      	bne.n	800c2e4 <__sfvwrite_r+0x1bc>
 800c344:	4621      	mov	r1, r4
 800c346:	4630      	mov	r0, r6
 800c348:	f7fd ff5c 	bl	800a204 <_fflush_r>
 800c34c:	2800      	cmp	r0, #0
 800c34e:	d0c9      	beq.n	800c2e4 <__sfvwrite_r+0x1bc>
 800c350:	e79c      	b.n	800c28c <__sfvwrite_r+0x164>
 800c352:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c356:	459a      	cmp	sl, r3
 800c358:	bf38      	it	cc
 800c35a:	4653      	movcc	r3, sl
 800c35c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c35e:	fb93 f3f1 	sdiv	r3, r3, r1
 800c362:	464a      	mov	r2, r9
 800c364:	434b      	muls	r3, r1
 800c366:	4630      	mov	r0, r6
 800c368:	69e1      	ldr	r1, [r4, #28]
 800c36a:	47a8      	blx	r5
 800c36c:	1e05      	subs	r5, r0, #0
 800c36e:	dcb9      	bgt.n	800c2e4 <__sfvwrite_r+0x1bc>
 800c370:	e78c      	b.n	800c28c <__sfvwrite_r+0x164>
 800c372:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c376:	2000      	movs	r0, #0
 800c378:	3708      	adds	r7, #8
 800c37a:	e6f3      	b.n	800c164 <__sfvwrite_r+0x3c>
 800c37c:	f10b 0901 	add.w	r9, fp, #1
 800c380:	e700      	b.n	800c184 <__sfvwrite_r+0x5c>
 800c382:	4293      	cmp	r3, r2
 800c384:	dc08      	bgt.n	800c398 <__sfvwrite_r+0x270>
 800c386:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c388:	69e1      	ldr	r1, [r4, #28]
 800c38a:	4652      	mov	r2, sl
 800c38c:	4630      	mov	r0, r6
 800c38e:	47a8      	blx	r5
 800c390:	1e05      	subs	r5, r0, #0
 800c392:	f73f af13 	bgt.w	800c1bc <__sfvwrite_r+0x94>
 800c396:	e779      	b.n	800c28c <__sfvwrite_r+0x164>
 800c398:	4651      	mov	r1, sl
 800c39a:	9201      	str	r2, [sp, #4]
 800c39c:	f000 f848 	bl	800c430 <memmove>
 800c3a0:	9a01      	ldr	r2, [sp, #4]
 800c3a2:	68a3      	ldr	r3, [r4, #8]
 800c3a4:	1a9b      	subs	r3, r3, r2
 800c3a6:	60a3      	str	r3, [r4, #8]
 800c3a8:	6823      	ldr	r3, [r4, #0]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	6023      	str	r3, [r4, #0]
 800c3ae:	4615      	mov	r5, r2
 800c3b0:	e704      	b.n	800c1bc <__sfvwrite_r+0x94>
 800c3b2:	2001      	movs	r0, #1
 800c3b4:	e70c      	b.n	800c1d0 <__sfvwrite_r+0xa8>
 800c3b6:	bf00      	nop
 800c3b8:	7ffffc00 	.word	0x7ffffc00

0800c3bc <_isatty_r>:
 800c3bc:	b538      	push	{r3, r4, r5, lr}
 800c3be:	4d06      	ldr	r5, [pc, #24]	; (800c3d8 <_isatty_r+0x1c>)
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	4608      	mov	r0, r1
 800c3c6:	602b      	str	r3, [r5, #0]
 800c3c8:	f7f5 fd62 	bl	8001e90 <_isatty>
 800c3cc:	1c43      	adds	r3, r0, #1
 800c3ce:	d102      	bne.n	800c3d6 <_isatty_r+0x1a>
 800c3d0:	682b      	ldr	r3, [r5, #0]
 800c3d2:	b103      	cbz	r3, 800c3d6 <_isatty_r+0x1a>
 800c3d4:	6023      	str	r3, [r4, #0]
 800c3d6:	bd38      	pop	{r3, r4, r5, pc}
 800c3d8:	20000c0c 	.word	0x20000c0c

0800c3dc <__locale_mb_cur_max>:
 800c3dc:	4b01      	ldr	r3, [pc, #4]	; (800c3e4 <__locale_mb_cur_max+0x8>)
 800c3de:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800c3e2:	4770      	bx	lr
 800c3e4:	2000085c 	.word	0x2000085c

0800c3e8 <_lseek_r>:
 800c3e8:	b538      	push	{r3, r4, r5, lr}
 800c3ea:	4d07      	ldr	r5, [pc, #28]	; (800c408 <_lseek_r+0x20>)
 800c3ec:	4604      	mov	r4, r0
 800c3ee:	4608      	mov	r0, r1
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	602a      	str	r2, [r5, #0]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	f7f5 fd55 	bl	8001ea6 <_lseek>
 800c3fc:	1c43      	adds	r3, r0, #1
 800c3fe:	d102      	bne.n	800c406 <_lseek_r+0x1e>
 800c400:	682b      	ldr	r3, [r5, #0]
 800c402:	b103      	cbz	r3, 800c406 <_lseek_r+0x1e>
 800c404:	6023      	str	r3, [r4, #0]
 800c406:	bd38      	pop	{r3, r4, r5, pc}
 800c408:	20000c0c 	.word	0x20000c0c

0800c40c <__ascii_mbtowc>:
 800c40c:	b082      	sub	sp, #8
 800c40e:	b901      	cbnz	r1, 800c412 <__ascii_mbtowc+0x6>
 800c410:	a901      	add	r1, sp, #4
 800c412:	b142      	cbz	r2, 800c426 <__ascii_mbtowc+0x1a>
 800c414:	b14b      	cbz	r3, 800c42a <__ascii_mbtowc+0x1e>
 800c416:	7813      	ldrb	r3, [r2, #0]
 800c418:	600b      	str	r3, [r1, #0]
 800c41a:	7812      	ldrb	r2, [r2, #0]
 800c41c:	1e10      	subs	r0, r2, #0
 800c41e:	bf18      	it	ne
 800c420:	2001      	movne	r0, #1
 800c422:	b002      	add	sp, #8
 800c424:	4770      	bx	lr
 800c426:	4610      	mov	r0, r2
 800c428:	e7fb      	b.n	800c422 <__ascii_mbtowc+0x16>
 800c42a:	f06f 0001 	mvn.w	r0, #1
 800c42e:	e7f8      	b.n	800c422 <__ascii_mbtowc+0x16>

0800c430 <memmove>:
 800c430:	4288      	cmp	r0, r1
 800c432:	b510      	push	{r4, lr}
 800c434:	eb01 0402 	add.w	r4, r1, r2
 800c438:	d902      	bls.n	800c440 <memmove+0x10>
 800c43a:	4284      	cmp	r4, r0
 800c43c:	4623      	mov	r3, r4
 800c43e:	d807      	bhi.n	800c450 <memmove+0x20>
 800c440:	1e43      	subs	r3, r0, #1
 800c442:	42a1      	cmp	r1, r4
 800c444:	d008      	beq.n	800c458 <memmove+0x28>
 800c446:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c44a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c44e:	e7f8      	b.n	800c442 <memmove+0x12>
 800c450:	4402      	add	r2, r0
 800c452:	4601      	mov	r1, r0
 800c454:	428a      	cmp	r2, r1
 800c456:	d100      	bne.n	800c45a <memmove+0x2a>
 800c458:	bd10      	pop	{r4, pc}
 800c45a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c45e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c462:	e7f7      	b.n	800c454 <memmove+0x24>

0800c464 <_read_r>:
 800c464:	b538      	push	{r3, r4, r5, lr}
 800c466:	4d07      	ldr	r5, [pc, #28]	; (800c484 <_read_r+0x20>)
 800c468:	4604      	mov	r4, r0
 800c46a:	4608      	mov	r0, r1
 800c46c:	4611      	mov	r1, r2
 800c46e:	2200      	movs	r2, #0
 800c470:	602a      	str	r2, [r5, #0]
 800c472:	461a      	mov	r2, r3
 800c474:	f7f5 fcb0 	bl	8001dd8 <_read>
 800c478:	1c43      	adds	r3, r0, #1
 800c47a:	d102      	bne.n	800c482 <_read_r+0x1e>
 800c47c:	682b      	ldr	r3, [r5, #0]
 800c47e:	b103      	cbz	r3, 800c482 <_read_r+0x1e>
 800c480:	6023      	str	r3, [r4, #0]
 800c482:	bd38      	pop	{r3, r4, r5, pc}
 800c484:	20000c0c 	.word	0x20000c0c

0800c488 <_realloc_r>:
 800c488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48c:	4681      	mov	r9, r0
 800c48e:	460c      	mov	r4, r1
 800c490:	b929      	cbnz	r1, 800c49e <_realloc_r+0x16>
 800c492:	4611      	mov	r1, r2
 800c494:	b003      	add	sp, #12
 800c496:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49a:	f7fe b903 	b.w	800a6a4 <_malloc_r>
 800c49e:	9201      	str	r2, [sp, #4]
 800c4a0:	f7fe fb50 	bl	800ab44 <__malloc_lock>
 800c4a4:	9a01      	ldr	r2, [sp, #4]
 800c4a6:	f102 080b 	add.w	r8, r2, #11
 800c4aa:	f1b8 0f16 	cmp.w	r8, #22
 800c4ae:	d90b      	bls.n	800c4c8 <_realloc_r+0x40>
 800c4b0:	f038 0807 	bics.w	r8, r8, #7
 800c4b4:	d50a      	bpl.n	800c4cc <_realloc_r+0x44>
 800c4b6:	230c      	movs	r3, #12
 800c4b8:	f8c9 3000 	str.w	r3, [r9]
 800c4bc:	f04f 0b00 	mov.w	fp, #0
 800c4c0:	4658      	mov	r0, fp
 800c4c2:	b003      	add	sp, #12
 800c4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c8:	f04f 0810 	mov.w	r8, #16
 800c4cc:	4590      	cmp	r8, r2
 800c4ce:	d3f2      	bcc.n	800c4b6 <_realloc_r+0x2e>
 800c4d0:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800c4d4:	f025 0603 	bic.w	r6, r5, #3
 800c4d8:	45b0      	cmp	r8, r6
 800c4da:	f1a4 0a08 	sub.w	sl, r4, #8
 800c4de:	f340 8170 	ble.w	800c7c2 <_realloc_r+0x33a>
 800c4e2:	48a9      	ldr	r0, [pc, #676]	; (800c788 <_realloc_r+0x300>)
 800c4e4:	9001      	str	r0, [sp, #4]
 800c4e6:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800c4ea:	eb0a 0306 	add.w	r3, sl, r6
 800c4ee:	459c      	cmp	ip, r3
 800c4f0:	6859      	ldr	r1, [r3, #4]
 800c4f2:	d005      	beq.n	800c500 <_realloc_r+0x78>
 800c4f4:	f021 0001 	bic.w	r0, r1, #1
 800c4f8:	4418      	add	r0, r3
 800c4fa:	6840      	ldr	r0, [r0, #4]
 800c4fc:	07c7      	lsls	r7, r0, #31
 800c4fe:	d427      	bmi.n	800c550 <_realloc_r+0xc8>
 800c500:	f021 0103 	bic.w	r1, r1, #3
 800c504:	459c      	cmp	ip, r3
 800c506:	eb06 0701 	add.w	r7, r6, r1
 800c50a:	d119      	bne.n	800c540 <_realloc_r+0xb8>
 800c50c:	f108 0010 	add.w	r0, r8, #16
 800c510:	42b8      	cmp	r0, r7
 800c512:	dc1f      	bgt.n	800c554 <_realloc_r+0xcc>
 800c514:	eb0a 0308 	add.w	r3, sl, r8
 800c518:	9a01      	ldr	r2, [sp, #4]
 800c51a:	eba7 0708 	sub.w	r7, r7, r8
 800c51e:	f047 0701 	orr.w	r7, r7, #1
 800c522:	6093      	str	r3, [r2, #8]
 800c524:	605f      	str	r7, [r3, #4]
 800c526:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c52a:	f003 0301 	and.w	r3, r3, #1
 800c52e:	ea43 0308 	orr.w	r3, r3, r8
 800c532:	f844 3c04 	str.w	r3, [r4, #-4]
 800c536:	4648      	mov	r0, r9
 800c538:	f7fe fb0a 	bl	800ab50 <__malloc_unlock>
 800c53c:	46a3      	mov	fp, r4
 800c53e:	e7bf      	b.n	800c4c0 <_realloc_r+0x38>
 800c540:	45b8      	cmp	r8, r7
 800c542:	dc07      	bgt.n	800c554 <_realloc_r+0xcc>
 800c544:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800c548:	60da      	str	r2, [r3, #12]
 800c54a:	6093      	str	r3, [r2, #8]
 800c54c:	4655      	mov	r5, sl
 800c54e:	e07f      	b.n	800c650 <_realloc_r+0x1c8>
 800c550:	2100      	movs	r1, #0
 800c552:	460b      	mov	r3, r1
 800c554:	07e8      	lsls	r0, r5, #31
 800c556:	f100 80e5 	bmi.w	800c724 <_realloc_r+0x29c>
 800c55a:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800c55e:	ebaa 0505 	sub.w	r5, sl, r5
 800c562:	6868      	ldr	r0, [r5, #4]
 800c564:	f020 0003 	bic.w	r0, r0, #3
 800c568:	eb00 0b06 	add.w	fp, r0, r6
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	f000 80a5 	beq.w	800c6bc <_realloc_r+0x234>
 800c572:	459c      	cmp	ip, r3
 800c574:	eb01 070b 	add.w	r7, r1, fp
 800c578:	d14a      	bne.n	800c610 <_realloc_r+0x188>
 800c57a:	f108 0310 	add.w	r3, r8, #16
 800c57e:	42bb      	cmp	r3, r7
 800c580:	f300 809c 	bgt.w	800c6bc <_realloc_r+0x234>
 800c584:	46ab      	mov	fp, r5
 800c586:	68eb      	ldr	r3, [r5, #12]
 800c588:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800c58c:	60d3      	str	r3, [r2, #12]
 800c58e:	609a      	str	r2, [r3, #8]
 800c590:	1f32      	subs	r2, r6, #4
 800c592:	2a24      	cmp	r2, #36	; 0x24
 800c594:	d837      	bhi.n	800c606 <_realloc_r+0x17e>
 800c596:	2a13      	cmp	r2, #19
 800c598:	d933      	bls.n	800c602 <_realloc_r+0x17a>
 800c59a:	6823      	ldr	r3, [r4, #0]
 800c59c:	60ab      	str	r3, [r5, #8]
 800c59e:	6863      	ldr	r3, [r4, #4]
 800c5a0:	60eb      	str	r3, [r5, #12]
 800c5a2:	2a1b      	cmp	r2, #27
 800c5a4:	d81b      	bhi.n	800c5de <_realloc_r+0x156>
 800c5a6:	3408      	adds	r4, #8
 800c5a8:	f105 0310 	add.w	r3, r5, #16
 800c5ac:	6822      	ldr	r2, [r4, #0]
 800c5ae:	601a      	str	r2, [r3, #0]
 800c5b0:	6862      	ldr	r2, [r4, #4]
 800c5b2:	605a      	str	r2, [r3, #4]
 800c5b4:	68a2      	ldr	r2, [r4, #8]
 800c5b6:	609a      	str	r2, [r3, #8]
 800c5b8:	eb05 0308 	add.w	r3, r5, r8
 800c5bc:	9a01      	ldr	r2, [sp, #4]
 800c5be:	eba7 0708 	sub.w	r7, r7, r8
 800c5c2:	f047 0701 	orr.w	r7, r7, #1
 800c5c6:	6093      	str	r3, [r2, #8]
 800c5c8:	605f      	str	r7, [r3, #4]
 800c5ca:	686b      	ldr	r3, [r5, #4]
 800c5cc:	f003 0301 	and.w	r3, r3, #1
 800c5d0:	ea43 0308 	orr.w	r3, r3, r8
 800c5d4:	606b      	str	r3, [r5, #4]
 800c5d6:	4648      	mov	r0, r9
 800c5d8:	f7fe faba 	bl	800ab50 <__malloc_unlock>
 800c5dc:	e770      	b.n	800c4c0 <_realloc_r+0x38>
 800c5de:	68a3      	ldr	r3, [r4, #8]
 800c5e0:	612b      	str	r3, [r5, #16]
 800c5e2:	68e3      	ldr	r3, [r4, #12]
 800c5e4:	616b      	str	r3, [r5, #20]
 800c5e6:	2a24      	cmp	r2, #36	; 0x24
 800c5e8:	bf01      	itttt	eq
 800c5ea:	6923      	ldreq	r3, [r4, #16]
 800c5ec:	61ab      	streq	r3, [r5, #24]
 800c5ee:	6962      	ldreq	r2, [r4, #20]
 800c5f0:	61ea      	streq	r2, [r5, #28]
 800c5f2:	bf19      	ittee	ne
 800c5f4:	3410      	addne	r4, #16
 800c5f6:	f105 0318 	addne.w	r3, r5, #24
 800c5fa:	f105 0320 	addeq.w	r3, r5, #32
 800c5fe:	3418      	addeq	r4, #24
 800c600:	e7d4      	b.n	800c5ac <_realloc_r+0x124>
 800c602:	465b      	mov	r3, fp
 800c604:	e7d2      	b.n	800c5ac <_realloc_r+0x124>
 800c606:	4621      	mov	r1, r4
 800c608:	4658      	mov	r0, fp
 800c60a:	f7ff ff11 	bl	800c430 <memmove>
 800c60e:	e7d3      	b.n	800c5b8 <_realloc_r+0x130>
 800c610:	45b8      	cmp	r8, r7
 800c612:	dc53      	bgt.n	800c6bc <_realloc_r+0x234>
 800c614:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800c618:	4628      	mov	r0, r5
 800c61a:	60da      	str	r2, [r3, #12]
 800c61c:	6093      	str	r3, [r2, #8]
 800c61e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c622:	68eb      	ldr	r3, [r5, #12]
 800c624:	60d3      	str	r3, [r2, #12]
 800c626:	609a      	str	r2, [r3, #8]
 800c628:	1f32      	subs	r2, r6, #4
 800c62a:	2a24      	cmp	r2, #36	; 0x24
 800c62c:	d842      	bhi.n	800c6b4 <_realloc_r+0x22c>
 800c62e:	2a13      	cmp	r2, #19
 800c630:	d908      	bls.n	800c644 <_realloc_r+0x1bc>
 800c632:	6823      	ldr	r3, [r4, #0]
 800c634:	60ab      	str	r3, [r5, #8]
 800c636:	6863      	ldr	r3, [r4, #4]
 800c638:	60eb      	str	r3, [r5, #12]
 800c63a:	2a1b      	cmp	r2, #27
 800c63c:	d828      	bhi.n	800c690 <_realloc_r+0x208>
 800c63e:	3408      	adds	r4, #8
 800c640:	f105 0010 	add.w	r0, r5, #16
 800c644:	6823      	ldr	r3, [r4, #0]
 800c646:	6003      	str	r3, [r0, #0]
 800c648:	6863      	ldr	r3, [r4, #4]
 800c64a:	6043      	str	r3, [r0, #4]
 800c64c:	68a3      	ldr	r3, [r4, #8]
 800c64e:	6083      	str	r3, [r0, #8]
 800c650:	686a      	ldr	r2, [r5, #4]
 800c652:	eba7 0008 	sub.w	r0, r7, r8
 800c656:	280f      	cmp	r0, #15
 800c658:	f002 0201 	and.w	r2, r2, #1
 800c65c:	eb05 0307 	add.w	r3, r5, r7
 800c660:	f240 80b1 	bls.w	800c7c6 <_realloc_r+0x33e>
 800c664:	eb05 0108 	add.w	r1, r5, r8
 800c668:	ea48 0202 	orr.w	r2, r8, r2
 800c66c:	f040 0001 	orr.w	r0, r0, #1
 800c670:	606a      	str	r2, [r5, #4]
 800c672:	6048      	str	r0, [r1, #4]
 800c674:	685a      	ldr	r2, [r3, #4]
 800c676:	f042 0201 	orr.w	r2, r2, #1
 800c67a:	605a      	str	r2, [r3, #4]
 800c67c:	3108      	adds	r1, #8
 800c67e:	4648      	mov	r0, r9
 800c680:	f7fd febc 	bl	800a3fc <_free_r>
 800c684:	4648      	mov	r0, r9
 800c686:	f7fe fa63 	bl	800ab50 <__malloc_unlock>
 800c68a:	f105 0b08 	add.w	fp, r5, #8
 800c68e:	e717      	b.n	800c4c0 <_realloc_r+0x38>
 800c690:	68a3      	ldr	r3, [r4, #8]
 800c692:	612b      	str	r3, [r5, #16]
 800c694:	68e3      	ldr	r3, [r4, #12]
 800c696:	616b      	str	r3, [r5, #20]
 800c698:	2a24      	cmp	r2, #36	; 0x24
 800c69a:	bf01      	itttt	eq
 800c69c:	6923      	ldreq	r3, [r4, #16]
 800c69e:	61ab      	streq	r3, [r5, #24]
 800c6a0:	6963      	ldreq	r3, [r4, #20]
 800c6a2:	61eb      	streq	r3, [r5, #28]
 800c6a4:	bf19      	ittee	ne
 800c6a6:	3410      	addne	r4, #16
 800c6a8:	f105 0018 	addne.w	r0, r5, #24
 800c6ac:	f105 0020 	addeq.w	r0, r5, #32
 800c6b0:	3418      	addeq	r4, #24
 800c6b2:	e7c7      	b.n	800c644 <_realloc_r+0x1bc>
 800c6b4:	4621      	mov	r1, r4
 800c6b6:	f7ff febb 	bl	800c430 <memmove>
 800c6ba:	e7c9      	b.n	800c650 <_realloc_r+0x1c8>
 800c6bc:	45d8      	cmp	r8, fp
 800c6be:	dc31      	bgt.n	800c724 <_realloc_r+0x29c>
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	68eb      	ldr	r3, [r5, #12]
 800c6c4:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c6c8:	60d3      	str	r3, [r2, #12]
 800c6ca:	609a      	str	r2, [r3, #8]
 800c6cc:	1f32      	subs	r2, r6, #4
 800c6ce:	2a24      	cmp	r2, #36	; 0x24
 800c6d0:	d824      	bhi.n	800c71c <_realloc_r+0x294>
 800c6d2:	2a13      	cmp	r2, #19
 800c6d4:	d908      	bls.n	800c6e8 <_realloc_r+0x260>
 800c6d6:	6823      	ldr	r3, [r4, #0]
 800c6d8:	60ab      	str	r3, [r5, #8]
 800c6da:	6863      	ldr	r3, [r4, #4]
 800c6dc:	60eb      	str	r3, [r5, #12]
 800c6de:	2a1b      	cmp	r2, #27
 800c6e0:	d80a      	bhi.n	800c6f8 <_realloc_r+0x270>
 800c6e2:	3408      	adds	r4, #8
 800c6e4:	f105 0010 	add.w	r0, r5, #16
 800c6e8:	6823      	ldr	r3, [r4, #0]
 800c6ea:	6003      	str	r3, [r0, #0]
 800c6ec:	6863      	ldr	r3, [r4, #4]
 800c6ee:	6043      	str	r3, [r0, #4]
 800c6f0:	68a3      	ldr	r3, [r4, #8]
 800c6f2:	6083      	str	r3, [r0, #8]
 800c6f4:	465f      	mov	r7, fp
 800c6f6:	e7ab      	b.n	800c650 <_realloc_r+0x1c8>
 800c6f8:	68a3      	ldr	r3, [r4, #8]
 800c6fa:	612b      	str	r3, [r5, #16]
 800c6fc:	68e3      	ldr	r3, [r4, #12]
 800c6fe:	616b      	str	r3, [r5, #20]
 800c700:	2a24      	cmp	r2, #36	; 0x24
 800c702:	bf01      	itttt	eq
 800c704:	6923      	ldreq	r3, [r4, #16]
 800c706:	61ab      	streq	r3, [r5, #24]
 800c708:	6963      	ldreq	r3, [r4, #20]
 800c70a:	61eb      	streq	r3, [r5, #28]
 800c70c:	bf19      	ittee	ne
 800c70e:	3410      	addne	r4, #16
 800c710:	f105 0018 	addne.w	r0, r5, #24
 800c714:	f105 0020 	addeq.w	r0, r5, #32
 800c718:	3418      	addeq	r4, #24
 800c71a:	e7e5      	b.n	800c6e8 <_realloc_r+0x260>
 800c71c:	4621      	mov	r1, r4
 800c71e:	f7ff fe87 	bl	800c430 <memmove>
 800c722:	e7e7      	b.n	800c6f4 <_realloc_r+0x26c>
 800c724:	4611      	mov	r1, r2
 800c726:	4648      	mov	r0, r9
 800c728:	f7fd ffbc 	bl	800a6a4 <_malloc_r>
 800c72c:	4683      	mov	fp, r0
 800c72e:	2800      	cmp	r0, #0
 800c730:	f43f af51 	beq.w	800c5d6 <_realloc_r+0x14e>
 800c734:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c738:	f023 0301 	bic.w	r3, r3, #1
 800c73c:	4453      	add	r3, sl
 800c73e:	f1a0 0208 	sub.w	r2, r0, #8
 800c742:	4293      	cmp	r3, r2
 800c744:	d105      	bne.n	800c752 <_realloc_r+0x2ca>
 800c746:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800c74a:	f027 0703 	bic.w	r7, r7, #3
 800c74e:	4437      	add	r7, r6
 800c750:	e6fc      	b.n	800c54c <_realloc_r+0xc4>
 800c752:	1f32      	subs	r2, r6, #4
 800c754:	2a24      	cmp	r2, #36	; 0x24
 800c756:	d830      	bhi.n	800c7ba <_realloc_r+0x332>
 800c758:	2a13      	cmp	r2, #19
 800c75a:	d92b      	bls.n	800c7b4 <_realloc_r+0x32c>
 800c75c:	6823      	ldr	r3, [r4, #0]
 800c75e:	6003      	str	r3, [r0, #0]
 800c760:	6863      	ldr	r3, [r4, #4]
 800c762:	6043      	str	r3, [r0, #4]
 800c764:	2a1b      	cmp	r2, #27
 800c766:	d811      	bhi.n	800c78c <_realloc_r+0x304>
 800c768:	f104 0208 	add.w	r2, r4, #8
 800c76c:	f100 0308 	add.w	r3, r0, #8
 800c770:	6811      	ldr	r1, [r2, #0]
 800c772:	6019      	str	r1, [r3, #0]
 800c774:	6851      	ldr	r1, [r2, #4]
 800c776:	6059      	str	r1, [r3, #4]
 800c778:	6892      	ldr	r2, [r2, #8]
 800c77a:	609a      	str	r2, [r3, #8]
 800c77c:	4621      	mov	r1, r4
 800c77e:	4648      	mov	r0, r9
 800c780:	f7fd fe3c 	bl	800a3fc <_free_r>
 800c784:	e727      	b.n	800c5d6 <_realloc_r+0x14e>
 800c786:	bf00      	nop
 800c788:	2000044c 	.word	0x2000044c
 800c78c:	68a3      	ldr	r3, [r4, #8]
 800c78e:	6083      	str	r3, [r0, #8]
 800c790:	68e3      	ldr	r3, [r4, #12]
 800c792:	60c3      	str	r3, [r0, #12]
 800c794:	2a24      	cmp	r2, #36	; 0x24
 800c796:	bf01      	itttt	eq
 800c798:	6923      	ldreq	r3, [r4, #16]
 800c79a:	6103      	streq	r3, [r0, #16]
 800c79c:	6961      	ldreq	r1, [r4, #20]
 800c79e:	6141      	streq	r1, [r0, #20]
 800c7a0:	bf19      	ittee	ne
 800c7a2:	f104 0210 	addne.w	r2, r4, #16
 800c7a6:	f100 0310 	addne.w	r3, r0, #16
 800c7aa:	f104 0218 	addeq.w	r2, r4, #24
 800c7ae:	f100 0318 	addeq.w	r3, r0, #24
 800c7b2:	e7dd      	b.n	800c770 <_realloc_r+0x2e8>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	4622      	mov	r2, r4
 800c7b8:	e7da      	b.n	800c770 <_realloc_r+0x2e8>
 800c7ba:	4621      	mov	r1, r4
 800c7bc:	f7ff fe38 	bl	800c430 <memmove>
 800c7c0:	e7dc      	b.n	800c77c <_realloc_r+0x2f4>
 800c7c2:	4637      	mov	r7, r6
 800c7c4:	e6c2      	b.n	800c54c <_realloc_r+0xc4>
 800c7c6:	4317      	orrs	r7, r2
 800c7c8:	606f      	str	r7, [r5, #4]
 800c7ca:	685a      	ldr	r2, [r3, #4]
 800c7cc:	f042 0201 	orr.w	r2, r2, #1
 800c7d0:	605a      	str	r2, [r3, #4]
 800c7d2:	e757      	b.n	800c684 <_realloc_r+0x1fc>

0800c7d4 <__swbuf_r>:
 800c7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d6:	460e      	mov	r6, r1
 800c7d8:	4614      	mov	r4, r2
 800c7da:	4605      	mov	r5, r0
 800c7dc:	b118      	cbz	r0, 800c7e6 <__swbuf_r+0x12>
 800c7de:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c7e0:	b90b      	cbnz	r3, 800c7e6 <__swbuf_r+0x12>
 800c7e2:	f7fd fd7b 	bl	800a2dc <__sinit>
 800c7e6:	69a3      	ldr	r3, [r4, #24]
 800c7e8:	60a3      	str	r3, [r4, #8]
 800c7ea:	89a3      	ldrh	r3, [r4, #12]
 800c7ec:	0719      	lsls	r1, r3, #28
 800c7ee:	d529      	bpl.n	800c844 <__swbuf_r+0x70>
 800c7f0:	6923      	ldr	r3, [r4, #16]
 800c7f2:	b33b      	cbz	r3, 800c844 <__swbuf_r+0x70>
 800c7f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7f8:	b2f6      	uxtb	r6, r6
 800c7fa:	049a      	lsls	r2, r3, #18
 800c7fc:	4637      	mov	r7, r6
 800c7fe:	d52a      	bpl.n	800c856 <__swbuf_r+0x82>
 800c800:	6823      	ldr	r3, [r4, #0]
 800c802:	6920      	ldr	r0, [r4, #16]
 800c804:	1a18      	subs	r0, r3, r0
 800c806:	6963      	ldr	r3, [r4, #20]
 800c808:	4283      	cmp	r3, r0
 800c80a:	dc04      	bgt.n	800c816 <__swbuf_r+0x42>
 800c80c:	4621      	mov	r1, r4
 800c80e:	4628      	mov	r0, r5
 800c810:	f7fd fcf8 	bl	800a204 <_fflush_r>
 800c814:	b9e0      	cbnz	r0, 800c850 <__swbuf_r+0x7c>
 800c816:	68a3      	ldr	r3, [r4, #8]
 800c818:	3b01      	subs	r3, #1
 800c81a:	60a3      	str	r3, [r4, #8]
 800c81c:	6823      	ldr	r3, [r4, #0]
 800c81e:	1c5a      	adds	r2, r3, #1
 800c820:	6022      	str	r2, [r4, #0]
 800c822:	701e      	strb	r6, [r3, #0]
 800c824:	6962      	ldr	r2, [r4, #20]
 800c826:	1c43      	adds	r3, r0, #1
 800c828:	429a      	cmp	r2, r3
 800c82a:	d004      	beq.n	800c836 <__swbuf_r+0x62>
 800c82c:	89a3      	ldrh	r3, [r4, #12]
 800c82e:	07db      	lsls	r3, r3, #31
 800c830:	d506      	bpl.n	800c840 <__swbuf_r+0x6c>
 800c832:	2e0a      	cmp	r6, #10
 800c834:	d104      	bne.n	800c840 <__swbuf_r+0x6c>
 800c836:	4621      	mov	r1, r4
 800c838:	4628      	mov	r0, r5
 800c83a:	f7fd fce3 	bl	800a204 <_fflush_r>
 800c83e:	b938      	cbnz	r0, 800c850 <__swbuf_r+0x7c>
 800c840:	4638      	mov	r0, r7
 800c842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c844:	4621      	mov	r1, r4
 800c846:	4628      	mov	r0, r5
 800c848:	f7fc fd84 	bl	8009354 <__swsetup_r>
 800c84c:	2800      	cmp	r0, #0
 800c84e:	d0d1      	beq.n	800c7f4 <__swbuf_r+0x20>
 800c850:	f04f 37ff 	mov.w	r7, #4294967295
 800c854:	e7f4      	b.n	800c840 <__swbuf_r+0x6c>
 800c856:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c85a:	81a3      	strh	r3, [r4, #12]
 800c85c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c85e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c862:	6663      	str	r3, [r4, #100]	; 0x64
 800c864:	e7cc      	b.n	800c800 <__swbuf_r+0x2c>
	...

0800c868 <_wcrtomb_r>:
 800c868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c86a:	4c09      	ldr	r4, [pc, #36]	; (800c890 <_wcrtomb_r+0x28>)
 800c86c:	b085      	sub	sp, #20
 800c86e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800c872:	4605      	mov	r5, r0
 800c874:	461e      	mov	r6, r3
 800c876:	b909      	cbnz	r1, 800c87c <_wcrtomb_r+0x14>
 800c878:	460a      	mov	r2, r1
 800c87a:	a901      	add	r1, sp, #4
 800c87c:	47b8      	blx	r7
 800c87e:	1c43      	adds	r3, r0, #1
 800c880:	bf01      	itttt	eq
 800c882:	2300      	moveq	r3, #0
 800c884:	6033      	streq	r3, [r6, #0]
 800c886:	238a      	moveq	r3, #138	; 0x8a
 800c888:	602b      	streq	r3, [r5, #0]
 800c88a:	b005      	add	sp, #20
 800c88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c88e:	bf00      	nop
 800c890:	2000085c 	.word	0x2000085c

0800c894 <__ascii_wctomb>:
 800c894:	b149      	cbz	r1, 800c8aa <__ascii_wctomb+0x16>
 800c896:	2aff      	cmp	r2, #255	; 0xff
 800c898:	bf85      	ittet	hi
 800c89a:	238a      	movhi	r3, #138	; 0x8a
 800c89c:	6003      	strhi	r3, [r0, #0]
 800c89e:	700a      	strbls	r2, [r1, #0]
 800c8a0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c8a4:	bf98      	it	ls
 800c8a6:	2001      	movls	r0, #1
 800c8a8:	4770      	bx	lr
 800c8aa:	4608      	mov	r0, r1
 800c8ac:	4770      	bx	lr

0800c8ae <abort>:
 800c8ae:	b508      	push	{r3, lr}
 800c8b0:	2006      	movs	r0, #6
 800c8b2:	f000 f82d 	bl	800c910 <raise>
 800c8b6:	2001      	movs	r0, #1
 800c8b8:	f7f5 fa84 	bl	8001dc4 <_exit>

0800c8bc <_raise_r>:
 800c8bc:	291f      	cmp	r1, #31
 800c8be:	b538      	push	{r3, r4, r5, lr}
 800c8c0:	4604      	mov	r4, r0
 800c8c2:	460d      	mov	r5, r1
 800c8c4:	d904      	bls.n	800c8d0 <_raise_r+0x14>
 800c8c6:	2316      	movs	r3, #22
 800c8c8:	6003      	str	r3, [r0, #0]
 800c8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ce:	bd38      	pop	{r3, r4, r5, pc}
 800c8d0:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800c8d4:	b112      	cbz	r2, 800c8dc <_raise_r+0x20>
 800c8d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8da:	b94b      	cbnz	r3, 800c8f0 <_raise_r+0x34>
 800c8dc:	4620      	mov	r0, r4
 800c8de:	f000 f831 	bl	800c944 <_getpid_r>
 800c8e2:	462a      	mov	r2, r5
 800c8e4:	4601      	mov	r1, r0
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8ec:	f000 b818 	b.w	800c920 <_kill_r>
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d00a      	beq.n	800c90a <_raise_r+0x4e>
 800c8f4:	1c59      	adds	r1, r3, #1
 800c8f6:	d103      	bne.n	800c900 <_raise_r+0x44>
 800c8f8:	2316      	movs	r3, #22
 800c8fa:	6003      	str	r3, [r0, #0]
 800c8fc:	2001      	movs	r0, #1
 800c8fe:	e7e6      	b.n	800c8ce <_raise_r+0x12>
 800c900:	2400      	movs	r4, #0
 800c902:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c906:	4628      	mov	r0, r5
 800c908:	4798      	blx	r3
 800c90a:	2000      	movs	r0, #0
 800c90c:	e7df      	b.n	800c8ce <_raise_r+0x12>
	...

0800c910 <raise>:
 800c910:	4b02      	ldr	r3, [pc, #8]	; (800c91c <raise+0xc>)
 800c912:	4601      	mov	r1, r0
 800c914:	6818      	ldr	r0, [r3, #0]
 800c916:	f7ff bfd1 	b.w	800c8bc <_raise_r>
 800c91a:	bf00      	nop
 800c91c:	2000001c 	.word	0x2000001c

0800c920 <_kill_r>:
 800c920:	b538      	push	{r3, r4, r5, lr}
 800c922:	4d07      	ldr	r5, [pc, #28]	; (800c940 <_kill_r+0x20>)
 800c924:	2300      	movs	r3, #0
 800c926:	4604      	mov	r4, r0
 800c928:	4608      	mov	r0, r1
 800c92a:	4611      	mov	r1, r2
 800c92c:	602b      	str	r3, [r5, #0]
 800c92e:	f7f5 fa39 	bl	8001da4 <_kill>
 800c932:	1c43      	adds	r3, r0, #1
 800c934:	d102      	bne.n	800c93c <_kill_r+0x1c>
 800c936:	682b      	ldr	r3, [r5, #0]
 800c938:	b103      	cbz	r3, 800c93c <_kill_r+0x1c>
 800c93a:	6023      	str	r3, [r4, #0]
 800c93c:	bd38      	pop	{r3, r4, r5, pc}
 800c93e:	bf00      	nop
 800c940:	20000c0c 	.word	0x20000c0c

0800c944 <_getpid_r>:
 800c944:	f7f5 ba26 	b.w	8001d94 <_getpid>

0800c948 <_init>:
 800c948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94a:	bf00      	nop
 800c94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c94e:	bc08      	pop	{r3}
 800c950:	469e      	mov	lr, r3
 800c952:	4770      	bx	lr

0800c954 <_fini>:
 800c954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c956:	bf00      	nop
 800c958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c95a:	bc08      	pop	{r3}
 800c95c:	469e      	mov	lr, r3
 800c95e:	4770      	bx	lr
