
Assignment3V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800ad00  0800ad00  0001ad00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b104  0800b104  000209c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b104  0800b104  0001b104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b10c  0800b10c  000209c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b10c  0800b10c  0001b10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b114  0800b114  0001b114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c8  20000000  0800b118  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  200009c8  0800bae0  000209c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bc4  0800bae0  00020bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016781  00000000  00000000  000209f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b57  00000000  00000000  00037179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  00039cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  0003b050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f24  00000000  00000000  0003c2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e9d  00000000  00000000  000601ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd09a  00000000  00000000  00074089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00151123  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000666c  00000000  00000000  00151178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200009c8 	.word	0x200009c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ace4 	.word	0x0800ace4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200009cc 	.word	0x200009cc
 80001cc:	0800ace4 	.word	0x0800ace4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	// Conversion values trough the calibrated sensor values
	slope = (130-30)/((float)(*calibValue130_ptr) - (float)(*calibValue30_ptr));
 8000f46:	4b54      	ldr	r3, [pc, #336]	; (8001098 <main+0x158>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	ee07 3a90 	vmov	s15, r3
 8000f50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f54:	4b51      	ldr	r3, [pc, #324]	; (800109c <main+0x15c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	ee07 3a90 	vmov	s15, r3
 8000f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f66:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80010a0 <main+0x160>
 8000f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f6e:	4b4d      	ldr	r3, [pc, #308]	; (80010a4 <main+0x164>)
 8000f70:	edc3 7a00 	vstr	s15, [r3]
	interb = (-slope * (float)(*calibValue30_ptr)) + 30;
 8000f74:	4b4b      	ldr	r3, [pc, #300]	; (80010a4 <main+0x164>)
 8000f76:	edd3 7a00 	vldr	s15, [r3]
 8000f7a:	eeb1 7a67 	vneg.f32	s14, s15
 8000f7e:	4b47      	ldr	r3, [pc, #284]	; (800109c <main+0x15c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f90:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000f94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f98:	4b43      	ldr	r3, [pc, #268]	; (80010a8 <main+0x168>)
 8000f9a:	edc3 7a00 	vstr	s15, [r3]

	slope2 = 400;
 8000f9e:	4b43      	ldr	r3, [pc, #268]	; (80010ac <main+0x16c>)
 8000fa0:	4a43      	ldr	r2, [pc, #268]	; (80010b0 <main+0x170>)
 8000fa2:	601a      	str	r2, [r3, #0]
	interb2 = -slope2*0.76 + 30;
 8000fa4:	4b41      	ldr	r3, [pc, #260]	; (80010ac <main+0x16c>)
 8000fa6:	edd3 7a00 	vldr	s15, [r3]
 8000faa:	eef1 7a67 	vneg.f32	s15, s15
 8000fae:	ee17 3a90 	vmov	r3, s15
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fac8 	bl	8000548 <__aeabi_f2d>
 8000fb8:	a335      	add	r3, pc, #212	; (adr r3, 8001090 <main+0x150>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff fb1b 	bl	80005f8 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <main+0x174>)
 8000fd0:	f7ff f95c 	bl	800028c <__adddf3>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f7ff fde4 	bl	8000ba8 <__aeabi_d2f>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4a35      	ldr	r2, [pc, #212]	; (80010b8 <main+0x178>)
 8000fe4:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe6:	f000 fdd4 	bl	8001b92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fea:	f000 f873 	bl	80010d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fee:	f000 fa4d 	bl	800148c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ff2:	f000 fa2d 	bl	8001450 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ff6:	f000 f9fb 	bl	80013f0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ffa:	f000 f8ff 	bl	80011fc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000ffe:	f000 f983 	bl	8001308 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001002:	482e      	ldr	r0, [pc, #184]	; (80010bc <main+0x17c>)
 8001004:	f003 fe3e 	bl	8004c84 <HAL_TIM_Base_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001008:	217f      	movs	r1, #127	; 0x7f
 800100a:	482d      	ldr	r0, [pc, #180]	; (80010c0 <main+0x180>)
 800100c:	f001 ff66 	bl	8002edc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, myVar, 3);
 8001010:	2203      	movs	r2, #3
 8001012:	492c      	ldr	r1, [pc, #176]	; (80010c4 <main+0x184>)
 8001014:	482a      	ldr	r0, [pc, #168]	; (80010c0 <main+0x180>)
 8001016:	f001 f967 	bl	80022e8 <HAL_ADC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //printf("Value1: %d \t Value2: %d \t Value3: %d \n\r", myVar[0], myVar[1], myVar[2]);
	  tempIn = CalculateSensorInside(myVar[1]);
 800101a:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <main+0x184>)
 800101c:	885b      	ldrh	r3, [r3, #2]
 800101e:	b29b      	uxth	r3, r3
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fb23 	bl	800166c <CalculateSensorInside>
 8001026:	eef0 7a40 	vmov.f32	s15, s0
 800102a:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <main+0x188>)
 800102c:	edc3 7a00 	vstr	s15, [r3]
	  tempOut = CalculateSensorOutside(myVar[2]);
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <main+0x184>)
 8001032:	889b      	ldrh	r3, [r3, #4]
 8001034:	b29b      	uxth	r3, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f000 fa9e 	bl	8001578 <CalculateSensorOutside>
 800103c:	eef0 7a40 	vmov.f32	s15, s0
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <main+0x18c>)
 8001042:	edc3 7a00 	vstr	s15, [r3]
	  tempOut = CalculateSensorOutside2nd(tempOut);
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <main+0x18c>)
 8001048:	edd3 7a00 	vldr	s15, [r3]
 800104c:	eeb0 0a67 	vmov.f32	s0, s15
 8001050:	f000 face 	bl	80015f0 <CalculateSensorOutside2nd>
 8001054:	eef0 7a40 	vmov.f32	s15, s0
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <main+0x18c>)
 800105a:	edc3 7a00 	vstr	s15, [r3]
	  printf("TempIn: %.2f \t TempOut: %.2f \n\r", tempIn, tempOut);
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <main+0x188>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa70 	bl	8000548 <__aeabi_f2d>
 8001068:	4604      	mov	r4, r0
 800106a:	460d      	mov	r5, r1
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <main+0x18c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa69 	bl	8000548 <__aeabi_f2d>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	e9cd 2300 	strd	r2, r3, [sp]
 800107e:	4622      	mov	r2, r4
 8001080:	462b      	mov	r3, r5
 8001082:	4813      	ldr	r0, [pc, #76]	; (80010d0 <main+0x190>)
 8001084:	f005 f924 	bl	80062d0 <printf>
	  tempIn = CalculateSensorInside(myVar[1]);
 8001088:	e7c7      	b.n	800101a <main+0xda>
 800108a:	bf00      	nop
 800108c:	f3af 8000 	nop.w
 8001090:	851eb852 	.word	0x851eb852
 8001094:	3fe851eb 	.word	0x3fe851eb
 8001098:	20000004 	.word	0x20000004
 800109c:	20000000 	.word	0x20000000
 80010a0:	42c80000 	.word	0x42c80000
 80010a4:	20000ba8 	.word	0x20000ba8
 80010a8:	20000bac 	.word	0x20000bac
 80010ac:	20000a24 	.word	0x20000a24
 80010b0:	43c80000 	.word	0x43c80000
 80010b4:	403e0000 	.word	0x403e0000
 80010b8:	20000ba4 	.word	0x20000ba4
 80010bc:	20000ad4 	.word	0x20000ad4
 80010c0:	20000a28 	.word	0x20000a28
 80010c4:	20000008 	.word	0x20000008
 80010c8:	200009e4 	.word	0x200009e4
 80010cc:	200009e8 	.word	0x200009e8
 80010d0:	0800ad00 	.word	0x0800ad00

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0ac      	sub	sp, #176	; 0xb0
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010de:	2244      	movs	r2, #68	; 0x44
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f005 f8ec 	bl	80062c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2254      	movs	r2, #84	; 0x54
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f005 f8de 	bl	80062c0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001104:	f002 fbd6 	bl	80038b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001108:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <SystemClock_Config+0x124>)
 800110a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800110e:	4a3a      	ldr	r2, [pc, #232]	; (80011f8 <SystemClock_Config+0x124>)
 8001110:	f023 0318 	bic.w	r3, r3, #24
 8001114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001118:	2314      	movs	r3, #20
 800111a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800111c:	2301      	movs	r3, #1
 800111e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001120:	2301      	movs	r3, #1
 8001122:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800112c:	2360      	movs	r3, #96	; 0x60
 800112e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001132:	2302      	movs	r3, #2
 8001134:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001138:	2301      	movs	r3, #1
 800113a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800113e:	2301      	movs	r3, #1
 8001140:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001144:	2310      	movs	r3, #16
 8001146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800114a:	2307      	movs	r3, #7
 800114c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001160:	4618      	mov	r0, r3
 8001162:	f002 fc1b 	bl	800399c <HAL_RCC_OscConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800116c:	f000 faac 	bl	80016c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001170:	230f      	movs	r3, #15
 8001172:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001174:	2303      	movs	r3, #3
 8001176:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001184:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001188:	2101      	movs	r1, #1
 800118a:	4618      	mov	r0, r3
 800118c:	f003 f826 	bl	80041dc <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001196:	f000 fa97 	bl	80016c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800119a:	f244 0302 	movw	r3, #16386	; 0x4002
 800119e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80011aa:	2301      	movs	r3, #1
 80011ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80011b2:	2310      	movs	r3, #16
 80011b4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011b6:	2307      	movs	r3, #7
 80011b8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011be:	2302      	movs	r3, #2
 80011c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80011c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011c6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 fa0c 	bl	80045e8 <HAL_RCCEx_PeriphCLKConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x106>
  {
    Error_Handler();
 80011d6:	f000 fa77 	bl	80016c8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011de:	f002 fb87 	bl	80038f0 <HAL_PWREx_ControlVoltageScaling>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x118>
  {
    Error_Handler();
 80011e8:	f000 fa6e 	bl	80016c8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011ec:	f003 fbf0 	bl	80049d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011f0:	bf00      	nop
 80011f2:	37b0      	adds	r7, #176	; 0xb0
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021000 	.word	0x40021000

080011fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001202:	463b      	mov	r3, r7
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
 8001210:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001212:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <MX_ADC1_Init+0xf8>)
 8001214:	4a38      	ldr	r2, [pc, #224]	; (80012f8 <MX_ADC1_Init+0xfc>)
 8001216:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001218:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <MX_ADC1_Init+0xf8>)
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800121e:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <MX_ADC1_Init+0xf8>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001224:	4b33      	ldr	r3, [pc, #204]	; (80012f4 <MX_ADC1_Init+0xf8>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800122a:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <MX_ADC1_Init+0xf8>)
 800122c:	2201      	movs	r2, #1
 800122e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <MX_ADC1_Init+0xf8>)
 8001232:	2204      	movs	r2, #4
 8001234:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001236:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <MX_ADC1_Init+0xf8>)
 8001238:	2200      	movs	r2, #0
 800123a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <MX_ADC1_Init+0xf8>)
 800123e:	2200      	movs	r2, #0
 8001240:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001242:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <MX_ADC1_Init+0xf8>)
 8001244:	2203      	movs	r2, #3
 8001246:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001248:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <MX_ADC1_Init+0xf8>)
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <MX_ADC1_Init+0xf8>)
 8001252:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001258:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <MX_ADC1_Init+0xf8>)
 800125a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800125e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <MX_ADC1_Init+0xf8>)
 8001262:	2201      	movs	r2, #1
 8001264:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001268:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <MX_ADC1_Init+0xf8>)
 800126a:	2200      	movs	r2, #0
 800126c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_ADC1_Init+0xf8>)
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001276:	481f      	ldr	r0, [pc, #124]	; (80012f4 <MX_ADC1_Init+0xf8>)
 8001278:	f000 feee 	bl	8002058 <HAL_ADC_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001282:	f000 fa21 	bl	80016c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_ADC1_Init+0x100>)
 8001288:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800128a:	2306      	movs	r3, #6
 800128c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800128e:	2306      	movs	r3, #6
 8001290:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001292:	237f      	movs	r3, #127	; 0x7f
 8001294:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001296:	2304      	movs	r3, #4
 8001298:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129e:	463b      	mov	r3, r7
 80012a0:	4619      	mov	r1, r3
 80012a2:	4814      	ldr	r0, [pc, #80]	; (80012f4 <MX_ADC1_Init+0xf8>)
 80012a4:	f001 f8b8 	bl	8002418 <HAL_ADC_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80012ae:	f000 fa0b 	bl	80016c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <MX_ADC1_Init+0x104>)
 80012b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012b6:	230c      	movs	r3, #12
 80012b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ba:	463b      	mov	r3, r7
 80012bc:	4619      	mov	r1, r3
 80012be:	480d      	ldr	r0, [pc, #52]	; (80012f4 <MX_ADC1_Init+0xf8>)
 80012c0:	f001 f8aa 	bl	8002418 <HAL_ADC_ConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80012ca:	f000 f9fd 	bl	80016c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <MX_ADC1_Init+0x108>)
 80012d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012d2:	2312      	movs	r3, #18
 80012d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d6:	463b      	mov	r3, r7
 80012d8:	4619      	mov	r1, r3
 80012da:	4806      	ldr	r0, [pc, #24]	; (80012f4 <MX_ADC1_Init+0xf8>)
 80012dc:	f001 f89c 	bl	8002418 <HAL_ADC_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80012e6:	f000 f9ef 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000a28 	.word	0x20000a28
 80012f8:	50040000 	.word	0x50040000
 80012fc:	2e300800 	.word	0x2e300800
 8001300:	c7520000 	.word	0xc7520000
 8001304:	19200040 	.word	0x19200040

08001308 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08e      	sub	sp, #56	; 0x38
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001328:	463b      	mov	r3, r7
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
 8001336:	615a      	str	r2, [r3, #20]
 8001338:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800133a:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <MX_TIM2_Init+0xe4>)
 800133c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001340:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320;
 8001342:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <MX_TIM2_Init+0xe4>)
 8001344:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001348:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <MX_TIM2_Init+0xe4>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <MX_TIM2_Init+0xe4>)
 8001352:	2264      	movs	r2, #100	; 0x64
 8001354:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	4b25      	ldr	r3, [pc, #148]	; (80013ec <MX_TIM2_Init+0xe4>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <MX_TIM2_Init+0xe4>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001362:	4822      	ldr	r0, [pc, #136]	; (80013ec <MX_TIM2_Init+0xe4>)
 8001364:	f003 fc36 	bl	8004bd4 <HAL_TIM_Base_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800136e:	f000 f9ab 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001378:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800137c:	4619      	mov	r1, r3
 800137e:	481b      	ldr	r0, [pc, #108]	; (80013ec <MX_TIM2_Init+0xe4>)
 8001380:	f003 fda4 	bl	8004ecc <HAL_TIM_ConfigClockSource>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800138a:	f000 f99d 	bl	80016c8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800138e:	4817      	ldr	r0, [pc, #92]	; (80013ec <MX_TIM2_Init+0xe4>)
 8001390:	f003 fcc4 	bl	8004d1c <HAL_TIM_OC_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800139a:	f000 f995 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800139e:	2320      	movs	r3, #32
 80013a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	480f      	ldr	r0, [pc, #60]	; (80013ec <MX_TIM2_Init+0xe4>)
 80013ae:	f004 f9cf 	bl	8005750 <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013b8:	f000 f986 	bl	80016c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013bc:	2300      	movs	r3, #0
 80013be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013cc:	463b      	mov	r3, r7
 80013ce:	2204      	movs	r2, #4
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <MX_TIM2_Init+0xe4>)
 80013d4:	f003 fd04 	bl	8004de0 <HAL_TIM_OC_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80013de:	f000 f973 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	3738      	adds	r7, #56	; 0x38
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000ad4 	.word	0x20000ad4

080013f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_USART2_UART_Init+0x58>)
 80013f6:	4a15      	ldr	r2, [pc, #84]	; (800144c <MX_USART2_UART_Init+0x5c>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <MX_USART2_UART_Init+0x58>)
 80013fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_USART2_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_USART2_UART_Init+0x58>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_USART2_UART_Init+0x58>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_USART2_UART_Init+0x58>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_USART2_UART_Init+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_USART2_UART_Init+0x58>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_USART2_UART_Init+0x58>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_USART2_UART_Init+0x58>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_USART2_UART_Init+0x58>)
 8001434:	f004 f9f2 	bl	800581c <HAL_UART_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800143e:	f000 f943 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000b20 	.word	0x20000b20
 800144c:	40004400 	.word	0x40004400

08001450 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_DMA_Init+0x38>)
 8001458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145a:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <MX_DMA_Init+0x38>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6493      	str	r3, [r2, #72]	; 0x48
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_DMA_Init+0x38>)
 8001464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	200b      	movs	r0, #11
 8001474:	f001 fe6d 	bl	8003152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001478:	200b      	movs	r0, #11
 800147a:	f001 fe86 	bl	800318a <HAL_NVIC_EnableIRQ>

}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000

0800148c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	4b28      	ldr	r3, [pc, #160]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	4a27      	ldr	r2, [pc, #156]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	4a21      	ldr	r2, [pc, #132]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	4a1b      	ldr	r2, [pc, #108]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2120      	movs	r1, #32
 80014ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f2:	f002 f9c7 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2108      	movs	r1, #8
 80014fa:	4813      	ldr	r0, [pc, #76]	; (8001548 <MX_GPIO_Init+0xbc>)
 80014fc:	f002 f9c2 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001500:	2320      	movs	r3, #32
 8001502:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	4619      	mov	r1, r3
 8001516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151a:	f002 f849 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800151e:	2308      	movs	r3, #8
 8001520:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	4619      	mov	r1, r3
 8001534:	4804      	ldr	r0, [pc, #16]	; (8001548 <MX_GPIO_Init+0xbc>)
 8001536:	f002 f83b 	bl	80035b0 <HAL_GPIO_Init>

}
 800153a:	bf00      	nop
 800153c:	3720      	adds	r7, #32
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	48000400 	.word	0x48000400

0800154c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	// Small pulse each time
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	2120      	movs	r1, #32
 8001558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155c:	f002 f992 	bl	8003884 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	2120      	movs	r1, #32
 8001564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001568:	f002 f98c 	bl	8003884 <HAL_GPIO_WritePin>
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	0000      	movs	r0, r0
	...

08001578 <CalculateSensorOutside>:

//Temperature sensor on a MCP9700A
float CalculateSensorOutside(uint16_t tempIn){
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]

	float voltsIn = (float)tempIn*convRate;
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	ee07 3a90 	vmov	s15, r3
 8001588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800158c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80015e8 <CalculateSensorOutside+0x70>
 8001590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001594:	edc7 7a03 	vstr	s15, [r7, #12]
	float tempOut = (voltsIn-0.5)/0.01;
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f7fe ffd5 	bl	8000548 <__aeabi_f2d>
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <CalculateSensorOutside+0x74>)
 80015a4:	f7fe fe70 	bl	8000288 <__aeabi_dsub>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	a30b      	add	r3, pc, #44	; (adr r3, 80015e0 <CalculateSensorOutside+0x68>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7ff f949 	bl	800084c <__aeabi_ddiv>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff faf1 	bl	8000ba8 <__aeabi_d2f>
 80015c6:	4603      	mov	r3, r0
 80015c8:	60bb      	str	r3, [r7, #8]
	return tempOut;
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	ee07 3a90 	vmov	s15, r3
}
 80015d0:	eeb0 0a67 	vmov.f32	s0, s15
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	f3af 8000 	nop.w
 80015e0:	47ae147b 	.word	0x47ae147b
 80015e4:	3f847ae1 	.word	0x3f847ae1
 80015e8:	3a534067 	.word	0x3a534067
 80015ec:	3fe00000 	.word	0x3fe00000

080015f0 <CalculateSensorOutside2nd>:

//Compansated Temperature on MCP9700A with 2nd order error calculation
//AN1001 application note
float CalculateSensorOutside2nd(float ta){
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	ed87 0a01 	vstr	s0, [r7, #4]

	float tError = (ec_2*(125-ta)*(ta+40)) + (ec_1*(ta+40)) + error_40;
 80015fa:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800165c <CalculateSensorOutside2nd+0x6c>
 80015fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001606:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001660 <CalculateSensorOutside2nd+0x70>
 800160a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800160e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001612:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001664 <CalculateSensorOutside2nd+0x74>
 8001616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800161a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800161e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001622:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001664 <CalculateSensorOutside2nd+0x74>
 8001626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800162a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001668 <CalculateSensorOutside2nd+0x78>
 800162e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001636:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800163a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800163e:	edc7 7a03 	vstr	s15, [r7, #12]
	return (ta-tError);
 8001642:	ed97 7a01 	vldr	s14, [r7, #4]
 8001646:	edd7 7a03 	vldr	s15, [r7, #12]
 800164a:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800164e:	eeb0 0a67 	vmov.f32	s0, s15
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	42fa0000 	.word	0x42fa0000
 8001660:	b97fda40 	.word	0xb97fda40
 8001664:	42200000 	.word	0x42200000
 8001668:	2c0cbccc 	.word	0x2c0cbccc

0800166c <CalculateSensorInside>:
//Temperature sensor on board

float CalculateSensorInside(uint16_t tempIn){
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]

	float voltsIn = (float)tempIn*convRate;
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	ee07 3a90 	vmov	s15, r3
 800167c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001680:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80016bc <CalculateSensorInside+0x50>
 8001684:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001688:	edc7 7a03 	vstr	s15, [r7, #12]
	float tempOut = (slope2*((float)voltsIn)) +interb2;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <CalculateSensorInside+0x54>)
 800168e:	ed93 7a00 	vldr	s14, [r3]
 8001692:	edd7 7a03 	vldr	s15, [r7, #12]
 8001696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <CalculateSensorInside+0x58>)
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a4:	edc7 7a02 	vstr	s15, [r7, #8]
	return tempOut;
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	ee07 3a90 	vmov	s15, r3
}
 80016ae:	eeb0 0a67 	vmov.f32	s0, s15
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	3a534067 	.word	0x3a534067
 80016c0:	20000a24 	.word	0x20000a24
 80016c4:	20000ba4 	.word	0x20000ba4

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <Error_Handler+0x8>
	...

080016d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_MspInit+0x44>)
 80016dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016de:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <HAL_MspInit+0x44>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6613      	str	r3, [r2, #96]	; 0x60
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <HAL_MspInit+0x44>)
 80016e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_MspInit+0x44>)
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	4a08      	ldr	r2, [pc, #32]	; (8001718 <HAL_MspInit+0x44>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fc:	6593      	str	r3, [r2, #88]	; 0x58
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_MspInit+0x44>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000

0800171c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a2b      	ldr	r2, [pc, #172]	; (80017e8 <HAL_ADC_MspInit+0xcc>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d14f      	bne.n	80017de <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800173e:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_ADC_MspInit+0xd0>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	4a2a      	ldr	r2, [pc, #168]	; (80017ec <HAL_ADC_MspInit+0xd0>)
 8001744:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174a:	4b28      	ldr	r3, [pc, #160]	; (80017ec <HAL_ADC_MspInit+0xd0>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	4b25      	ldr	r3, [pc, #148]	; (80017ec <HAL_ADC_MspInit+0xd0>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	4a24      	ldr	r2, [pc, #144]	; (80017ec <HAL_ADC_MspInit+0xd0>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001762:	4b22      	ldr	r3, [pc, #136]	; (80017ec <HAL_ADC_MspInit+0xd0>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 800176e:	2342      	movs	r3, #66	; 0x42
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001772:	230b      	movs	r3, #11
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001784:	f001 ff14 	bl	80035b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_ADC_MspInit+0xd4>)
 800178a:	4a1a      	ldr	r2, [pc, #104]	; (80017f4 <HAL_ADC_MspInit+0xd8>)
 800178c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <HAL_ADC_MspInit+0xd4>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <HAL_ADC_MspInit+0xd4>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_ADC_MspInit+0xd4>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <HAL_ADC_MspInit+0xd4>)
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_ADC_MspInit+0xd4>)
 80017a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HAL_ADC_MspInit+0xd4>)
 80017b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <HAL_ADC_MspInit+0xd4>)
 80017b8:	2220      	movs	r2, #32
 80017ba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_ADC_MspInit+0xd4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017c2:	480b      	ldr	r0, [pc, #44]	; (80017f0 <HAL_ADC_MspInit+0xd4>)
 80017c4:	f001 fcfc 	bl	80031c0 <HAL_DMA_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80017ce:	f7ff ff7b 	bl	80016c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a06      	ldr	r2, [pc, #24]	; (80017f0 <HAL_ADC_MspInit+0xd4>)
 80017d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80017d8:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <HAL_ADC_MspInit+0xd4>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	; 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	50040000 	.word	0x50040000
 80017ec:	40021000 	.word	0x40021000
 80017f0:	20000a8c 	.word	0x20000a8c
 80017f4:	40020008 	.word	0x40020008

080017f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001808:	d10b      	bne.n	8001822 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_TIM_Base_MspInit+0x38>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_TIM_Base_MspInit+0x38>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6593      	str	r3, [r2, #88]	; 0x58
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_TIM_Base_MspInit+0x38>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000

08001834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a20      	ldr	r2, [pc, #128]	; (80018d4 <HAL_UART_MspInit+0xa0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d13a      	bne.n	80018cc <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_UART_MspInit+0xa4>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	4a1f      	ldr	r2, [pc, #124]	; (80018d8 <HAL_UART_MspInit+0xa4>)
 800185c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001860:	6593      	str	r3, [r2, #88]	; 0x58
 8001862:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <HAL_UART_MspInit+0xa4>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <HAL_UART_MspInit+0xa4>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	4a19      	ldr	r2, [pc, #100]	; (80018d8 <HAL_UART_MspInit+0xa4>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_UART_MspInit+0xa4>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001886:	2304      	movs	r3, #4
 8001888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001896:	2307      	movs	r3, #7
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a4:	f001 fe84 	bl	80035b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80018a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b6:	2303      	movs	r3, #3
 80018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80018ba:	2303      	movs	r3, #3
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c8:	f001 fe72 	bl	80035b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40004400 	.word	0x40004400
 80018d8:	40021000 	.word	0x40021000

080018dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <NMI_Handler+0x4>

080018e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <MemManage_Handler+0x4>

080018ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001928:	f000 f988 	bl	8001c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}

08001930 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <DMA1_Channel1_IRQHandler+0x10>)
 8001936:	f001 fd5b 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000a8c 	.word	0x20000a8c

08001944 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
	return 1;
 8001948:	2301      	movs	r3, #1
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_kill>:

int _kill(int pid, int sig)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800195e:	f004 fc85 	bl	800626c <__errno>
 8001962:	4603      	mov	r3, r0
 8001964:	2216      	movs	r2, #22
 8001966:	601a      	str	r2, [r3, #0]
	return -1;
 8001968:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <_exit>:

void _exit (int status)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800197c:	f04f 31ff 	mov.w	r1, #4294967295
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ffe7 	bl	8001954 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001986:	e7fe      	b.n	8001986 <_exit+0x12>

08001988 <_read>:
}

int _read (int file, char *ptr, int len)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8001994:	2301      	movs	r3, #1
 8001996:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	b29a      	uxth	r2, r3
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	4807      	ldr	r0, [pc, #28]	; (80019c0 <_read+0x38>)
 80019a4:	f004 f81c 	bl	80059e0 <HAL_UART_Receive>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
 80019b2:	607b      	str	r3, [r7, #4]

	return len;
 80019b4:	687b      	ldr	r3, [r7, #4]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000b20 	.word	0x20000b20

080019c4 <_write>:

int _write(int file, char *ptr, int len)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	4809      	ldr	r0, [pc, #36]	; (8001a04 <_write+0x40>)
 80019e0:	f003 ff6a 	bl	80058b8 <HAL_UART_Transmit>
 80019e4:	4603      	mov	r3, r0
 80019e6:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 80019e8:	7dfb      	ldrb	r3, [r7, #23]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d002      	beq.n	80019f4 <_write+0x30>
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d101      	bne.n	80019f8 <_write+0x34>
	{
		Error_Handler();
 80019f4:	f7ff fe68 	bl	80016c8 <Error_Handler>
	}

	return len;
 80019f8:	687b      	ldr	r3, [r7, #4]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000b20 	.word	0x20000b20

08001a08 <_close>:



int _close(int file)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	return -1;
 8001a10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a30:	605a      	str	r2, [r3, #4]
	return 0;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_isatty>:

int _isatty(int file)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	return 1;
 8001a48:	2301      	movs	r3, #1
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b085      	sub	sp, #20
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
	return 0;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a78:	4a14      	ldr	r2, [pc, #80]	; (8001acc <_sbrk+0x5c>)
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <_sbrk+0x60>)
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <_sbrk+0x64>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <_sbrk+0x68>)
 8001a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d207      	bcs.n	8001ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa0:	f004 fbe4 	bl	800626c <__errno>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e009      	b.n	8001ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <_sbrk+0x64>)
 8001ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20010000 	.word	0x20010000
 8001ad0:	00000400 	.word	0x00000400
 8001ad4:	200009ec 	.word	0x200009ec
 8001ad8:	20000bc8 	.word	0x20000bc8

08001adc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <SystemInit+0x5c>)
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae6:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <SystemInit+0x5c>)
 8001ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <SystemInit+0x60>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a11      	ldr	r2, [pc, #68]	; (8001b3c <SystemInit+0x60>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <SystemInit+0x60>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <SystemInit+0x60>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <SystemInit+0x60>)
 8001b08:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b0c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <SystemInit+0x60>)
 8001b14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b18:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <SystemInit+0x60>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <SystemInit+0x60>)
 8001b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <SystemInit+0x60>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00
 8001b3c:	40021000 	.word	0x40021000

08001b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b44:	f7ff ffca 	bl	8001adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b4a:	e003      	b.n	8001b54 <LoopCopyDataInit>

08001b4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b52:	3104      	adds	r1, #4

08001b54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b54:	480a      	ldr	r0, [pc, #40]	; (8001b80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b5c:	d3f6      	bcc.n	8001b4c <CopyDataInit>
	ldr	r2, =_sbss
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b60:	e002      	b.n	8001b68 <LoopFillZerobss>

08001b62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b64:	f842 3b04 	str.w	r3, [r2], #4

08001b68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <LoopForever+0x16>)
	cmp	r2, r3
 8001b6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b6c:	d3f9      	bcc.n	8001b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f004 fb83 	bl	8006278 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b72:	f7ff f9e5 	bl	8000f40 <main>

08001b76 <LoopForever>:

LoopForever:
    b LoopForever
 8001b76:	e7fe      	b.n	8001b76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b78:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001b7c:	0800b118 	.word	0x0800b118
	ldr	r0, =_sdata
 8001b80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b84:	200009c8 	.word	0x200009c8
	ldr	r2, =_sbss
 8001b88:	200009c8 	.word	0x200009c8
	ldr	r3, = _ebss
 8001b8c:	20000bc4 	.word	0x20000bc4

08001b90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC1_IRQHandler>

08001b92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f001 facd 	bl	800313c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f000 f80e 	bl	8001bc4 <HAL_InitTick>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	71fb      	strb	r3, [r7, #7]
 8001bb2:	e001      	b.n	8001bb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bb4:	f7ff fd8e 	bl	80016d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bd0:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_InitTick+0x6c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d023      	beq.n	8001c20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <HAL_InitTick+0x70>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <HAL_InitTick+0x6c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f001 fad9 	bl	80031a6 <HAL_SYSTICK_Config>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10f      	bne.n	8001c1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b0f      	cmp	r3, #15
 8001bfe:	d809      	bhi.n	8001c14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c00:	2200      	movs	r2, #0
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f001 faa3 	bl	8003152 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <HAL_InitTick+0x74>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e007      	b.n	8001c24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e004      	b.n	8001c24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	e001      	b.n	8001c24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000018 	.word	0x20000018
 8001c34:	20000010 	.word	0x20000010
 8001c38:	20000014 	.word	0x20000014

08001c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_IncTick+0x20>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_IncTick+0x24>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <HAL_IncTick+0x24>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000018 	.word	0x20000018
 8001c60:	20000bb0 	.word	0x20000bb0

08001c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return uwTick;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HAL_GetTick+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000bb0 	.word	0x20000bb0

08001c7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	609a      	str	r2, [r3, #8]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	609a      	str	r2, [r3, #8]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3360      	adds	r3, #96	; 0x60
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <LL_ADC_SetOffset+0x44>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	4313      	orrs	r3, r2
 8001d14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d1c:	bf00      	nop
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	03fff000 	.word	0x03fff000

08001d2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3360      	adds	r3, #96	; 0x60
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3360      	adds	r3, #96	; 0x60
 8001d68:	461a      	mov	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d82:	bf00      	nop
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3330      	adds	r3, #48	; 0x30
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	4413      	add	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	211f      	movs	r1, #31
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	401a      	ands	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	0e9b      	lsrs	r3, r3, #26
 8001dec:	f003 011f 	and.w	r1, r3, #31
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	f003 031f 	and.w	r3, r3, #31
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e00:	bf00      	nop
 8001e02:	371c      	adds	r7, #28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3314      	adds	r3, #20
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	0e5b      	lsrs	r3, r3, #25
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	4413      	add	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	0d1b      	lsrs	r3, r3, #20
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	2107      	movs	r1, #7
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	401a      	ands	r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	0d1b      	lsrs	r3, r3, #20
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	431a      	orrs	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e56:	bf00      	nop
 8001e58:	371c      	adds	r7, #28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	401a      	ands	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0318 	and.w	r3, r3, #24
 8001e86:	4908      	ldr	r1, [pc, #32]	; (8001ea8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e88:	40d9      	lsrs	r1, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	400b      	ands	r3, r1
 8001e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e92:	431a      	orrs	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	0007ffff 	.word	0x0007ffff

08001eac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ebc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6093      	str	r3, [r2, #8]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ee4:	d101      	bne.n	8001eea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f34:	d101      	bne.n	8001f3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f5c:	f043 0201 	orr.w	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f84:	f043 0202 	orr.w	r2, r3, #2
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d101      	bne.n	8001fb0 <LL_ADC_IsEnabled+0x18>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <LL_ADC_IsEnabled+0x1a>
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d101      	bne.n	8001fd6 <LL_ADC_IsDisableOngoing+0x18>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <LL_ADC_IsDisableOngoing+0x1a>
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ff4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ff8:	f043 0204 	orr.w	r2, r3, #4
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b04      	cmp	r3, #4
 800201e:	d101      	bne.n	8002024 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b08      	cmp	r3, #8
 8002044:	d101      	bne.n	800204a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002064:	2300      	movs	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e12c      	b.n	80022cc <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207c:	2b00      	cmp	r3, #0
 800207e:	d109      	bne.n	8002094 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff fb4b 	bl	800171c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff19 	bl	8001ed0 <LL_ADC_IsDeepPowerDownEnabled>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d004      	beq.n	80020ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff feff 	bl	8001eac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ff34 	bl	8001f20 <LL_ADC_IsInternalRegulatorEnabled>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d115      	bne.n	80020ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ff18 	bl	8001ef8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020c8:	4b82      	ldr	r3, [pc, #520]	; (80022d4 <HAL_ADC_Init+0x27c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	099b      	lsrs	r3, r3, #6
 80020ce:	4a82      	ldr	r2, [pc, #520]	; (80022d8 <HAL_ADC_Init+0x280>)
 80020d0:	fba2 2303 	umull	r2, r3, r2, r3
 80020d4:	099b      	lsrs	r3, r3, #6
 80020d6:	3301      	adds	r3, #1
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020dc:	e002      	b.n	80020e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f9      	bne.n	80020de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff16 	bl	8001f20 <LL_ADC_IsInternalRegulatorEnabled>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10d      	bne.n	8002116 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fe:	f043 0210 	orr.w	r2, r3, #16
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	f043 0201 	orr.w	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff ff76 	bl	800200c <LL_ADC_REG_IsConversionOngoing>
 8002120:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 80c5 	bne.w	80022ba <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f040 80c1 	bne.w	80022ba <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002140:	f043 0202 	orr.w	r2, r3, #2
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff23 	bl	8001f98 <LL_ADC_IsEnabled>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10b      	bne.n	8002170 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002158:	4860      	ldr	r0, [pc, #384]	; (80022dc <HAL_ADC_Init+0x284>)
 800215a:	f7ff ff1d 	bl	8001f98 <LL_ADC_IsEnabled>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d105      	bne.n	8002170 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4619      	mov	r1, r3
 800216a:	485d      	ldr	r0, [pc, #372]	; (80022e0 <HAL_ADC_Init+0x288>)
 800216c:	f7ff fd86 	bl	8001c7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7e5b      	ldrb	r3, [r3, #25]
 8002174:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800217a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002180:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002186:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800218e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d106      	bne.n	80021ac <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	3b01      	subs	r3, #1
 80021a4:	045b      	lsls	r3, r3, #17
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d009      	beq.n	80021c8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	4b45      	ldr	r3, [pc, #276]	; (80022e4 <HAL_ADC_Init+0x28c>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	69b9      	ldr	r1, [r7, #24]
 80021d8:	430b      	orrs	r3, r1
 80021da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff13 	bl	800200c <LL_ADC_REG_IsConversionOngoing>
 80021e6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff20 	bl	8002032 <LL_ADC_INJ_IsConversionOngoing>
 80021f2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d13d      	bne.n	8002276 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d13a      	bne.n	8002276 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002204:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800220c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800221c:	f023 0302 	bic.w	r3, r3, #2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	69b9      	ldr	r1, [r7, #24]
 8002226:	430b      	orrs	r3, r1
 8002228:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002230:	2b01      	cmp	r3, #1
 8002232:	d118      	bne.n	8002266 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800223e:	f023 0304 	bic.w	r3, r3, #4
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800224a:	4311      	orrs	r1, r2
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002250:	4311      	orrs	r1, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002256:	430a      	orrs	r2, r1
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	611a      	str	r2, [r3, #16]
 8002264:	e007      	b.n	8002276 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0201 	bic.w	r2, r2, #1
 8002274:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d10c      	bne.n	8002298 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	f023 010f 	bic.w	r1, r3, #15
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	1e5a      	subs	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	631a      	str	r2, [r3, #48]	; 0x30
 8002296:	e007      	b.n	80022a8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 020f 	bic.w	r2, r2, #15
 80022a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	f023 0303 	bic.w	r3, r3, #3
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
 80022b8:	e007      	b.n	80022ca <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	f043 0210 	orr.w	r2, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3720      	adds	r7, #32
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000010 	.word	0x20000010
 80022d8:	053e2d63 	.word	0x053e2d63
 80022dc:	50040000 	.word	0x50040000
 80022e0:	50040300 	.word	0x50040300
 80022e4:	fff0c007 	.word	0xfff0c007

080022e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fe87 	bl	800200c <LL_ADC_REG_IsConversionOngoing>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d167      	bne.n	80023d4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_ADC_Start_DMA+0x2a>
 800230e:	2302      	movs	r3, #2
 8002310:	e063      	b.n	80023da <HAL_ADC_Start_DMA+0xf2>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 fc5c 	bl	8002bd8 <ADC_Enable>
 8002320:	4603      	mov	r3, r0
 8002322:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d14f      	bne.n	80023ca <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002332:	f023 0301 	bic.w	r3, r3, #1
 8002336:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d006      	beq.n	8002358 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	f023 0206 	bic.w	r2, r3, #6
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	659a      	str	r2, [r3, #88]	; 0x58
 8002356:	e002      	b.n	800235e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	4a20      	ldr	r2, [pc, #128]	; (80023e4 <HAL_ADC_Start_DMA+0xfc>)
 8002364:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	4a1f      	ldr	r2, [pc, #124]	; (80023e8 <HAL_ADC_Start_DMA+0x100>)
 800236c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	4a1e      	ldr	r2, [pc, #120]	; (80023ec <HAL_ADC_Start_DMA+0x104>)
 8002374:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	221c      	movs	r2, #28
 800237c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0210 	orr.w	r2, r2, #16
 8002394:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	3340      	adds	r3, #64	; 0x40
 80023b0:	4619      	mov	r1, r3
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f000 ffbb 	bl	8003330 <HAL_DMA_Start_IT>
 80023ba:	4603      	mov	r3, r0
 80023bc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fe0e 	bl	8001fe4 <LL_ADC_REG_StartConversion>
 80023c8:	e006      	b.n	80023d8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80023d2:	e001      	b.n	80023d8 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023d4:	2302      	movs	r3, #2
 80023d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	08002d5b 	.word	0x08002d5b
 80023e8:	08002e33 	.word	0x08002e33
 80023ec:	08002e4f 	.word	0x08002e4f

080023f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b0b6      	sub	sp, #216	; 0xd8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_ADC_ConfigChannel+0x22>
 8002436:	2302      	movs	r3, #2
 8002438:	e3b9      	b.n	8002bae <HAL_ADC_ConfigChannel+0x796>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fde0 	bl	800200c <LL_ADC_REG_IsConversionOngoing>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	f040 839e 	bne.w	8002b90 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b05      	cmp	r3, #5
 800245a:	d824      	bhi.n	80024a6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	3b02      	subs	r3, #2
 8002462:	2b03      	cmp	r3, #3
 8002464:	d81b      	bhi.n	800249e <HAL_ADC_ConfigChannel+0x86>
 8002466:	a201      	add	r2, pc, #4	; (adr r2, 800246c <HAL_ADC_ConfigChannel+0x54>)
 8002468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246c:	0800247d 	.word	0x0800247d
 8002470:	08002485 	.word	0x08002485
 8002474:	0800248d 	.word	0x0800248d
 8002478:	08002495 	.word	0x08002495
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	220c      	movs	r2, #12
 8002480:	605a      	str	r2, [r3, #4]
          break;
 8002482:	e011      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2212      	movs	r2, #18
 8002488:	605a      	str	r2, [r3, #4]
          break;
 800248a:	e00d      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	2218      	movs	r2, #24
 8002490:	605a      	str	r2, [r3, #4]
          break;
 8002492:	e009      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800249a:	605a      	str	r2, [r3, #4]
          break;
 800249c:	e004      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2206      	movs	r2, #6
 80024a2:	605a      	str	r2, [r3, #4]
          break;
 80024a4:	e000      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80024a6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	f7ff fc7d 	bl	8001db4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fda4 	bl	800200c <LL_ADC_REG_IsConversionOngoing>
 80024c4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fdb0 	bl	8002032 <LL_ADC_INJ_IsConversionOngoing>
 80024d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 81a6 	bne.w	800282c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f040 81a1 	bne.w	800282c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6819      	ldr	r1, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	461a      	mov	r2, r3
 80024f8:	f7ff fc88 	bl	8001e0c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	695a      	ldr	r2, [r3, #20]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	08db      	lsrs	r3, r3, #3
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b04      	cmp	r3, #4
 800251c:	d00a      	beq.n	8002534 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6919      	ldr	r1, [r3, #16]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800252e:	f7ff fbd9 	bl	8001ce4 <LL_ADC_SetOffset>
 8002532:	e17b      	b.n	800282c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fbf6 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002540:	4603      	mov	r3, r0
 8002542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10a      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x148>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fbeb 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002556:	4603      	mov	r3, r0
 8002558:	0e9b      	lsrs	r3, r3, #26
 800255a:	f003 021f 	and.w	r2, r3, #31
 800255e:	e01e      	b.n	800259e <HAL_ADC_ConfigChannel+0x186>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2100      	movs	r1, #0
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fbe0 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 800256c:	4603      	mov	r3, r0
 800256e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800257e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002582:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002586:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800258e:	2320      	movs	r3, #32
 8002590:	e004      	b.n	800259c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002592:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d105      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x19e>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	0e9b      	lsrs	r3, r3, #26
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	e018      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x1d0>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80025ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80025d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80025da:	2320      	movs	r3, #32
 80025dc:	e004      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80025de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d106      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2200      	movs	r2, #0
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fbaf 	bl	8001d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2101      	movs	r1, #1
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fb93 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002606:	4603      	mov	r3, r0
 8002608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10a      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x20e>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2101      	movs	r1, #1
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fb88 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 800261c:	4603      	mov	r3, r0
 800261e:	0e9b      	lsrs	r3, r3, #26
 8002620:	f003 021f 	and.w	r2, r3, #31
 8002624:	e01e      	b.n	8002664 <HAL_ADC_ConfigChannel+0x24c>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2101      	movs	r1, #1
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fb7d 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002632:	4603      	mov	r3, r0
 8002634:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002644:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800264c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002654:	2320      	movs	r3, #32
 8002656:	e004      	b.n	8002662 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002658:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800265c:	fab3 f383 	clz	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266c:	2b00      	cmp	r3, #0
 800266e:	d105      	bne.n	800267c <HAL_ADC_ConfigChannel+0x264>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0e9b      	lsrs	r3, r3, #26
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	e018      	b.n	80026ae <HAL_ADC_ConfigChannel+0x296>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002690:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002694:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002698:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80026a0:	2320      	movs	r3, #32
 80026a2:	e004      	b.n	80026ae <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80026a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d106      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2200      	movs	r2, #0
 80026b8:	2101      	movs	r1, #1
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fb4c 	bl	8001d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2102      	movs	r1, #2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fb30 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10a      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x2d4>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2102      	movs	r1, #2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fb25 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 80026e2:	4603      	mov	r3, r0
 80026e4:	0e9b      	lsrs	r3, r3, #26
 80026e6:	f003 021f 	and.w	r2, r3, #31
 80026ea:	e01e      	b.n	800272a <HAL_ADC_ConfigChannel+0x312>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2102      	movs	r1, #2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fb1a 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800270a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800270e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002712:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800271a:	2320      	movs	r3, #32
 800271c:	e004      	b.n	8002728 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800271e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002732:	2b00      	cmp	r3, #0
 8002734:	d105      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x32a>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	0e9b      	lsrs	r3, r3, #26
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	e016      	b.n	8002770 <HAL_ADC_ConfigChannel+0x358>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002754:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800275a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002762:	2320      	movs	r3, #32
 8002764:	e004      	b.n	8002770 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002766:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800276a:	fab3 f383 	clz	r3, r3
 800276e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002770:	429a      	cmp	r2, r3
 8002772:	d106      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2200      	movs	r2, #0
 800277a:	2102      	movs	r1, #2
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff faeb 	bl	8001d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2103      	movs	r1, #3
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff facf 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10a      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x396>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2103      	movs	r1, #3
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fac4 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	0e9b      	lsrs	r3, r3, #26
 80027a8:	f003 021f 	and.w	r2, r3, #31
 80027ac:	e017      	b.n	80027de <HAL_ADC_ConfigChannel+0x3c6>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2103      	movs	r1, #3
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fab9 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 80027ba:	4603      	mov	r3, r0
 80027bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80027c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027c8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80027ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80027d0:	2320      	movs	r3, #32
 80027d2:	e003      	b.n	80027dc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80027d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d105      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x3de>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	0e9b      	lsrs	r3, r3, #26
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	e011      	b.n	800281a <HAL_ADC_ConfigChannel+0x402>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002806:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800280e:	2320      	movs	r3, #32
 8002810:	e003      	b.n	800281a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002814:	fab3 f383 	clz	r3, r3
 8002818:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800281a:	429a      	cmp	r2, r3
 800281c:	d106      	bne.n	800282c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2200      	movs	r2, #0
 8002824:	2103      	movs	r1, #3
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fa96 	bl	8001d58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fbb1 	bl	8001f98 <LL_ADC_IsEnabled>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	f040 813f 	bne.w	8002abc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6819      	ldr	r1, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	461a      	mov	r2, r3
 800284c:	f7ff fb0a 	bl	8001e64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4a8e      	ldr	r2, [pc, #568]	; (8002a90 <HAL_ADC_ConfigChannel+0x678>)
 8002856:	4293      	cmp	r3, r2
 8002858:	f040 8130 	bne.w	8002abc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10b      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x46c>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0e9b      	lsrs	r3, r3, #26
 8002872:	3301      	adds	r3, #1
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	2b09      	cmp	r3, #9
 800287a:	bf94      	ite	ls
 800287c:	2301      	movls	r3, #1
 800287e:	2300      	movhi	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	e019      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x4a0>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002894:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800289c:	2320      	movs	r3, #32
 800289e:	e003      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80028a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	3301      	adds	r3, #1
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	2b09      	cmp	r3, #9
 80028b0:	bf94      	ite	ls
 80028b2:	2301      	movls	r3, #1
 80028b4:	2300      	movhi	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d079      	beq.n	80029b0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d107      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x4c0>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	0e9b      	lsrs	r3, r3, #26
 80028ce:	3301      	adds	r3, #1
 80028d0:	069b      	lsls	r3, r3, #26
 80028d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028d6:	e015      	b.n	8002904 <HAL_ADC_ConfigChannel+0x4ec>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80028ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80028f0:	2320      	movs	r3, #32
 80028f2:	e003      	b.n	80028fc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80028f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	3301      	adds	r3, #1
 80028fe:	069b      	lsls	r3, r3, #26
 8002900:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290c:	2b00      	cmp	r3, #0
 800290e:	d109      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x50c>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	0e9b      	lsrs	r3, r3, #26
 8002916:	3301      	adds	r3, #1
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	2101      	movs	r1, #1
 800291e:	fa01 f303 	lsl.w	r3, r1, r3
 8002922:	e017      	b.n	8002954 <HAL_ADC_ConfigChannel+0x53c>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002934:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800293c:	2320      	movs	r3, #32
 800293e:	e003      	b.n	8002948 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	3301      	adds	r3, #1
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	2101      	movs	r1, #1
 8002950:	fa01 f303 	lsl.w	r3, r1, r3
 8002954:	ea42 0103 	orr.w	r1, r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10a      	bne.n	800297a <HAL_ADC_ConfigChannel+0x562>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	3301      	adds	r3, #1
 800296c:	f003 021f 	and.w	r2, r3, #31
 8002970:	4613      	mov	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	051b      	lsls	r3, r3, #20
 8002978:	e018      	b.n	80029ac <HAL_ADC_ConfigChannel+0x594>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800298c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002992:	2320      	movs	r3, #32
 8002994:	e003      	b.n	800299e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002998:	fab3 f383 	clz	r3, r3
 800299c:	b2db      	uxtb	r3, r3
 800299e:	3301      	adds	r3, #1
 80029a0:	f003 021f 	and.w	r2, r3, #31
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ac:	430b      	orrs	r3, r1
 80029ae:	e080      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d107      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x5b4>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	0e9b      	lsrs	r3, r3, #26
 80029c2:	3301      	adds	r3, #1
 80029c4:	069b      	lsls	r3, r3, #26
 80029c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ca:	e015      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x5e0>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80029da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029dc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80029e4:	2320      	movs	r3, #32
 80029e6:	e003      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80029e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	069b      	lsls	r3, r3, #26
 80029f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d109      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x600>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	0e9b      	lsrs	r3, r3, #26
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	2101      	movs	r1, #1
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	e017      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x630>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	61fb      	str	r3, [r7, #28]
  return result;
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002a30:	2320      	movs	r3, #32
 8002a32:	e003      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	2101      	movs	r1, #1
 8002a44:	fa01 f303 	lsl.w	r3, r1, r3
 8002a48:	ea42 0103 	orr.w	r1, r2, r3
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10d      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x65c>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	0e9b      	lsrs	r3, r3, #26
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	3b1e      	subs	r3, #30
 8002a6c:	051b      	lsls	r3, r3, #20
 8002a6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a72:	e01d      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x698>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	613b      	str	r3, [r7, #16]
  return result;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d103      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002a8c:	2320      	movs	r3, #32
 8002a8e:	e005      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x684>
 8002a90:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f003 021f 	and.w	r2, r3, #31
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3b1e      	subs	r3, #30
 8002aaa:	051b      	lsls	r3, r3, #20
 8002aac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	6892      	ldr	r2, [r2, #8]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7ff f9a8 	bl	8001e0c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b3d      	ldr	r3, [pc, #244]	; (8002bb8 <HAL_ADC_ConfigChannel+0x7a0>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d06c      	beq.n	8002ba2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ac8:	483c      	ldr	r0, [pc, #240]	; (8002bbc <HAL_ADC_ConfigChannel+0x7a4>)
 8002aca:	f7ff f8fd 	bl	8001cc8 <LL_ADC_GetCommonPathInternalCh>
 8002ace:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a3a      	ldr	r2, [pc, #232]	; (8002bc0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d127      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002adc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d121      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a35      	ldr	r2, [pc, #212]	; (8002bc4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d157      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002af2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002af6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002afa:	4619      	mov	r1, r3
 8002afc:	482f      	ldr	r0, [pc, #188]	; (8002bbc <HAL_ADC_ConfigChannel+0x7a4>)
 8002afe:	f7ff f8d0 	bl	8001ca2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b02:	4b31      	ldr	r3, [pc, #196]	; (8002bc8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	099b      	lsrs	r3, r3, #6
 8002b08:	4a30      	ldr	r2, [pc, #192]	; (8002bcc <HAL_ADC_ConfigChannel+0x7b4>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	099b      	lsrs	r3, r3, #6
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b1c:	e002      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f9      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b2a:	e03a      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a27      	ldr	r2, [pc, #156]	; (8002bd0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d113      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x746>
 8002b36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10d      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1f      	ldr	r2, [pc, #124]	; (8002bc4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d12a      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b54:	4619      	mov	r1, r3
 8002b56:	4819      	ldr	r0, [pc, #100]	; (8002bbc <HAL_ADC_ConfigChannel+0x7a4>)
 8002b58:	f7ff f8a3 	bl	8001ca2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b5c:	e021      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d11c      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d116      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d111      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b86:	4619      	mov	r1, r3
 8002b88:	480c      	ldr	r0, [pc, #48]	; (8002bbc <HAL_ADC_ConfigChannel+0x7a4>)
 8002b8a:	f7ff f88a 	bl	8001ca2 <LL_ADC_SetCommonPathInternalCh>
 8002b8e:	e008      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002baa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	37d8      	adds	r7, #216	; 0xd8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	80080000 	.word	0x80080000
 8002bbc:	50040300 	.word	0x50040300
 8002bc0:	c7520000 	.word	0xc7520000
 8002bc4:	50040000 	.word	0x50040000
 8002bc8:	20000010 	.word	0x20000010
 8002bcc:	053e2d63 	.word	0x053e2d63
 8002bd0:	cb840000 	.word	0xcb840000
 8002bd4:	80000001 	.word	0x80000001

08002bd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff f9d7 	bl	8001f98 <LL_ADC_IsEnabled>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d14d      	bne.n	8002c8c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <ADC_Enable+0xc0>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00d      	beq.n	8002c1a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c02:	f043 0210 	orr.w	r2, r3, #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0e:	f043 0201 	orr.w	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e039      	b.n	8002c8e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff f992 	bl	8001f48 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c24:	f7ff f81e 	bl	8001c64 <HAL_GetTick>
 8002c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c2a:	e028      	b.n	8002c7e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff f9b1 	bl	8001f98 <LL_ADC_IsEnabled>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d104      	bne.n	8002c46 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff f981 	bl	8001f48 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c46:	f7ff f80d 	bl	8001c64 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d914      	bls.n	8002c7e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d00d      	beq.n	8002c7e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c66:	f043 0210 	orr.w	r2, r3, #16
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c72:	f043 0201 	orr.w	r2, r3, #1
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e007      	b.n	8002c8e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d1cf      	bne.n	8002c2c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	8000003f 	.word	0x8000003f

08002c9c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff f988 	bl	8001fbe <LL_ADC_IsDisableOngoing>
 8002cae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff f96f 	bl	8001f98 <LL_ADC_IsEnabled>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d047      	beq.n	8002d50 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d144      	bne.n	8002d50 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 030d 	and.w	r3, r3, #13
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d10c      	bne.n	8002cee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff f949 	bl	8001f70 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ce6:	f7fe ffbd 	bl	8001c64 <HAL_GetTick>
 8002cea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cec:	e029      	b.n	8002d42 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf2:	f043 0210 	orr.w	r2, r3, #16
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	f043 0201 	orr.w	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e023      	b.n	8002d52 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d0a:	f7fe ffab 	bl	8001c64 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d914      	bls.n	8002d42 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00d      	beq.n	8002d42 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2a:	f043 0210 	orr.w	r2, r3, #16
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d36:	f043 0201 	orr.w	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e007      	b.n	8002d52 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1dc      	bne.n	8002d0a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d14b      	bne.n	8002e0c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d021      	beq.n	8002dd2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe fffb 	bl	8001d8e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d032      	beq.n	8002e04 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d12b      	bne.n	8002e04 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d11f      	bne.n	8002e04 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc8:	f043 0201 	orr.w	r2, r3, #1
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	655a      	str	r2, [r3, #84]	; 0x54
 8002dd0:	e018      	b.n	8002e04 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d111      	bne.n	8002e04 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d105      	bne.n	8002e04 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	f043 0201 	orr.w	r2, r3, #1
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f7fe fba1 	bl	800154c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e0a:	e00e      	b.n	8002e2a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7ff faf3 	bl	8002404 <HAL_ADC_ErrorCallback>
}
 8002e1e:	e004      	b.n	8002e2a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4798      	blx	r3
}
 8002e2a:	bf00      	nop
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7ff fad5 	bl	80023f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e46:	bf00      	nop
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6c:	f043 0204 	orr.w	r2, r3, #4
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f7ff fac5 	bl	8002404 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <LL_ADC_StartCalibration>:
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002e94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_ADC_IsCalibrationOnGoing>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ec8:	d101      	bne.n	8002ece <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_ADCEx_Calibration_Start+0x1c>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e04d      	b.n	8002f94 <HAL_ADCEx_Calibration_Start+0xb8>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff fecb 	bl	8002c9c <ADC_Disable>
 8002f06:	4603      	mov	r3, r0
 8002f08:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d136      	bne.n	8002f7e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f18:	f023 0302 	bic.w	r3, r3, #2
 8002f1c:	f043 0202 	orr.w	r2, r3, #2
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6839      	ldr	r1, [r7, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff ffa9 	bl	8002e82 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f30:	e014      	b.n	8002f5c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	3301      	adds	r3, #1
 8002f36:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002f3e:	d30d      	bcc.n	8002f5c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f44:	f023 0312 	bic.w	r3, r3, #18
 8002f48:	f043 0210 	orr.w	r2, r3, #16
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e01b      	b.n	8002f94 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ffa7 	bl	8002eb4 <LL_ADC_IsCalibrationOnGoing>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e2      	bne.n	8002f32 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f70:	f023 0303 	bic.w	r3, r3, #3
 8002f74:	f043 0201 	orr.w	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54
 8002f7c:	e005      	b.n	8002f8a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f82:	f043 0210 	orr.w	r2, r3, #16
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fac:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fb8:	4013      	ands	r3, r2
 8002fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fce:	4a04      	ldr	r2, [pc, #16]	; (8002fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	60d3      	str	r3, [r2, #12]
}
 8002fd4:	bf00      	nop
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <__NVIC_GetPriorityGrouping+0x18>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	0a1b      	lsrs	r3, r3, #8
 8002fee:	f003 0307 	and.w	r3, r3, #7
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	2b00      	cmp	r3, #0
 8003010:	db0b      	blt.n	800302a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	f003 021f 	and.w	r2, r3, #31
 8003018:	4907      	ldr	r1, [pc, #28]	; (8003038 <__NVIC_EnableIRQ+0x38>)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	2001      	movs	r0, #1
 8003022:	fa00 f202 	lsl.w	r2, r0, r2
 8003026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000e100 	.word	0xe000e100

0800303c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304c:	2b00      	cmp	r3, #0
 800304e:	db0a      	blt.n	8003066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	490c      	ldr	r1, [pc, #48]	; (8003088 <__NVIC_SetPriority+0x4c>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	0112      	lsls	r2, r2, #4
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	440b      	add	r3, r1
 8003060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003064:	e00a      	b.n	800307c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	4908      	ldr	r1, [pc, #32]	; (800308c <__NVIC_SetPriority+0x50>)
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	3b04      	subs	r3, #4
 8003074:	0112      	lsls	r2, r2, #4
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	440b      	add	r3, r1
 800307a:	761a      	strb	r2, [r3, #24]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	e000e100 	.word	0xe000e100
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003090:	b480      	push	{r7}
 8003092:	b089      	sub	sp, #36	; 0x24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f1c3 0307 	rsb	r3, r3, #7
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	bf28      	it	cs
 80030ae:	2304      	movcs	r3, #4
 80030b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3304      	adds	r3, #4
 80030b6:	2b06      	cmp	r3, #6
 80030b8:	d902      	bls.n	80030c0 <NVIC_EncodePriority+0x30>
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3b03      	subs	r3, #3
 80030be:	e000      	b.n	80030c2 <NVIC_EncodePriority+0x32>
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	f04f 32ff 	mov.w	r2, #4294967295
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43da      	mvns	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	401a      	ands	r2, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d8:	f04f 31ff 	mov.w	r1, #4294967295
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	fa01 f303 	lsl.w	r3, r1, r3
 80030e2:	43d9      	mvns	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e8:	4313      	orrs	r3, r2
         );
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3724      	adds	r7, #36	; 0x24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003108:	d301      	bcc.n	800310e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800310a:	2301      	movs	r3, #1
 800310c:	e00f      	b.n	800312e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800310e:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <SysTick_Config+0x40>)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3b01      	subs	r3, #1
 8003114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003116:	210f      	movs	r1, #15
 8003118:	f04f 30ff 	mov.w	r0, #4294967295
 800311c:	f7ff ff8e 	bl	800303c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <SysTick_Config+0x40>)
 8003122:	2200      	movs	r2, #0
 8003124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003126:	4b04      	ldr	r3, [pc, #16]	; (8003138 <SysTick_Config+0x40>)
 8003128:	2207      	movs	r2, #7
 800312a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	e000e010 	.word	0xe000e010

0800313c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ff29 	bl	8002f9c <__NVIC_SetPriorityGrouping>
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b086      	sub	sp, #24
 8003156:	af00      	add	r7, sp, #0
 8003158:	4603      	mov	r3, r0
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003164:	f7ff ff3e 	bl	8002fe4 <__NVIC_GetPriorityGrouping>
 8003168:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	6978      	ldr	r0, [r7, #20]
 8003170:	f7ff ff8e 	bl	8003090 <NVIC_EncodePriority>
 8003174:	4602      	mov	r2, r0
 8003176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff5d 	bl	800303c <__NVIC_SetPriority>
}
 8003182:	bf00      	nop
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	4603      	mov	r3, r0
 8003192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff31 	bl	8003000 <__NVIC_EnableIRQ>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff ffa2 	bl	80030f8 <SysTick_Config>
 80031b4:	4603      	mov	r3, r0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e098      	b.n	8003304 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b4d      	ldr	r3, [pc, #308]	; (8003310 <HAL_DMA_Init+0x150>)
 80031da:	429a      	cmp	r2, r3
 80031dc:	d80f      	bhi.n	80031fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	4b4b      	ldr	r3, [pc, #300]	; (8003314 <HAL_DMA_Init+0x154>)
 80031e6:	4413      	add	r3, r2
 80031e8:	4a4b      	ldr	r2, [pc, #300]	; (8003318 <HAL_DMA_Init+0x158>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	009a      	lsls	r2, r3, #2
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a48      	ldr	r2, [pc, #288]	; (800331c <HAL_DMA_Init+0x15c>)
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40
 80031fc:	e00e      	b.n	800321c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	4b46      	ldr	r3, [pc, #280]	; (8003320 <HAL_DMA_Init+0x160>)
 8003206:	4413      	add	r3, r2
 8003208:	4a43      	ldr	r2, [pc, #268]	; (8003318 <HAL_DMA_Init+0x158>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	009a      	lsls	r2, r3, #2
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a42      	ldr	r2, [pc, #264]	; (8003324 <HAL_DMA_Init+0x164>)
 800321a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003236:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003240:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800324c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003258:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003276:	d039      	beq.n	80032ec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	4a27      	ldr	r2, [pc, #156]	; (800331c <HAL_DMA_Init+0x15c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d11a      	bne.n	80032b8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003282:	4b29      	ldr	r3, [pc, #164]	; (8003328 <HAL_DMA_Init+0x168>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	f003 031c 	and.w	r3, r3, #28
 800328e:	210f      	movs	r1, #15
 8003290:	fa01 f303 	lsl.w	r3, r1, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	4924      	ldr	r1, [pc, #144]	; (8003328 <HAL_DMA_Init+0x168>)
 8003298:	4013      	ands	r3, r2
 800329a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800329c:	4b22      	ldr	r3, [pc, #136]	; (8003328 <HAL_DMA_Init+0x168>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a8:	f003 031c 	and.w	r3, r3, #28
 80032ac:	fa01 f303 	lsl.w	r3, r1, r3
 80032b0:	491d      	ldr	r1, [pc, #116]	; (8003328 <HAL_DMA_Init+0x168>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]
 80032b6:	e019      	b.n	80032ec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80032b8:	4b1c      	ldr	r3, [pc, #112]	; (800332c <HAL_DMA_Init+0x16c>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c0:	f003 031c 	and.w	r3, r3, #28
 80032c4:	210f      	movs	r1, #15
 80032c6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	4917      	ldr	r1, [pc, #92]	; (800332c <HAL_DMA_Init+0x16c>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80032d2:	4b16      	ldr	r3, [pc, #88]	; (800332c <HAL_DMA_Init+0x16c>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6859      	ldr	r1, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	f003 031c 	and.w	r3, r3, #28
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	4911      	ldr	r1, [pc, #68]	; (800332c <HAL_DMA_Init+0x16c>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	40020407 	.word	0x40020407
 8003314:	bffdfff8 	.word	0xbffdfff8
 8003318:	cccccccd 	.word	0xcccccccd
 800331c:	40020000 	.word	0x40020000
 8003320:	bffdfbf8 	.word	0xbffdfbf8
 8003324:	40020400 	.word	0x40020400
 8003328:	400200a8 	.word	0x400200a8
 800332c:	400204a8 	.word	0x400204a8

08003330 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_DMA_Start_IT+0x20>
 800334c:	2302      	movs	r3, #2
 800334e:	e04b      	b.n	80033e8 <HAL_DMA_Start_IT+0xb8>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b01      	cmp	r3, #1
 8003362:	d13a      	bne.n	80033da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0201 	bic.w	r2, r2, #1
 8003380:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	68b9      	ldr	r1, [r7, #8]
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f8e0 	bl	800354e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 020e 	orr.w	r2, r2, #14
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e00f      	b.n	80033c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0204 	bic.w	r2, r2, #4
 80033b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 020a 	orr.w	r2, r2, #10
 80033c6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	e005      	b.n	80033e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
 80033e4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80033e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340c:	f003 031c 	and.w	r3, r3, #28
 8003410:	2204      	movs	r2, #4
 8003412:	409a      	lsls	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d026      	beq.n	800346a <HAL_DMA_IRQHandler+0x7a>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	d021      	beq.n	800346a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d107      	bne.n	8003444 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0204 	bic.w	r2, r2, #4
 8003442:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	f003 021c 	and.w	r2, r3, #28
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	2104      	movs	r1, #4
 8003452:	fa01 f202 	lsl.w	r2, r1, r2
 8003456:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	2b00      	cmp	r3, #0
 800345e:	d071      	beq.n	8003544 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003468:	e06c      	b.n	8003544 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	f003 031c 	and.w	r3, r3, #28
 8003472:	2202      	movs	r2, #2
 8003474:	409a      	lsls	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4013      	ands	r3, r2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d02e      	beq.n	80034dc <HAL_DMA_IRQHandler+0xec>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d029      	beq.n	80034dc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10b      	bne.n	80034ae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 020a 	bic.w	r2, r2, #10
 80034a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f003 021c 	and.w	r2, r3, #28
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2102      	movs	r1, #2
 80034bc:	fa01 f202 	lsl.w	r2, r1, r2
 80034c0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d038      	beq.n	8003544 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034da:	e033      	b.n	8003544 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e0:	f003 031c 	and.w	r3, r3, #28
 80034e4:	2208      	movs	r2, #8
 80034e6:	409a      	lsls	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d02a      	beq.n	8003546 <HAL_DMA_IRQHandler+0x156>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d025      	beq.n	8003546 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 020e 	bic.w	r2, r2, #14
 8003508:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	f003 021c 	and.w	r2, r3, #28
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	2101      	movs	r1, #1
 8003518:	fa01 f202 	lsl.w	r2, r1, r2
 800351c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003538:	2b00      	cmp	r3, #0
 800353a:	d004      	beq.n	8003546 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003544:	bf00      	nop
 8003546:	bf00      	nop
}
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800354e:	b480      	push	{r7}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	f003 021c 	and.w	r2, r3, #28
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	2101      	movs	r1, #1
 800356a:	fa01 f202 	lsl.w	r2, r1, r2
 800356e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b10      	cmp	r3, #16
 800357e:	d108      	bne.n	8003592 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003590:	e007      	b.n	80035a2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	60da      	str	r2, [r3, #12]
}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035be:	e148      	b.n	8003852 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	2101      	movs	r1, #1
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	fa01 f303 	lsl.w	r3, r1, r3
 80035cc:	4013      	ands	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 813a 	beq.w	800384c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d00b      	beq.n	80035f8 <HAL_GPIO_Init+0x48>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d007      	beq.n	80035f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035ec:	2b11      	cmp	r3, #17
 80035ee:	d003      	beq.n	80035f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b12      	cmp	r3, #18
 80035f6:	d130      	bne.n	800365a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	2203      	movs	r2, #3
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800362e:	2201      	movs	r2, #1
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4013      	ands	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	f003 0201 	and.w	r2, r3, #1
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	2203      	movs	r2, #3
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4013      	ands	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d003      	beq.n	800369a <HAL_GPIO_Init+0xea>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b12      	cmp	r3, #18
 8003698:	d123      	bne.n	80036e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	08da      	lsrs	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3208      	adds	r2, #8
 80036a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	220f      	movs	r2, #15
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	08da      	lsrs	r2, r3, #3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3208      	adds	r2, #8
 80036dc:	6939      	ldr	r1, [r7, #16]
 80036de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	2203      	movs	r2, #3
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f003 0203 	and.w	r2, r3, #3
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 8094 	beq.w	800384c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003724:	4b52      	ldr	r3, [pc, #328]	; (8003870 <HAL_GPIO_Init+0x2c0>)
 8003726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003728:	4a51      	ldr	r2, [pc, #324]	; (8003870 <HAL_GPIO_Init+0x2c0>)
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	6613      	str	r3, [r2, #96]	; 0x60
 8003730:	4b4f      	ldr	r3, [pc, #316]	; (8003870 <HAL_GPIO_Init+0x2c0>)
 8003732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800373c:	4a4d      	ldr	r2, [pc, #308]	; (8003874 <HAL_GPIO_Init+0x2c4>)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	089b      	lsrs	r3, r3, #2
 8003742:	3302      	adds	r3, #2
 8003744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003748:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	220f      	movs	r2, #15
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003766:	d00d      	beq.n	8003784 <HAL_GPIO_Init+0x1d4>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a43      	ldr	r2, [pc, #268]	; (8003878 <HAL_GPIO_Init+0x2c8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d007      	beq.n	8003780 <HAL_GPIO_Init+0x1d0>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a42      	ldr	r2, [pc, #264]	; (800387c <HAL_GPIO_Init+0x2cc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d101      	bne.n	800377c <HAL_GPIO_Init+0x1cc>
 8003778:	2302      	movs	r3, #2
 800377a:	e004      	b.n	8003786 <HAL_GPIO_Init+0x1d6>
 800377c:	2307      	movs	r3, #7
 800377e:	e002      	b.n	8003786 <HAL_GPIO_Init+0x1d6>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <HAL_GPIO_Init+0x1d6>
 8003784:	2300      	movs	r3, #0
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	f002 0203 	and.w	r2, r2, #3
 800378c:	0092      	lsls	r2, r2, #2
 800378e:	4093      	lsls	r3, r2
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003796:	4937      	ldr	r1, [pc, #220]	; (8003874 <HAL_GPIO_Init+0x2c4>)
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	089b      	lsrs	r3, r3, #2
 800379c:	3302      	adds	r3, #2
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80037a4:	4b36      	ldr	r3, [pc, #216]	; (8003880 <HAL_GPIO_Init+0x2d0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037c8:	4a2d      	ldr	r2, [pc, #180]	; (8003880 <HAL_GPIO_Init+0x2d0>)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80037ce:	4b2c      	ldr	r3, [pc, #176]	; (8003880 <HAL_GPIO_Init+0x2d0>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037f2:	4a23      	ldr	r2, [pc, #140]	; (8003880 <HAL_GPIO_Init+0x2d0>)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037f8:	4b21      	ldr	r3, [pc, #132]	; (8003880 <HAL_GPIO_Init+0x2d0>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	43db      	mvns	r3, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4013      	ands	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800381c:	4a18      	ldr	r2, [pc, #96]	; (8003880 <HAL_GPIO_Init+0x2d0>)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003822:	4b17      	ldr	r3, [pc, #92]	; (8003880 <HAL_GPIO_Init+0x2d0>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	43db      	mvns	r3, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003846:	4a0e      	ldr	r2, [pc, #56]	; (8003880 <HAL_GPIO_Init+0x2d0>)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	3301      	adds	r3, #1
 8003850:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	f47f aeaf 	bne.w	80035c0 <HAL_GPIO_Init+0x10>
  }
}
 8003862:	bf00      	nop
 8003864:	bf00      	nop
 8003866:	371c      	adds	r7, #28
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	40021000 	.word	0x40021000
 8003874:	40010000 	.word	0x40010000
 8003878:	48000400 	.word	0x48000400
 800387c:	48000800 	.word	0x48000800
 8003880:	40010400 	.word	0x40010400

08003884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	807b      	strh	r3, [r7, #2]
 8003890:	4613      	mov	r3, r2
 8003892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003894:	787b      	ldrb	r3, [r7, #1]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800389a:	887a      	ldrh	r2, [r7, #2]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038a0:	e002      	b.n	80038a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038a2:	887a      	ldrh	r2, [r7, #2]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a04      	ldr	r2, [pc, #16]	; (80038d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c2:	6013      	str	r3, [r2, #0]
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40007000 	.word	0x40007000

080038d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038d8:	4b04      	ldr	r3, [pc, #16]	; (80038ec <HAL_PWREx_GetVoltageRange+0x18>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40007000 	.word	0x40007000

080038f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038fe:	d130      	bne.n	8003962 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003900:	4b23      	ldr	r3, [pc, #140]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800390c:	d038      	beq.n	8003980 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800390e:	4b20      	ldr	r3, [pc, #128]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003916:	4a1e      	ldr	r2, [pc, #120]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003918:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800391c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800391e:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2232      	movs	r2, #50	; 0x32
 8003924:	fb02 f303 	mul.w	r3, r2, r3
 8003928:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	0c9b      	lsrs	r3, r3, #18
 8003930:	3301      	adds	r3, #1
 8003932:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003934:	e002      	b.n	800393c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3b01      	subs	r3, #1
 800393a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800393c:	4b14      	ldr	r3, [pc, #80]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003948:	d102      	bne.n	8003950 <HAL_PWREx_ControlVoltageScaling+0x60>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f2      	bne.n	8003936 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003950:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395c:	d110      	bne.n	8003980 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e00f      	b.n	8003982 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800396a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396e:	d007      	beq.n	8003980 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003970:	4b07      	ldr	r3, [pc, #28]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003978:	4a05      	ldr	r2, [pc, #20]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800397a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800397e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40007000 	.word	0x40007000
 8003994:	20000010 	.word	0x20000010
 8003998:	431bde83 	.word	0x431bde83

0800399c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d102      	bne.n	80039b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f000 bc11 	b.w	80041d2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039b0:	4ba0      	ldr	r3, [pc, #640]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 030c 	and.w	r3, r3, #12
 80039b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039ba:	4b9e      	ldr	r3, [pc, #632]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80e4 	beq.w	8003b9a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d007      	beq.n	80039e8 <HAL_RCC_OscConfig+0x4c>
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2b0c      	cmp	r3, #12
 80039dc:	f040 808b 	bne.w	8003af6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	f040 8087 	bne.w	8003af6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039e8:	4b92      	ldr	r3, [pc, #584]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_OscConfig+0x64>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e3e8      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1a      	ldr	r2, [r3, #32]
 8003a04:	4b8b      	ldr	r3, [pc, #556]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d004      	beq.n	8003a1a <HAL_RCC_OscConfig+0x7e>
 8003a10:	4b88      	ldr	r3, [pc, #544]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a18:	e005      	b.n	8003a26 <HAL_RCC_OscConfig+0x8a>
 8003a1a:	4b86      	ldr	r3, [pc, #536]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d223      	bcs.n	8003a72 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fd7a 	bl	8004528 <RCC_SetFlashLatencyFromMSIRange>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e3c9      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a3e:	4b7d      	ldr	r3, [pc, #500]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a7c      	ldr	r2, [pc, #496]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003a44:	f043 0308 	orr.w	r3, r3, #8
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b7a      	ldr	r3, [pc, #488]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	4977      	ldr	r1, [pc, #476]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a5c:	4b75      	ldr	r3, [pc, #468]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	4972      	ldr	r1, [pc, #456]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
 8003a70:	e025      	b.n	8003abe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a72:	4b70      	ldr	r3, [pc, #448]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a6f      	ldr	r2, [pc, #444]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003a78:	f043 0308 	orr.w	r3, r3, #8
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	4b6d      	ldr	r3, [pc, #436]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	496a      	ldr	r1, [pc, #424]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a90:	4b68      	ldr	r3, [pc, #416]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	021b      	lsls	r3, r3, #8
 8003a9e:	4965      	ldr	r1, [pc, #404]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fd3a 	bl	8004528 <RCC_SetFlashLatencyFromMSIRange>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e389      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003abe:	f000 fc6f 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	4b5b      	ldr	r3, [pc, #364]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	091b      	lsrs	r3, r3, #4
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	495a      	ldr	r1, [pc, #360]	; (8003c38 <HAL_RCC_OscConfig+0x29c>)
 8003ad0:	5ccb      	ldrb	r3, [r1, r3]
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ada:	4a58      	ldr	r2, [pc, #352]	; (8003c3c <HAL_RCC_OscConfig+0x2a0>)
 8003adc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ade:	4b58      	ldr	r3, [pc, #352]	; (8003c40 <HAL_RCC_OscConfig+0x2a4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe f86e 	bl	8001bc4 <HAL_InitTick>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d052      	beq.n	8003b98 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	e36d      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d032      	beq.n	8003b64 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003afe:	4b4d      	ldr	r3, [pc, #308]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a4c      	ldr	r2, [pc, #304]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b0a:	f7fe f8ab 	bl	8001c64 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b12:	f7fe f8a7 	bl	8001c64 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e356      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b24:	4b43      	ldr	r3, [pc, #268]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b30:	4b40      	ldr	r3, [pc, #256]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a3f      	ldr	r2, [pc, #252]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003b36:	f043 0308 	orr.w	r3, r3, #8
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	4b3d      	ldr	r3, [pc, #244]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	493a      	ldr	r1, [pc, #232]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b4e:	4b39      	ldr	r3, [pc, #228]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	021b      	lsls	r3, r3, #8
 8003b5c:	4935      	ldr	r1, [pc, #212]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	604b      	str	r3, [r1, #4]
 8003b62:	e01a      	b.n	8003b9a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b64:	4b33      	ldr	r3, [pc, #204]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a32      	ldr	r2, [pc, #200]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b70:	f7fe f878 	bl	8001c64 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b78:	f7fe f874 	bl	8001c64 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e323      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b8a:	4b2a      	ldr	r3, [pc, #168]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x1dc>
 8003b96:	e000      	b.n	8003b9a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d073      	beq.n	8003c8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d005      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x21c>
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b0c      	cmp	r3, #12
 8003bb0:	d10e      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d10b      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	4b1e      	ldr	r3, [pc, #120]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d063      	beq.n	8003c8c <HAL_RCC_OscConfig+0x2f0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d15f      	bne.n	8003c8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e300      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd8:	d106      	bne.n	8003be8 <HAL_RCC_OscConfig+0x24c>
 8003bda:	4b16      	ldr	r3, [pc, #88]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e01d      	b.n	8003c24 <HAL_RCC_OscConfig+0x288>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x270>
 8003bf2:	4b10      	ldr	r3, [pc, #64]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a0f      	ldr	r2, [pc, #60]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a0c      	ldr	r2, [pc, #48]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCC_OscConfig+0x288>
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a08      	ldr	r2, [pc, #32]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a05      	ldr	r2, [pc, #20]	; (8003c34 <HAL_RCC_OscConfig+0x298>)
 8003c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01b      	beq.n	8003c64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fe f81a 	bl	8001c64 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c32:	e010      	b.n	8003c56 <HAL_RCC_OscConfig+0x2ba>
 8003c34:	40021000 	.word	0x40021000
 8003c38:	0800ad20 	.word	0x0800ad20
 8003c3c:	20000010 	.word	0x20000010
 8003c40:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c44:	f7fe f80e 	bl	8001c64 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	; 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e2bd      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c56:	4baf      	ldr	r3, [pc, #700]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0x2a8>
 8003c62:	e014      	b.n	8003c8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fd fffe 	bl	8001c64 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7fd fffa 	bl	8001c64 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e2a9      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c7e:	4ba5      	ldr	r3, [pc, #660]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x2d0>
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d060      	beq.n	8003d5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d005      	beq.n	8003cac <HAL_RCC_OscConfig+0x310>
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	2b0c      	cmp	r3, #12
 8003ca4:	d119      	bne.n	8003cda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d116      	bne.n	8003cda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cac:	4b99      	ldr	r3, [pc, #612]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x328>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e286      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc4:	4b93      	ldr	r3, [pc, #588]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	061b      	lsls	r3, r3, #24
 8003cd2:	4990      	ldr	r1, [pc, #576]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cd8:	e040      	b.n	8003d5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d023      	beq.n	8003d2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce2:	4b8c      	ldr	r3, [pc, #560]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a8b      	ldr	r2, [pc, #556]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cee:	f7fd ffb9 	bl	8001c64 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf6:	f7fd ffb5 	bl	8001c64 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e264      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d08:	4b82      	ldr	r3, [pc, #520]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d14:	4b7f      	ldr	r3, [pc, #508]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	061b      	lsls	r3, r3, #24
 8003d22:	497c      	ldr	r1, [pc, #496]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	604b      	str	r3, [r1, #4]
 8003d28:	e018      	b.n	8003d5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d2a:	4b7a      	ldr	r3, [pc, #488]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a79      	ldr	r2, [pc, #484]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d36:	f7fd ff95 	bl	8001c64 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d3e:	f7fd ff91 	bl	8001c64 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e240      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d50:	4b70      	ldr	r3, [pc, #448]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1f0      	bne.n	8003d3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d03c      	beq.n	8003de2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01c      	beq.n	8003daa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d70:	4b68      	ldr	r3, [pc, #416]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d76:	4a67      	ldr	r2, [pc, #412]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d80:	f7fd ff70 	bl	8001c64 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d88:	f7fd ff6c 	bl	8001c64 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e21b      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d9a:	4b5e      	ldr	r3, [pc, #376]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0ef      	beq.n	8003d88 <HAL_RCC_OscConfig+0x3ec>
 8003da8:	e01b      	b.n	8003de2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003daa:	4b5a      	ldr	r3, [pc, #360]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db0:	4a58      	ldr	r2, [pc, #352]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dba:	f7fd ff53 	bl	8001c64 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc2:	f7fd ff4f 	bl	8001c64 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e1fe      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dd4:	4b4f      	ldr	r3, [pc, #316]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1ef      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80a6 	beq.w	8003f3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df0:	2300      	movs	r3, #0
 8003df2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003df4:	4b47      	ldr	r3, [pc, #284]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10d      	bne.n	8003e1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e00:	4b44      	ldr	r3, [pc, #272]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	4a43      	ldr	r2, [pc, #268]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e0c:	4b41      	ldr	r3, [pc, #260]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e1c:	4b3e      	ldr	r3, [pc, #248]	; (8003f18 <HAL_RCC_OscConfig+0x57c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d118      	bne.n	8003e5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e28:	4b3b      	ldr	r3, [pc, #236]	; (8003f18 <HAL_RCC_OscConfig+0x57c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a3a      	ldr	r2, [pc, #232]	; (8003f18 <HAL_RCC_OscConfig+0x57c>)
 8003e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e34:	f7fd ff16 	bl	8001c64 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3c:	f7fd ff12 	bl	8001c64 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e1c1      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e4e:	4b32      	ldr	r3, [pc, #200]	; (8003f18 <HAL_RCC_OscConfig+0x57c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d108      	bne.n	8003e74 <HAL_RCC_OscConfig+0x4d8>
 8003e62:	4b2c      	ldr	r3, [pc, #176]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e68:	4a2a      	ldr	r2, [pc, #168]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e72:	e024      	b.n	8003ebe <HAL_RCC_OscConfig+0x522>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	d110      	bne.n	8003e9e <HAL_RCC_OscConfig+0x502>
 8003e7c:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e82:	4a24      	ldr	r2, [pc, #144]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003e84:	f043 0304 	orr.w	r3, r3, #4
 8003e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e8c:	4b21      	ldr	r3, [pc, #132]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	4a20      	ldr	r2, [pc, #128]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e9c:	e00f      	b.n	8003ebe <HAL_RCC_OscConfig+0x522>
 8003e9e:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea4:	4a1b      	ldr	r2, [pc, #108]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eae:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb4:	4a17      	ldr	r2, [pc, #92]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003eb6:	f023 0304 	bic.w	r3, r3, #4
 8003eba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d016      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fd fecd 	bl	8001c64 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ece:	f7fd fec9 	bl	8001c64 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e176      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_RCC_OscConfig+0x578>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0ed      	beq.n	8003ece <HAL_RCC_OscConfig+0x532>
 8003ef2:	e01a      	b.n	8003f2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef4:	f7fd feb6 	bl	8001c64 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003efa:	e00f      	b.n	8003f1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efc:	f7fd feb2 	bl	8001c64 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d906      	bls.n	8003f1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e15f      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
 8003f12:	bf00      	nop
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f1c:	4baa      	ldr	r3, [pc, #680]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8003f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e8      	bne.n	8003efc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f2a:	7ffb      	ldrb	r3, [r7, #31]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d105      	bne.n	8003f3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f30:	4ba5      	ldr	r3, [pc, #660]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8003f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f34:	4aa4      	ldr	r2, [pc, #656]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8003f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d03c      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01c      	beq.n	8003f8a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f50:	4b9d      	ldr	r3, [pc, #628]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8003f52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f56:	4a9c      	ldr	r2, [pc, #624]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f60:	f7fd fe80 	bl	8001c64 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f68:	f7fd fe7c 	bl	8001c64 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e12b      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f7a:	4b93      	ldr	r3, [pc, #588]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8003f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0ef      	beq.n	8003f68 <HAL_RCC_OscConfig+0x5cc>
 8003f88:	e01b      	b.n	8003fc2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f8a:	4b8f      	ldr	r3, [pc, #572]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8003f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f90:	4a8d      	ldr	r2, [pc, #564]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9a:	f7fd fe63 	bl	8001c64 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fa2:	f7fd fe5f 	bl	8001c64 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e10e      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fb4:	4b84      	ldr	r3, [pc, #528]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8003fb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1ef      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 8102 	beq.w	80041d0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	f040 80c5 	bne.w	8004160 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fd6:	4b7c      	ldr	r3, [pc, #496]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f003 0203 	and.w	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d12c      	bne.n	8004044 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d123      	bne.n	8004044 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004006:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d11b      	bne.n	8004044 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004018:	429a      	cmp	r2, r3
 800401a:	d113      	bne.n	8004044 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004026:	085b      	lsrs	r3, r3, #1
 8004028:	3b01      	subs	r3, #1
 800402a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800402c:	429a      	cmp	r2, r3
 800402e:	d109      	bne.n	8004044 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	3b01      	subs	r3, #1
 800403e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d067      	beq.n	8004114 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b0c      	cmp	r3, #12
 8004048:	d062      	beq.n	8004110 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800404a:	4b5f      	ldr	r3, [pc, #380]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e0bb      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800405a:	4b5b      	ldr	r3, [pc, #364]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a5a      	ldr	r2, [pc, #360]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8004060:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004064:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004066:	f7fd fdfd 	bl	8001c64 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406e:	f7fd fdf9 	bl	8001c64 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e0a8      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004080:	4b51      	ldr	r3, [pc, #324]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f0      	bne.n	800406e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800408c:	4b4e      	ldr	r3, [pc, #312]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	4b4e      	ldr	r3, [pc, #312]	; (80041cc <HAL_RCC_OscConfig+0x830>)
 8004092:	4013      	ands	r3, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800409c:	3a01      	subs	r2, #1
 800409e:	0112      	lsls	r2, r2, #4
 80040a0:	4311      	orrs	r1, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040a6:	0212      	lsls	r2, r2, #8
 80040a8:	4311      	orrs	r1, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040ae:	0852      	lsrs	r2, r2, #1
 80040b0:	3a01      	subs	r2, #1
 80040b2:	0552      	lsls	r2, r2, #21
 80040b4:	4311      	orrs	r1, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040ba:	0852      	lsrs	r2, r2, #1
 80040bc:	3a01      	subs	r2, #1
 80040be:	0652      	lsls	r2, r2, #25
 80040c0:	4311      	orrs	r1, r2
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040c6:	06d2      	lsls	r2, r2, #27
 80040c8:	430a      	orrs	r2, r1
 80040ca:	493f      	ldr	r1, [pc, #252]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040d0:	4b3d      	ldr	r3, [pc, #244]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a3c      	ldr	r2, [pc, #240]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 80040d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040dc:	4b3a      	ldr	r3, [pc, #232]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4a39      	ldr	r2, [pc, #228]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 80040e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040e8:	f7fd fdbc 	bl	8001c64 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fd fdb8 	bl	8001c64 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e067      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004102:	4b31      	ldr	r3, [pc, #196]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800410e:	e05f      	b.n	80041d0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e05e      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004114:	4b2c      	ldr	r3, [pc, #176]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d157      	bne.n	80041d0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004120:	4b29      	ldr	r3, [pc, #164]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a28      	ldr	r2, [pc, #160]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8004126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800412a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800412c:	4b26      	ldr	r3, [pc, #152]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4a25      	ldr	r2, [pc, #148]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8004132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004136:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004138:	f7fd fd94 	bl	8001c64 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004140:	f7fd fd90 	bl	8001c64 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e03f      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004152:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x7a4>
 800415e:	e037      	b.n	80041d0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b0c      	cmp	r3, #12
 8004164:	d02d      	beq.n	80041c2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004166:	4b18      	ldr	r3, [pc, #96]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a17      	ldr	r2, [pc, #92]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 800416c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004170:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004172:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d105      	bne.n	800418a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800417e:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	4a11      	ldr	r2, [pc, #68]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8004184:	f023 0303 	bic.w	r3, r3, #3
 8004188:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800418a:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	4a0e      	ldr	r2, [pc, #56]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 8004190:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004198:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419a:	f7fd fd63 	bl	8001c64 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a2:	f7fd fd5f 	bl	8001c64 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e00e      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041b4:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <HAL_RCC_OscConfig+0x82c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f0      	bne.n	80041a2 <HAL_RCC_OscConfig+0x806>
 80041c0:	e006      	b.n	80041d0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e005      	b.n	80041d2 <HAL_RCC_OscConfig+0x836>
 80041c6:	bf00      	nop
 80041c8:	40021000 	.word	0x40021000
 80041cc:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3720      	adds	r7, #32
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop

080041dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0c8      	b.n	8004382 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041f0:	4b66      	ldr	r3, [pc, #408]	; (800438c <HAL_RCC_ClockConfig+0x1b0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d910      	bls.n	8004220 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b63      	ldr	r3, [pc, #396]	; (800438c <HAL_RCC_ClockConfig+0x1b0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 0207 	bic.w	r2, r3, #7
 8004206:	4961      	ldr	r1, [pc, #388]	; (800438c <HAL_RCC_ClockConfig+0x1b0>)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	4313      	orrs	r3, r2
 800420c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	4b5f      	ldr	r3, [pc, #380]	; (800438c <HAL_RCC_ClockConfig+0x1b0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0b0      	b.n	8004382 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d04c      	beq.n	80042c6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d107      	bne.n	8004244 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004234:	4b56      	ldr	r3, [pc, #344]	; (8004390 <HAL_RCC_ClockConfig+0x1b4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d121      	bne.n	8004284 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e09e      	b.n	8004382 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d107      	bne.n	800425c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800424c:	4b50      	ldr	r3, [pc, #320]	; (8004390 <HAL_RCC_ClockConfig+0x1b4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d115      	bne.n	8004284 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e092      	b.n	8004382 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d107      	bne.n	8004274 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004264:	4b4a      	ldr	r3, [pc, #296]	; (8004390 <HAL_RCC_ClockConfig+0x1b4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e086      	b.n	8004382 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004274:	4b46      	ldr	r3, [pc, #280]	; (8004390 <HAL_RCC_ClockConfig+0x1b4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e07e      	b.n	8004382 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004284:	4b42      	ldr	r3, [pc, #264]	; (8004390 <HAL_RCC_ClockConfig+0x1b4>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f023 0203 	bic.w	r2, r3, #3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	493f      	ldr	r1, [pc, #252]	; (8004390 <HAL_RCC_ClockConfig+0x1b4>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004296:	f7fd fce5 	bl	8001c64 <HAL_GetTick>
 800429a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429c:	e00a      	b.n	80042b4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429e:	f7fd fce1 	bl	8001c64 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e066      	b.n	8004382 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b4:	4b36      	ldr	r3, [pc, #216]	; (8004390 <HAL_RCC_ClockConfig+0x1b4>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 020c 	and.w	r2, r3, #12
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d1eb      	bne.n	800429e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d008      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d2:	4b2f      	ldr	r3, [pc, #188]	; (8004390 <HAL_RCC_ClockConfig+0x1b4>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	492c      	ldr	r1, [pc, #176]	; (8004390 <HAL_RCC_ClockConfig+0x1b4>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042e4:	4b29      	ldr	r3, [pc, #164]	; (800438c <HAL_RCC_ClockConfig+0x1b0>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d210      	bcs.n	8004314 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b26      	ldr	r3, [pc, #152]	; (800438c <HAL_RCC_ClockConfig+0x1b0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 0207 	bic.w	r2, r3, #7
 80042fa:	4924      	ldr	r1, [pc, #144]	; (800438c <HAL_RCC_ClockConfig+0x1b0>)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b22      	ldr	r3, [pc, #136]	; (800438c <HAL_RCC_ClockConfig+0x1b0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d001      	beq.n	8004314 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e036      	b.n	8004382 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004320:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <HAL_RCC_ClockConfig+0x1b4>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4918      	ldr	r1, [pc, #96]	; (8004390 <HAL_RCC_ClockConfig+0x1b4>)
 800432e:	4313      	orrs	r3, r2
 8004330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800433e:	4b14      	ldr	r3, [pc, #80]	; (8004390 <HAL_RCC_ClockConfig+0x1b4>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4910      	ldr	r1, [pc, #64]	; (8004390 <HAL_RCC_ClockConfig+0x1b4>)
 800434e:	4313      	orrs	r3, r2
 8004350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004352:	f000 f825 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8004356:	4602      	mov	r2, r0
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <HAL_RCC_ClockConfig+0x1b4>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	490c      	ldr	r1, [pc, #48]	; (8004394 <HAL_RCC_ClockConfig+0x1b8>)
 8004364:	5ccb      	ldrb	r3, [r1, r3]
 8004366:	f003 031f 	and.w	r3, r3, #31
 800436a:	fa22 f303 	lsr.w	r3, r2, r3
 800436e:	4a0a      	ldr	r2, [pc, #40]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004372:	4b0a      	ldr	r3, [pc, #40]	; (800439c <HAL_RCC_ClockConfig+0x1c0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f7fd fc24 	bl	8001bc4 <HAL_InitTick>
 800437c:	4603      	mov	r3, r0
 800437e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004380:	7afb      	ldrb	r3, [r7, #11]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40022000 	.word	0x40022000
 8004390:	40021000 	.word	0x40021000
 8004394:	0800ad20 	.word	0x0800ad20
 8004398:	20000010 	.word	0x20000010
 800439c:	20000014 	.word	0x20000014

080043a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b089      	sub	sp, #36	; 0x24
 80043a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	2300      	movs	r3, #0
 80043ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ae:	4b3e      	ldr	r3, [pc, #248]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043b8:	4b3b      	ldr	r3, [pc, #236]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x34>
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	d121      	bne.n	8004412 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d11e      	bne.n	8004412 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043d4:	4b34      	ldr	r3, [pc, #208]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d107      	bne.n	80043f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043e0:	4b31      	ldr	r3, [pc, #196]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	e005      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043f0:	4b2d      	ldr	r3, [pc, #180]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043fc:	4a2b      	ldr	r2, [pc, #172]	; (80044ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004404:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10d      	bne.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004410:	e00a      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b04      	cmp	r3, #4
 8004416:	d102      	bne.n	800441e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004418:	4b25      	ldr	r3, [pc, #148]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	e004      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d101      	bne.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004424:	4b23      	ldr	r3, [pc, #140]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004426:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b0c      	cmp	r3, #12
 800442c:	d134      	bne.n	8004498 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800442e:	4b1e      	ldr	r3, [pc, #120]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d003      	beq.n	8004446 <HAL_RCC_GetSysClockFreq+0xa6>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b03      	cmp	r3, #3
 8004442:	d003      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0xac>
 8004444:	e005      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004446:	4b1a      	ldr	r3, [pc, #104]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004448:	617b      	str	r3, [r7, #20]
      break;
 800444a:	e005      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800444c:	4b19      	ldr	r3, [pc, #100]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800444e:	617b      	str	r3, [r7, #20]
      break;
 8004450:	e002      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	617b      	str	r3, [r7, #20]
      break;
 8004456:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004458:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	3301      	adds	r3, #1
 8004464:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	0a1b      	lsrs	r3, r3, #8
 800446c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	fb02 f203 	mul.w	r2, r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800447e:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	0e5b      	lsrs	r3, r3, #25
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	3301      	adds	r3, #1
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	fbb2 f3f3 	udiv	r3, r2, r3
 8004496:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004498:	69bb      	ldr	r3, [r7, #24]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3724      	adds	r7, #36	; 0x24
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000
 80044ac:	0800ad38 	.word	0x0800ad38
 80044b0:	00f42400 	.word	0x00f42400
 80044b4:	007a1200 	.word	0x007a1200

080044b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044bc:	4b03      	ldr	r3, [pc, #12]	; (80044cc <HAL_RCC_GetHCLKFreq+0x14>)
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20000010 	.word	0x20000010

080044d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044d4:	f7ff fff0 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	4904      	ldr	r1, [pc, #16]	; (80044f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40021000 	.word	0x40021000
 80044f8:	0800ad30 	.word	0x0800ad30

080044fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004500:	f7ff ffda 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 8004504:	4602      	mov	r2, r0
 8004506:	4b06      	ldr	r3, [pc, #24]	; (8004520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	0adb      	lsrs	r3, r3, #11
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	4904      	ldr	r1, [pc, #16]	; (8004524 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004512:	5ccb      	ldrb	r3, [r1, r3]
 8004514:	f003 031f 	and.w	r3, r3, #31
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40021000 	.word	0x40021000
 8004524:	0800ad30 	.word	0x0800ad30

08004528 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004530:	2300      	movs	r3, #0
 8004532:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004534:	4b2a      	ldr	r3, [pc, #168]	; (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004540:	f7ff f9c8 	bl	80038d4 <HAL_PWREx_GetVoltageRange>
 8004544:	6178      	str	r0, [r7, #20]
 8004546:	e014      	b.n	8004572 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004548:	4b25      	ldr	r3, [pc, #148]	; (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800454a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454c:	4a24      	ldr	r2, [pc, #144]	; (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800454e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004552:	6593      	str	r3, [r2, #88]	; 0x58
 8004554:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004560:	f7ff f9b8 	bl	80038d4 <HAL_PWREx_GetVoltageRange>
 8004564:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004566:	4b1e      	ldr	r3, [pc, #120]	; (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456a:	4a1d      	ldr	r2, [pc, #116]	; (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004570:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004578:	d10b      	bne.n	8004592 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b80      	cmp	r3, #128	; 0x80
 800457e:	d919      	bls.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2ba0      	cmp	r3, #160	; 0xa0
 8004584:	d902      	bls.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004586:	2302      	movs	r3, #2
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	e013      	b.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800458c:	2301      	movs	r3, #1
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	e010      	b.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b80      	cmp	r3, #128	; 0x80
 8004596:	d902      	bls.n	800459e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004598:	2303      	movs	r3, #3
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	e00a      	b.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b80      	cmp	r3, #128	; 0x80
 80045a2:	d102      	bne.n	80045aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045a4:	2302      	movs	r3, #2
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	e004      	b.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b70      	cmp	r3, #112	; 0x70
 80045ae:	d101      	bne.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045b0:	2301      	movs	r3, #1
 80045b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045b4:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f023 0207 	bic.w	r2, r3, #7
 80045bc:	4909      	ldr	r1, [pc, #36]	; (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045c4:	4b07      	ldr	r3, [pc, #28]	; (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d001      	beq.n	80045d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40021000 	.word	0x40021000
 80045e4:	40022000 	.word	0x40022000

080045e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045f0:	2300      	movs	r3, #0
 80045f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045f4:	2300      	movs	r3, #0
 80045f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004600:	2b00      	cmp	r3, #0
 8004602:	d031      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004608:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800460c:	d01a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800460e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004612:	d814      	bhi.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d009      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004618:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800461c:	d10f      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800461e:	4bac      	ldr	r3, [pc, #688]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	4aab      	ldr	r2, [pc, #684]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004628:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800462a:	e00c      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3304      	adds	r3, #4
 8004630:	2100      	movs	r1, #0
 8004632:	4618      	mov	r0, r3
 8004634:	f000 f9dc 	bl	80049f0 <RCCEx_PLLSAI1_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800463c:	e003      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	74fb      	strb	r3, [r7, #19]
      break;
 8004642:	e000      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004646:	7cfb      	ldrb	r3, [r7, #19]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10b      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800464c:	4ba0      	ldr	r3, [pc, #640]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004652:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465a:	499d      	ldr	r1, [pc, #628]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004662:	e001      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004664:	7cfb      	ldrb	r3, [r7, #19]
 8004666:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8099 	beq.w	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004676:	2300      	movs	r3, #0
 8004678:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800467a:	4b95      	ldr	r3, [pc, #596]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800467c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800468a:	2300      	movs	r3, #0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00d      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004690:	4b8f      	ldr	r3, [pc, #572]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004694:	4a8e      	ldr	r2, [pc, #568]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800469a:	6593      	str	r3, [r2, #88]	; 0x58
 800469c:	4b8c      	ldr	r3, [pc, #560]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800469e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a8:	2301      	movs	r3, #1
 80046aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ac:	4b89      	ldr	r3, [pc, #548]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a88      	ldr	r2, [pc, #544]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80046b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046b8:	f7fd fad4 	bl	8001c64 <HAL_GetTick>
 80046bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046be:	e009      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c0:	f7fd fad0 	bl	8001c64 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d902      	bls.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	74fb      	strb	r3, [r7, #19]
        break;
 80046d2:	e005      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046d4:	4b7f      	ldr	r3, [pc, #508]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0ef      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d155      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046e6:	4b7a      	ldr	r3, [pc, #488]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01e      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d019      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004702:	4b73      	ldr	r3, [pc, #460]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800470e:	4b70      	ldr	r3, [pc, #448]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004714:	4a6e      	ldr	r2, [pc, #440]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800471a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800471e:	4b6c      	ldr	r3, [pc, #432]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004724:	4a6a      	ldr	r2, [pc, #424]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800472a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800472e:	4a68      	ldr	r2, [pc, #416]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d016      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fd fa90 	bl	8001c64 <HAL_GetTick>
 8004744:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004746:	e00b      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004748:	f7fd fa8c 	bl	8001c64 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f241 3288 	movw	r2, #5000	; 0x1388
 8004756:	4293      	cmp	r3, r2
 8004758:	d902      	bls.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	74fb      	strb	r3, [r7, #19]
            break;
 800475e:	e006      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004760:	4b5b      	ldr	r3, [pc, #364]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0ec      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800476e:	7cfb      	ldrb	r3, [r7, #19]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10b      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004774:	4b56      	ldr	r3, [pc, #344]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004782:	4953      	ldr	r1, [pc, #332]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800478a:	e004      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	74bb      	strb	r3, [r7, #18]
 8004790:	e001      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004792:	7cfb      	ldrb	r3, [r7, #19]
 8004794:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004796:	7c7b      	ldrb	r3, [r7, #17]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d105      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800479c:	4b4c      	ldr	r3, [pc, #304]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800479e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a0:	4a4b      	ldr	r2, [pc, #300]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047b4:	4b46      	ldr	r3, [pc, #280]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ba:	f023 0203 	bic.w	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	4943      	ldr	r1, [pc, #268]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047d6:	4b3e      	ldr	r3, [pc, #248]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047dc:	f023 020c 	bic.w	r2, r3, #12
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	493a      	ldr	r1, [pc, #232]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0320 	and.w	r3, r3, #32
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047f8:	4b35      	ldr	r3, [pc, #212]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	4932      	ldr	r1, [pc, #200]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800481a:	4b2d      	ldr	r3, [pc, #180]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800481c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004820:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004828:	4929      	ldr	r1, [pc, #164]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00a      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800483c:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800483e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004842:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	4921      	ldr	r1, [pc, #132]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800484c:	4313      	orrs	r3, r2
 800484e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800485e:	4b1c      	ldr	r3, [pc, #112]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004864:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	4918      	ldr	r1, [pc, #96]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00a      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004880:	4b13      	ldr	r3, [pc, #76]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004886:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	4910      	ldr	r1, [pc, #64]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004890:	4313      	orrs	r3, r2
 8004892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d02c      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048a2:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	4907      	ldr	r1, [pc, #28]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048c0:	d10a      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048c2:	4b03      	ldr	r3, [pc, #12]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	4a02      	ldr	r2, [pc, #8]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048cc:	60d3      	str	r3, [r2, #12]
 80048ce:	e015      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x314>
 80048d0:	40021000 	.word	0x40021000
 80048d4:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048e0:	d10c      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3304      	adds	r3, #4
 80048e6:	2101      	movs	r1, #1
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 f881 	bl	80049f0 <RCCEx_PLLSAI1_Config>
 80048ee:	4603      	mov	r3, r0
 80048f0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048f2:	7cfb      	ldrb	r3, [r7, #19]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80048f8:	7cfb      	ldrb	r3, [r7, #19]
 80048fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d028      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004908:	4b30      	ldr	r3, [pc, #192]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004916:	492d      	ldr	r1, [pc, #180]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004926:	d106      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004928:	4b28      	ldr	r3, [pc, #160]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	4a27      	ldr	r2, [pc, #156]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800492e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004932:	60d3      	str	r3, [r2, #12]
 8004934:	e011      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800493e:	d10c      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3304      	adds	r3, #4
 8004944:	2101      	movs	r1, #1
 8004946:	4618      	mov	r0, r3
 8004948:	f000 f852 	bl	80049f0 <RCCEx_PLLSAI1_Config>
 800494c:	4603      	mov	r3, r0
 800494e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004950:	7cfb      	ldrb	r3, [r7, #19]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8004956:	7cfb      	ldrb	r3, [r7, #19]
 8004958:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01c      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004966:	4b19      	ldr	r3, [pc, #100]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004974:	4915      	ldr	r1, [pc, #84]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004980:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004984:	d10c      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3304      	adds	r3, #4
 800498a:	2102      	movs	r1, #2
 800498c:	4618      	mov	r0, r3
 800498e:	f000 f82f 	bl	80049f0 <RCCEx_PLLSAI1_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004996:	7cfb      	ldrb	r3, [r7, #19]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800499c:	7cfb      	ldrb	r3, [r7, #19]
 800499e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049ac:	4b07      	ldr	r3, [pc, #28]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ba:	4904      	ldr	r1, [pc, #16]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40021000 	.word	0x40021000

080049d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a04      	ldr	r2, [pc, #16]	; (80049ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80049da:	f043 0304 	orr.w	r3, r3, #4
 80049de:	6013      	str	r3, [r2, #0]
}
 80049e0:	bf00      	nop
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000

080049f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049fe:	4b74      	ldr	r3, [pc, #464]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d018      	beq.n	8004a3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a0a:	4b71      	ldr	r3, [pc, #452]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f003 0203 	and.w	r2, r3, #3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d10d      	bne.n	8004a36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a22:	4b6b      	ldr	r3, [pc, #428]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	091b      	lsrs	r3, r3, #4
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
       ||
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d047      	beq.n	8004ac6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	73fb      	strb	r3, [r7, #15]
 8004a3a:	e044      	b.n	8004ac6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d018      	beq.n	8004a76 <RCCEx_PLLSAI1_Config+0x86>
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d825      	bhi.n	8004a94 <RCCEx_PLLSAI1_Config+0xa4>
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d002      	beq.n	8004a52 <RCCEx_PLLSAI1_Config+0x62>
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d009      	beq.n	8004a64 <RCCEx_PLLSAI1_Config+0x74>
 8004a50:	e020      	b.n	8004a94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a52:	4b5f      	ldr	r3, [pc, #380]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d11d      	bne.n	8004a9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a62:	e01a      	b.n	8004a9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a64:	4b5a      	ldr	r3, [pc, #360]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d116      	bne.n	8004a9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a74:	e013      	b.n	8004a9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a76:	4b56      	ldr	r3, [pc, #344]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10f      	bne.n	8004aa2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a82:	4b53      	ldr	r3, [pc, #332]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a92:	e006      	b.n	8004aa2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
      break;
 8004a98:	e004      	b.n	8004aa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a9a:	bf00      	nop
 8004a9c:	e002      	b.n	8004aa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a9e:	bf00      	nop
 8004aa0:	e000      	b.n	8004aa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aa2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10d      	bne.n	8004ac6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004aaa:	4b49      	ldr	r3, [pc, #292]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6819      	ldr	r1, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	4943      	ldr	r1, [pc, #268]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d17c      	bne.n	8004bc6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004acc:	4b40      	ldr	r3, [pc, #256]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a3f      	ldr	r2, [pc, #252]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad8:	f7fd f8c4 	bl	8001c64 <HAL_GetTick>
 8004adc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ade:	e009      	b.n	8004af4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ae0:	f7fd f8c0 	bl	8001c64 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d902      	bls.n	8004af4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	73fb      	strb	r3, [r7, #15]
        break;
 8004af2:	e005      	b.n	8004b00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004af4:	4b36      	ldr	r3, [pc, #216]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1ef      	bne.n	8004ae0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d15f      	bne.n	8004bc6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d110      	bne.n	8004b2e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b0c:	4b30      	ldr	r3, [pc, #192]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004b14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6892      	ldr	r2, [r2, #8]
 8004b1c:	0211      	lsls	r1, r2, #8
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	68d2      	ldr	r2, [r2, #12]
 8004b22:	06d2      	lsls	r2, r2, #27
 8004b24:	430a      	orrs	r2, r1
 8004b26:	492a      	ldr	r1, [pc, #168]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	610b      	str	r3, [r1, #16]
 8004b2c:	e027      	b.n	8004b7e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d112      	bne.n	8004b5a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b34:	4b26      	ldr	r3, [pc, #152]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6892      	ldr	r2, [r2, #8]
 8004b44:	0211      	lsls	r1, r2, #8
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6912      	ldr	r2, [r2, #16]
 8004b4a:	0852      	lsrs	r2, r2, #1
 8004b4c:	3a01      	subs	r2, #1
 8004b4e:	0552      	lsls	r2, r2, #21
 8004b50:	430a      	orrs	r2, r1
 8004b52:	491f      	ldr	r1, [pc, #124]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	610b      	str	r3, [r1, #16]
 8004b58:	e011      	b.n	8004b7e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b5a:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6892      	ldr	r2, [r2, #8]
 8004b6a:	0211      	lsls	r1, r2, #8
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6952      	ldr	r2, [r2, #20]
 8004b70:	0852      	lsrs	r2, r2, #1
 8004b72:	3a01      	subs	r2, #1
 8004b74:	0652      	lsls	r2, r2, #25
 8004b76:	430a      	orrs	r2, r1
 8004b78:	4915      	ldr	r1, [pc, #84]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b7e:	4b14      	ldr	r3, [pc, #80]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8a:	f7fd f86b 	bl	8001c64 <HAL_GetTick>
 8004b8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b90:	e009      	b.n	8004ba6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b92:	f7fd f867 	bl	8001c64 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d902      	bls.n	8004ba6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	73fb      	strb	r3, [r7, #15]
          break;
 8004ba4:	e005      	b.n	8004bb2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ba6:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0ef      	beq.n	8004b92 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d106      	bne.n	8004bc6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bba:	691a      	ldr	r2, [r3, #16]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	4903      	ldr	r1, [pc, #12]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40021000 	.word	0x40021000

08004bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e049      	b.n	8004c7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fc fdfc 	bl	80017f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4619      	mov	r1, r3
 8004c12:	4610      	mov	r0, r2
 8004c14:	f000 fa20 	bl	8005058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d001      	beq.n	8004c9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e033      	b.n	8004d04 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a19      	ldr	r2, [pc, #100]	; (8004d10 <HAL_TIM_Base_Start+0x8c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d009      	beq.n	8004cc2 <HAL_TIM_Base_Start+0x3e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb6:	d004      	beq.n	8004cc2 <HAL_TIM_Base_Start+0x3e>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a15      	ldr	r2, [pc, #84]	; (8004d14 <HAL_TIM_Base_Start+0x90>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d115      	bne.n	8004cee <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <HAL_TIM_Base_Start+0x94>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b06      	cmp	r3, #6
 8004cd2:	d015      	beq.n	8004d00 <HAL_TIM_Base_Start+0x7c>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cda:	d011      	beq.n	8004d00 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cec:	e008      	b.n	8004d00 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0201 	orr.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	e000      	b.n	8004d02 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	40012c00 	.word	0x40012c00
 8004d14:	40014000 	.word	0x40014000
 8004d18:	00010007 	.word	0x00010007

08004d1c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e049      	b.n	8004dc2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f841 	bl	8004dca <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3304      	adds	r3, #4
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f000 f97c 	bl	8005058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
	...

08004de0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d101      	bne.n	8004dfa <HAL_TIM_OC_ConfigChannel+0x1a>
 8004df6:	2302      	movs	r3, #2
 8004df8:	e064      	b.n	8004ec4 <HAL_TIM_OC_ConfigChannel+0xe4>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b14      	cmp	r3, #20
 8004e06:	d857      	bhi.n	8004eb8 <HAL_TIM_OC_ConfigChannel+0xd8>
 8004e08:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004e65 	.word	0x08004e65
 8004e14:	08004eb9 	.word	0x08004eb9
 8004e18:	08004eb9 	.word	0x08004eb9
 8004e1c:	08004eb9 	.word	0x08004eb9
 8004e20:	08004e73 	.word	0x08004e73
 8004e24:	08004eb9 	.word	0x08004eb9
 8004e28:	08004eb9 	.word	0x08004eb9
 8004e2c:	08004eb9 	.word	0x08004eb9
 8004e30:	08004e81 	.word	0x08004e81
 8004e34:	08004eb9 	.word	0x08004eb9
 8004e38:	08004eb9 	.word	0x08004eb9
 8004e3c:	08004eb9 	.word	0x08004eb9
 8004e40:	08004e8f 	.word	0x08004e8f
 8004e44:	08004eb9 	.word	0x08004eb9
 8004e48:	08004eb9 	.word	0x08004eb9
 8004e4c:	08004eb9 	.word	0x08004eb9
 8004e50:	08004e9d 	.word	0x08004e9d
 8004e54:	08004eb9 	.word	0x08004eb9
 8004e58:	08004eb9 	.word	0x08004eb9
 8004e5c:	08004eb9 	.word	0x08004eb9
 8004e60:	08004eab 	.word	0x08004eab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 f958 	bl	8005120 <TIM_OC1_SetConfig>
      break;
 8004e70:	e023      	b.n	8004eba <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 f9cd 	bl	8005218 <TIM_OC2_SetConfig>
      break;
 8004e7e:	e01c      	b.n	8004eba <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68b9      	ldr	r1, [r7, #8]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fa40 	bl	800530c <TIM_OC3_SetConfig>
      break;
 8004e8c:	e015      	b.n	8004eba <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68b9      	ldr	r1, [r7, #8]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 fab1 	bl	80053fc <TIM_OC4_SetConfig>
      break;
 8004e9a:	e00e      	b.n	8004eba <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fb08 	bl	80054b8 <TIM_OC5_SetConfig>
      break;
 8004ea8:	e007      	b.n	8004eba <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68b9      	ldr	r1, [r7, #8]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fb59 	bl	8005568 <TIM_OC6_SetConfig>
      break;
 8004eb6:	e000      	b.n	8004eba <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8004eb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_TIM_ConfigClockSource+0x18>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e0b5      	b.n	8005050 <HAL_TIM_ConfigClockSource+0x184>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f20:	d03e      	beq.n	8004fa0 <HAL_TIM_ConfigClockSource+0xd4>
 8004f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f26:	f200 8087 	bhi.w	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2e:	f000 8085 	beq.w	800503c <HAL_TIM_ConfigClockSource+0x170>
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f36:	d87f      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f38:	2b70      	cmp	r3, #112	; 0x70
 8004f3a:	d01a      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0xa6>
 8004f3c:	2b70      	cmp	r3, #112	; 0x70
 8004f3e:	d87b      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f40:	2b60      	cmp	r3, #96	; 0x60
 8004f42:	d050      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x11a>
 8004f44:	2b60      	cmp	r3, #96	; 0x60
 8004f46:	d877      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f48:	2b50      	cmp	r3, #80	; 0x50
 8004f4a:	d03c      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0xfa>
 8004f4c:	2b50      	cmp	r3, #80	; 0x50
 8004f4e:	d873      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f50:	2b40      	cmp	r3, #64	; 0x40
 8004f52:	d058      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0x13a>
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	d86f      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f58:	2b30      	cmp	r3, #48	; 0x30
 8004f5a:	d064      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f5c:	2b30      	cmp	r3, #48	; 0x30
 8004f5e:	d86b      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d060      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d867      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d05c      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d05a      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f70:	e062      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	6899      	ldr	r1, [r3, #8]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f000 fbc5 	bl	8005710 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f94:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	609a      	str	r2, [r3, #8]
      break;
 8004f9e:	e04e      	b.n	800503e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	6899      	ldr	r1, [r3, #8]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f000 fbae 	bl	8005710 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fc2:	609a      	str	r2, [r3, #8]
      break;
 8004fc4:	e03b      	b.n	800503e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6859      	ldr	r1, [r3, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f000 fb22 	bl	800561c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2150      	movs	r1, #80	; 0x50
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fb7b 	bl	80056da <TIM_ITRx_SetConfig>
      break;
 8004fe4:	e02b      	b.n	800503e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6859      	ldr	r1, [r3, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f000 fb41 	bl	800567a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2160      	movs	r1, #96	; 0x60
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fb6b 	bl	80056da <TIM_ITRx_SetConfig>
      break;
 8005004:	e01b      	b.n	800503e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6859      	ldr	r1, [r3, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	461a      	mov	r2, r3
 8005014:	f000 fb02 	bl	800561c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2140      	movs	r1, #64	; 0x40
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fb5b 	bl	80056da <TIM_ITRx_SetConfig>
      break;
 8005024:	e00b      	b.n	800503e <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f000 fb52 	bl	80056da <TIM_ITRx_SetConfig>
        break;
 8005036:	e002      	b.n	800503e <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005038:	bf00      	nop
 800503a:	e000      	b.n	800503e <HAL_TIM_ConfigClockSource+0x172>
      break;
 800503c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a2a      	ldr	r2, [pc, #168]	; (8005114 <TIM_Base_SetConfig+0xbc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d003      	beq.n	8005078 <TIM_Base_SetConfig+0x20>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005076:	d108      	bne.n	800508a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a21      	ldr	r2, [pc, #132]	; (8005114 <TIM_Base_SetConfig+0xbc>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00b      	beq.n	80050aa <TIM_Base_SetConfig+0x52>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005098:	d007      	beq.n	80050aa <TIM_Base_SetConfig+0x52>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <TIM_Base_SetConfig+0xc0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d003      	beq.n	80050aa <TIM_Base_SetConfig+0x52>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a1d      	ldr	r2, [pc, #116]	; (800511c <TIM_Base_SetConfig+0xc4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d108      	bne.n	80050bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a0c      	ldr	r2, [pc, #48]	; (8005114 <TIM_Base_SetConfig+0xbc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d007      	beq.n	80050f8 <TIM_Base_SetConfig+0xa0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a0b      	ldr	r2, [pc, #44]	; (8005118 <TIM_Base_SetConfig+0xc0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <TIM_Base_SetConfig+0xa0>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a0a      	ldr	r2, [pc, #40]	; (800511c <TIM_Base_SetConfig+0xc4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d103      	bne.n	8005100 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	615a      	str	r2, [r3, #20]
}
 8005106:	bf00      	nop
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40012c00 	.word	0x40012c00
 8005118:	40014000 	.word	0x40014000
 800511c:	40014400 	.word	0x40014400

08005120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f023 0201 	bic.w	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0303 	bic.w	r3, r3, #3
 800515a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f023 0302 	bic.w	r3, r3, #2
 800516c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a24      	ldr	r2, [pc, #144]	; (800520c <TIM_OC1_SetConfig+0xec>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d007      	beq.n	8005190 <TIM_OC1_SetConfig+0x70>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a23      	ldr	r2, [pc, #140]	; (8005210 <TIM_OC1_SetConfig+0xf0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d003      	beq.n	8005190 <TIM_OC1_SetConfig+0x70>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a22      	ldr	r2, [pc, #136]	; (8005214 <TIM_OC1_SetConfig+0xf4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d10c      	bne.n	80051aa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f023 0308 	bic.w	r3, r3, #8
 8005196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f023 0304 	bic.w	r3, r3, #4
 80051a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a17      	ldr	r2, [pc, #92]	; (800520c <TIM_OC1_SetConfig+0xec>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d007      	beq.n	80051c2 <TIM_OC1_SetConfig+0xa2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a16      	ldr	r2, [pc, #88]	; (8005210 <TIM_OC1_SetConfig+0xf0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d003      	beq.n	80051c2 <TIM_OC1_SetConfig+0xa2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a15      	ldr	r2, [pc, #84]	; (8005214 <TIM_OC1_SetConfig+0xf4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d111      	bne.n	80051e6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	621a      	str	r2, [r3, #32]
}
 8005200:	bf00      	nop
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	40012c00 	.word	0x40012c00
 8005210:	40014000 	.word	0x40014000
 8005214:	40014400 	.word	0x40014400

08005218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f023 0210 	bic.w	r2, r3, #16
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800524a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	021b      	lsls	r3, r3, #8
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f023 0320 	bic.w	r3, r3, #32
 8005266:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a22      	ldr	r2, [pc, #136]	; (8005300 <TIM_OC2_SetConfig+0xe8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d10d      	bne.n	8005298 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005296:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a19      	ldr	r2, [pc, #100]	; (8005300 <TIM_OC2_SetConfig+0xe8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d007      	beq.n	80052b0 <TIM_OC2_SetConfig+0x98>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a18      	ldr	r2, [pc, #96]	; (8005304 <TIM_OC2_SetConfig+0xec>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <TIM_OC2_SetConfig+0x98>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a17      	ldr	r2, [pc, #92]	; (8005308 <TIM_OC2_SetConfig+0xf0>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d113      	bne.n	80052d8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	621a      	str	r2, [r3, #32]
}
 80052f2:	bf00      	nop
 80052f4:	371c      	adds	r7, #28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40012c00 	.word	0x40012c00
 8005304:	40014000 	.word	0x40014000
 8005308:	40014400 	.word	0x40014400

0800530c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800533a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0303 	bic.w	r3, r3, #3
 8005346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a21      	ldr	r2, [pc, #132]	; (80053f0 <TIM_OC3_SetConfig+0xe4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d10d      	bne.n	800538a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005374:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a18      	ldr	r2, [pc, #96]	; (80053f0 <TIM_OC3_SetConfig+0xe4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d007      	beq.n	80053a2 <TIM_OC3_SetConfig+0x96>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a17      	ldr	r2, [pc, #92]	; (80053f4 <TIM_OC3_SetConfig+0xe8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_OC3_SetConfig+0x96>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a16      	ldr	r2, [pc, #88]	; (80053f8 <TIM_OC3_SetConfig+0xec>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d113      	bne.n	80053ca <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	621a      	str	r2, [r3, #32]
}
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	40012c00 	.word	0x40012c00
 80053f4:	40014000 	.word	0x40014000
 80053f8:	40014400 	.word	0x40014400

080053fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800544a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	031b      	lsls	r3, r3, #12
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a14      	ldr	r2, [pc, #80]	; (80054ac <TIM_OC4_SetConfig+0xb0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d007      	beq.n	8005470 <TIM_OC4_SetConfig+0x74>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a13      	ldr	r2, [pc, #76]	; (80054b0 <TIM_OC4_SetConfig+0xb4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <TIM_OC4_SetConfig+0x74>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a12      	ldr	r2, [pc, #72]	; (80054b4 <TIM_OC4_SetConfig+0xb8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d109      	bne.n	8005484 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005476:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	019b      	lsls	r3, r3, #6
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	621a      	str	r2, [r3, #32]
}
 800549e:	bf00      	nop
 80054a0:	371c      	adds	r7, #28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40012c00 	.word	0x40012c00
 80054b0:	40014000 	.word	0x40014000
 80054b4:	40014400 	.word	0x40014400

080054b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80054fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	041b      	lsls	r3, r3, #16
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a13      	ldr	r2, [pc, #76]	; (800555c <TIM_OC5_SetConfig+0xa4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d007      	beq.n	8005522 <TIM_OC5_SetConfig+0x6a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a12      	ldr	r2, [pc, #72]	; (8005560 <TIM_OC5_SetConfig+0xa8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d003      	beq.n	8005522 <TIM_OC5_SetConfig+0x6a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a11      	ldr	r2, [pc, #68]	; (8005564 <TIM_OC5_SetConfig+0xac>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d109      	bne.n	8005536 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005528:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	021b      	lsls	r3, r3, #8
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	621a      	str	r2, [r3, #32]
}
 8005550:	bf00      	nop
 8005552:	371c      	adds	r7, #28
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	40012c00 	.word	0x40012c00
 8005560:	40014000 	.word	0x40014000
 8005564:	40014400 	.word	0x40014400

08005568 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	021b      	lsls	r3, r3, #8
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	051b      	lsls	r3, r3, #20
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a14      	ldr	r2, [pc, #80]	; (8005610 <TIM_OC6_SetConfig+0xa8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d007      	beq.n	80055d4 <TIM_OC6_SetConfig+0x6c>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a13      	ldr	r2, [pc, #76]	; (8005614 <TIM_OC6_SetConfig+0xac>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d003      	beq.n	80055d4 <TIM_OC6_SetConfig+0x6c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a12      	ldr	r2, [pc, #72]	; (8005618 <TIM_OC6_SetConfig+0xb0>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d109      	bne.n	80055e8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	029b      	lsls	r3, r3, #10
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	621a      	str	r2, [r3, #32]
}
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40014000 	.word	0x40014000
 8005618:	40014400 	.word	0x40014400

0800561c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	f023 0201 	bic.w	r2, r3, #1
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	4313      	orrs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f023 030a 	bic.w	r3, r3, #10
 8005658:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	621a      	str	r2, [r3, #32]
}
 800566e:	bf00      	nop
 8005670:	371c      	adds	r7, #28
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800567a:	b480      	push	{r7}
 800567c:	b087      	sub	sp, #28
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	f023 0210 	bic.w	r2, r3, #16
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	031b      	lsls	r3, r3, #12
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	621a      	str	r2, [r3, #32]
}
 80056ce:	bf00      	nop
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056da:	b480      	push	{r7}
 80056dc:	b085      	sub	sp, #20
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f043 0307 	orr.w	r3, r3, #7
 80056fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	609a      	str	r2, [r3, #8]
}
 8005704:	bf00      	nop
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800572a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	021a      	lsls	r2, r3, #8
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	431a      	orrs	r2, r3
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	4313      	orrs	r3, r2
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	609a      	str	r2, [r3, #8]
}
 8005744:	bf00      	nop
 8005746:	371c      	adds	r7, #28
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005760:	2b01      	cmp	r3, #1
 8005762:	d101      	bne.n	8005768 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005764:	2302      	movs	r3, #2
 8005766:	e04f      	b.n	8005808 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a21      	ldr	r2, [pc, #132]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d108      	bne.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005798:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a14      	ldr	r2, [pc, #80]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d009      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d0:	d004      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a10      	ldr	r2, [pc, #64]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d10c      	bne.n	80057f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40014000 	.word	0x40014000

0800581c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e040      	b.n	80058b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fb fff8 	bl	8001834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2224      	movs	r2, #36	; 0x24
 8005848:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0201 	bic.w	r2, r2, #1
 8005858:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f992 	bl	8005b84 <UART_SetConfig>
 8005860:	4603      	mov	r3, r0
 8005862:	2b01      	cmp	r3, #1
 8005864:	d101      	bne.n	800586a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e022      	b.n	80058b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fb92 	bl	8005f9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fc19 	bl	80060e0 <UART_CheckIdleState>
 80058ae:	4603      	mov	r3, r0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b08a      	sub	sp, #40	; 0x28
 80058bc:	af02      	add	r7, sp, #8
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	4613      	mov	r3, r2
 80058c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058cc:	2b20      	cmp	r3, #32
 80058ce:	f040 8082 	bne.w	80059d6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <HAL_UART_Transmit+0x26>
 80058d8:	88fb      	ldrh	r3, [r7, #6]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e07a      	b.n	80059d8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_UART_Transmit+0x38>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e073      	b.n	80059d8 <HAL_UART_Transmit+0x120>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2221      	movs	r2, #33	; 0x21
 8005904:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005906:	f7fc f9ad 	bl	8001c64 <HAL_GetTick>
 800590a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	88fa      	ldrh	r2, [r7, #6]
 8005910:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	88fa      	ldrh	r2, [r7, #6]
 8005918:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005924:	d108      	bne.n	8005938 <HAL_UART_Transmit+0x80>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	e003      	b.n	8005940 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800593c:	2300      	movs	r3, #0
 800593e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005948:	e02d      	b.n	80059a6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2200      	movs	r2, #0
 8005952:	2180      	movs	r1, #128	; 0x80
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 fc0c 	bl	8006172 <UART_WaitOnFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e039      	b.n	80059d8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10b      	bne.n	8005982 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	881a      	ldrh	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005976:	b292      	uxth	r2, r2
 8005978:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	3302      	adds	r3, #2
 800597e:	61bb      	str	r3, [r7, #24]
 8005980:	e008      	b.n	8005994 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	781a      	ldrb	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	b292      	uxth	r2, r2
 800598c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	3301      	adds	r3, #1
 8005992:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800599a:	b29b      	uxth	r3, r3
 800599c:	3b01      	subs	r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1cb      	bne.n	800594a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2200      	movs	r2, #0
 80059ba:	2140      	movs	r1, #64	; 0x40
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 fbd8 	bl	8006172 <UART_WaitOnFlagUntilTimeout>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e005      	b.n	80059d8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e000      	b.n	80059d8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80059d6:	2302      	movs	r3, #2
  }
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3720      	adds	r7, #32
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	; 0x28
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	603b      	str	r3, [r7, #0]
 80059ec:	4613      	mov	r3, r2
 80059ee:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	f040 80bf 	bne.w	8005b78 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_UART_Receive+0x26>
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e0b7      	b.n	8005b7a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_UART_Receive+0x38>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e0b0      	b.n	8005b7a <HAL_UART_Receive+0x19a>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2222      	movs	r2, #34	; 0x22
 8005a2c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a34:	f7fc f916 	bl	8001c64 <HAL_GetTick>
 8005a38:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	88fa      	ldrh	r2, [r7, #6]
 8005a3e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	88fa      	ldrh	r2, [r7, #6]
 8005a46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a52:	d10e      	bne.n	8005a72 <HAL_UART_Receive+0x92>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d105      	bne.n	8005a68 <HAL_UART_Receive+0x88>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a66:	e02d      	b.n	8005ac4 <HAL_UART_Receive+0xe4>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	22ff      	movs	r2, #255	; 0xff
 8005a6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a70:	e028      	b.n	8005ac4 <HAL_UART_Receive+0xe4>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10d      	bne.n	8005a96 <HAL_UART_Receive+0xb6>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d104      	bne.n	8005a8c <HAL_UART_Receive+0xac>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	22ff      	movs	r2, #255	; 0xff
 8005a86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a8a:	e01b      	b.n	8005ac4 <HAL_UART_Receive+0xe4>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	227f      	movs	r2, #127	; 0x7f
 8005a90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a94:	e016      	b.n	8005ac4 <HAL_UART_Receive+0xe4>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a9e:	d10d      	bne.n	8005abc <HAL_UART_Receive+0xdc>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d104      	bne.n	8005ab2 <HAL_UART_Receive+0xd2>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	227f      	movs	r2, #127	; 0x7f
 8005aac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ab0:	e008      	b.n	8005ac4 <HAL_UART_Receive+0xe4>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	223f      	movs	r2, #63	; 0x3f
 8005ab6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005aba:	e003      	b.n	8005ac4 <HAL_UART_Receive+0xe4>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005aca:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad4:	d108      	bne.n	8005ae8 <HAL_UART_Receive+0x108>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d104      	bne.n	8005ae8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	61bb      	str	r3, [r7, #24]
 8005ae6:	e003      	b.n	8005af0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aec:	2300      	movs	r3, #0
 8005aee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005af8:	e033      	b.n	8005b62 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2200      	movs	r2, #0
 8005b02:	2120      	movs	r1, #32
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 fb34 	bl	8006172 <UART_WaitOnFlagUntilTimeout>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e032      	b.n	8005b7a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10c      	bne.n	8005b34 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	8a7b      	ldrh	r3, [r7, #18]
 8005b24:	4013      	ands	r3, r2
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	3302      	adds	r3, #2
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	e00d      	b.n	8005b50 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	8a7b      	ldrh	r3, [r7, #18]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	4013      	ands	r3, r2
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1c5      	bne.n	8005afa <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	e000      	b.n	8005b7a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005b78:	2302      	movs	r3, #2
  }
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3720      	adds	r7, #32
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b84:	b5b0      	push	{r4, r5, r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	4baf      	ldr	r3, [pc, #700]	; (8005e6c <UART_SetConfig+0x2e8>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	6812      	ldr	r2, [r2, #0]
 8005bb6:	69f9      	ldr	r1, [r7, #28]
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4aa4      	ldr	r2, [pc, #656]	; (8005e70 <UART_SetConfig+0x2ec>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d004      	beq.n	8005bec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a9b      	ldr	r2, [pc, #620]	; (8005e74 <UART_SetConfig+0x2f0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d121      	bne.n	8005c4e <UART_SetConfig+0xca>
 8005c0a:	4b9b      	ldr	r3, [pc, #620]	; (8005e78 <UART_SetConfig+0x2f4>)
 8005c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c10:	f003 0303 	and.w	r3, r3, #3
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d817      	bhi.n	8005c48 <UART_SetConfig+0xc4>
 8005c18:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <UART_SetConfig+0x9c>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c31 	.word	0x08005c31
 8005c24:	08005c3d 	.word	0x08005c3d
 8005c28:	08005c37 	.word	0x08005c37
 8005c2c:	08005c43 	.word	0x08005c43
 8005c30:	2301      	movs	r3, #1
 8005c32:	76fb      	strb	r3, [r7, #27]
 8005c34:	e070      	b.n	8005d18 <UART_SetConfig+0x194>
 8005c36:	2302      	movs	r3, #2
 8005c38:	76fb      	strb	r3, [r7, #27]
 8005c3a:	e06d      	b.n	8005d18 <UART_SetConfig+0x194>
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	76fb      	strb	r3, [r7, #27]
 8005c40:	e06a      	b.n	8005d18 <UART_SetConfig+0x194>
 8005c42:	2308      	movs	r3, #8
 8005c44:	76fb      	strb	r3, [r7, #27]
 8005c46:	e067      	b.n	8005d18 <UART_SetConfig+0x194>
 8005c48:	2310      	movs	r3, #16
 8005c4a:	76fb      	strb	r3, [r7, #27]
 8005c4c:	e064      	b.n	8005d18 <UART_SetConfig+0x194>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a8a      	ldr	r2, [pc, #552]	; (8005e7c <UART_SetConfig+0x2f8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d132      	bne.n	8005cbe <UART_SetConfig+0x13a>
 8005c58:	4b87      	ldr	r3, [pc, #540]	; (8005e78 <UART_SetConfig+0x2f4>)
 8005c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5e:	f003 030c 	and.w	r3, r3, #12
 8005c62:	2b0c      	cmp	r3, #12
 8005c64:	d828      	bhi.n	8005cb8 <UART_SetConfig+0x134>
 8005c66:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <UART_SetConfig+0xe8>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005ca1 	.word	0x08005ca1
 8005c70:	08005cb9 	.word	0x08005cb9
 8005c74:	08005cb9 	.word	0x08005cb9
 8005c78:	08005cb9 	.word	0x08005cb9
 8005c7c:	08005cad 	.word	0x08005cad
 8005c80:	08005cb9 	.word	0x08005cb9
 8005c84:	08005cb9 	.word	0x08005cb9
 8005c88:	08005cb9 	.word	0x08005cb9
 8005c8c:	08005ca7 	.word	0x08005ca7
 8005c90:	08005cb9 	.word	0x08005cb9
 8005c94:	08005cb9 	.word	0x08005cb9
 8005c98:	08005cb9 	.word	0x08005cb9
 8005c9c:	08005cb3 	.word	0x08005cb3
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	76fb      	strb	r3, [r7, #27]
 8005ca4:	e038      	b.n	8005d18 <UART_SetConfig+0x194>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	76fb      	strb	r3, [r7, #27]
 8005caa:	e035      	b.n	8005d18 <UART_SetConfig+0x194>
 8005cac:	2304      	movs	r3, #4
 8005cae:	76fb      	strb	r3, [r7, #27]
 8005cb0:	e032      	b.n	8005d18 <UART_SetConfig+0x194>
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	76fb      	strb	r3, [r7, #27]
 8005cb6:	e02f      	b.n	8005d18 <UART_SetConfig+0x194>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	76fb      	strb	r3, [r7, #27]
 8005cbc:	e02c      	b.n	8005d18 <UART_SetConfig+0x194>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a6b      	ldr	r2, [pc, #428]	; (8005e70 <UART_SetConfig+0x2ec>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d125      	bne.n	8005d14 <UART_SetConfig+0x190>
 8005cc8:	4b6b      	ldr	r3, [pc, #428]	; (8005e78 <UART_SetConfig+0x2f4>)
 8005cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cd6:	d017      	beq.n	8005d08 <UART_SetConfig+0x184>
 8005cd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cdc:	d817      	bhi.n	8005d0e <UART_SetConfig+0x18a>
 8005cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ce2:	d00b      	beq.n	8005cfc <UART_SetConfig+0x178>
 8005ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ce8:	d811      	bhi.n	8005d0e <UART_SetConfig+0x18a>
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <UART_SetConfig+0x172>
 8005cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf2:	d006      	beq.n	8005d02 <UART_SetConfig+0x17e>
 8005cf4:	e00b      	b.n	8005d0e <UART_SetConfig+0x18a>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	76fb      	strb	r3, [r7, #27]
 8005cfa:	e00d      	b.n	8005d18 <UART_SetConfig+0x194>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	76fb      	strb	r3, [r7, #27]
 8005d00:	e00a      	b.n	8005d18 <UART_SetConfig+0x194>
 8005d02:	2304      	movs	r3, #4
 8005d04:	76fb      	strb	r3, [r7, #27]
 8005d06:	e007      	b.n	8005d18 <UART_SetConfig+0x194>
 8005d08:	2308      	movs	r3, #8
 8005d0a:	76fb      	strb	r3, [r7, #27]
 8005d0c:	e004      	b.n	8005d18 <UART_SetConfig+0x194>
 8005d0e:	2310      	movs	r3, #16
 8005d10:	76fb      	strb	r3, [r7, #27]
 8005d12:	e001      	b.n	8005d18 <UART_SetConfig+0x194>
 8005d14:	2310      	movs	r3, #16
 8005d16:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a54      	ldr	r2, [pc, #336]	; (8005e70 <UART_SetConfig+0x2ec>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d173      	bne.n	8005e0a <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d22:	7efb      	ldrb	r3, [r7, #27]
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d824      	bhi.n	8005d72 <UART_SetConfig+0x1ee>
 8005d28:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <UART_SetConfig+0x1ac>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08005d55 	.word	0x08005d55
 8005d34:	08005d73 	.word	0x08005d73
 8005d38:	08005d5d 	.word	0x08005d5d
 8005d3c:	08005d73 	.word	0x08005d73
 8005d40:	08005d63 	.word	0x08005d63
 8005d44:	08005d73 	.word	0x08005d73
 8005d48:	08005d73 	.word	0x08005d73
 8005d4c:	08005d73 	.word	0x08005d73
 8005d50:	08005d6b 	.word	0x08005d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d54:	f7fe fbbc 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8005d58:	6178      	str	r0, [r7, #20]
        break;
 8005d5a:	e00f      	b.n	8005d7c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d5c:	4b48      	ldr	r3, [pc, #288]	; (8005e80 <UART_SetConfig+0x2fc>)
 8005d5e:	617b      	str	r3, [r7, #20]
        break;
 8005d60:	e00c      	b.n	8005d7c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d62:	f7fe fb1d 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8005d66:	6178      	str	r0, [r7, #20]
        break;
 8005d68:	e008      	b.n	8005d7c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d6e:	617b      	str	r3, [r7, #20]
        break;
 8005d70:	e004      	b.n	8005d7c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	76bb      	strb	r3, [r7, #26]
        break;
 8005d7a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 80fe 	beq.w	8005f80 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	4413      	add	r3, r2
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d305      	bcc.n	8005da0 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d902      	bls.n	8005da6 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	76bb      	strb	r3, [r7, #26]
 8005da4:	e0ec      	b.n	8005f80 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f04f 0100 	mov.w	r1, #0
 8005dae:	f04f 0200 	mov.w	r2, #0
 8005db2:	f04f 0300 	mov.w	r3, #0
 8005db6:	020b      	lsls	r3, r1, #8
 8005db8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005dbc:	0202      	lsls	r2, r0, #8
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	6849      	ldr	r1, [r1, #4]
 8005dc2:	0849      	lsrs	r1, r1, #1
 8005dc4:	4608      	mov	r0, r1
 8005dc6:	f04f 0100 	mov.w	r1, #0
 8005dca:	1814      	adds	r4, r2, r0
 8005dcc:	eb43 0501 	adc.w	r5, r3, r1
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	4620      	mov	r0, r4
 8005ddc:	4629      	mov	r1, r5
 8005dde:	f7fa ff33 	bl	8000c48 <__aeabi_uldivmod>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4613      	mov	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005df0:	d308      	bcc.n	8005e04 <UART_SetConfig+0x280>
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005df8:	d204      	bcs.n	8005e04 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	60da      	str	r2, [r3, #12]
 8005e02:	e0bd      	b.n	8005f80 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	76bb      	strb	r3, [r7, #26]
 8005e08:	e0ba      	b.n	8005f80 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e12:	d168      	bne.n	8005ee6 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8005e14:	7efb      	ldrb	r3, [r7, #27]
 8005e16:	2b08      	cmp	r3, #8
 8005e18:	d834      	bhi.n	8005e84 <UART_SetConfig+0x300>
 8005e1a:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <UART_SetConfig+0x29c>)
 8005e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e20:	08005e45 	.word	0x08005e45
 8005e24:	08005e4d 	.word	0x08005e4d
 8005e28:	08005e55 	.word	0x08005e55
 8005e2c:	08005e85 	.word	0x08005e85
 8005e30:	08005e5b 	.word	0x08005e5b
 8005e34:	08005e85 	.word	0x08005e85
 8005e38:	08005e85 	.word	0x08005e85
 8005e3c:	08005e85 	.word	0x08005e85
 8005e40:	08005e63 	.word	0x08005e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e44:	f7fe fb44 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8005e48:	6178      	str	r0, [r7, #20]
        break;
 8005e4a:	e020      	b.n	8005e8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e4c:	f7fe fb56 	bl	80044fc <HAL_RCC_GetPCLK2Freq>
 8005e50:	6178      	str	r0, [r7, #20]
        break;
 8005e52:	e01c      	b.n	8005e8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e54:	4b0a      	ldr	r3, [pc, #40]	; (8005e80 <UART_SetConfig+0x2fc>)
 8005e56:	617b      	str	r3, [r7, #20]
        break;
 8005e58:	e019      	b.n	8005e8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e5a:	f7fe faa1 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8005e5e:	6178      	str	r0, [r7, #20]
        break;
 8005e60:	e015      	b.n	8005e8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e66:	617b      	str	r3, [r7, #20]
        break;
 8005e68:	e011      	b.n	8005e8e <UART_SetConfig+0x30a>
 8005e6a:	bf00      	nop
 8005e6c:	efff69f3 	.word	0xefff69f3
 8005e70:	40008000 	.word	0x40008000
 8005e74:	40013800 	.word	0x40013800
 8005e78:	40021000 	.word	0x40021000
 8005e7c:	40004400 	.word	0x40004400
 8005e80:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	76bb      	strb	r3, [r7, #26]
        break;
 8005e8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d075      	beq.n	8005f80 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	005a      	lsls	r2, r3, #1
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	085b      	lsrs	r3, r3, #1
 8005e9e:	441a      	add	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	2b0f      	cmp	r3, #15
 8005eb0:	d916      	bls.n	8005ee0 <UART_SetConfig+0x35c>
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb8:	d212      	bcs.n	8005ee0 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	f023 030f 	bic.w	r3, r3, #15
 8005ec2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	085b      	lsrs	r3, r3, #1
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	89fb      	ldrh	r3, [r7, #14]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	89fa      	ldrh	r2, [r7, #14]
 8005edc:	60da      	str	r2, [r3, #12]
 8005ede:	e04f      	b.n	8005f80 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	76bb      	strb	r3, [r7, #26]
 8005ee4:	e04c      	b.n	8005f80 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ee6:	7efb      	ldrb	r3, [r7, #27]
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d828      	bhi.n	8005f3e <UART_SetConfig+0x3ba>
 8005eec:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <UART_SetConfig+0x370>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	08005f21 	.word	0x08005f21
 8005efc:	08005f29 	.word	0x08005f29
 8005f00:	08005f3f 	.word	0x08005f3f
 8005f04:	08005f2f 	.word	0x08005f2f
 8005f08:	08005f3f 	.word	0x08005f3f
 8005f0c:	08005f3f 	.word	0x08005f3f
 8005f10:	08005f3f 	.word	0x08005f3f
 8005f14:	08005f37 	.word	0x08005f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f18:	f7fe fada 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8005f1c:	6178      	str	r0, [r7, #20]
        break;
 8005f1e:	e013      	b.n	8005f48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f20:	f7fe faec 	bl	80044fc <HAL_RCC_GetPCLK2Freq>
 8005f24:	6178      	str	r0, [r7, #20]
        break;
 8005f26:	e00f      	b.n	8005f48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f28:	4b1b      	ldr	r3, [pc, #108]	; (8005f98 <UART_SetConfig+0x414>)
 8005f2a:	617b      	str	r3, [r7, #20]
        break;
 8005f2c:	e00c      	b.n	8005f48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f2e:	f7fe fa37 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8005f32:	6178      	str	r0, [r7, #20]
        break;
 8005f34:	e008      	b.n	8005f48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f3a:	617b      	str	r3, [r7, #20]
        break;
 8005f3c:	e004      	b.n	8005f48 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	76bb      	strb	r3, [r7, #26]
        break;
 8005f46:	bf00      	nop
    }

    if (pclk != 0U)
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d018      	beq.n	8005f80 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	085a      	lsrs	r2, r3, #1
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	441a      	add	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	2b0f      	cmp	r3, #15
 8005f68:	d908      	bls.n	8005f7c <UART_SetConfig+0x3f8>
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f70:	d204      	bcs.n	8005f7c <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	60da      	str	r2, [r3, #12]
 8005f7a:	e001      	b.n	8005f80 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f8c:	7ebb      	ldrb	r3, [r7, #26]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3720      	adds	r7, #32
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bdb0      	pop	{r4, r5, r7, pc}
 8005f96:	bf00      	nop
 8005f98:	00f42400 	.word	0x00f42400

08005f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01a      	beq.n	80060b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800609a:	d10a      	bne.n	80060b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	605a      	str	r2, [r3, #4]
  }
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060f0:	f7fb fdb8 	bl	8001c64 <HAL_GetTick>
 80060f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b08      	cmp	r3, #8
 8006102:	d10e      	bne.n	8006122 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006104:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f82d 	bl	8006172 <UART_WaitOnFlagUntilTimeout>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e023      	b.n	800616a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b04      	cmp	r3, #4
 800612e:	d10e      	bne.n	800614e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006130:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f817 	bl	8006172 <UART_WaitOnFlagUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e00d      	b.n	800616a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	603b      	str	r3, [r7, #0]
 800617e:	4613      	mov	r3, r2
 8006180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006182:	e05e      	b.n	8006242 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618a:	d05a      	beq.n	8006242 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800618c:	f7fb fd6a 	bl	8001c64 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	429a      	cmp	r2, r3
 800619a:	d302      	bcc.n	80061a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d11b      	bne.n	80061da <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0201 	bic.w	r2, r2, #1
 80061c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2220      	movs	r2, #32
 80061c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e043      	b.n	8006262 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d02c      	beq.n	8006242 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f6:	d124      	bne.n	8006242 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006200:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006210:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0201 	bic.w	r2, r2, #1
 8006220:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2220      	movs	r2, #32
 8006226:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2220      	movs	r2, #32
 800622c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2220      	movs	r2, #32
 8006232:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e00f      	b.n	8006262 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69da      	ldr	r2, [r3, #28]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4013      	ands	r3, r2
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	429a      	cmp	r2, r3
 8006250:	bf0c      	ite	eq
 8006252:	2301      	moveq	r3, #1
 8006254:	2300      	movne	r3, #0
 8006256:	b2db      	uxtb	r3, r3
 8006258:	461a      	mov	r2, r3
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	429a      	cmp	r2, r3
 800625e:	d091      	beq.n	8006184 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <__errno>:
 800626c:	4b01      	ldr	r3, [pc, #4]	; (8006274 <__errno+0x8>)
 800626e:	6818      	ldr	r0, [r3, #0]
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	2000001c 	.word	0x2000001c

08006278 <__libc_init_array>:
 8006278:	b570      	push	{r4, r5, r6, lr}
 800627a:	4d0d      	ldr	r5, [pc, #52]	; (80062b0 <__libc_init_array+0x38>)
 800627c:	4c0d      	ldr	r4, [pc, #52]	; (80062b4 <__libc_init_array+0x3c>)
 800627e:	1b64      	subs	r4, r4, r5
 8006280:	10a4      	asrs	r4, r4, #2
 8006282:	2600      	movs	r6, #0
 8006284:	42a6      	cmp	r6, r4
 8006286:	d109      	bne.n	800629c <__libc_init_array+0x24>
 8006288:	4d0b      	ldr	r5, [pc, #44]	; (80062b8 <__libc_init_array+0x40>)
 800628a:	4c0c      	ldr	r4, [pc, #48]	; (80062bc <__libc_init_array+0x44>)
 800628c:	f004 fd2a 	bl	800ace4 <_init>
 8006290:	1b64      	subs	r4, r4, r5
 8006292:	10a4      	asrs	r4, r4, #2
 8006294:	2600      	movs	r6, #0
 8006296:	42a6      	cmp	r6, r4
 8006298:	d105      	bne.n	80062a6 <__libc_init_array+0x2e>
 800629a:	bd70      	pop	{r4, r5, r6, pc}
 800629c:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a0:	4798      	blx	r3
 80062a2:	3601      	adds	r6, #1
 80062a4:	e7ee      	b.n	8006284 <__libc_init_array+0xc>
 80062a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062aa:	4798      	blx	r3
 80062ac:	3601      	adds	r6, #1
 80062ae:	e7f2      	b.n	8006296 <__libc_init_array+0x1e>
 80062b0:	0800b10c 	.word	0x0800b10c
 80062b4:	0800b10c 	.word	0x0800b10c
 80062b8:	0800b10c 	.word	0x0800b10c
 80062bc:	0800b114 	.word	0x0800b114

080062c0 <memset>:
 80062c0:	4402      	add	r2, r0
 80062c2:	4603      	mov	r3, r0
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d100      	bne.n	80062ca <memset+0xa>
 80062c8:	4770      	bx	lr
 80062ca:	f803 1b01 	strb.w	r1, [r3], #1
 80062ce:	e7f9      	b.n	80062c4 <memset+0x4>

080062d0 <printf>:
 80062d0:	b40f      	push	{r0, r1, r2, r3}
 80062d2:	b507      	push	{r0, r1, r2, lr}
 80062d4:	4906      	ldr	r1, [pc, #24]	; (80062f0 <printf+0x20>)
 80062d6:	ab04      	add	r3, sp, #16
 80062d8:	6808      	ldr	r0, [r1, #0]
 80062da:	f853 2b04 	ldr.w	r2, [r3], #4
 80062de:	6881      	ldr	r1, [r0, #8]
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	f000 f809 	bl	80062f8 <_vfprintf_r>
 80062e6:	b003      	add	sp, #12
 80062e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80062ec:	b004      	add	sp, #16
 80062ee:	4770      	bx	lr
 80062f0:	2000001c 	.word	0x2000001c
 80062f4:	00000000 	.word	0x00000000

080062f8 <_vfprintf_r>:
 80062f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fc:	ed2d 8b04 	vpush	{d8-d9}
 8006300:	b0cf      	sub	sp, #316	; 0x13c
 8006302:	4689      	mov	r9, r1
 8006304:	9203      	str	r2, [sp, #12]
 8006306:	461c      	mov	r4, r3
 8006308:	461e      	mov	r6, r3
 800630a:	4682      	mov	sl, r0
 800630c:	f002 fb9e 	bl	8008a4c <_localeconv_r>
 8006310:	6803      	ldr	r3, [r0, #0]
 8006312:	9313      	str	r3, [sp, #76]	; 0x4c
 8006314:	4618      	mov	r0, r3
 8006316:	f7f9 ffab 	bl	8000270 <strlen>
 800631a:	900e      	str	r0, [sp, #56]	; 0x38
 800631c:	f1ba 0f00 	cmp.w	sl, #0
 8006320:	d005      	beq.n	800632e <_vfprintf_r+0x36>
 8006322:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 8006326:	b913      	cbnz	r3, 800632e <_vfprintf_r+0x36>
 8006328:	4650      	mov	r0, sl
 800632a:	f002 fa1f 	bl	800876c <__sinit>
 800632e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8006332:	07d8      	lsls	r0, r3, #31
 8006334:	d407      	bmi.n	8006346 <_vfprintf_r+0x4e>
 8006336:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800633a:	0599      	lsls	r1, r3, #22
 800633c:	d403      	bmi.n	8006346 <_vfprintf_r+0x4e>
 800633e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8006342:	f002 fb89 	bl	8008a58 <__retarget_lock_acquire_recursive>
 8006346:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 800634a:	049a      	lsls	r2, r3, #18
 800634c:	d409      	bmi.n	8006362 <_vfprintf_r+0x6a>
 800634e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006352:	f8a9 300c 	strh.w	r3, [r9, #12]
 8006356:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800635a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800635e:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 8006362:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006366:	071f      	lsls	r7, r3, #28
 8006368:	d502      	bpl.n	8006370 <_vfprintf_r+0x78>
 800636a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800636e:	b9d3      	cbnz	r3, 80063a6 <_vfprintf_r+0xae>
 8006370:	4649      	mov	r1, r9
 8006372:	4650      	mov	r0, sl
 8006374:	f001 fa36 	bl	80077e4 <__swsetup_r>
 8006378:	b1a8      	cbz	r0, 80063a6 <_vfprintf_r+0xae>
 800637a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800637e:	07dd      	lsls	r5, r3, #31
 8006380:	d508      	bpl.n	8006394 <_vfprintf_r+0x9c>
 8006382:	f04f 33ff 	mov.w	r3, #4294967295
 8006386:	930f      	str	r3, [sp, #60]	; 0x3c
 8006388:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800638a:	b04f      	add	sp, #316	; 0x13c
 800638c:	ecbd 8b04 	vpop	{d8-d9}
 8006390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006394:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006398:	059c      	lsls	r4, r3, #22
 800639a:	d4f2      	bmi.n	8006382 <_vfprintf_r+0x8a>
 800639c:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80063a0:	f002 fb5b 	bl	8008a5a <__retarget_lock_release_recursive>
 80063a4:	e7ed      	b.n	8006382 <_vfprintf_r+0x8a>
 80063a6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80063aa:	f003 021a 	and.w	r2, r3, #26
 80063ae:	2a0a      	cmp	r2, #10
 80063b0:	d115      	bne.n	80063de <_vfprintf_r+0xe6>
 80063b2:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 80063b6:	2a00      	cmp	r2, #0
 80063b8:	db11      	blt.n	80063de <_vfprintf_r+0xe6>
 80063ba:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 80063be:	07d0      	lsls	r0, r2, #31
 80063c0:	d405      	bmi.n	80063ce <_vfprintf_r+0xd6>
 80063c2:	0599      	lsls	r1, r3, #22
 80063c4:	d403      	bmi.n	80063ce <_vfprintf_r+0xd6>
 80063c6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80063ca:	f002 fb46 	bl	8008a5a <__retarget_lock_release_recursive>
 80063ce:	9a03      	ldr	r2, [sp, #12]
 80063d0:	4623      	mov	r3, r4
 80063d2:	4649      	mov	r1, r9
 80063d4:	4650      	mov	r0, sl
 80063d6:	f001 f9c5 	bl	8007764 <__sbprintf>
 80063da:	900f      	str	r0, [sp, #60]	; 0x3c
 80063dc:	e7d4      	b.n	8006388 <_vfprintf_r+0x90>
 80063de:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 8006648 <_vfprintf_r+0x350>
 80063e2:	2500      	movs	r5, #0
 80063e4:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 80063e8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80063ec:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 80063f0:	ac25      	add	r4, sp, #148	; 0x94
 80063f2:	9422      	str	r4, [sp, #136]	; 0x88
 80063f4:	9505      	str	r5, [sp, #20]
 80063f6:	950a      	str	r5, [sp, #40]	; 0x28
 80063f8:	9512      	str	r5, [sp, #72]	; 0x48
 80063fa:	9514      	str	r5, [sp, #80]	; 0x50
 80063fc:	950f      	str	r5, [sp, #60]	; 0x3c
 80063fe:	9b03      	ldr	r3, [sp, #12]
 8006400:	461d      	mov	r5, r3
 8006402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006406:	b10a      	cbz	r2, 800640c <_vfprintf_r+0x114>
 8006408:	2a25      	cmp	r2, #37	; 0x25
 800640a:	d1f9      	bne.n	8006400 <_vfprintf_r+0x108>
 800640c:	9b03      	ldr	r3, [sp, #12]
 800640e:	1aef      	subs	r7, r5, r3
 8006410:	d00d      	beq.n	800642e <_vfprintf_r+0x136>
 8006412:	e9c4 3700 	strd	r3, r7, [r4]
 8006416:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006418:	443b      	add	r3, r7
 800641a:	9324      	str	r3, [sp, #144]	; 0x90
 800641c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800641e:	3301      	adds	r3, #1
 8006420:	2b07      	cmp	r3, #7
 8006422:	9323      	str	r3, [sp, #140]	; 0x8c
 8006424:	dc79      	bgt.n	800651a <_vfprintf_r+0x222>
 8006426:	3408      	adds	r4, #8
 8006428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800642a:	443b      	add	r3, r7
 800642c:	930f      	str	r3, [sp, #60]	; 0x3c
 800642e:	782b      	ldrb	r3, [r5, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	f001 8156 	beq.w	80076e2 <_vfprintf_r+0x13ea>
 8006436:	2300      	movs	r3, #0
 8006438:	3501      	adds	r5, #1
 800643a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800643e:	f04f 38ff 	mov.w	r8, #4294967295
 8006442:	9310      	str	r3, [sp, #64]	; 0x40
 8006444:	469b      	mov	fp, r3
 8006446:	270a      	movs	r7, #10
 8006448:	212b      	movs	r1, #43	; 0x2b
 800644a:	462a      	mov	r2, r5
 800644c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006450:	9307      	str	r3, [sp, #28]
 8006452:	4613      	mov	r3, r2
 8006454:	930b      	str	r3, [sp, #44]	; 0x2c
 8006456:	9b07      	ldr	r3, [sp, #28]
 8006458:	3b20      	subs	r3, #32
 800645a:	2b5a      	cmp	r3, #90	; 0x5a
 800645c:	f200 85c0 	bhi.w	8006fe0 <_vfprintf_r+0xce8>
 8006460:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006464:	05be007e 	.word	0x05be007e
 8006468:	008605be 	.word	0x008605be
 800646c:	05be05be 	.word	0x05be05be
 8006470:	006505be 	.word	0x006505be
 8006474:	05be05be 	.word	0x05be05be
 8006478:	00930089 	.word	0x00930089
 800647c:	009005be 	.word	0x009005be
 8006480:	05be0096 	.word	0x05be0096
 8006484:	00b200af 	.word	0x00b200af
 8006488:	00b200b2 	.word	0x00b200b2
 800648c:	00b200b2 	.word	0x00b200b2
 8006490:	00b200b2 	.word	0x00b200b2
 8006494:	00b200b2 	.word	0x00b200b2
 8006498:	05be05be 	.word	0x05be05be
 800649c:	05be05be 	.word	0x05be05be
 80064a0:	05be05be 	.word	0x05be05be
 80064a4:	012105be 	.word	0x012105be
 80064a8:	00df05be 	.word	0x00df05be
 80064ac:	012100f6 	.word	0x012100f6
 80064b0:	01210121 	.word	0x01210121
 80064b4:	05be05be 	.word	0x05be05be
 80064b8:	05be05be 	.word	0x05be05be
 80064bc:	05be00c2 	.word	0x05be00c2
 80064c0:	049005be 	.word	0x049005be
 80064c4:	05be05be 	.word	0x05be05be
 80064c8:	04d705be 	.word	0x04d705be
 80064cc:	04fb05be 	.word	0x04fb05be
 80064d0:	05be05be 	.word	0x05be05be
 80064d4:	05be051a 	.word	0x05be051a
 80064d8:	05be05be 	.word	0x05be05be
 80064dc:	05be05be 	.word	0x05be05be
 80064e0:	05be05be 	.word	0x05be05be
 80064e4:	012105be 	.word	0x012105be
 80064e8:	00df05be 	.word	0x00df05be
 80064ec:	012100f8 	.word	0x012100f8
 80064f0:	01210121 	.word	0x01210121
 80064f4:	00f800c5 	.word	0x00f800c5
 80064f8:	05be00d9 	.word	0x05be00d9
 80064fc:	05be00d2 	.word	0x05be00d2
 8006500:	0492046d 	.word	0x0492046d
 8006504:	00d904c6 	.word	0x00d904c6
 8006508:	04d705be 	.word	0x04d705be
 800650c:	04fd007c 	.word	0x04fd007c
 8006510:	05be05be 	.word	0x05be05be
 8006514:	05be0537 	.word	0x05be0537
 8006518:	007c      	.short	0x007c
 800651a:	aa22      	add	r2, sp, #136	; 0x88
 800651c:	4649      	mov	r1, r9
 800651e:	4650      	mov	r0, sl
 8006520:	f003 f93f 	bl	80097a2 <__sprint_r>
 8006524:	2800      	cmp	r0, #0
 8006526:	f040 8130 	bne.w	800678a <_vfprintf_r+0x492>
 800652a:	ac25      	add	r4, sp, #148	; 0x94
 800652c:	e77c      	b.n	8006428 <_vfprintf_r+0x130>
 800652e:	4650      	mov	r0, sl
 8006530:	f002 fa8c 	bl	8008a4c <_localeconv_r>
 8006534:	6843      	ldr	r3, [r0, #4]
 8006536:	9314      	str	r3, [sp, #80]	; 0x50
 8006538:	4618      	mov	r0, r3
 800653a:	f7f9 fe99 	bl	8000270 <strlen>
 800653e:	9012      	str	r0, [sp, #72]	; 0x48
 8006540:	4650      	mov	r0, sl
 8006542:	f002 fa83 	bl	8008a4c <_localeconv_r>
 8006546:	6883      	ldr	r3, [r0, #8]
 8006548:	930a      	str	r3, [sp, #40]	; 0x28
 800654a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800654c:	212b      	movs	r1, #43	; 0x2b
 800654e:	b12b      	cbz	r3, 800655c <_vfprintf_r+0x264>
 8006550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006552:	b11b      	cbz	r3, 800655c <_vfprintf_r+0x264>
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	b10b      	cbz	r3, 800655c <_vfprintf_r+0x264>
 8006558:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 800655c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800655e:	e774      	b.n	800644a <_vfprintf_r+0x152>
 8006560:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1f9      	bne.n	800655c <_vfprintf_r+0x264>
 8006568:	2320      	movs	r3, #32
 800656a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800656e:	e7f5      	b.n	800655c <_vfprintf_r+0x264>
 8006570:	f04b 0b01 	orr.w	fp, fp, #1
 8006574:	e7f2      	b.n	800655c <_vfprintf_r+0x264>
 8006576:	f856 3b04 	ldr.w	r3, [r6], #4
 800657a:	9310      	str	r3, [sp, #64]	; 0x40
 800657c:	2b00      	cmp	r3, #0
 800657e:	daed      	bge.n	800655c <_vfprintf_r+0x264>
 8006580:	425b      	negs	r3, r3
 8006582:	9310      	str	r3, [sp, #64]	; 0x40
 8006584:	f04b 0b04 	orr.w	fp, fp, #4
 8006588:	e7e8      	b.n	800655c <_vfprintf_r+0x264>
 800658a:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 800658e:	e7e5      	b.n	800655c <_vfprintf_r+0x264>
 8006590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006592:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006596:	9207      	str	r2, [sp, #28]
 8006598:	2a2a      	cmp	r2, #42	; 0x2a
 800659a:	d10f      	bne.n	80065bc <_vfprintf_r+0x2c4>
 800659c:	f856 0b04 	ldr.w	r0, [r6], #4
 80065a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80065a2:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 80065a6:	e7d9      	b.n	800655c <_vfprintf_r+0x264>
 80065a8:	fb07 2808 	mla	r8, r7, r8, r2
 80065ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065b0:	9207      	str	r2, [sp, #28]
 80065b2:	9a07      	ldr	r2, [sp, #28]
 80065b4:	3a30      	subs	r2, #48	; 0x30
 80065b6:	2a09      	cmp	r2, #9
 80065b8:	d9f6      	bls.n	80065a8 <_vfprintf_r+0x2b0>
 80065ba:	e74b      	b.n	8006454 <_vfprintf_r+0x15c>
 80065bc:	f04f 0800 	mov.w	r8, #0
 80065c0:	e7f7      	b.n	80065b2 <_vfprintf_r+0x2ba>
 80065c2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 80065c6:	e7c9      	b.n	800655c <_vfprintf_r+0x264>
 80065c8:	2200      	movs	r2, #0
 80065ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065cc:	9210      	str	r2, [sp, #64]	; 0x40
 80065ce:	9a07      	ldr	r2, [sp, #28]
 80065d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80065d2:	3a30      	subs	r2, #48	; 0x30
 80065d4:	fb07 2200 	mla	r2, r7, r0, r2
 80065d8:	9210      	str	r2, [sp, #64]	; 0x40
 80065da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065de:	9207      	str	r2, [sp, #28]
 80065e0:	3a30      	subs	r2, #48	; 0x30
 80065e2:	2a09      	cmp	r2, #9
 80065e4:	d9f3      	bls.n	80065ce <_vfprintf_r+0x2d6>
 80065e6:	e735      	b.n	8006454 <_vfprintf_r+0x15c>
 80065e8:	f04b 0b08 	orr.w	fp, fp, #8
 80065ec:	e7b6      	b.n	800655c <_vfprintf_r+0x264>
 80065ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	2b68      	cmp	r3, #104	; 0x68
 80065f4:	bf01      	itttt	eq
 80065f6:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 80065f8:	3301      	addeq	r3, #1
 80065fa:	930b      	streq	r3, [sp, #44]	; 0x2c
 80065fc:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8006600:	bf18      	it	ne
 8006602:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8006606:	e7a9      	b.n	800655c <_vfprintf_r+0x264>
 8006608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b6c      	cmp	r3, #108	; 0x6c
 800660e:	d105      	bne.n	800661c <_vfprintf_r+0x324>
 8006610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006612:	3301      	adds	r3, #1
 8006614:	930b      	str	r3, [sp, #44]	; 0x2c
 8006616:	f04b 0b20 	orr.w	fp, fp, #32
 800661a:	e79f      	b.n	800655c <_vfprintf_r+0x264>
 800661c:	f04b 0b10 	orr.w	fp, fp, #16
 8006620:	e79c      	b.n	800655c <_vfprintf_r+0x264>
 8006622:	4632      	mov	r2, r6
 8006624:	2000      	movs	r0, #0
 8006626:	f852 3b04 	ldr.w	r3, [r2], #4
 800662a:	9206      	str	r2, [sp, #24]
 800662c:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8006630:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8006634:	ab35      	add	r3, sp, #212	; 0xd4
 8006636:	e9cd 0008 	strd	r0, r0, [sp, #32]
 800663a:	9004      	str	r0, [sp, #16]
 800663c:	f04f 0801 	mov.w	r8, #1
 8006640:	4606      	mov	r6, r0
 8006642:	4605      	mov	r5, r0
 8006644:	9303      	str	r3, [sp, #12]
 8006646:	e1c3      	b.n	80069d0 <_vfprintf_r+0x6d8>
	...
 8006650:	f04b 0b10 	orr.w	fp, fp, #16
 8006654:	f01b 0f20 	tst.w	fp, #32
 8006658:	d012      	beq.n	8006680 <_vfprintf_r+0x388>
 800665a:	3607      	adds	r6, #7
 800665c:	f026 0307 	bic.w	r3, r6, #7
 8006660:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8006664:	9306      	str	r3, [sp, #24]
 8006666:	2e00      	cmp	r6, #0
 8006668:	f177 0300 	sbcs.w	r3, r7, #0
 800666c:	da06      	bge.n	800667c <_vfprintf_r+0x384>
 800666e:	4276      	negs	r6, r6
 8006670:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8006674:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8006678:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800667c:	2301      	movs	r3, #1
 800667e:	e392      	b.n	8006da6 <_vfprintf_r+0xaae>
 8006680:	1d33      	adds	r3, r6, #4
 8006682:	f01b 0f10 	tst.w	fp, #16
 8006686:	9306      	str	r3, [sp, #24]
 8006688:	d002      	beq.n	8006690 <_vfprintf_r+0x398>
 800668a:	6836      	ldr	r6, [r6, #0]
 800668c:	17f7      	asrs	r7, r6, #31
 800668e:	e7ea      	b.n	8006666 <_vfprintf_r+0x36e>
 8006690:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006694:	6836      	ldr	r6, [r6, #0]
 8006696:	d001      	beq.n	800669c <_vfprintf_r+0x3a4>
 8006698:	b236      	sxth	r6, r6
 800669a:	e7f7      	b.n	800668c <_vfprintf_r+0x394>
 800669c:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80066a0:	bf18      	it	ne
 80066a2:	b276      	sxtbne	r6, r6
 80066a4:	e7f2      	b.n	800668c <_vfprintf_r+0x394>
 80066a6:	3607      	adds	r6, #7
 80066a8:	f026 0307 	bic.w	r3, r6, #7
 80066ac:	ecb3 7b02 	vldmia	r3!, {d7}
 80066b0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80066b4:	9306      	str	r3, [sp, #24]
 80066b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066b8:	ee09 3a10 	vmov	s18, r3
 80066bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066c2:	ee09 3a90 	vmov	s19, r3
 80066c6:	f04f 32ff 	mov.w	r2, #4294967295
 80066ca:	4b39      	ldr	r3, [pc, #228]	; (80067b0 <_vfprintf_r+0x4b8>)
 80066cc:	ec51 0b19 	vmov	r0, r1, d9
 80066d0:	f7fa fa2c 	bl	8000b2c <__aeabi_dcmpun>
 80066d4:	bb20      	cbnz	r0, 8006720 <_vfprintf_r+0x428>
 80066d6:	4b36      	ldr	r3, [pc, #216]	; (80067b0 <_vfprintf_r+0x4b8>)
 80066d8:	ec51 0b19 	vmov	r0, r1, d9
 80066dc:	f04f 32ff 	mov.w	r2, #4294967295
 80066e0:	f7fa fa06 	bl	8000af0 <__aeabi_dcmple>
 80066e4:	b9e0      	cbnz	r0, 8006720 <_vfprintf_r+0x428>
 80066e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066ea:	2200      	movs	r2, #0
 80066ec:	2300      	movs	r3, #0
 80066ee:	f7fa f9f5 	bl	8000adc <__aeabi_dcmplt>
 80066f2:	b110      	cbz	r0, 80066fa <_vfprintf_r+0x402>
 80066f4:	232d      	movs	r3, #45	; 0x2d
 80066f6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80066fa:	4a2e      	ldr	r2, [pc, #184]	; (80067b4 <_vfprintf_r+0x4bc>)
 80066fc:	482e      	ldr	r0, [pc, #184]	; (80067b8 <_vfprintf_r+0x4c0>)
 80066fe:	9907      	ldr	r1, [sp, #28]
 8006700:	4613      	mov	r3, r2
 8006702:	2947      	cmp	r1, #71	; 0x47
 8006704:	bfc8      	it	gt
 8006706:	4603      	movgt	r3, r0
 8006708:	9303      	str	r3, [sp, #12]
 800670a:	2300      	movs	r3, #0
 800670c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8006710:	9304      	str	r3, [sp, #16]
 8006712:	f04f 0803 	mov.w	r8, #3
 8006716:	461e      	mov	r6, r3
 8006718:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800671c:	461d      	mov	r5, r3
 800671e:	e157      	b.n	80069d0 <_vfprintf_r+0x6d8>
 8006720:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006724:	4610      	mov	r0, r2
 8006726:	4619      	mov	r1, r3
 8006728:	f7fa fa00 	bl	8000b2c <__aeabi_dcmpun>
 800672c:	b140      	cbz	r0, 8006740 <_vfprintf_r+0x448>
 800672e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006730:	4a22      	ldr	r2, [pc, #136]	; (80067bc <_vfprintf_r+0x4c4>)
 8006732:	4823      	ldr	r0, [pc, #140]	; (80067c0 <_vfprintf_r+0x4c8>)
 8006734:	2b00      	cmp	r3, #0
 8006736:	bfbc      	itt	lt
 8006738:	232d      	movlt	r3, #45	; 0x2d
 800673a:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 800673e:	e7de      	b.n	80066fe <_vfprintf_r+0x406>
 8006740:	9b07      	ldr	r3, [sp, #28]
 8006742:	f023 0320 	bic.w	r3, r3, #32
 8006746:	2b41      	cmp	r3, #65	; 0x41
 8006748:	9308      	str	r3, [sp, #32]
 800674a:	d13b      	bne.n	80067c4 <_vfprintf_r+0x4cc>
 800674c:	2330      	movs	r3, #48	; 0x30
 800674e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8006752:	9b07      	ldr	r3, [sp, #28]
 8006754:	2b61      	cmp	r3, #97	; 0x61
 8006756:	bf0c      	ite	eq
 8006758:	2378      	moveq	r3, #120	; 0x78
 800675a:	2358      	movne	r3, #88	; 0x58
 800675c:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 8006760:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8006764:	f04b 0b02 	orr.w	fp, fp, #2
 8006768:	f340 8209 	ble.w	8006b7e <_vfprintf_r+0x886>
 800676c:	f108 0101 	add.w	r1, r8, #1
 8006770:	4650      	mov	r0, sl
 8006772:	f002 f9df 	bl	8008b34 <_malloc_r>
 8006776:	9003      	str	r0, [sp, #12]
 8006778:	2800      	cmp	r0, #0
 800677a:	f040 8204 	bne.w	8006b86 <_vfprintf_r+0x88e>
 800677e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006786:	f8a9 300c 	strh.w	r3, [r9, #12]
 800678a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800678e:	07d9      	lsls	r1, r3, #31
 8006790:	d407      	bmi.n	80067a2 <_vfprintf_r+0x4aa>
 8006792:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006796:	059a      	lsls	r2, r3, #22
 8006798:	d403      	bmi.n	80067a2 <_vfprintf_r+0x4aa>
 800679a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 800679e:	f002 f95c 	bl	8008a5a <__retarget_lock_release_recursive>
 80067a2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80067a6:	065b      	lsls	r3, r3, #25
 80067a8:	f57f adee 	bpl.w	8006388 <_vfprintf_r+0x90>
 80067ac:	e5e9      	b.n	8006382 <_vfprintf_r+0x8a>
 80067ae:	bf00      	nop
 80067b0:	7fefffff 	.word	0x7fefffff
 80067b4:	0800ad6c 	.word	0x0800ad6c
 80067b8:	0800ad70 	.word	0x0800ad70
 80067bc:	0800ad74 	.word	0x0800ad74
 80067c0:	0800ad78 	.word	0x0800ad78
 80067c4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80067c8:	f000 81e0 	beq.w	8006b8c <_vfprintf_r+0x894>
 80067cc:	9b08      	ldr	r3, [sp, #32]
 80067ce:	2b47      	cmp	r3, #71	; 0x47
 80067d0:	f040 81e0 	bne.w	8006b94 <_vfprintf_r+0x89c>
 80067d4:	f1b8 0f00 	cmp.w	r8, #0
 80067d8:	f040 81dc 	bne.w	8006b94 <_vfprintf_r+0x89c>
 80067dc:	f8cd 8010 	str.w	r8, [sp, #16]
 80067e0:	f04f 0801 	mov.w	r8, #1
 80067e4:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 80067e8:	9311      	str	r3, [sp, #68]	; 0x44
 80067ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f280 81d3 	bge.w	8006b98 <_vfprintf_r+0x8a0>
 80067f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067f4:	ee08 3a10 	vmov	s16, r3
 80067f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80067fe:	ee08 3a90 	vmov	s17, r3
 8006802:	232d      	movs	r3, #45	; 0x2d
 8006804:	9318      	str	r3, [sp, #96]	; 0x60
 8006806:	9b08      	ldr	r3, [sp, #32]
 8006808:	2b41      	cmp	r3, #65	; 0x41
 800680a:	f040 81e3 	bne.w	8006bd4 <_vfprintf_r+0x8dc>
 800680e:	eeb0 0a48 	vmov.f32	s0, s16
 8006812:	eef0 0a68 	vmov.f32	s1, s17
 8006816:	a81c      	add	r0, sp, #112	; 0x70
 8006818:	f002 ff18 	bl	800964c <frexp>
 800681c:	2200      	movs	r2, #0
 800681e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006822:	ec51 0b10 	vmov	r0, r1, d0
 8006826:	f7f9 fee7 	bl	80005f8 <__aeabi_dmul>
 800682a:	2200      	movs	r2, #0
 800682c:	2300      	movs	r3, #0
 800682e:	4606      	mov	r6, r0
 8006830:	460f      	mov	r7, r1
 8006832:	f7fa f949 	bl	8000ac8 <__aeabi_dcmpeq>
 8006836:	b108      	cbz	r0, 800683c <_vfprintf_r+0x544>
 8006838:	2301      	movs	r3, #1
 800683a:	931c      	str	r3, [sp, #112]	; 0x70
 800683c:	4bb7      	ldr	r3, [pc, #732]	; (8006b1c <_vfprintf_r+0x824>)
 800683e:	4ab8      	ldr	r2, [pc, #736]	; (8006b20 <_vfprintf_r+0x828>)
 8006840:	9907      	ldr	r1, [sp, #28]
 8006842:	9d03      	ldr	r5, [sp, #12]
 8006844:	2961      	cmp	r1, #97	; 0x61
 8006846:	bf18      	it	ne
 8006848:	461a      	movne	r2, r3
 800684a:	f108 33ff 	add.w	r3, r8, #4294967295
 800684e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006850:	9305      	str	r3, [sp, #20]
 8006852:	4bb4      	ldr	r3, [pc, #720]	; (8006b24 <_vfprintf_r+0x82c>)
 8006854:	2200      	movs	r2, #0
 8006856:	4630      	mov	r0, r6
 8006858:	4639      	mov	r1, r7
 800685a:	f7f9 fecd 	bl	80005f8 <__aeabi_dmul>
 800685e:	460f      	mov	r7, r1
 8006860:	4606      	mov	r6, r0
 8006862:	f7fa f979 	bl	8000b58 <__aeabi_d2iz>
 8006866:	9019      	str	r0, [sp, #100]	; 0x64
 8006868:	f7f9 fe5c 	bl	8000524 <__aeabi_i2d>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4630      	mov	r0, r6
 8006872:	4639      	mov	r1, r7
 8006874:	f7f9 fd08 	bl	8000288 <__aeabi_dsub>
 8006878:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800687a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800687c:	5c9b      	ldrb	r3, [r3, r2]
 800687e:	f805 3b01 	strb.w	r3, [r5], #1
 8006882:	9b05      	ldr	r3, [sp, #20]
 8006884:	9309      	str	r3, [sp, #36]	; 0x24
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	4606      	mov	r6, r0
 800688a:	460f      	mov	r7, r1
 800688c:	d007      	beq.n	800689e <_vfprintf_r+0x5a6>
 800688e:	3b01      	subs	r3, #1
 8006890:	9305      	str	r3, [sp, #20]
 8006892:	2200      	movs	r2, #0
 8006894:	2300      	movs	r3, #0
 8006896:	f7fa f917 	bl	8000ac8 <__aeabi_dcmpeq>
 800689a:	2800      	cmp	r0, #0
 800689c:	d0d9      	beq.n	8006852 <_vfprintf_r+0x55a>
 800689e:	4ba2      	ldr	r3, [pc, #648]	; (8006b28 <_vfprintf_r+0x830>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	4630      	mov	r0, r6
 80068a4:	4639      	mov	r1, r7
 80068a6:	f7fa f937 	bl	8000b18 <__aeabi_dcmpgt>
 80068aa:	b960      	cbnz	r0, 80068c6 <_vfprintf_r+0x5ce>
 80068ac:	4b9e      	ldr	r3, [pc, #632]	; (8006b28 <_vfprintf_r+0x830>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	4630      	mov	r0, r6
 80068b2:	4639      	mov	r1, r7
 80068b4:	f7fa f908 	bl	8000ac8 <__aeabi_dcmpeq>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	f000 8186 	beq.w	8006bca <_vfprintf_r+0x8d2>
 80068be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068c0:	07df      	lsls	r7, r3, #31
 80068c2:	f140 8182 	bpl.w	8006bca <_vfprintf_r+0x8d2>
 80068c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068c8:	9520      	str	r5, [sp, #128]	; 0x80
 80068ca:	7bd9      	ldrb	r1, [r3, #15]
 80068cc:	2030      	movs	r0, #48	; 0x30
 80068ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80068d0:	1e53      	subs	r3, r2, #1
 80068d2:	9320      	str	r3, [sp, #128]	; 0x80
 80068d4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80068d8:	428b      	cmp	r3, r1
 80068da:	f000 8165 	beq.w	8006ba8 <_vfprintf_r+0x8b0>
 80068de:	2b39      	cmp	r3, #57	; 0x39
 80068e0:	bf0b      	itete	eq
 80068e2:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 80068e4:	3301      	addne	r3, #1
 80068e6:	7a9b      	ldrbeq	r3, [r3, #10]
 80068e8:	b2db      	uxtbne	r3, r3
 80068ea:	f802 3c01 	strb.w	r3, [r2, #-1]
 80068ee:	9b03      	ldr	r3, [sp, #12]
 80068f0:	1aeb      	subs	r3, r5, r3
 80068f2:	9305      	str	r3, [sp, #20]
 80068f4:	9b08      	ldr	r3, [sp, #32]
 80068f6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80068f8:	2b47      	cmp	r3, #71	; 0x47
 80068fa:	f040 81b3 	bne.w	8006c64 <_vfprintf_r+0x96c>
 80068fe:	1cee      	adds	r6, r5, #3
 8006900:	db02      	blt.n	8006908 <_vfprintf_r+0x610>
 8006902:	4545      	cmp	r5, r8
 8006904:	f340 81d5 	ble.w	8006cb2 <_vfprintf_r+0x9ba>
 8006908:	9b07      	ldr	r3, [sp, #28]
 800690a:	3b02      	subs	r3, #2
 800690c:	9307      	str	r3, [sp, #28]
 800690e:	9907      	ldr	r1, [sp, #28]
 8006910:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8006914:	f021 0120 	bic.w	r1, r1, #32
 8006918:	2941      	cmp	r1, #65	; 0x41
 800691a:	bf08      	it	eq
 800691c:	320f      	addeq	r2, #15
 800691e:	f105 33ff 	add.w	r3, r5, #4294967295
 8006922:	bf06      	itte	eq
 8006924:	b2d2      	uxtbeq	r2, r2
 8006926:	2101      	moveq	r1, #1
 8006928:	2100      	movne	r1, #0
 800692a:	2b00      	cmp	r3, #0
 800692c:	931c      	str	r3, [sp, #112]	; 0x70
 800692e:	bfb8      	it	lt
 8006930:	f1c5 0301 	rsblt	r3, r5, #1
 8006934:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8006938:	bfb4      	ite	lt
 800693a:	222d      	movlt	r2, #45	; 0x2d
 800693c:	222b      	movge	r2, #43	; 0x2b
 800693e:	2b09      	cmp	r3, #9
 8006940:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8006944:	f340 81a4 	ble.w	8006c90 <_vfprintf_r+0x998>
 8006948:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 800694c:	260a      	movs	r6, #10
 800694e:	4611      	mov	r1, r2
 8006950:	fb93 f5f6 	sdiv	r5, r3, r6
 8006954:	fb06 3015 	mls	r0, r6, r5, r3
 8006958:	3030      	adds	r0, #48	; 0x30
 800695a:	f801 0c01 	strb.w	r0, [r1, #-1]
 800695e:	4618      	mov	r0, r3
 8006960:	2863      	cmp	r0, #99	; 0x63
 8006962:	f102 32ff 	add.w	r2, r2, #4294967295
 8006966:	462b      	mov	r3, r5
 8006968:	dcf1      	bgt.n	800694e <_vfprintf_r+0x656>
 800696a:	3330      	adds	r3, #48	; 0x30
 800696c:	1e88      	subs	r0, r1, #2
 800696e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006972:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8006976:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800697a:	4603      	mov	r3, r0
 800697c:	42ab      	cmp	r3, r5
 800697e:	f0c0 8182 	bcc.w	8006c86 <_vfprintf_r+0x98e>
 8006982:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8006986:	1a52      	subs	r2, r2, r1
 8006988:	42a8      	cmp	r0, r5
 800698a:	bf88      	it	hi
 800698c:	2200      	movhi	r2, #0
 800698e:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8006992:	441a      	add	r2, r3
 8006994:	ab1e      	add	r3, sp, #120	; 0x78
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	9a05      	ldr	r2, [sp, #20]
 800699a:	9315      	str	r3, [sp, #84]	; 0x54
 800699c:	2a01      	cmp	r2, #1
 800699e:	eb03 0802 	add.w	r8, r3, r2
 80069a2:	dc02      	bgt.n	80069aa <_vfprintf_r+0x6b2>
 80069a4:	f01b 0f01 	tst.w	fp, #1
 80069a8:	d001      	beq.n	80069ae <_vfprintf_r+0x6b6>
 80069aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069ac:	4498      	add	r8, r3
 80069ae:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 80069b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b6:	9311      	str	r3, [sp, #68]	; 0x44
 80069b8:	2300      	movs	r3, #0
 80069ba:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80069be:	461d      	mov	r5, r3
 80069c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80069c2:	b113      	cbz	r3, 80069ca <_vfprintf_r+0x6d2>
 80069c4:	232d      	movs	r3, #45	; 0x2d
 80069c6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80069ca:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80069ce:	2600      	movs	r6, #0
 80069d0:	4546      	cmp	r6, r8
 80069d2:	4633      	mov	r3, r6
 80069d4:	bfb8      	it	lt
 80069d6:	4643      	movlt	r3, r8
 80069d8:	9311      	str	r3, [sp, #68]	; 0x44
 80069da:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80069de:	b113      	cbz	r3, 80069e6 <_vfprintf_r+0x6ee>
 80069e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069e2:	3301      	adds	r3, #1
 80069e4:	9311      	str	r3, [sp, #68]	; 0x44
 80069e6:	f01b 0302 	ands.w	r3, fp, #2
 80069ea:	9317      	str	r3, [sp, #92]	; 0x5c
 80069ec:	bf1e      	ittt	ne
 80069ee:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 80069f0:	3302      	addne	r3, #2
 80069f2:	9311      	strne	r3, [sp, #68]	; 0x44
 80069f4:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 80069f8:	9318      	str	r3, [sp, #96]	; 0x60
 80069fa:	d11f      	bne.n	8006a3c <_vfprintf_r+0x744>
 80069fc:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8006a00:	1a9f      	subs	r7, r3, r2
 8006a02:	2f00      	cmp	r7, #0
 8006a04:	dd1a      	ble.n	8006a3c <_vfprintf_r+0x744>
 8006a06:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006a0a:	4848      	ldr	r0, [pc, #288]	; (8006b2c <_vfprintf_r+0x834>)
 8006a0c:	6020      	str	r0, [r4, #0]
 8006a0e:	2f10      	cmp	r7, #16
 8006a10:	f103 0301 	add.w	r3, r3, #1
 8006a14:	f104 0108 	add.w	r1, r4, #8
 8006a18:	f300 82f0 	bgt.w	8006ffc <_vfprintf_r+0xd04>
 8006a1c:	6067      	str	r7, [r4, #4]
 8006a1e:	2b07      	cmp	r3, #7
 8006a20:	4417      	add	r7, r2
 8006a22:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8006a26:	f340 82fc 	ble.w	8007022 <_vfprintf_r+0xd2a>
 8006a2a:	aa22      	add	r2, sp, #136	; 0x88
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	4650      	mov	r0, sl
 8006a30:	f002 feb7 	bl	80097a2 <__sprint_r>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	f040 8632 	bne.w	800769e <_vfprintf_r+0x13a6>
 8006a3a:	ac25      	add	r4, sp, #148	; 0x94
 8006a3c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006a40:	b173      	cbz	r3, 8006a60 <_vfprintf_r+0x768>
 8006a42:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8006a46:	6023      	str	r3, [r4, #0]
 8006a48:	2301      	movs	r3, #1
 8006a4a:	6063      	str	r3, [r4, #4]
 8006a4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006a4e:	3301      	adds	r3, #1
 8006a50:	9324      	str	r3, [sp, #144]	; 0x90
 8006a52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a54:	3301      	adds	r3, #1
 8006a56:	2b07      	cmp	r3, #7
 8006a58:	9323      	str	r3, [sp, #140]	; 0x8c
 8006a5a:	f300 82e4 	bgt.w	8007026 <_vfprintf_r+0xd2e>
 8006a5e:	3408      	adds	r4, #8
 8006a60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a62:	b16b      	cbz	r3, 8006a80 <_vfprintf_r+0x788>
 8006a64:	ab1b      	add	r3, sp, #108	; 0x6c
 8006a66:	6023      	str	r3, [r4, #0]
 8006a68:	2302      	movs	r3, #2
 8006a6a:	6063      	str	r3, [r4, #4]
 8006a6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006a6e:	3302      	adds	r3, #2
 8006a70:	9324      	str	r3, [sp, #144]	; 0x90
 8006a72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a74:	3301      	adds	r3, #1
 8006a76:	2b07      	cmp	r3, #7
 8006a78:	9323      	str	r3, [sp, #140]	; 0x8c
 8006a7a:	f300 82de 	bgt.w	800703a <_vfprintf_r+0xd42>
 8006a7e:	3408      	adds	r4, #8
 8006a80:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006a82:	2b80      	cmp	r3, #128	; 0x80
 8006a84:	d11f      	bne.n	8006ac6 <_vfprintf_r+0x7ce>
 8006a86:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8006a8a:	1a9f      	subs	r7, r3, r2
 8006a8c:	2f00      	cmp	r7, #0
 8006a8e:	dd1a      	ble.n	8006ac6 <_vfprintf_r+0x7ce>
 8006a90:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006a94:	4826      	ldr	r0, [pc, #152]	; (8006b30 <_vfprintf_r+0x838>)
 8006a96:	6020      	str	r0, [r4, #0]
 8006a98:	2f10      	cmp	r7, #16
 8006a9a:	f103 0301 	add.w	r3, r3, #1
 8006a9e:	f104 0108 	add.w	r1, r4, #8
 8006aa2:	f300 82d4 	bgt.w	800704e <_vfprintf_r+0xd56>
 8006aa6:	6067      	str	r7, [r4, #4]
 8006aa8:	2b07      	cmp	r3, #7
 8006aaa:	4417      	add	r7, r2
 8006aac:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8006ab0:	f340 82e0 	ble.w	8007074 <_vfprintf_r+0xd7c>
 8006ab4:	aa22      	add	r2, sp, #136	; 0x88
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	4650      	mov	r0, sl
 8006aba:	f002 fe72 	bl	80097a2 <__sprint_r>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	f040 85ed 	bne.w	800769e <_vfprintf_r+0x13a6>
 8006ac4:	ac25      	add	r4, sp, #148	; 0x94
 8006ac6:	eba6 0608 	sub.w	r6, r6, r8
 8006aca:	2e00      	cmp	r6, #0
 8006acc:	dd1a      	ble.n	8006b04 <_vfprintf_r+0x80c>
 8006ace:	4f18      	ldr	r7, [pc, #96]	; (8006b30 <_vfprintf_r+0x838>)
 8006ad0:	6027      	str	r7, [r4, #0]
 8006ad2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006ad6:	2e10      	cmp	r6, #16
 8006ad8:	f103 0301 	add.w	r3, r3, #1
 8006adc:	f104 0108 	add.w	r1, r4, #8
 8006ae0:	f300 82ca 	bgt.w	8007078 <_vfprintf_r+0xd80>
 8006ae4:	6066      	str	r6, [r4, #4]
 8006ae6:	2b07      	cmp	r3, #7
 8006ae8:	4416      	add	r6, r2
 8006aea:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8006aee:	f340 82d6 	ble.w	800709e <_vfprintf_r+0xda6>
 8006af2:	aa22      	add	r2, sp, #136	; 0x88
 8006af4:	4649      	mov	r1, r9
 8006af6:	4650      	mov	r0, sl
 8006af8:	f002 fe53 	bl	80097a2 <__sprint_r>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	f040 85ce 	bne.w	800769e <_vfprintf_r+0x13a6>
 8006b02:	ac25      	add	r4, sp, #148	; 0x94
 8006b04:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006b08:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006b0a:	f040 82cf 	bne.w	80070ac <_vfprintf_r+0xdb4>
 8006b0e:	9b03      	ldr	r3, [sp, #12]
 8006b10:	e9c4 3800 	strd	r3, r8, [r4]
 8006b14:	4446      	add	r6, r8
 8006b16:	9624      	str	r6, [sp, #144]	; 0x90
 8006b18:	e00c      	b.n	8006b34 <_vfprintf_r+0x83c>
 8006b1a:	bf00      	nop
 8006b1c:	0800ad8d 	.word	0x0800ad8d
 8006b20:	0800ad7c 	.word	0x0800ad7c
 8006b24:	40300000 	.word	0x40300000
 8006b28:	3fe00000 	.word	0x3fe00000
 8006b2c:	0800ada0 	.word	0x0800ada0
 8006b30:	0800adb0 	.word	0x0800adb0
 8006b34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b36:	3301      	adds	r3, #1
 8006b38:	2b07      	cmp	r3, #7
 8006b3a:	9323      	str	r3, [sp, #140]	; 0x8c
 8006b3c:	f300 82fb 	bgt.w	8007136 <_vfprintf_r+0xe3e>
 8006b40:	3408      	adds	r4, #8
 8006b42:	f01b 0f04 	tst.w	fp, #4
 8006b46:	f040 858c 	bne.w	8007662 <_vfprintf_r+0x136a>
 8006b4a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8006b4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006b50:	428a      	cmp	r2, r1
 8006b52:	bfac      	ite	ge
 8006b54:	189b      	addge	r3, r3, r2
 8006b56:	185b      	addlt	r3, r3, r1
 8006b58:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006b5c:	b13b      	cbz	r3, 8006b6e <_vfprintf_r+0x876>
 8006b5e:	aa22      	add	r2, sp, #136	; 0x88
 8006b60:	4649      	mov	r1, r9
 8006b62:	4650      	mov	r0, sl
 8006b64:	f002 fe1d 	bl	80097a2 <__sprint_r>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	f040 8598 	bne.w	800769e <_vfprintf_r+0x13a6>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9323      	str	r3, [sp, #140]	; 0x8c
 8006b72:	9b04      	ldr	r3, [sp, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f040 85ae 	bne.w	80076d6 <_vfprintf_r+0x13de>
 8006b7a:	ac25      	add	r4, sp, #148	; 0x94
 8006b7c:	e0eb      	b.n	8006d56 <_vfprintf_r+0xa5e>
 8006b7e:	ab35      	add	r3, sp, #212	; 0xd4
 8006b80:	9004      	str	r0, [sp, #16]
 8006b82:	9303      	str	r3, [sp, #12]
 8006b84:	e62e      	b.n	80067e4 <_vfprintf_r+0x4ec>
 8006b86:	9b03      	ldr	r3, [sp, #12]
 8006b88:	9304      	str	r3, [sp, #16]
 8006b8a:	e62b      	b.n	80067e4 <_vfprintf_r+0x4ec>
 8006b8c:	9004      	str	r0, [sp, #16]
 8006b8e:	f04f 0806 	mov.w	r8, #6
 8006b92:	e627      	b.n	80067e4 <_vfprintf_r+0x4ec>
 8006b94:	9004      	str	r0, [sp, #16]
 8006b96:	e625      	b.n	80067e4 <_vfprintf_r+0x4ec>
 8006b98:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	eeb0 8a47 	vmov.f32	s16, s14
 8006ba2:	eef0 8a67 	vmov.f32	s17, s15
 8006ba6:	e62d      	b.n	8006804 <_vfprintf_r+0x50c>
 8006ba8:	f802 0c01 	strb.w	r0, [r2, #-1]
 8006bac:	e68f      	b.n	80068ce <_vfprintf_r+0x5d6>
 8006bae:	f803 0b01 	strb.w	r0, [r3], #1
 8006bb2:	1aca      	subs	r2, r1, r3
 8006bb4:	2a00      	cmp	r2, #0
 8006bb6:	dafa      	bge.n	8006bae <_vfprintf_r+0x8b6>
 8006bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bbc:	3201      	adds	r2, #1
 8006bbe:	f103 0301 	add.w	r3, r3, #1
 8006bc2:	bfb8      	it	lt
 8006bc4:	2300      	movlt	r3, #0
 8006bc6:	441d      	add	r5, r3
 8006bc8:	e691      	b.n	80068ee <_vfprintf_r+0x5f6>
 8006bca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bcc:	462b      	mov	r3, r5
 8006bce:	18a9      	adds	r1, r5, r2
 8006bd0:	2030      	movs	r0, #48	; 0x30
 8006bd2:	e7ee      	b.n	8006bb2 <_vfprintf_r+0x8ba>
 8006bd4:	9b08      	ldr	r3, [sp, #32]
 8006bd6:	2b46      	cmp	r3, #70	; 0x46
 8006bd8:	d005      	beq.n	8006be6 <_vfprintf_r+0x8ee>
 8006bda:	2b45      	cmp	r3, #69	; 0x45
 8006bdc:	d11b      	bne.n	8006c16 <_vfprintf_r+0x91e>
 8006bde:	f108 0501 	add.w	r5, r8, #1
 8006be2:	2102      	movs	r1, #2
 8006be4:	e001      	b.n	8006bea <_vfprintf_r+0x8f2>
 8006be6:	4645      	mov	r5, r8
 8006be8:	2103      	movs	r1, #3
 8006bea:	ab20      	add	r3, sp, #128	; 0x80
 8006bec:	9301      	str	r3, [sp, #4]
 8006bee:	ab1d      	add	r3, sp, #116	; 0x74
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	462a      	mov	r2, r5
 8006bf4:	ab1c      	add	r3, sp, #112	; 0x70
 8006bf6:	4650      	mov	r0, sl
 8006bf8:	eeb0 0a48 	vmov.f32	s0, s16
 8006bfc:	eef0 0a68 	vmov.f32	s1, s17
 8006c00:	f000 fee6 	bl	80079d0 <_dtoa_r>
 8006c04:	9b08      	ldr	r3, [sp, #32]
 8006c06:	9003      	str	r0, [sp, #12]
 8006c08:	2b47      	cmp	r3, #71	; 0x47
 8006c0a:	d106      	bne.n	8006c1a <_vfprintf_r+0x922>
 8006c0c:	f01b 0f01 	tst.w	fp, #1
 8006c10:	d103      	bne.n	8006c1a <_vfprintf_r+0x922>
 8006c12:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006c14:	e66b      	b.n	80068ee <_vfprintf_r+0x5f6>
 8006c16:	4645      	mov	r5, r8
 8006c18:	e7e3      	b.n	8006be2 <_vfprintf_r+0x8ea>
 8006c1a:	9b03      	ldr	r3, [sp, #12]
 8006c1c:	195e      	adds	r6, r3, r5
 8006c1e:	9b08      	ldr	r3, [sp, #32]
 8006c20:	2b46      	cmp	r3, #70	; 0x46
 8006c22:	d10f      	bne.n	8006c44 <_vfprintf_r+0x94c>
 8006c24:	9b03      	ldr	r3, [sp, #12]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	2b30      	cmp	r3, #48	; 0x30
 8006c2a:	d109      	bne.n	8006c40 <_vfprintf_r+0x948>
 8006c2c:	ec51 0b18 	vmov	r0, r1, d8
 8006c30:	2200      	movs	r2, #0
 8006c32:	2300      	movs	r3, #0
 8006c34:	f7f9 ff48 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c38:	b910      	cbnz	r0, 8006c40 <_vfprintf_r+0x948>
 8006c3a:	f1c5 0501 	rsb	r5, r5, #1
 8006c3e:	951c      	str	r5, [sp, #112]	; 0x70
 8006c40:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006c42:	441e      	add	r6, r3
 8006c44:	ec51 0b18 	vmov	r0, r1, d8
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f7f9 ff3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c50:	b100      	cbz	r0, 8006c54 <_vfprintf_r+0x95c>
 8006c52:	9620      	str	r6, [sp, #128]	; 0x80
 8006c54:	2230      	movs	r2, #48	; 0x30
 8006c56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006c58:	429e      	cmp	r6, r3
 8006c5a:	d9da      	bls.n	8006c12 <_vfprintf_r+0x91a>
 8006c5c:	1c59      	adds	r1, r3, #1
 8006c5e:	9120      	str	r1, [sp, #128]	; 0x80
 8006c60:	701a      	strb	r2, [r3, #0]
 8006c62:	e7f8      	b.n	8006c56 <_vfprintf_r+0x95e>
 8006c64:	9b08      	ldr	r3, [sp, #32]
 8006c66:	2b46      	cmp	r3, #70	; 0x46
 8006c68:	f47f ae51 	bne.w	800690e <_vfprintf_r+0x616>
 8006c6c:	f00b 0301 	and.w	r3, fp, #1
 8006c70:	2d00      	cmp	r5, #0
 8006c72:	ea43 0308 	orr.w	r3, r3, r8
 8006c76:	dd18      	ble.n	8006caa <_vfprintf_r+0x9b2>
 8006c78:	b383      	cbz	r3, 8006cdc <_vfprintf_r+0x9e4>
 8006c7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c7c:	18eb      	adds	r3, r5, r3
 8006c7e:	4498      	add	r8, r3
 8006c80:	2366      	movs	r3, #102	; 0x66
 8006c82:	9307      	str	r3, [sp, #28]
 8006c84:	e030      	b.n	8006ce8 <_vfprintf_r+0x9f0>
 8006c86:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006c8a:	f802 6b01 	strb.w	r6, [r2], #1
 8006c8e:	e675      	b.n	800697c <_vfprintf_r+0x684>
 8006c90:	b941      	cbnz	r1, 8006ca4 <_vfprintf_r+0x9ac>
 8006c92:	2230      	movs	r2, #48	; 0x30
 8006c94:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8006c98:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8006c9c:	3330      	adds	r3, #48	; 0x30
 8006c9e:	f802 3b01 	strb.w	r3, [r2], #1
 8006ca2:	e677      	b.n	8006994 <_vfprintf_r+0x69c>
 8006ca4:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8006ca8:	e7f8      	b.n	8006c9c <_vfprintf_r+0x9a4>
 8006caa:	b1cb      	cbz	r3, 8006ce0 <_vfprintf_r+0x9e8>
 8006cac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cae:	3301      	adds	r3, #1
 8006cb0:	e7e5      	b.n	8006c7e <_vfprintf_r+0x986>
 8006cb2:	9b05      	ldr	r3, [sp, #20]
 8006cb4:	429d      	cmp	r5, r3
 8006cb6:	db07      	blt.n	8006cc8 <_vfprintf_r+0x9d0>
 8006cb8:	f01b 0f01 	tst.w	fp, #1
 8006cbc:	d029      	beq.n	8006d12 <_vfprintf_r+0xa1a>
 8006cbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cc0:	eb05 0803 	add.w	r8, r5, r3
 8006cc4:	2367      	movs	r3, #103	; 0x67
 8006cc6:	e7dc      	b.n	8006c82 <_vfprintf_r+0x98a>
 8006cc8:	9b05      	ldr	r3, [sp, #20]
 8006cca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ccc:	2d00      	cmp	r5, #0
 8006cce:	eb03 0802 	add.w	r8, r3, r2
 8006cd2:	dcf7      	bgt.n	8006cc4 <_vfprintf_r+0x9cc>
 8006cd4:	f1c5 0301 	rsb	r3, r5, #1
 8006cd8:	4498      	add	r8, r3
 8006cda:	e7f3      	b.n	8006cc4 <_vfprintf_r+0x9cc>
 8006cdc:	46a8      	mov	r8, r5
 8006cde:	e7cf      	b.n	8006c80 <_vfprintf_r+0x988>
 8006ce0:	2366      	movs	r3, #102	; 0x66
 8006ce2:	9307      	str	r3, [sp, #28]
 8006ce4:	f04f 0801 	mov.w	r8, #1
 8006ce8:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8006cec:	9309      	str	r3, [sp, #36]	; 0x24
 8006cee:	d023      	beq.n	8006d38 <_vfprintf_r+0xa40>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	2d00      	cmp	r5, #0
 8006cf4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8006cf8:	f77f ae62 	ble.w	80069c0 <_vfprintf_r+0x6c8>
 8006cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2bff      	cmp	r3, #255	; 0xff
 8006d02:	d108      	bne.n	8006d16 <_vfprintf_r+0xa1e>
 8006d04:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d08:	4413      	add	r3, r2
 8006d0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d0c:	fb02 8803 	mla	r8, r2, r3, r8
 8006d10:	e656      	b.n	80069c0 <_vfprintf_r+0x6c8>
 8006d12:	46a8      	mov	r8, r5
 8006d14:	e7d6      	b.n	8006cc4 <_vfprintf_r+0x9cc>
 8006d16:	42ab      	cmp	r3, r5
 8006d18:	daf4      	bge.n	8006d04 <_vfprintf_r+0xa0c>
 8006d1a:	1aed      	subs	r5, r5, r3
 8006d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d1e:	785b      	ldrb	r3, [r3, #1]
 8006d20:	b133      	cbz	r3, 8006d30 <_vfprintf_r+0xa38>
 8006d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d24:	3301      	adds	r3, #1
 8006d26:	9309      	str	r3, [sp, #36]	; 0x24
 8006d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	930a      	str	r3, [sp, #40]	; 0x28
 8006d2e:	e7e5      	b.n	8006cfc <_vfprintf_r+0xa04>
 8006d30:	9b08      	ldr	r3, [sp, #32]
 8006d32:	3301      	adds	r3, #1
 8006d34:	9308      	str	r3, [sp, #32]
 8006d36:	e7e1      	b.n	8006cfc <_vfprintf_r+0xa04>
 8006d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d3a:	9308      	str	r3, [sp, #32]
 8006d3c:	e640      	b.n	80069c0 <_vfprintf_r+0x6c8>
 8006d3e:	4632      	mov	r2, r6
 8006d40:	f01b 0f20 	tst.w	fp, #32
 8006d44:	f852 3b04 	ldr.w	r3, [r2], #4
 8006d48:	9206      	str	r2, [sp, #24]
 8006d4a:	d009      	beq.n	8006d60 <_vfprintf_r+0xa68>
 8006d4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d4e:	4610      	mov	r0, r2
 8006d50:	17d1      	asrs	r1, r2, #31
 8006d52:	e9c3 0100 	strd	r0, r1, [r3]
 8006d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d58:	9e06      	ldr	r6, [sp, #24]
 8006d5a:	9303      	str	r3, [sp, #12]
 8006d5c:	f7ff bb4f 	b.w	80063fe <_vfprintf_r+0x106>
 8006d60:	f01b 0f10 	tst.w	fp, #16
 8006d64:	d002      	beq.n	8006d6c <_vfprintf_r+0xa74>
 8006d66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	e7f4      	b.n	8006d56 <_vfprintf_r+0xa5e>
 8006d6c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006d70:	d002      	beq.n	8006d78 <_vfprintf_r+0xa80>
 8006d72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d74:	801a      	strh	r2, [r3, #0]
 8006d76:	e7ee      	b.n	8006d56 <_vfprintf_r+0xa5e>
 8006d78:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8006d7c:	d0f3      	beq.n	8006d66 <_vfprintf_r+0xa6e>
 8006d7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	e7e8      	b.n	8006d56 <_vfprintf_r+0xa5e>
 8006d84:	f04b 0b10 	orr.w	fp, fp, #16
 8006d88:	f01b 0f20 	tst.w	fp, #32
 8006d8c:	d01e      	beq.n	8006dcc <_vfprintf_r+0xad4>
 8006d8e:	3607      	adds	r6, #7
 8006d90:	f026 0307 	bic.w	r3, r6, #7
 8006d94:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8006d98:	9306      	str	r3, [sp, #24]
 8006d9a:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8006d9e:	2300      	movs	r3, #0
 8006da0:	2200      	movs	r2, #0
 8006da2:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8006da6:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006daa:	f000 84a9 	beq.w	8007700 <_vfprintf_r+0x1408>
 8006dae:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8006db2:	9204      	str	r2, [sp, #16]
 8006db4:	ea56 0207 	orrs.w	r2, r6, r7
 8006db8:	f040 84a8 	bne.w	800770c <_vfprintf_r+0x1414>
 8006dbc:	f1b8 0f00 	cmp.w	r8, #0
 8006dc0:	f000 8104 	beq.w	8006fcc <_vfprintf_r+0xcd4>
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	f040 84a4 	bne.w	8007712 <_vfprintf_r+0x141a>
 8006dca:	e09a      	b.n	8006f02 <_vfprintf_r+0xc0a>
 8006dcc:	1d33      	adds	r3, r6, #4
 8006dce:	f01b 0f10 	tst.w	fp, #16
 8006dd2:	9306      	str	r3, [sp, #24]
 8006dd4:	d001      	beq.n	8006dda <_vfprintf_r+0xae2>
 8006dd6:	6836      	ldr	r6, [r6, #0]
 8006dd8:	e003      	b.n	8006de2 <_vfprintf_r+0xaea>
 8006dda:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006dde:	d002      	beq.n	8006de6 <_vfprintf_r+0xaee>
 8006de0:	8836      	ldrh	r6, [r6, #0]
 8006de2:	2700      	movs	r7, #0
 8006de4:	e7d9      	b.n	8006d9a <_vfprintf_r+0xaa2>
 8006de6:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8006dea:	d0f4      	beq.n	8006dd6 <_vfprintf_r+0xade>
 8006dec:	7836      	ldrb	r6, [r6, #0]
 8006dee:	e7f8      	b.n	8006de2 <_vfprintf_r+0xaea>
 8006df0:	4633      	mov	r3, r6
 8006df2:	2278      	movs	r2, #120	; 0x78
 8006df4:	f853 6b04 	ldr.w	r6, [r3], #4
 8006df8:	9306      	str	r3, [sp, #24]
 8006dfa:	f647 0330 	movw	r3, #30768	; 0x7830
 8006dfe:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8006e02:	4ba8      	ldr	r3, [pc, #672]	; (80070a4 <_vfprintf_r+0xdac>)
 8006e04:	9316      	str	r3, [sp, #88]	; 0x58
 8006e06:	2700      	movs	r7, #0
 8006e08:	f04b 0b02 	orr.w	fp, fp, #2
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	9207      	str	r2, [sp, #28]
 8006e10:	e7c6      	b.n	8006da0 <_vfprintf_r+0xaa8>
 8006e12:	4632      	mov	r2, r6
 8006e14:	2500      	movs	r5, #0
 8006e16:	f852 3b04 	ldr.w	r3, [r2], #4
 8006e1a:	9303      	str	r3, [sp, #12]
 8006e1c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006e20:	9206      	str	r2, [sp, #24]
 8006e22:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8006e26:	d010      	beq.n	8006e4a <_vfprintf_r+0xb52>
 8006e28:	9803      	ldr	r0, [sp, #12]
 8006e2a:	4642      	mov	r2, r8
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	f7f9 f9cf 	bl	80001d0 <memchr>
 8006e32:	9004      	str	r0, [sp, #16]
 8006e34:	2800      	cmp	r0, #0
 8006e36:	f000 80df 	beq.w	8006ff8 <_vfprintf_r+0xd00>
 8006e3a:	9a03      	ldr	r2, [sp, #12]
 8006e3c:	9504      	str	r5, [sp, #16]
 8006e3e:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8006e42:	eba0 0802 	sub.w	r8, r0, r2
 8006e46:	462e      	mov	r6, r5
 8006e48:	e5c2      	b.n	80069d0 <_vfprintf_r+0x6d8>
 8006e4a:	9803      	ldr	r0, [sp, #12]
 8006e4c:	f7f9 fa10 	bl	8000270 <strlen>
 8006e50:	462e      	mov	r6, r5
 8006e52:	4680      	mov	r8, r0
 8006e54:	9504      	str	r5, [sp, #16]
 8006e56:	4633      	mov	r3, r6
 8006e58:	e45e      	b.n	8006718 <_vfprintf_r+0x420>
 8006e5a:	f04b 0b10 	orr.w	fp, fp, #16
 8006e5e:	f01b 0f20 	tst.w	fp, #32
 8006e62:	d007      	beq.n	8006e74 <_vfprintf_r+0xb7c>
 8006e64:	3607      	adds	r6, #7
 8006e66:	f026 0307 	bic.w	r3, r6, #7
 8006e6a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8006e6e:	9306      	str	r3, [sp, #24]
 8006e70:	2301      	movs	r3, #1
 8006e72:	e795      	b.n	8006da0 <_vfprintf_r+0xaa8>
 8006e74:	1d33      	adds	r3, r6, #4
 8006e76:	f01b 0f10 	tst.w	fp, #16
 8006e7a:	9306      	str	r3, [sp, #24]
 8006e7c:	d001      	beq.n	8006e82 <_vfprintf_r+0xb8a>
 8006e7e:	6836      	ldr	r6, [r6, #0]
 8006e80:	e003      	b.n	8006e8a <_vfprintf_r+0xb92>
 8006e82:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006e86:	d002      	beq.n	8006e8e <_vfprintf_r+0xb96>
 8006e88:	8836      	ldrh	r6, [r6, #0]
 8006e8a:	2700      	movs	r7, #0
 8006e8c:	e7f0      	b.n	8006e70 <_vfprintf_r+0xb78>
 8006e8e:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8006e92:	d0f4      	beq.n	8006e7e <_vfprintf_r+0xb86>
 8006e94:	7836      	ldrb	r6, [r6, #0]
 8006e96:	e7f8      	b.n	8006e8a <_vfprintf_r+0xb92>
 8006e98:	4b83      	ldr	r3, [pc, #524]	; (80070a8 <_vfprintf_r+0xdb0>)
 8006e9a:	9316      	str	r3, [sp, #88]	; 0x58
 8006e9c:	f01b 0f20 	tst.w	fp, #32
 8006ea0:	d019      	beq.n	8006ed6 <_vfprintf_r+0xbde>
 8006ea2:	3607      	adds	r6, #7
 8006ea4:	f026 0307 	bic.w	r3, r6, #7
 8006ea8:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8006eac:	9306      	str	r3, [sp, #24]
 8006eae:	f01b 0f01 	tst.w	fp, #1
 8006eb2:	d00a      	beq.n	8006eca <_vfprintf_r+0xbd2>
 8006eb4:	ea56 0307 	orrs.w	r3, r6, r7
 8006eb8:	d007      	beq.n	8006eca <_vfprintf_r+0xbd2>
 8006eba:	2330      	movs	r3, #48	; 0x30
 8006ebc:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8006ec0:	9b07      	ldr	r3, [sp, #28]
 8006ec2:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8006ec6:	f04b 0b02 	orr.w	fp, fp, #2
 8006eca:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8006ece:	2302      	movs	r3, #2
 8006ed0:	e766      	b.n	8006da0 <_vfprintf_r+0xaa8>
 8006ed2:	4b74      	ldr	r3, [pc, #464]	; (80070a4 <_vfprintf_r+0xdac>)
 8006ed4:	e7e1      	b.n	8006e9a <_vfprintf_r+0xba2>
 8006ed6:	1d33      	adds	r3, r6, #4
 8006ed8:	f01b 0f10 	tst.w	fp, #16
 8006edc:	9306      	str	r3, [sp, #24]
 8006ede:	d001      	beq.n	8006ee4 <_vfprintf_r+0xbec>
 8006ee0:	6836      	ldr	r6, [r6, #0]
 8006ee2:	e003      	b.n	8006eec <_vfprintf_r+0xbf4>
 8006ee4:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006ee8:	d002      	beq.n	8006ef0 <_vfprintf_r+0xbf8>
 8006eea:	8836      	ldrh	r6, [r6, #0]
 8006eec:	2700      	movs	r7, #0
 8006eee:	e7de      	b.n	8006eae <_vfprintf_r+0xbb6>
 8006ef0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8006ef4:	d0f4      	beq.n	8006ee0 <_vfprintf_r+0xbe8>
 8006ef6:	7836      	ldrb	r6, [r6, #0]
 8006ef8:	e7f8      	b.n	8006eec <_vfprintf_r+0xbf4>
 8006efa:	2f00      	cmp	r7, #0
 8006efc:	bf08      	it	eq
 8006efe:	2e0a      	cmpeq	r6, #10
 8006f00:	d206      	bcs.n	8006f10 <_vfprintf_r+0xc18>
 8006f02:	3630      	adds	r6, #48	; 0x30
 8006f04:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8006f08:	f20d 1337 	addw	r3, sp, #311	; 0x137
 8006f0c:	f000 bc23 	b.w	8007756 <_vfprintf_r+0x145e>
 8006f10:	2300      	movs	r3, #0
 8006f12:	9305      	str	r3, [sp, #20]
 8006f14:	9b04      	ldr	r3, [sp, #16]
 8006f16:	ad4e      	add	r5, sp, #312	; 0x138
 8006f18:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 8006f1c:	1e6b      	subs	r3, r5, #1
 8006f1e:	9303      	str	r3, [sp, #12]
 8006f20:	220a      	movs	r2, #10
 8006f22:	2300      	movs	r3, #0
 8006f24:	4630      	mov	r0, r6
 8006f26:	4639      	mov	r1, r7
 8006f28:	f7f9 fe8e 	bl	8000c48 <__aeabi_uldivmod>
 8006f2c:	9b05      	ldr	r3, [sp, #20]
 8006f2e:	3230      	adds	r2, #48	; 0x30
 8006f30:	3301      	adds	r3, #1
 8006f32:	f805 2c01 	strb.w	r2, [r5, #-1]
 8006f36:	9305      	str	r3, [sp, #20]
 8006f38:	f1bb 0f00 	cmp.w	fp, #0
 8006f3c:	d019      	beq.n	8006f72 <_vfprintf_r+0xc7a>
 8006f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f40:	9a05      	ldr	r2, [sp, #20]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d114      	bne.n	8006f72 <_vfprintf_r+0xc7a>
 8006f48:	2aff      	cmp	r2, #255	; 0xff
 8006f4a:	d012      	beq.n	8006f72 <_vfprintf_r+0xc7a>
 8006f4c:	2f00      	cmp	r7, #0
 8006f4e:	bf08      	it	eq
 8006f50:	2e0a      	cmpeq	r6, #10
 8006f52:	d30e      	bcc.n	8006f72 <_vfprintf_r+0xc7a>
 8006f54:	9b03      	ldr	r3, [sp, #12]
 8006f56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f58:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006f5a:	1a9b      	subs	r3, r3, r2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	9303      	str	r3, [sp, #12]
 8006f60:	f002 fbff 	bl	8009762 <strncpy>
 8006f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f66:	785d      	ldrb	r5, [r3, #1]
 8006f68:	b1e5      	cbz	r5, 8006fa4 <_vfprintf_r+0xcac>
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	930a      	str	r3, [sp, #40]	; 0x28
 8006f6e:	2300      	movs	r3, #0
 8006f70:	9305      	str	r3, [sp, #20]
 8006f72:	220a      	movs	r2, #10
 8006f74:	2300      	movs	r3, #0
 8006f76:	4630      	mov	r0, r6
 8006f78:	4639      	mov	r1, r7
 8006f7a:	f7f9 fe65 	bl	8000c48 <__aeabi_uldivmod>
 8006f7e:	2f00      	cmp	r7, #0
 8006f80:	bf08      	it	eq
 8006f82:	2e0a      	cmpeq	r6, #10
 8006f84:	d20a      	bcs.n	8006f9c <_vfprintf_r+0xca4>
 8006f86:	9b03      	ldr	r3, [sp, #12]
 8006f88:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006f8c:	aa4e      	add	r2, sp, #312	; 0x138
 8006f8e:	4646      	mov	r6, r8
 8006f90:	eba2 0803 	sub.w	r8, r2, r3
 8006f94:	2300      	movs	r3, #0
 8006f96:	9304      	str	r3, [sp, #16]
 8006f98:	f7ff bbbe 	b.w	8006718 <_vfprintf_r+0x420>
 8006f9c:	9d03      	ldr	r5, [sp, #12]
 8006f9e:	4606      	mov	r6, r0
 8006fa0:	460f      	mov	r7, r1
 8006fa2:	e7bb      	b.n	8006f1c <_vfprintf_r+0xc24>
 8006fa4:	9505      	str	r5, [sp, #20]
 8006fa6:	e7e4      	b.n	8006f72 <_vfprintf_r+0xc7a>
 8006fa8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006faa:	f006 030f 	and.w	r3, r6, #15
 8006fae:	5cd3      	ldrb	r3, [r2, r3]
 8006fb0:	9a03      	ldr	r2, [sp, #12]
 8006fb2:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8006fb6:	0933      	lsrs	r3, r6, #4
 8006fb8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8006fbc:	9203      	str	r2, [sp, #12]
 8006fbe:	093a      	lsrs	r2, r7, #4
 8006fc0:	461e      	mov	r6, r3
 8006fc2:	4617      	mov	r7, r2
 8006fc4:	ea56 0307 	orrs.w	r3, r6, r7
 8006fc8:	d1ee      	bne.n	8006fa8 <_vfprintf_r+0xcb0>
 8006fca:	e7dc      	b.n	8006f86 <_vfprintf_r+0xc8e>
 8006fcc:	b933      	cbnz	r3, 8006fdc <_vfprintf_r+0xce4>
 8006fce:	f01b 0f01 	tst.w	fp, #1
 8006fd2:	d003      	beq.n	8006fdc <_vfprintf_r+0xce4>
 8006fd4:	2330      	movs	r3, #48	; 0x30
 8006fd6:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8006fda:	e795      	b.n	8006f08 <_vfprintf_r+0xc10>
 8006fdc:	ab4e      	add	r3, sp, #312	; 0x138
 8006fde:	e3ba      	b.n	8007756 <_vfprintf_r+0x145e>
 8006fe0:	9b07      	ldr	r3, [sp, #28]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 837d 	beq.w	80076e2 <_vfprintf_r+0x13ea>
 8006fe8:	2000      	movs	r0, #0
 8006fea:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8006fee:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8006ff2:	9606      	str	r6, [sp, #24]
 8006ff4:	f7ff bb1e 	b.w	8006634 <_vfprintf_r+0x33c>
 8006ff8:	9e04      	ldr	r6, [sp, #16]
 8006ffa:	e72c      	b.n	8006e56 <_vfprintf_r+0xb5e>
 8006ffc:	2010      	movs	r0, #16
 8006ffe:	4402      	add	r2, r0
 8007000:	2b07      	cmp	r3, #7
 8007002:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007006:	6060      	str	r0, [r4, #4]
 8007008:	dd08      	ble.n	800701c <_vfprintf_r+0xd24>
 800700a:	aa22      	add	r2, sp, #136	; 0x88
 800700c:	4649      	mov	r1, r9
 800700e:	4650      	mov	r0, sl
 8007010:	f002 fbc7 	bl	80097a2 <__sprint_r>
 8007014:	2800      	cmp	r0, #0
 8007016:	f040 8342 	bne.w	800769e <_vfprintf_r+0x13a6>
 800701a:	a925      	add	r1, sp, #148	; 0x94
 800701c:	3f10      	subs	r7, #16
 800701e:	460c      	mov	r4, r1
 8007020:	e4f1      	b.n	8006a06 <_vfprintf_r+0x70e>
 8007022:	460c      	mov	r4, r1
 8007024:	e50a      	b.n	8006a3c <_vfprintf_r+0x744>
 8007026:	aa22      	add	r2, sp, #136	; 0x88
 8007028:	4649      	mov	r1, r9
 800702a:	4650      	mov	r0, sl
 800702c:	f002 fbb9 	bl	80097a2 <__sprint_r>
 8007030:	2800      	cmp	r0, #0
 8007032:	f040 8334 	bne.w	800769e <_vfprintf_r+0x13a6>
 8007036:	ac25      	add	r4, sp, #148	; 0x94
 8007038:	e512      	b.n	8006a60 <_vfprintf_r+0x768>
 800703a:	aa22      	add	r2, sp, #136	; 0x88
 800703c:	4649      	mov	r1, r9
 800703e:	4650      	mov	r0, sl
 8007040:	f002 fbaf 	bl	80097a2 <__sprint_r>
 8007044:	2800      	cmp	r0, #0
 8007046:	f040 832a 	bne.w	800769e <_vfprintf_r+0x13a6>
 800704a:	ac25      	add	r4, sp, #148	; 0x94
 800704c:	e518      	b.n	8006a80 <_vfprintf_r+0x788>
 800704e:	2010      	movs	r0, #16
 8007050:	4402      	add	r2, r0
 8007052:	2b07      	cmp	r3, #7
 8007054:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007058:	6060      	str	r0, [r4, #4]
 800705a:	dd08      	ble.n	800706e <_vfprintf_r+0xd76>
 800705c:	aa22      	add	r2, sp, #136	; 0x88
 800705e:	4649      	mov	r1, r9
 8007060:	4650      	mov	r0, sl
 8007062:	f002 fb9e 	bl	80097a2 <__sprint_r>
 8007066:	2800      	cmp	r0, #0
 8007068:	f040 8319 	bne.w	800769e <_vfprintf_r+0x13a6>
 800706c:	a925      	add	r1, sp, #148	; 0x94
 800706e:	3f10      	subs	r7, #16
 8007070:	460c      	mov	r4, r1
 8007072:	e50d      	b.n	8006a90 <_vfprintf_r+0x798>
 8007074:	460c      	mov	r4, r1
 8007076:	e526      	b.n	8006ac6 <_vfprintf_r+0x7ce>
 8007078:	2010      	movs	r0, #16
 800707a:	4402      	add	r2, r0
 800707c:	2b07      	cmp	r3, #7
 800707e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007082:	6060      	str	r0, [r4, #4]
 8007084:	dd08      	ble.n	8007098 <_vfprintf_r+0xda0>
 8007086:	aa22      	add	r2, sp, #136	; 0x88
 8007088:	4649      	mov	r1, r9
 800708a:	4650      	mov	r0, sl
 800708c:	f002 fb89 	bl	80097a2 <__sprint_r>
 8007090:	2800      	cmp	r0, #0
 8007092:	f040 8304 	bne.w	800769e <_vfprintf_r+0x13a6>
 8007096:	a925      	add	r1, sp, #148	; 0x94
 8007098:	3e10      	subs	r6, #16
 800709a:	460c      	mov	r4, r1
 800709c:	e518      	b.n	8006ad0 <_vfprintf_r+0x7d8>
 800709e:	460c      	mov	r4, r1
 80070a0:	e530      	b.n	8006b04 <_vfprintf_r+0x80c>
 80070a2:	bf00      	nop
 80070a4:	0800ad7c 	.word	0x0800ad7c
 80070a8:	0800ad8d 	.word	0x0800ad8d
 80070ac:	9b07      	ldr	r3, [sp, #28]
 80070ae:	2b65      	cmp	r3, #101	; 0x65
 80070b0:	f340 8242 	ble.w	8007538 <_vfprintf_r+0x1240>
 80070b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070b8:	2200      	movs	r2, #0
 80070ba:	2300      	movs	r3, #0
 80070bc:	f7f9 fd04 	bl	8000ac8 <__aeabi_dcmpeq>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	d068      	beq.n	8007196 <_vfprintf_r+0xe9e>
 80070c4:	4b6d      	ldr	r3, [pc, #436]	; (800727c <_vfprintf_r+0xf84>)
 80070c6:	6023      	str	r3, [r4, #0]
 80070c8:	2301      	movs	r3, #1
 80070ca:	441e      	add	r6, r3
 80070cc:	6063      	str	r3, [r4, #4]
 80070ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070d0:	9624      	str	r6, [sp, #144]	; 0x90
 80070d2:	3301      	adds	r3, #1
 80070d4:	2b07      	cmp	r3, #7
 80070d6:	9323      	str	r3, [sp, #140]	; 0x8c
 80070d8:	dc37      	bgt.n	800714a <_vfprintf_r+0xe52>
 80070da:	3408      	adds	r4, #8
 80070dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80070de:	9a05      	ldr	r2, [sp, #20]
 80070e0:	4293      	cmp	r3, r2
 80070e2:	db03      	blt.n	80070ec <_vfprintf_r+0xdf4>
 80070e4:	f01b 0f01 	tst.w	fp, #1
 80070e8:	f43f ad2b 	beq.w	8006b42 <_vfprintf_r+0x84a>
 80070ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070ee:	6023      	str	r3, [r4, #0]
 80070f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070f4:	6063      	str	r3, [r4, #4]
 80070f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80070f8:	4413      	add	r3, r2
 80070fa:	9324      	str	r3, [sp, #144]	; 0x90
 80070fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070fe:	3301      	adds	r3, #1
 8007100:	2b07      	cmp	r3, #7
 8007102:	9323      	str	r3, [sp, #140]	; 0x8c
 8007104:	dc2b      	bgt.n	800715e <_vfprintf_r+0xe66>
 8007106:	3408      	adds	r4, #8
 8007108:	9b05      	ldr	r3, [sp, #20]
 800710a:	1e5d      	subs	r5, r3, #1
 800710c:	2d00      	cmp	r5, #0
 800710e:	f77f ad18 	ble.w	8006b42 <_vfprintf_r+0x84a>
 8007112:	4e5b      	ldr	r6, [pc, #364]	; (8007280 <_vfprintf_r+0xf88>)
 8007114:	2710      	movs	r7, #16
 8007116:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800711a:	2d10      	cmp	r5, #16
 800711c:	f103 0301 	add.w	r3, r3, #1
 8007120:	f104 0108 	add.w	r1, r4, #8
 8007124:	6026      	str	r6, [r4, #0]
 8007126:	dc24      	bgt.n	8007172 <_vfprintf_r+0xe7a>
 8007128:	6065      	str	r5, [r4, #4]
 800712a:	2b07      	cmp	r3, #7
 800712c:	4415      	add	r5, r2
 800712e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8007132:	f340 8293 	ble.w	800765c <_vfprintf_r+0x1364>
 8007136:	aa22      	add	r2, sp, #136	; 0x88
 8007138:	4649      	mov	r1, r9
 800713a:	4650      	mov	r0, sl
 800713c:	f002 fb31 	bl	80097a2 <__sprint_r>
 8007140:	2800      	cmp	r0, #0
 8007142:	f040 82ac 	bne.w	800769e <_vfprintf_r+0x13a6>
 8007146:	ac25      	add	r4, sp, #148	; 0x94
 8007148:	e4fb      	b.n	8006b42 <_vfprintf_r+0x84a>
 800714a:	aa22      	add	r2, sp, #136	; 0x88
 800714c:	4649      	mov	r1, r9
 800714e:	4650      	mov	r0, sl
 8007150:	f002 fb27 	bl	80097a2 <__sprint_r>
 8007154:	2800      	cmp	r0, #0
 8007156:	f040 82a2 	bne.w	800769e <_vfprintf_r+0x13a6>
 800715a:	ac25      	add	r4, sp, #148	; 0x94
 800715c:	e7be      	b.n	80070dc <_vfprintf_r+0xde4>
 800715e:	aa22      	add	r2, sp, #136	; 0x88
 8007160:	4649      	mov	r1, r9
 8007162:	4650      	mov	r0, sl
 8007164:	f002 fb1d 	bl	80097a2 <__sprint_r>
 8007168:	2800      	cmp	r0, #0
 800716a:	f040 8298 	bne.w	800769e <_vfprintf_r+0x13a6>
 800716e:	ac25      	add	r4, sp, #148	; 0x94
 8007170:	e7ca      	b.n	8007108 <_vfprintf_r+0xe10>
 8007172:	3210      	adds	r2, #16
 8007174:	2b07      	cmp	r3, #7
 8007176:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800717a:	6067      	str	r7, [r4, #4]
 800717c:	dd08      	ble.n	8007190 <_vfprintf_r+0xe98>
 800717e:	aa22      	add	r2, sp, #136	; 0x88
 8007180:	4649      	mov	r1, r9
 8007182:	4650      	mov	r0, sl
 8007184:	f002 fb0d 	bl	80097a2 <__sprint_r>
 8007188:	2800      	cmp	r0, #0
 800718a:	f040 8288 	bne.w	800769e <_vfprintf_r+0x13a6>
 800718e:	a925      	add	r1, sp, #148	; 0x94
 8007190:	3d10      	subs	r5, #16
 8007192:	460c      	mov	r4, r1
 8007194:	e7bf      	b.n	8007116 <_vfprintf_r+0xe1e>
 8007196:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007198:	2b00      	cmp	r3, #0
 800719a:	dc73      	bgt.n	8007284 <_vfprintf_r+0xf8c>
 800719c:	4b37      	ldr	r3, [pc, #220]	; (800727c <_vfprintf_r+0xf84>)
 800719e:	6023      	str	r3, [r4, #0]
 80071a0:	2301      	movs	r3, #1
 80071a2:	441e      	add	r6, r3
 80071a4:	6063      	str	r3, [r4, #4]
 80071a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071a8:	9624      	str	r6, [sp, #144]	; 0x90
 80071aa:	3301      	adds	r3, #1
 80071ac:	2b07      	cmp	r3, #7
 80071ae:	9323      	str	r3, [sp, #140]	; 0x8c
 80071b0:	dc3d      	bgt.n	800722e <_vfprintf_r+0xf36>
 80071b2:	3408      	adds	r4, #8
 80071b4:	9905      	ldr	r1, [sp, #20]
 80071b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80071b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80071ba:	430a      	orrs	r2, r1
 80071bc:	f00b 0101 	and.w	r1, fp, #1
 80071c0:	430a      	orrs	r2, r1
 80071c2:	f43f acbe 	beq.w	8006b42 <_vfprintf_r+0x84a>
 80071c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80071c8:	6022      	str	r2, [r4, #0]
 80071ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071cc:	6062      	str	r2, [r4, #4]
 80071ce:	4413      	add	r3, r2
 80071d0:	9324      	str	r3, [sp, #144]	; 0x90
 80071d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071d4:	3301      	adds	r3, #1
 80071d6:	2b07      	cmp	r3, #7
 80071d8:	9323      	str	r3, [sp, #140]	; 0x8c
 80071da:	dc32      	bgt.n	8007242 <_vfprintf_r+0xf4a>
 80071dc:	3408      	adds	r4, #8
 80071de:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80071e0:	2d00      	cmp	r5, #0
 80071e2:	da1b      	bge.n	800721c <_vfprintf_r+0xf24>
 80071e4:	4e26      	ldr	r6, [pc, #152]	; (8007280 <_vfprintf_r+0xf88>)
 80071e6:	426d      	negs	r5, r5
 80071e8:	4623      	mov	r3, r4
 80071ea:	2710      	movs	r7, #16
 80071ec:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 80071f0:	2d10      	cmp	r5, #16
 80071f2:	f102 0201 	add.w	r2, r2, #1
 80071f6:	f104 0408 	add.w	r4, r4, #8
 80071fa:	601e      	str	r6, [r3, #0]
 80071fc:	dc2b      	bgt.n	8007256 <_vfprintf_r+0xf5e>
 80071fe:	605d      	str	r5, [r3, #4]
 8007200:	2a07      	cmp	r2, #7
 8007202:	440d      	add	r5, r1
 8007204:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8007208:	dd08      	ble.n	800721c <_vfprintf_r+0xf24>
 800720a:	aa22      	add	r2, sp, #136	; 0x88
 800720c:	4649      	mov	r1, r9
 800720e:	4650      	mov	r0, sl
 8007210:	f002 fac7 	bl	80097a2 <__sprint_r>
 8007214:	2800      	cmp	r0, #0
 8007216:	f040 8242 	bne.w	800769e <_vfprintf_r+0x13a6>
 800721a:	ac25      	add	r4, sp, #148	; 0x94
 800721c:	9b03      	ldr	r3, [sp, #12]
 800721e:	6023      	str	r3, [r4, #0]
 8007220:	9b05      	ldr	r3, [sp, #20]
 8007222:	9a05      	ldr	r2, [sp, #20]
 8007224:	6063      	str	r3, [r4, #4]
 8007226:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007228:	4413      	add	r3, r2
 800722a:	9324      	str	r3, [sp, #144]	; 0x90
 800722c:	e482      	b.n	8006b34 <_vfprintf_r+0x83c>
 800722e:	aa22      	add	r2, sp, #136	; 0x88
 8007230:	4649      	mov	r1, r9
 8007232:	4650      	mov	r0, sl
 8007234:	f002 fab5 	bl	80097a2 <__sprint_r>
 8007238:	2800      	cmp	r0, #0
 800723a:	f040 8230 	bne.w	800769e <_vfprintf_r+0x13a6>
 800723e:	ac25      	add	r4, sp, #148	; 0x94
 8007240:	e7b8      	b.n	80071b4 <_vfprintf_r+0xebc>
 8007242:	aa22      	add	r2, sp, #136	; 0x88
 8007244:	4649      	mov	r1, r9
 8007246:	4650      	mov	r0, sl
 8007248:	f002 faab 	bl	80097a2 <__sprint_r>
 800724c:	2800      	cmp	r0, #0
 800724e:	f040 8226 	bne.w	800769e <_vfprintf_r+0x13a6>
 8007252:	ac25      	add	r4, sp, #148	; 0x94
 8007254:	e7c3      	b.n	80071de <_vfprintf_r+0xee6>
 8007256:	3110      	adds	r1, #16
 8007258:	2a07      	cmp	r2, #7
 800725a:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800725e:	605f      	str	r7, [r3, #4]
 8007260:	dd08      	ble.n	8007274 <_vfprintf_r+0xf7c>
 8007262:	aa22      	add	r2, sp, #136	; 0x88
 8007264:	4649      	mov	r1, r9
 8007266:	4650      	mov	r0, sl
 8007268:	f002 fa9b 	bl	80097a2 <__sprint_r>
 800726c:	2800      	cmp	r0, #0
 800726e:	f040 8216 	bne.w	800769e <_vfprintf_r+0x13a6>
 8007272:	ac25      	add	r4, sp, #148	; 0x94
 8007274:	3d10      	subs	r5, #16
 8007276:	4623      	mov	r3, r4
 8007278:	e7b8      	b.n	80071ec <_vfprintf_r+0xef4>
 800727a:	bf00      	nop
 800727c:	0800ad9e 	.word	0x0800ad9e
 8007280:	0800adb0 	.word	0x0800adb0
 8007284:	9b05      	ldr	r3, [sp, #20]
 8007286:	42ab      	cmp	r3, r5
 8007288:	bfa8      	it	ge
 800728a:	462b      	movge	r3, r5
 800728c:	2b00      	cmp	r3, #0
 800728e:	461f      	mov	r7, r3
 8007290:	dd0b      	ble.n	80072aa <_vfprintf_r+0xfb2>
 8007292:	9b03      	ldr	r3, [sp, #12]
 8007294:	e9c4 3700 	strd	r3, r7, [r4]
 8007298:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800729a:	3301      	adds	r3, #1
 800729c:	443e      	add	r6, r7
 800729e:	2b07      	cmp	r3, #7
 80072a0:	9624      	str	r6, [sp, #144]	; 0x90
 80072a2:	9323      	str	r3, [sp, #140]	; 0x8c
 80072a4:	f300 808c 	bgt.w	80073c0 <_vfprintf_r+0x10c8>
 80072a8:	3408      	adds	r4, #8
 80072aa:	2f00      	cmp	r7, #0
 80072ac:	bfac      	ite	ge
 80072ae:	1bee      	subge	r6, r5, r7
 80072b0:	462e      	movlt	r6, r5
 80072b2:	2e00      	cmp	r6, #0
 80072b4:	dd1c      	ble.n	80072f0 <_vfprintf_r+0xff8>
 80072b6:	4f9f      	ldr	r7, [pc, #636]	; (8007534 <_vfprintf_r+0x123c>)
 80072b8:	f04f 0810 	mov.w	r8, #16
 80072bc:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80072c0:	2e10      	cmp	r6, #16
 80072c2:	f103 0301 	add.w	r3, r3, #1
 80072c6:	f104 0108 	add.w	r1, r4, #8
 80072ca:	6027      	str	r7, [r4, #0]
 80072cc:	f300 8082 	bgt.w	80073d4 <_vfprintf_r+0x10dc>
 80072d0:	6066      	str	r6, [r4, #4]
 80072d2:	2b07      	cmp	r3, #7
 80072d4:	4416      	add	r6, r2
 80072d6:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80072da:	f340 808e 	ble.w	80073fa <_vfprintf_r+0x1102>
 80072de:	aa22      	add	r2, sp, #136	; 0x88
 80072e0:	4649      	mov	r1, r9
 80072e2:	4650      	mov	r0, sl
 80072e4:	f002 fa5d 	bl	80097a2 <__sprint_r>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	f040 81d8 	bne.w	800769e <_vfprintf_r+0x13a6>
 80072ee:	ac25      	add	r4, sp, #148	; 0x94
 80072f0:	9b03      	ldr	r3, [sp, #12]
 80072f2:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 80072f6:	441d      	add	r5, r3
 80072f8:	d00d      	beq.n	8007316 <_vfprintf_r+0x101e>
 80072fa:	4e8e      	ldr	r6, [pc, #568]	; (8007534 <_vfprintf_r+0x123c>)
 80072fc:	2710      	movs	r7, #16
 80072fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007300:	2b00      	cmp	r3, #0
 8007302:	d17c      	bne.n	80073fe <_vfprintf_r+0x1106>
 8007304:	9b08      	ldr	r3, [sp, #32]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d17c      	bne.n	8007404 <_vfprintf_r+0x110c>
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	9a05      	ldr	r2, [sp, #20]
 800730e:	4413      	add	r3, r2
 8007310:	429d      	cmp	r5, r3
 8007312:	bf28      	it	cs
 8007314:	461d      	movcs	r5, r3
 8007316:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007318:	9a05      	ldr	r2, [sp, #20]
 800731a:	4293      	cmp	r3, r2
 800731c:	db02      	blt.n	8007324 <_vfprintf_r+0x102c>
 800731e:	f01b 0f01 	tst.w	fp, #1
 8007322:	d00e      	beq.n	8007342 <_vfprintf_r+0x104a>
 8007324:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007326:	6023      	str	r3, [r4, #0]
 8007328:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800732a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800732c:	6063      	str	r3, [r4, #4]
 800732e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007330:	4413      	add	r3, r2
 8007332:	9324      	str	r3, [sp, #144]	; 0x90
 8007334:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007336:	3301      	adds	r3, #1
 8007338:	2b07      	cmp	r3, #7
 800733a:	9323      	str	r3, [sp, #140]	; 0x8c
 800733c:	f300 80e5 	bgt.w	800750a <_vfprintf_r+0x1212>
 8007340:	3408      	adds	r4, #8
 8007342:	9905      	ldr	r1, [sp, #20]
 8007344:	9b03      	ldr	r3, [sp, #12]
 8007346:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8007348:	440b      	add	r3, r1
 800734a:	1b8e      	subs	r6, r1, r6
 800734c:	1b5a      	subs	r2, r3, r5
 800734e:	4296      	cmp	r6, r2
 8007350:	bfa8      	it	ge
 8007352:	4616      	movge	r6, r2
 8007354:	2e00      	cmp	r6, #0
 8007356:	dd0b      	ble.n	8007370 <_vfprintf_r+0x1078>
 8007358:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800735a:	4433      	add	r3, r6
 800735c:	9324      	str	r3, [sp, #144]	; 0x90
 800735e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007360:	3301      	adds	r3, #1
 8007362:	2b07      	cmp	r3, #7
 8007364:	e9c4 5600 	strd	r5, r6, [r4]
 8007368:	9323      	str	r3, [sp, #140]	; 0x8c
 800736a:	f300 80d8 	bgt.w	800751e <_vfprintf_r+0x1226>
 800736e:	3408      	adds	r4, #8
 8007370:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007372:	9b05      	ldr	r3, [sp, #20]
 8007374:	2e00      	cmp	r6, #0
 8007376:	eba3 0505 	sub.w	r5, r3, r5
 800737a:	bfa8      	it	ge
 800737c:	1bad      	subge	r5, r5, r6
 800737e:	2d00      	cmp	r5, #0
 8007380:	f77f abdf 	ble.w	8006b42 <_vfprintf_r+0x84a>
 8007384:	4e6b      	ldr	r6, [pc, #428]	; (8007534 <_vfprintf_r+0x123c>)
 8007386:	2710      	movs	r7, #16
 8007388:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800738c:	2d10      	cmp	r5, #16
 800738e:	f103 0301 	add.w	r3, r3, #1
 8007392:	f104 0108 	add.w	r1, r4, #8
 8007396:	6026      	str	r6, [r4, #0]
 8007398:	f77f aec6 	ble.w	8007128 <_vfprintf_r+0xe30>
 800739c:	3210      	adds	r2, #16
 800739e:	2b07      	cmp	r3, #7
 80073a0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80073a4:	6067      	str	r7, [r4, #4]
 80073a6:	dd08      	ble.n	80073ba <_vfprintf_r+0x10c2>
 80073a8:	aa22      	add	r2, sp, #136	; 0x88
 80073aa:	4649      	mov	r1, r9
 80073ac:	4650      	mov	r0, sl
 80073ae:	f002 f9f8 	bl	80097a2 <__sprint_r>
 80073b2:	2800      	cmp	r0, #0
 80073b4:	f040 8173 	bne.w	800769e <_vfprintf_r+0x13a6>
 80073b8:	a925      	add	r1, sp, #148	; 0x94
 80073ba:	3d10      	subs	r5, #16
 80073bc:	460c      	mov	r4, r1
 80073be:	e7e3      	b.n	8007388 <_vfprintf_r+0x1090>
 80073c0:	aa22      	add	r2, sp, #136	; 0x88
 80073c2:	4649      	mov	r1, r9
 80073c4:	4650      	mov	r0, sl
 80073c6:	f002 f9ec 	bl	80097a2 <__sprint_r>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	f040 8167 	bne.w	800769e <_vfprintf_r+0x13a6>
 80073d0:	ac25      	add	r4, sp, #148	; 0x94
 80073d2:	e76a      	b.n	80072aa <_vfprintf_r+0xfb2>
 80073d4:	3210      	adds	r2, #16
 80073d6:	2b07      	cmp	r3, #7
 80073d8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80073dc:	f8c4 8004 	str.w	r8, [r4, #4]
 80073e0:	dd08      	ble.n	80073f4 <_vfprintf_r+0x10fc>
 80073e2:	aa22      	add	r2, sp, #136	; 0x88
 80073e4:	4649      	mov	r1, r9
 80073e6:	4650      	mov	r0, sl
 80073e8:	f002 f9db 	bl	80097a2 <__sprint_r>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	f040 8156 	bne.w	800769e <_vfprintf_r+0x13a6>
 80073f2:	a925      	add	r1, sp, #148	; 0x94
 80073f4:	3e10      	subs	r6, #16
 80073f6:	460c      	mov	r4, r1
 80073f8:	e760      	b.n	80072bc <_vfprintf_r+0xfc4>
 80073fa:	460c      	mov	r4, r1
 80073fc:	e778      	b.n	80072f0 <_vfprintf_r+0xff8>
 80073fe:	9b08      	ldr	r3, [sp, #32]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d052      	beq.n	80074aa <_vfprintf_r+0x11b2>
 8007404:	9b08      	ldr	r3, [sp, #32]
 8007406:	3b01      	subs	r3, #1
 8007408:	9308      	str	r3, [sp, #32]
 800740a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007410:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007412:	6063      	str	r3, [r4, #4]
 8007414:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007416:	4413      	add	r3, r2
 8007418:	9324      	str	r3, [sp, #144]	; 0x90
 800741a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800741c:	3301      	adds	r3, #1
 800741e:	2b07      	cmp	r3, #7
 8007420:	9323      	str	r3, [sp, #140]	; 0x8c
 8007422:	dc49      	bgt.n	80074b8 <_vfprintf_r+0x11c0>
 8007424:	3408      	adds	r4, #8
 8007426:	9b03      	ldr	r3, [sp, #12]
 8007428:	9a05      	ldr	r2, [sp, #20]
 800742a:	eb03 0802 	add.w	r8, r3, r2
 800742e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	eba8 0805 	sub.w	r8, r8, r5
 8007436:	4598      	cmp	r8, r3
 8007438:	bfa8      	it	ge
 800743a:	4698      	movge	r8, r3
 800743c:	f1b8 0f00 	cmp.w	r8, #0
 8007440:	dd0a      	ble.n	8007458 <_vfprintf_r+0x1160>
 8007442:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007444:	4443      	add	r3, r8
 8007446:	9324      	str	r3, [sp, #144]	; 0x90
 8007448:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800744a:	3301      	adds	r3, #1
 800744c:	2b07      	cmp	r3, #7
 800744e:	e9c4 5800 	strd	r5, r8, [r4]
 8007452:	9323      	str	r3, [sp, #140]	; 0x8c
 8007454:	dc3a      	bgt.n	80074cc <_vfprintf_r+0x11d4>
 8007456:	3408      	adds	r4, #8
 8007458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	f1b8 0f00 	cmp.w	r8, #0
 8007460:	bfac      	ite	ge
 8007462:	eba3 0808 	subge.w	r8, r3, r8
 8007466:	4698      	movlt	r8, r3
 8007468:	f1b8 0f00 	cmp.w	r8, #0
 800746c:	dd19      	ble.n	80074a2 <_vfprintf_r+0x11aa>
 800746e:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8007472:	f1b8 0f10 	cmp.w	r8, #16
 8007476:	f102 0201 	add.w	r2, r2, #1
 800747a:	f104 0108 	add.w	r1, r4, #8
 800747e:	6026      	str	r6, [r4, #0]
 8007480:	dc2e      	bgt.n	80074e0 <_vfprintf_r+0x11e8>
 8007482:	4443      	add	r3, r8
 8007484:	2a07      	cmp	r2, #7
 8007486:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800748a:	f8c4 8004 	str.w	r8, [r4, #4]
 800748e:	dd3a      	ble.n	8007506 <_vfprintf_r+0x120e>
 8007490:	aa22      	add	r2, sp, #136	; 0x88
 8007492:	4649      	mov	r1, r9
 8007494:	4650      	mov	r0, sl
 8007496:	f002 f984 	bl	80097a2 <__sprint_r>
 800749a:	2800      	cmp	r0, #0
 800749c:	f040 80ff 	bne.w	800769e <_vfprintf_r+0x13a6>
 80074a0:	ac25      	add	r4, sp, #148	; 0x94
 80074a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	441d      	add	r5, r3
 80074a8:	e729      	b.n	80072fe <_vfprintf_r+0x1006>
 80074aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ac:	3b01      	subs	r3, #1
 80074ae:	930a      	str	r3, [sp, #40]	; 0x28
 80074b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b2:	3b01      	subs	r3, #1
 80074b4:	9309      	str	r3, [sp, #36]	; 0x24
 80074b6:	e7a8      	b.n	800740a <_vfprintf_r+0x1112>
 80074b8:	aa22      	add	r2, sp, #136	; 0x88
 80074ba:	4649      	mov	r1, r9
 80074bc:	4650      	mov	r0, sl
 80074be:	f002 f970 	bl	80097a2 <__sprint_r>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	f040 80eb 	bne.w	800769e <_vfprintf_r+0x13a6>
 80074c8:	ac25      	add	r4, sp, #148	; 0x94
 80074ca:	e7ac      	b.n	8007426 <_vfprintf_r+0x112e>
 80074cc:	aa22      	add	r2, sp, #136	; 0x88
 80074ce:	4649      	mov	r1, r9
 80074d0:	4650      	mov	r0, sl
 80074d2:	f002 f966 	bl	80097a2 <__sprint_r>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f040 80e1 	bne.w	800769e <_vfprintf_r+0x13a6>
 80074dc:	ac25      	add	r4, sp, #148	; 0x94
 80074de:	e7bb      	b.n	8007458 <_vfprintf_r+0x1160>
 80074e0:	3310      	adds	r3, #16
 80074e2:	2a07      	cmp	r2, #7
 80074e4:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 80074e8:	6067      	str	r7, [r4, #4]
 80074ea:	dd08      	ble.n	80074fe <_vfprintf_r+0x1206>
 80074ec:	aa22      	add	r2, sp, #136	; 0x88
 80074ee:	4649      	mov	r1, r9
 80074f0:	4650      	mov	r0, sl
 80074f2:	f002 f956 	bl	80097a2 <__sprint_r>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	f040 80d1 	bne.w	800769e <_vfprintf_r+0x13a6>
 80074fc:	a925      	add	r1, sp, #148	; 0x94
 80074fe:	f1a8 0810 	sub.w	r8, r8, #16
 8007502:	460c      	mov	r4, r1
 8007504:	e7b3      	b.n	800746e <_vfprintf_r+0x1176>
 8007506:	460c      	mov	r4, r1
 8007508:	e7cb      	b.n	80074a2 <_vfprintf_r+0x11aa>
 800750a:	aa22      	add	r2, sp, #136	; 0x88
 800750c:	4649      	mov	r1, r9
 800750e:	4650      	mov	r0, sl
 8007510:	f002 f947 	bl	80097a2 <__sprint_r>
 8007514:	2800      	cmp	r0, #0
 8007516:	f040 80c2 	bne.w	800769e <_vfprintf_r+0x13a6>
 800751a:	ac25      	add	r4, sp, #148	; 0x94
 800751c:	e711      	b.n	8007342 <_vfprintf_r+0x104a>
 800751e:	aa22      	add	r2, sp, #136	; 0x88
 8007520:	4649      	mov	r1, r9
 8007522:	4650      	mov	r0, sl
 8007524:	f002 f93d 	bl	80097a2 <__sprint_r>
 8007528:	2800      	cmp	r0, #0
 800752a:	f040 80b8 	bne.w	800769e <_vfprintf_r+0x13a6>
 800752e:	ac25      	add	r4, sp, #148	; 0x94
 8007530:	e71e      	b.n	8007370 <_vfprintf_r+0x1078>
 8007532:	bf00      	nop
 8007534:	0800adb0 	.word	0x0800adb0
 8007538:	9a05      	ldr	r2, [sp, #20]
 800753a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800753c:	2a01      	cmp	r2, #1
 800753e:	9a03      	ldr	r2, [sp, #12]
 8007540:	6022      	str	r2, [r4, #0]
 8007542:	f106 0601 	add.w	r6, r6, #1
 8007546:	f103 0301 	add.w	r3, r3, #1
 800754a:	f04f 0201 	mov.w	r2, #1
 800754e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8007552:	f104 0508 	add.w	r5, r4, #8
 8007556:	6062      	str	r2, [r4, #4]
 8007558:	dc02      	bgt.n	8007560 <_vfprintf_r+0x1268>
 800755a:	f01b 0f01 	tst.w	fp, #1
 800755e:	d078      	beq.n	8007652 <_vfprintf_r+0x135a>
 8007560:	2b07      	cmp	r3, #7
 8007562:	dd08      	ble.n	8007576 <_vfprintf_r+0x127e>
 8007564:	aa22      	add	r2, sp, #136	; 0x88
 8007566:	4649      	mov	r1, r9
 8007568:	4650      	mov	r0, sl
 800756a:	f002 f91a 	bl	80097a2 <__sprint_r>
 800756e:	2800      	cmp	r0, #0
 8007570:	f040 8095 	bne.w	800769e <_vfprintf_r+0x13a6>
 8007574:	ad25      	add	r5, sp, #148	; 0x94
 8007576:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007578:	602b      	str	r3, [r5, #0]
 800757a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800757c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800757e:	606b      	str	r3, [r5, #4]
 8007580:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007582:	4413      	add	r3, r2
 8007584:	9324      	str	r3, [sp, #144]	; 0x90
 8007586:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007588:	3301      	adds	r3, #1
 800758a:	2b07      	cmp	r3, #7
 800758c:	9323      	str	r3, [sp, #140]	; 0x8c
 800758e:	dc32      	bgt.n	80075f6 <_vfprintf_r+0x12fe>
 8007590:	3508      	adds	r5, #8
 8007592:	9b05      	ldr	r3, [sp, #20]
 8007594:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007598:	1e5c      	subs	r4, r3, #1
 800759a:	2200      	movs	r2, #0
 800759c:	2300      	movs	r3, #0
 800759e:	f7f9 fa93 	bl	8000ac8 <__aeabi_dcmpeq>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	d130      	bne.n	8007608 <_vfprintf_r+0x1310>
 80075a6:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80075a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80075aa:	9803      	ldr	r0, [sp, #12]
 80075ac:	9a05      	ldr	r2, [sp, #20]
 80075ae:	3101      	adds	r1, #1
 80075b0:	3b01      	subs	r3, #1
 80075b2:	3001      	adds	r0, #1
 80075b4:	4413      	add	r3, r2
 80075b6:	2907      	cmp	r1, #7
 80075b8:	e9c5 0400 	strd	r0, r4, [r5]
 80075bc:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 80075c0:	dd4a      	ble.n	8007658 <_vfprintf_r+0x1360>
 80075c2:	aa22      	add	r2, sp, #136	; 0x88
 80075c4:	4649      	mov	r1, r9
 80075c6:	4650      	mov	r0, sl
 80075c8:	f002 f8eb 	bl	80097a2 <__sprint_r>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d166      	bne.n	800769e <_vfprintf_r+0x13a6>
 80075d0:	ad25      	add	r5, sp, #148	; 0x94
 80075d2:	ab1e      	add	r3, sp, #120	; 0x78
 80075d4:	602b      	str	r3, [r5, #0]
 80075d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80075da:	606b      	str	r3, [r5, #4]
 80075dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80075de:	4413      	add	r3, r2
 80075e0:	9324      	str	r3, [sp, #144]	; 0x90
 80075e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075e4:	3301      	adds	r3, #1
 80075e6:	2b07      	cmp	r3, #7
 80075e8:	9323      	str	r3, [sp, #140]	; 0x8c
 80075ea:	f73f ada4 	bgt.w	8007136 <_vfprintf_r+0xe3e>
 80075ee:	f105 0408 	add.w	r4, r5, #8
 80075f2:	f7ff baa6 	b.w	8006b42 <_vfprintf_r+0x84a>
 80075f6:	aa22      	add	r2, sp, #136	; 0x88
 80075f8:	4649      	mov	r1, r9
 80075fa:	4650      	mov	r0, sl
 80075fc:	f002 f8d1 	bl	80097a2 <__sprint_r>
 8007600:	2800      	cmp	r0, #0
 8007602:	d14c      	bne.n	800769e <_vfprintf_r+0x13a6>
 8007604:	ad25      	add	r5, sp, #148	; 0x94
 8007606:	e7c4      	b.n	8007592 <_vfprintf_r+0x129a>
 8007608:	2c00      	cmp	r4, #0
 800760a:	dde2      	ble.n	80075d2 <_vfprintf_r+0x12da>
 800760c:	4e53      	ldr	r6, [pc, #332]	; (800775c <_vfprintf_r+0x1464>)
 800760e:	2710      	movs	r7, #16
 8007610:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007614:	2c10      	cmp	r4, #16
 8007616:	f103 0301 	add.w	r3, r3, #1
 800761a:	f105 0108 	add.w	r1, r5, #8
 800761e:	602e      	str	r6, [r5, #0]
 8007620:	dc07      	bgt.n	8007632 <_vfprintf_r+0x133a>
 8007622:	606c      	str	r4, [r5, #4]
 8007624:	2b07      	cmp	r3, #7
 8007626:	4414      	add	r4, r2
 8007628:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800762c:	dcc9      	bgt.n	80075c2 <_vfprintf_r+0x12ca>
 800762e:	460d      	mov	r5, r1
 8007630:	e7cf      	b.n	80075d2 <_vfprintf_r+0x12da>
 8007632:	3210      	adds	r2, #16
 8007634:	2b07      	cmp	r3, #7
 8007636:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800763a:	606f      	str	r7, [r5, #4]
 800763c:	dd06      	ble.n	800764c <_vfprintf_r+0x1354>
 800763e:	aa22      	add	r2, sp, #136	; 0x88
 8007640:	4649      	mov	r1, r9
 8007642:	4650      	mov	r0, sl
 8007644:	f002 f8ad 	bl	80097a2 <__sprint_r>
 8007648:	bb48      	cbnz	r0, 800769e <_vfprintf_r+0x13a6>
 800764a:	a925      	add	r1, sp, #148	; 0x94
 800764c:	3c10      	subs	r4, #16
 800764e:	460d      	mov	r5, r1
 8007650:	e7de      	b.n	8007610 <_vfprintf_r+0x1318>
 8007652:	2b07      	cmp	r3, #7
 8007654:	ddbd      	ble.n	80075d2 <_vfprintf_r+0x12da>
 8007656:	e7b4      	b.n	80075c2 <_vfprintf_r+0x12ca>
 8007658:	3508      	adds	r5, #8
 800765a:	e7ba      	b.n	80075d2 <_vfprintf_r+0x12da>
 800765c:	460c      	mov	r4, r1
 800765e:	f7ff ba70 	b.w	8006b42 <_vfprintf_r+0x84a>
 8007662:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8007666:	1a9d      	subs	r5, r3, r2
 8007668:	2d00      	cmp	r5, #0
 800766a:	f77f aa6e 	ble.w	8006b4a <_vfprintf_r+0x852>
 800766e:	4e3c      	ldr	r6, [pc, #240]	; (8007760 <_vfprintf_r+0x1468>)
 8007670:	2710      	movs	r7, #16
 8007672:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007676:	2d10      	cmp	r5, #16
 8007678:	f103 0301 	add.w	r3, r3, #1
 800767c:	6026      	str	r6, [r4, #0]
 800767e:	dc18      	bgt.n	80076b2 <_vfprintf_r+0x13ba>
 8007680:	6065      	str	r5, [r4, #4]
 8007682:	2b07      	cmp	r3, #7
 8007684:	4415      	add	r5, r2
 8007686:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800768a:	f77f aa5e 	ble.w	8006b4a <_vfprintf_r+0x852>
 800768e:	aa22      	add	r2, sp, #136	; 0x88
 8007690:	4649      	mov	r1, r9
 8007692:	4650      	mov	r0, sl
 8007694:	f002 f885 	bl	80097a2 <__sprint_r>
 8007698:	2800      	cmp	r0, #0
 800769a:	f43f aa56 	beq.w	8006b4a <_vfprintf_r+0x852>
 800769e:	9b04      	ldr	r3, [sp, #16]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f43f a872 	beq.w	800678a <_vfprintf_r+0x492>
 80076a6:	4619      	mov	r1, r3
 80076a8:	4650      	mov	r0, sl
 80076aa:	f001 f8ef 	bl	800888c <_free_r>
 80076ae:	f7ff b86c 	b.w	800678a <_vfprintf_r+0x492>
 80076b2:	3210      	adds	r2, #16
 80076b4:	2b07      	cmp	r3, #7
 80076b6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80076ba:	6067      	str	r7, [r4, #4]
 80076bc:	dc02      	bgt.n	80076c4 <_vfprintf_r+0x13cc>
 80076be:	3408      	adds	r4, #8
 80076c0:	3d10      	subs	r5, #16
 80076c2:	e7d6      	b.n	8007672 <_vfprintf_r+0x137a>
 80076c4:	aa22      	add	r2, sp, #136	; 0x88
 80076c6:	4649      	mov	r1, r9
 80076c8:	4650      	mov	r0, sl
 80076ca:	f002 f86a 	bl	80097a2 <__sprint_r>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d1e5      	bne.n	800769e <_vfprintf_r+0x13a6>
 80076d2:	ac25      	add	r4, sp, #148	; 0x94
 80076d4:	e7f4      	b.n	80076c0 <_vfprintf_r+0x13c8>
 80076d6:	9904      	ldr	r1, [sp, #16]
 80076d8:	4650      	mov	r0, sl
 80076da:	f001 f8d7 	bl	800888c <_free_r>
 80076de:	f7ff ba4c 	b.w	8006b7a <_vfprintf_r+0x882>
 80076e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80076e4:	b91b      	cbnz	r3, 80076ee <_vfprintf_r+0x13f6>
 80076e6:	2300      	movs	r3, #0
 80076e8:	9323      	str	r3, [sp, #140]	; 0x8c
 80076ea:	f7ff b84e 	b.w	800678a <_vfprintf_r+0x492>
 80076ee:	aa22      	add	r2, sp, #136	; 0x88
 80076f0:	4649      	mov	r1, r9
 80076f2:	4650      	mov	r0, sl
 80076f4:	f002 f855 	bl	80097a2 <__sprint_r>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d0f4      	beq.n	80076e6 <_vfprintf_r+0x13ee>
 80076fc:	f7ff b845 	b.w	800678a <_vfprintf_r+0x492>
 8007700:	ea56 0207 	orrs.w	r2, r6, r7
 8007704:	f8cd b010 	str.w	fp, [sp, #16]
 8007708:	f43f ab5c 	beq.w	8006dc4 <_vfprintf_r+0xacc>
 800770c:	2b01      	cmp	r3, #1
 800770e:	f43f abf4 	beq.w	8006efa <_vfprintf_r+0xc02>
 8007712:	2b02      	cmp	r3, #2
 8007714:	ab4e      	add	r3, sp, #312	; 0x138
 8007716:	9303      	str	r3, [sp, #12]
 8007718:	f43f ac46 	beq.w	8006fa8 <_vfprintf_r+0xcb0>
 800771c:	9903      	ldr	r1, [sp, #12]
 800771e:	f006 0307 	and.w	r3, r6, #7
 8007722:	460a      	mov	r2, r1
 8007724:	3330      	adds	r3, #48	; 0x30
 8007726:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800772a:	9203      	str	r2, [sp, #12]
 800772c:	08f2      	lsrs	r2, r6, #3
 800772e:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8007732:	08f8      	lsrs	r0, r7, #3
 8007734:	4616      	mov	r6, r2
 8007736:	4607      	mov	r7, r0
 8007738:	ea56 0207 	orrs.w	r2, r6, r7
 800773c:	d1ee      	bne.n	800771c <_vfprintf_r+0x1424>
 800773e:	9a04      	ldr	r2, [sp, #16]
 8007740:	07d0      	lsls	r0, r2, #31
 8007742:	f57f ac20 	bpl.w	8006f86 <_vfprintf_r+0xc8e>
 8007746:	2b30      	cmp	r3, #48	; 0x30
 8007748:	f43f ac1d 	beq.w	8006f86 <_vfprintf_r+0xc8e>
 800774c:	9a03      	ldr	r2, [sp, #12]
 800774e:	2330      	movs	r3, #48	; 0x30
 8007750:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007754:	1e8b      	subs	r3, r1, #2
 8007756:	9303      	str	r3, [sp, #12]
 8007758:	e415      	b.n	8006f86 <_vfprintf_r+0xc8e>
 800775a:	bf00      	nop
 800775c:	0800adb0 	.word	0x0800adb0
 8007760:	0800ada0 	.word	0x0800ada0

08007764 <__sbprintf>:
 8007764:	b570      	push	{r4, r5, r6, lr}
 8007766:	460c      	mov	r4, r1
 8007768:	8989      	ldrh	r1, [r1, #12]
 800776a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800776e:	f021 0102 	bic.w	r1, r1, #2
 8007772:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007776:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007778:	911b      	str	r1, [sp, #108]	; 0x6c
 800777a:	89e1      	ldrh	r1, [r4, #14]
 800777c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007780:	69e1      	ldr	r1, [r4, #28]
 8007782:	9109      	str	r1, [sp, #36]	; 0x24
 8007784:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007786:	910b      	str	r1, [sp, #44]	; 0x2c
 8007788:	a91c      	add	r1, sp, #112	; 0x70
 800778a:	9102      	str	r1, [sp, #8]
 800778c:	9106      	str	r1, [sp, #24]
 800778e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007792:	4606      	mov	r6, r0
 8007794:	9104      	str	r1, [sp, #16]
 8007796:	9107      	str	r1, [sp, #28]
 8007798:	a818      	add	r0, sp, #96	; 0x60
 800779a:	2100      	movs	r1, #0
 800779c:	e9cd 3200 	strd	r3, r2, [sp]
 80077a0:	9108      	str	r1, [sp, #32]
 80077a2:	f001 f957 	bl	8008a54 <__retarget_lock_init_recursive>
 80077a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80077aa:	a902      	add	r1, sp, #8
 80077ac:	4630      	mov	r0, r6
 80077ae:	f7fe fda3 	bl	80062f8 <_vfprintf_r>
 80077b2:	1e05      	subs	r5, r0, #0
 80077b4:	db07      	blt.n	80077c6 <__sbprintf+0x62>
 80077b6:	a902      	add	r1, sp, #8
 80077b8:	4630      	mov	r0, r6
 80077ba:	f000 ff6b 	bl	8008694 <_fflush_r>
 80077be:	2800      	cmp	r0, #0
 80077c0:	bf18      	it	ne
 80077c2:	f04f 35ff 	movne.w	r5, #4294967295
 80077c6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80077ca:	9818      	ldr	r0, [sp, #96]	; 0x60
 80077cc:	065b      	lsls	r3, r3, #25
 80077ce:	bf42      	ittt	mi
 80077d0:	89a3      	ldrhmi	r3, [r4, #12]
 80077d2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80077d6:	81a3      	strhmi	r3, [r4, #12]
 80077d8:	f001 f93d 	bl	8008a56 <__retarget_lock_close_recursive>
 80077dc:	4628      	mov	r0, r5
 80077de:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 80077e2:	bd70      	pop	{r4, r5, r6, pc}

080077e4 <__swsetup_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	4b2a      	ldr	r3, [pc, #168]	; (8007890 <__swsetup_r+0xac>)
 80077e8:	4605      	mov	r5, r0
 80077ea:	6818      	ldr	r0, [r3, #0]
 80077ec:	460c      	mov	r4, r1
 80077ee:	b118      	cbz	r0, 80077f8 <__swsetup_r+0x14>
 80077f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80077f2:	b90b      	cbnz	r3, 80077f8 <__swsetup_r+0x14>
 80077f4:	f000 ffba 	bl	800876c <__sinit>
 80077f8:	89a3      	ldrh	r3, [r4, #12]
 80077fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077fe:	0718      	lsls	r0, r3, #28
 8007800:	d422      	bmi.n	8007848 <__swsetup_r+0x64>
 8007802:	06d9      	lsls	r1, r3, #27
 8007804:	d407      	bmi.n	8007816 <__swsetup_r+0x32>
 8007806:	2309      	movs	r3, #9
 8007808:	602b      	str	r3, [r5, #0]
 800780a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800780e:	81a3      	strh	r3, [r4, #12]
 8007810:	f04f 30ff 	mov.w	r0, #4294967295
 8007814:	e034      	b.n	8007880 <__swsetup_r+0x9c>
 8007816:	0758      	lsls	r0, r3, #29
 8007818:	d512      	bpl.n	8007840 <__swsetup_r+0x5c>
 800781a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800781c:	b141      	cbz	r1, 8007830 <__swsetup_r+0x4c>
 800781e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8007822:	4299      	cmp	r1, r3
 8007824:	d002      	beq.n	800782c <__swsetup_r+0x48>
 8007826:	4628      	mov	r0, r5
 8007828:	f001 f830 	bl	800888c <_free_r>
 800782c:	2300      	movs	r3, #0
 800782e:	6323      	str	r3, [r4, #48]	; 0x30
 8007830:	89a3      	ldrh	r3, [r4, #12]
 8007832:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007836:	81a3      	strh	r3, [r4, #12]
 8007838:	2300      	movs	r3, #0
 800783a:	6063      	str	r3, [r4, #4]
 800783c:	6923      	ldr	r3, [r4, #16]
 800783e:	6023      	str	r3, [r4, #0]
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	f043 0308 	orr.w	r3, r3, #8
 8007846:	81a3      	strh	r3, [r4, #12]
 8007848:	6923      	ldr	r3, [r4, #16]
 800784a:	b94b      	cbnz	r3, 8007860 <__swsetup_r+0x7c>
 800784c:	89a3      	ldrh	r3, [r4, #12]
 800784e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007856:	d003      	beq.n	8007860 <__swsetup_r+0x7c>
 8007858:	4621      	mov	r1, r4
 800785a:	4628      	mov	r0, r5
 800785c:	f001 f92a 	bl	8008ab4 <__smakebuf_r>
 8007860:	89a0      	ldrh	r0, [r4, #12]
 8007862:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007866:	f010 0301 	ands.w	r3, r0, #1
 800786a:	d00a      	beq.n	8007882 <__swsetup_r+0x9e>
 800786c:	2300      	movs	r3, #0
 800786e:	60a3      	str	r3, [r4, #8]
 8007870:	6963      	ldr	r3, [r4, #20]
 8007872:	425b      	negs	r3, r3
 8007874:	61a3      	str	r3, [r4, #24]
 8007876:	6923      	ldr	r3, [r4, #16]
 8007878:	b943      	cbnz	r3, 800788c <__swsetup_r+0xa8>
 800787a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800787e:	d1c4      	bne.n	800780a <__swsetup_r+0x26>
 8007880:	bd38      	pop	{r3, r4, r5, pc}
 8007882:	0781      	lsls	r1, r0, #30
 8007884:	bf58      	it	pl
 8007886:	6963      	ldrpl	r3, [r4, #20]
 8007888:	60a3      	str	r3, [r4, #8]
 800788a:	e7f4      	b.n	8007876 <__swsetup_r+0x92>
 800788c:	2000      	movs	r0, #0
 800788e:	e7f7      	b.n	8007880 <__swsetup_r+0x9c>
 8007890:	2000001c 	.word	0x2000001c

08007894 <register_fini>:
 8007894:	4b02      	ldr	r3, [pc, #8]	; (80078a0 <register_fini+0xc>)
 8007896:	b113      	cbz	r3, 800789e <register_fini+0xa>
 8007898:	4802      	ldr	r0, [pc, #8]	; (80078a4 <register_fini+0x10>)
 800789a:	f000 b805 	b.w	80078a8 <atexit>
 800789e:	4770      	bx	lr
 80078a0:	00000000 	.word	0x00000000
 80078a4:	080087bd 	.word	0x080087bd

080078a8 <atexit>:
 80078a8:	2300      	movs	r3, #0
 80078aa:	4601      	mov	r1, r0
 80078ac:	461a      	mov	r2, r3
 80078ae:	4618      	mov	r0, r3
 80078b0:	f002 bc84 	b.w	800a1bc <__register_exitproc>

080078b4 <quorem>:
 80078b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b8:	6903      	ldr	r3, [r0, #16]
 80078ba:	690c      	ldr	r4, [r1, #16]
 80078bc:	42a3      	cmp	r3, r4
 80078be:	4607      	mov	r7, r0
 80078c0:	f2c0 8081 	blt.w	80079c6 <quorem+0x112>
 80078c4:	3c01      	subs	r4, #1
 80078c6:	f101 0814 	add.w	r8, r1, #20
 80078ca:	f100 0514 	add.w	r5, r0, #20
 80078ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078d2:	9301      	str	r3, [sp, #4]
 80078d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078dc:	3301      	adds	r3, #1
 80078de:	429a      	cmp	r2, r3
 80078e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80078e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80078ec:	d331      	bcc.n	8007952 <quorem+0x9e>
 80078ee:	f04f 0e00 	mov.w	lr, #0
 80078f2:	4640      	mov	r0, r8
 80078f4:	46ac      	mov	ip, r5
 80078f6:	46f2      	mov	sl, lr
 80078f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80078fc:	b293      	uxth	r3, r2
 80078fe:	fb06 e303 	mla	r3, r6, r3, lr
 8007902:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007906:	b29b      	uxth	r3, r3
 8007908:	ebaa 0303 	sub.w	r3, sl, r3
 800790c:	0c12      	lsrs	r2, r2, #16
 800790e:	f8dc a000 	ldr.w	sl, [ip]
 8007912:	fb06 e202 	mla	r2, r6, r2, lr
 8007916:	fa13 f38a 	uxtah	r3, r3, sl
 800791a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800791e:	fa1f fa82 	uxth.w	sl, r2
 8007922:	f8dc 2000 	ldr.w	r2, [ip]
 8007926:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800792a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800792e:	b29b      	uxth	r3, r3
 8007930:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007934:	4581      	cmp	r9, r0
 8007936:	f84c 3b04 	str.w	r3, [ip], #4
 800793a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800793e:	d2db      	bcs.n	80078f8 <quorem+0x44>
 8007940:	f855 300b 	ldr.w	r3, [r5, fp]
 8007944:	b92b      	cbnz	r3, 8007952 <quorem+0x9e>
 8007946:	9b01      	ldr	r3, [sp, #4]
 8007948:	3b04      	subs	r3, #4
 800794a:	429d      	cmp	r5, r3
 800794c:	461a      	mov	r2, r3
 800794e:	d32e      	bcc.n	80079ae <quorem+0xfa>
 8007950:	613c      	str	r4, [r7, #16]
 8007952:	4638      	mov	r0, r7
 8007954:	f001 fd7a 	bl	800944c <__mcmp>
 8007958:	2800      	cmp	r0, #0
 800795a:	db24      	blt.n	80079a6 <quorem+0xf2>
 800795c:	3601      	adds	r6, #1
 800795e:	4628      	mov	r0, r5
 8007960:	f04f 0c00 	mov.w	ip, #0
 8007964:	f858 2b04 	ldr.w	r2, [r8], #4
 8007968:	f8d0 e000 	ldr.w	lr, [r0]
 800796c:	b293      	uxth	r3, r2
 800796e:	ebac 0303 	sub.w	r3, ip, r3
 8007972:	0c12      	lsrs	r2, r2, #16
 8007974:	fa13 f38e 	uxtah	r3, r3, lr
 8007978:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800797c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007980:	b29b      	uxth	r3, r3
 8007982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007986:	45c1      	cmp	r9, r8
 8007988:	f840 3b04 	str.w	r3, [r0], #4
 800798c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007990:	d2e8      	bcs.n	8007964 <quorem+0xb0>
 8007992:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800799a:	b922      	cbnz	r2, 80079a6 <quorem+0xf2>
 800799c:	3b04      	subs	r3, #4
 800799e:	429d      	cmp	r5, r3
 80079a0:	461a      	mov	r2, r3
 80079a2:	d30a      	bcc.n	80079ba <quorem+0x106>
 80079a4:	613c      	str	r4, [r7, #16]
 80079a6:	4630      	mov	r0, r6
 80079a8:	b003      	add	sp, #12
 80079aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ae:	6812      	ldr	r2, [r2, #0]
 80079b0:	3b04      	subs	r3, #4
 80079b2:	2a00      	cmp	r2, #0
 80079b4:	d1cc      	bne.n	8007950 <quorem+0x9c>
 80079b6:	3c01      	subs	r4, #1
 80079b8:	e7c7      	b.n	800794a <quorem+0x96>
 80079ba:	6812      	ldr	r2, [r2, #0]
 80079bc:	3b04      	subs	r3, #4
 80079be:	2a00      	cmp	r2, #0
 80079c0:	d1f0      	bne.n	80079a4 <quorem+0xf0>
 80079c2:	3c01      	subs	r4, #1
 80079c4:	e7eb      	b.n	800799e <quorem+0xea>
 80079c6:	2000      	movs	r0, #0
 80079c8:	e7ee      	b.n	80079a8 <quorem+0xf4>
 80079ca:	0000      	movs	r0, r0
 80079cc:	0000      	movs	r0, r0
	...

080079d0 <_dtoa_r>:
 80079d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	ed2d 8b02 	vpush	{d8}
 80079d8:	b095      	sub	sp, #84	; 0x54
 80079da:	ec57 6b10 	vmov	r6, r7, d0
 80079de:	9105      	str	r1, [sp, #20]
 80079e0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80079e2:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80079e4:	9209      	str	r2, [sp, #36]	; 0x24
 80079e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80079ea:	4604      	mov	r4, r0
 80079ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80079ee:	b141      	cbz	r1, 8007a02 <_dtoa_r+0x32>
 80079f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80079f2:	604a      	str	r2, [r1, #4]
 80079f4:	2301      	movs	r3, #1
 80079f6:	4093      	lsls	r3, r2
 80079f8:	608b      	str	r3, [r1, #8]
 80079fa:	f001 fb1c 	bl	8009036 <_Bfree>
 80079fe:	2300      	movs	r3, #0
 8007a00:	6423      	str	r3, [r4, #64]	; 0x40
 8007a02:	1e3b      	subs	r3, r7, #0
 8007a04:	bfb9      	ittee	lt
 8007a06:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a0a:	9303      	strlt	r3, [sp, #12]
 8007a0c:	2300      	movge	r3, #0
 8007a0e:	602b      	strge	r3, [r5, #0]
 8007a10:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007a14:	4ba2      	ldr	r3, [pc, #648]	; (8007ca0 <_dtoa_r+0x2d0>)
 8007a16:	bfbc      	itt	lt
 8007a18:	2201      	movlt	r2, #1
 8007a1a:	602a      	strlt	r2, [r5, #0]
 8007a1c:	ea33 0309 	bics.w	r3, r3, r9
 8007a20:	d11b      	bne.n	8007a5a <_dtoa_r+0x8a>
 8007a22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a24:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a28:	6013      	str	r3, [r2, #0]
 8007a2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a2e:	4333      	orrs	r3, r6
 8007a30:	f000 8578 	beq.w	8008524 <_dtoa_r+0xb54>
 8007a34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a36:	b90b      	cbnz	r3, 8007a3c <_dtoa_r+0x6c>
 8007a38:	4b9a      	ldr	r3, [pc, #616]	; (8007ca4 <_dtoa_r+0x2d4>)
 8007a3a:	e024      	b.n	8007a86 <_dtoa_r+0xb6>
 8007a3c:	4b99      	ldr	r3, [pc, #612]	; (8007ca4 <_dtoa_r+0x2d4>)
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	3303      	adds	r3, #3
 8007a42:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a44:	6013      	str	r3, [r2, #0]
 8007a46:	9800      	ldr	r0, [sp, #0]
 8007a48:	b015      	add	sp, #84	; 0x54
 8007a4a:	ecbd 8b02 	vpop	{d8}
 8007a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a52:	4b95      	ldr	r3, [pc, #596]	; (8007ca8 <_dtoa_r+0x2d8>)
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	3308      	adds	r3, #8
 8007a58:	e7f3      	b.n	8007a42 <_dtoa_r+0x72>
 8007a5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	ec51 0b17 	vmov	r0, r1, d7
 8007a64:	2300      	movs	r3, #0
 8007a66:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007a6a:	f7f9 f82d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a6e:	4680      	mov	r8, r0
 8007a70:	b158      	cbz	r0, 8007a8a <_dtoa_r+0xba>
 8007a72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a74:	2301      	movs	r3, #1
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 854f 	beq.w	800851e <_dtoa_r+0xb4e>
 8007a80:	488a      	ldr	r0, [pc, #552]	; (8007cac <_dtoa_r+0x2dc>)
 8007a82:	6018      	str	r0, [r3, #0]
 8007a84:	1e43      	subs	r3, r0, #1
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	e7dd      	b.n	8007a46 <_dtoa_r+0x76>
 8007a8a:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007a8e:	aa12      	add	r2, sp, #72	; 0x48
 8007a90:	a913      	add	r1, sp, #76	; 0x4c
 8007a92:	4620      	mov	r0, r4
 8007a94:	f001 fd7e 	bl	8009594 <__d2b>
 8007a98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a9c:	4683      	mov	fp, r0
 8007a9e:	2d00      	cmp	r5, #0
 8007aa0:	d07c      	beq.n	8007b9c <_dtoa_r+0x1cc>
 8007aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aa4:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007aa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007aac:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007ab0:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007ab4:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007ab8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007abc:	4b7c      	ldr	r3, [pc, #496]	; (8007cb0 <_dtoa_r+0x2e0>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	f7f8 fbe0 	bl	8000288 <__aeabi_dsub>
 8007ac8:	a36f      	add	r3, pc, #444	; (adr r3, 8007c88 <_dtoa_r+0x2b8>)
 8007aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ace:	f7f8 fd93 	bl	80005f8 <__aeabi_dmul>
 8007ad2:	a36f      	add	r3, pc, #444	; (adr r3, 8007c90 <_dtoa_r+0x2c0>)
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f7f8 fbd8 	bl	800028c <__adddf3>
 8007adc:	4606      	mov	r6, r0
 8007ade:	4628      	mov	r0, r5
 8007ae0:	460f      	mov	r7, r1
 8007ae2:	f7f8 fd1f 	bl	8000524 <__aeabi_i2d>
 8007ae6:	a36c      	add	r3, pc, #432	; (adr r3, 8007c98 <_dtoa_r+0x2c8>)
 8007ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aec:	f7f8 fd84 	bl	80005f8 <__aeabi_dmul>
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	4630      	mov	r0, r6
 8007af6:	4639      	mov	r1, r7
 8007af8:	f7f8 fbc8 	bl	800028c <__adddf3>
 8007afc:	4606      	mov	r6, r0
 8007afe:	460f      	mov	r7, r1
 8007b00:	f7f9 f82a 	bl	8000b58 <__aeabi_d2iz>
 8007b04:	2200      	movs	r2, #0
 8007b06:	4682      	mov	sl, r0
 8007b08:	2300      	movs	r3, #0
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	4639      	mov	r1, r7
 8007b0e:	f7f8 ffe5 	bl	8000adc <__aeabi_dcmplt>
 8007b12:	b148      	cbz	r0, 8007b28 <_dtoa_r+0x158>
 8007b14:	4650      	mov	r0, sl
 8007b16:	f7f8 fd05 	bl	8000524 <__aeabi_i2d>
 8007b1a:	4632      	mov	r2, r6
 8007b1c:	463b      	mov	r3, r7
 8007b1e:	f7f8 ffd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b22:	b908      	cbnz	r0, 8007b28 <_dtoa_r+0x158>
 8007b24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b28:	f1ba 0f16 	cmp.w	sl, #22
 8007b2c:	d854      	bhi.n	8007bd8 <_dtoa_r+0x208>
 8007b2e:	4b61      	ldr	r3, [pc, #388]	; (8007cb4 <_dtoa_r+0x2e4>)
 8007b30:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b3c:	f7f8 ffce 	bl	8000adc <__aeabi_dcmplt>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d04b      	beq.n	8007bdc <_dtoa_r+0x20c>
 8007b44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b48:	2300      	movs	r3, #0
 8007b4a:	930e      	str	r3, [sp, #56]	; 0x38
 8007b4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b4e:	1b5d      	subs	r5, r3, r5
 8007b50:	1e6b      	subs	r3, r5, #1
 8007b52:	9304      	str	r3, [sp, #16]
 8007b54:	bf43      	ittte	mi
 8007b56:	2300      	movmi	r3, #0
 8007b58:	f1c5 0801 	rsbmi	r8, r5, #1
 8007b5c:	9304      	strmi	r3, [sp, #16]
 8007b5e:	f04f 0800 	movpl.w	r8, #0
 8007b62:	f1ba 0f00 	cmp.w	sl, #0
 8007b66:	db3b      	blt.n	8007be0 <_dtoa_r+0x210>
 8007b68:	9b04      	ldr	r3, [sp, #16]
 8007b6a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007b6e:	4453      	add	r3, sl
 8007b70:	9304      	str	r3, [sp, #16]
 8007b72:	2300      	movs	r3, #0
 8007b74:	9306      	str	r3, [sp, #24]
 8007b76:	9b05      	ldr	r3, [sp, #20]
 8007b78:	2b09      	cmp	r3, #9
 8007b7a:	d86a      	bhi.n	8007c52 <_dtoa_r+0x282>
 8007b7c:	2b05      	cmp	r3, #5
 8007b7e:	bfc4      	itt	gt
 8007b80:	3b04      	subgt	r3, #4
 8007b82:	9305      	strgt	r3, [sp, #20]
 8007b84:	9b05      	ldr	r3, [sp, #20]
 8007b86:	f1a3 0302 	sub.w	r3, r3, #2
 8007b8a:	bfcc      	ite	gt
 8007b8c:	2500      	movgt	r5, #0
 8007b8e:	2501      	movle	r5, #1
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d86a      	bhi.n	8007c6a <_dtoa_r+0x29a>
 8007b94:	e8df f003 	tbb	[pc, r3]
 8007b98:	5b4d4f2c 	.word	0x5b4d4f2c
 8007b9c:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007ba0:	441d      	add	r5, r3
 8007ba2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ba6:	2b20      	cmp	r3, #32
 8007ba8:	bfc1      	itttt	gt
 8007baa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007bae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007bb2:	fa09 f303 	lslgt.w	r3, r9, r3
 8007bb6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007bba:	bfda      	itte	le
 8007bbc:	f1c3 0320 	rsble	r3, r3, #32
 8007bc0:	fa06 f003 	lslle.w	r0, r6, r3
 8007bc4:	4318      	orrgt	r0, r3
 8007bc6:	f7f8 fc9d 	bl	8000504 <__aeabi_ui2d>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	4606      	mov	r6, r0
 8007bce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007bd2:	3d01      	subs	r5, #1
 8007bd4:	9310      	str	r3, [sp, #64]	; 0x40
 8007bd6:	e771      	b.n	8007abc <_dtoa_r+0xec>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e7b6      	b.n	8007b4a <_dtoa_r+0x17a>
 8007bdc:	900e      	str	r0, [sp, #56]	; 0x38
 8007bde:	e7b5      	b.n	8007b4c <_dtoa_r+0x17c>
 8007be0:	f1ca 0300 	rsb	r3, sl, #0
 8007be4:	9306      	str	r3, [sp, #24]
 8007be6:	2300      	movs	r3, #0
 8007be8:	eba8 080a 	sub.w	r8, r8, sl
 8007bec:	930d      	str	r3, [sp, #52]	; 0x34
 8007bee:	e7c2      	b.n	8007b76 <_dtoa_r+0x1a6>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	9308      	str	r3, [sp, #32]
 8007bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	dc3a      	bgt.n	8007c70 <_dtoa_r+0x2a0>
 8007bfa:	f04f 0901 	mov.w	r9, #1
 8007bfe:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c02:	464b      	mov	r3, r9
 8007c04:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007c08:	2200      	movs	r2, #0
 8007c0a:	6462      	str	r2, [r4, #68]	; 0x44
 8007c0c:	2204      	movs	r2, #4
 8007c0e:	f102 0014 	add.w	r0, r2, #20
 8007c12:	4298      	cmp	r0, r3
 8007c14:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007c16:	d931      	bls.n	8007c7c <_dtoa_r+0x2ac>
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f001 f9e7 	bl	8008fec <_Balloc>
 8007c1e:	9000      	str	r0, [sp, #0]
 8007c20:	2800      	cmp	r0, #0
 8007c22:	d14d      	bne.n	8007cc0 <_dtoa_r+0x2f0>
 8007c24:	4b24      	ldr	r3, [pc, #144]	; (8007cb8 <_dtoa_r+0x2e8>)
 8007c26:	4602      	mov	r2, r0
 8007c28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007c2c:	4823      	ldr	r0, [pc, #140]	; (8007cbc <_dtoa_r+0x2ec>)
 8007c2e:	f002 fb05 	bl	800a23c <__assert_func>
 8007c32:	2301      	movs	r3, #1
 8007c34:	e7dd      	b.n	8007bf2 <_dtoa_r+0x222>
 8007c36:	2300      	movs	r3, #0
 8007c38:	9308      	str	r3, [sp, #32]
 8007c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c3c:	eb0a 0903 	add.w	r9, sl, r3
 8007c40:	f109 0301 	add.w	r3, r9, #1
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	9301      	str	r3, [sp, #4]
 8007c48:	bfb8      	it	lt
 8007c4a:	2301      	movlt	r3, #1
 8007c4c:	e7dc      	b.n	8007c08 <_dtoa_r+0x238>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e7f2      	b.n	8007c38 <_dtoa_r+0x268>
 8007c52:	2501      	movs	r5, #1
 8007c54:	2300      	movs	r3, #0
 8007c56:	9305      	str	r3, [sp, #20]
 8007c58:	9508      	str	r5, [sp, #32]
 8007c5a:	f04f 39ff 	mov.w	r9, #4294967295
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c64:	2312      	movs	r3, #18
 8007c66:	9209      	str	r2, [sp, #36]	; 0x24
 8007c68:	e7ce      	b.n	8007c08 <_dtoa_r+0x238>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	9308      	str	r3, [sp, #32]
 8007c6e:	e7f4      	b.n	8007c5a <_dtoa_r+0x28a>
 8007c70:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007c74:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c78:	464b      	mov	r3, r9
 8007c7a:	e7c5      	b.n	8007c08 <_dtoa_r+0x238>
 8007c7c:	3101      	adds	r1, #1
 8007c7e:	6461      	str	r1, [r4, #68]	; 0x44
 8007c80:	0052      	lsls	r2, r2, #1
 8007c82:	e7c4      	b.n	8007c0e <_dtoa_r+0x23e>
 8007c84:	f3af 8000 	nop.w
 8007c88:	636f4361 	.word	0x636f4361
 8007c8c:	3fd287a7 	.word	0x3fd287a7
 8007c90:	8b60c8b3 	.word	0x8b60c8b3
 8007c94:	3fc68a28 	.word	0x3fc68a28
 8007c98:	509f79fb 	.word	0x509f79fb
 8007c9c:	3fd34413 	.word	0x3fd34413
 8007ca0:	7ff00000 	.word	0x7ff00000
 8007ca4:	0800adc0 	.word	0x0800adc0
 8007ca8:	0800adc4 	.word	0x0800adc4
 8007cac:	0800ad9f 	.word	0x0800ad9f
 8007cb0:	3ff80000 	.word	0x3ff80000
 8007cb4:	0800aec8 	.word	0x0800aec8
 8007cb8:	0800adcd 	.word	0x0800adcd
 8007cbc:	0800adde 	.word	0x0800adde
 8007cc0:	9b00      	ldr	r3, [sp, #0]
 8007cc2:	6423      	str	r3, [r4, #64]	; 0x40
 8007cc4:	9b01      	ldr	r3, [sp, #4]
 8007cc6:	2b0e      	cmp	r3, #14
 8007cc8:	f200 80ad 	bhi.w	8007e26 <_dtoa_r+0x456>
 8007ccc:	2d00      	cmp	r5, #0
 8007cce:	f000 80aa 	beq.w	8007e26 <_dtoa_r+0x456>
 8007cd2:	f1ba 0f00 	cmp.w	sl, #0
 8007cd6:	dd36      	ble.n	8007d46 <_dtoa_r+0x376>
 8007cd8:	4ac2      	ldr	r2, [pc, #776]	; (8007fe4 <_dtoa_r+0x614>)
 8007cda:	f00a 030f 	and.w	r3, sl, #15
 8007cde:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ce2:	ed93 7b00 	vldr	d7, [r3]
 8007ce6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007cea:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007cee:	eeb0 8a47 	vmov.f32	s16, s14
 8007cf2:	eef0 8a67 	vmov.f32	s17, s15
 8007cf6:	d016      	beq.n	8007d26 <_dtoa_r+0x356>
 8007cf8:	4bbb      	ldr	r3, [pc, #748]	; (8007fe8 <_dtoa_r+0x618>)
 8007cfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007cfe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d02:	f7f8 fda3 	bl	800084c <__aeabi_ddiv>
 8007d06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d0a:	f007 070f 	and.w	r7, r7, #15
 8007d0e:	2503      	movs	r5, #3
 8007d10:	4eb5      	ldr	r6, [pc, #724]	; (8007fe8 <_dtoa_r+0x618>)
 8007d12:	b957      	cbnz	r7, 8007d2a <_dtoa_r+0x35a>
 8007d14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d18:	ec53 2b18 	vmov	r2, r3, d8
 8007d1c:	f7f8 fd96 	bl	800084c <__aeabi_ddiv>
 8007d20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d24:	e029      	b.n	8007d7a <_dtoa_r+0x3aa>
 8007d26:	2502      	movs	r5, #2
 8007d28:	e7f2      	b.n	8007d10 <_dtoa_r+0x340>
 8007d2a:	07f9      	lsls	r1, r7, #31
 8007d2c:	d508      	bpl.n	8007d40 <_dtoa_r+0x370>
 8007d2e:	ec51 0b18 	vmov	r0, r1, d8
 8007d32:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d36:	f7f8 fc5f 	bl	80005f8 <__aeabi_dmul>
 8007d3a:	ec41 0b18 	vmov	d8, r0, r1
 8007d3e:	3501      	adds	r5, #1
 8007d40:	107f      	asrs	r7, r7, #1
 8007d42:	3608      	adds	r6, #8
 8007d44:	e7e5      	b.n	8007d12 <_dtoa_r+0x342>
 8007d46:	f000 80a6 	beq.w	8007e96 <_dtoa_r+0x4c6>
 8007d4a:	f1ca 0600 	rsb	r6, sl, #0
 8007d4e:	4ba5      	ldr	r3, [pc, #660]	; (8007fe4 <_dtoa_r+0x614>)
 8007d50:	4fa5      	ldr	r7, [pc, #660]	; (8007fe8 <_dtoa_r+0x618>)
 8007d52:	f006 020f 	and.w	r2, r6, #15
 8007d56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d62:	f7f8 fc49 	bl	80005f8 <__aeabi_dmul>
 8007d66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d6a:	1136      	asrs	r6, r6, #4
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	2502      	movs	r5, #2
 8007d70:	2e00      	cmp	r6, #0
 8007d72:	f040 8085 	bne.w	8007e80 <_dtoa_r+0x4b0>
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1d2      	bne.n	8007d20 <_dtoa_r+0x350>
 8007d7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 808c 	beq.w	8007e9a <_dtoa_r+0x4ca>
 8007d82:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d86:	4b99      	ldr	r3, [pc, #612]	; (8007fec <_dtoa_r+0x61c>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	4639      	mov	r1, r7
 8007d8e:	f7f8 fea5 	bl	8000adc <__aeabi_dcmplt>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	f000 8081 	beq.w	8007e9a <_dtoa_r+0x4ca>
 8007d98:	9b01      	ldr	r3, [sp, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d07d      	beq.n	8007e9a <_dtoa_r+0x4ca>
 8007d9e:	f1b9 0f00 	cmp.w	r9, #0
 8007da2:	dd3c      	ble.n	8007e1e <_dtoa_r+0x44e>
 8007da4:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007da8:	9307      	str	r3, [sp, #28]
 8007daa:	2200      	movs	r2, #0
 8007dac:	4b90      	ldr	r3, [pc, #576]	; (8007ff0 <_dtoa_r+0x620>)
 8007dae:	4630      	mov	r0, r6
 8007db0:	4639      	mov	r1, r7
 8007db2:	f7f8 fc21 	bl	80005f8 <__aeabi_dmul>
 8007db6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dba:	3501      	adds	r5, #1
 8007dbc:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007dc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	f7f8 fbad 	bl	8000524 <__aeabi_i2d>
 8007dca:	4632      	mov	r2, r6
 8007dcc:	463b      	mov	r3, r7
 8007dce:	f7f8 fc13 	bl	80005f8 <__aeabi_dmul>
 8007dd2:	4b88      	ldr	r3, [pc, #544]	; (8007ff4 <_dtoa_r+0x624>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f7f8 fa59 	bl	800028c <__adddf3>
 8007dda:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007dde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007de2:	9303      	str	r3, [sp, #12]
 8007de4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d15c      	bne.n	8007ea4 <_dtoa_r+0x4d4>
 8007dea:	4b83      	ldr	r3, [pc, #524]	; (8007ff8 <_dtoa_r+0x628>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	4630      	mov	r0, r6
 8007df0:	4639      	mov	r1, r7
 8007df2:	f7f8 fa49 	bl	8000288 <__aeabi_dsub>
 8007df6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	460f      	mov	r7, r1
 8007dfe:	f7f8 fe8b 	bl	8000b18 <__aeabi_dcmpgt>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	f040 8295 	bne.w	8008332 <_dtoa_r+0x962>
 8007e08:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e12:	4639      	mov	r1, r7
 8007e14:	f7f8 fe62 	bl	8000adc <__aeabi_dcmplt>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	f040 8287 	bne.w	800832c <_dtoa_r+0x95c>
 8007e1e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f2c0 8157 	blt.w	80080dc <_dtoa_r+0x70c>
 8007e2e:	f1ba 0f0e 	cmp.w	sl, #14
 8007e32:	f300 8153 	bgt.w	80080dc <_dtoa_r+0x70c>
 8007e36:	4b6b      	ldr	r3, [pc, #428]	; (8007fe4 <_dtoa_r+0x614>)
 8007e38:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f280 80e2 	bge.w	800800c <_dtoa_r+0x63c>
 8007e48:	9b01      	ldr	r3, [sp, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f300 80de 	bgt.w	800800c <_dtoa_r+0x63c>
 8007e50:	f040 826c 	bne.w	800832c <_dtoa_r+0x95c>
 8007e54:	4b68      	ldr	r3, [pc, #416]	; (8007ff8 <_dtoa_r+0x628>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	4640      	mov	r0, r8
 8007e5a:	4649      	mov	r1, r9
 8007e5c:	f7f8 fbcc 	bl	80005f8 <__aeabi_dmul>
 8007e60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e64:	f7f8 fe4e 	bl	8000b04 <__aeabi_dcmpge>
 8007e68:	9e01      	ldr	r6, [sp, #4]
 8007e6a:	4637      	mov	r7, r6
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	f040 8242 	bne.w	80082f6 <_dtoa_r+0x926>
 8007e72:	9d00      	ldr	r5, [sp, #0]
 8007e74:	2331      	movs	r3, #49	; 0x31
 8007e76:	f805 3b01 	strb.w	r3, [r5], #1
 8007e7a:	f10a 0a01 	add.w	sl, sl, #1
 8007e7e:	e23e      	b.n	80082fe <_dtoa_r+0x92e>
 8007e80:	07f2      	lsls	r2, r6, #31
 8007e82:	d505      	bpl.n	8007e90 <_dtoa_r+0x4c0>
 8007e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e88:	f7f8 fbb6 	bl	80005f8 <__aeabi_dmul>
 8007e8c:	3501      	adds	r5, #1
 8007e8e:	2301      	movs	r3, #1
 8007e90:	1076      	asrs	r6, r6, #1
 8007e92:	3708      	adds	r7, #8
 8007e94:	e76c      	b.n	8007d70 <_dtoa_r+0x3a0>
 8007e96:	2502      	movs	r5, #2
 8007e98:	e76f      	b.n	8007d7a <_dtoa_r+0x3aa>
 8007e9a:	9b01      	ldr	r3, [sp, #4]
 8007e9c:	f8cd a01c 	str.w	sl, [sp, #28]
 8007ea0:	930c      	str	r3, [sp, #48]	; 0x30
 8007ea2:	e78d      	b.n	8007dc0 <_dtoa_r+0x3f0>
 8007ea4:	9900      	ldr	r1, [sp, #0]
 8007ea6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007ea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eaa:	4b4e      	ldr	r3, [pc, #312]	; (8007fe4 <_dtoa_r+0x614>)
 8007eac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007eb0:	4401      	add	r1, r0
 8007eb2:	9102      	str	r1, [sp, #8]
 8007eb4:	9908      	ldr	r1, [sp, #32]
 8007eb6:	eeb0 8a47 	vmov.f32	s16, s14
 8007eba:	eef0 8a67 	vmov.f32	s17, s15
 8007ebe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ec2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ec6:	2900      	cmp	r1, #0
 8007ec8:	d045      	beq.n	8007f56 <_dtoa_r+0x586>
 8007eca:	494c      	ldr	r1, [pc, #304]	; (8007ffc <_dtoa_r+0x62c>)
 8007ecc:	2000      	movs	r0, #0
 8007ece:	f7f8 fcbd 	bl	800084c <__aeabi_ddiv>
 8007ed2:	ec53 2b18 	vmov	r2, r3, d8
 8007ed6:	f7f8 f9d7 	bl	8000288 <__aeabi_dsub>
 8007eda:	9d00      	ldr	r5, [sp, #0]
 8007edc:	ec41 0b18 	vmov	d8, r0, r1
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f7f8 fe38 	bl	8000b58 <__aeabi_d2iz>
 8007ee8:	900c      	str	r0, [sp, #48]	; 0x30
 8007eea:	f7f8 fb1b 	bl	8000524 <__aeabi_i2d>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	4639      	mov	r1, r7
 8007ef6:	f7f8 f9c7 	bl	8000288 <__aeabi_dsub>
 8007efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007efc:	3330      	adds	r3, #48	; 0x30
 8007efe:	f805 3b01 	strb.w	r3, [r5], #1
 8007f02:	ec53 2b18 	vmov	r2, r3, d8
 8007f06:	4606      	mov	r6, r0
 8007f08:	460f      	mov	r7, r1
 8007f0a:	f7f8 fde7 	bl	8000adc <__aeabi_dcmplt>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d165      	bne.n	8007fde <_dtoa_r+0x60e>
 8007f12:	4632      	mov	r2, r6
 8007f14:	463b      	mov	r3, r7
 8007f16:	4935      	ldr	r1, [pc, #212]	; (8007fec <_dtoa_r+0x61c>)
 8007f18:	2000      	movs	r0, #0
 8007f1a:	f7f8 f9b5 	bl	8000288 <__aeabi_dsub>
 8007f1e:	ec53 2b18 	vmov	r2, r3, d8
 8007f22:	f7f8 fddb 	bl	8000adc <__aeabi_dcmplt>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	f040 80b8 	bne.w	800809c <_dtoa_r+0x6cc>
 8007f2c:	9b02      	ldr	r3, [sp, #8]
 8007f2e:	429d      	cmp	r5, r3
 8007f30:	f43f af75 	beq.w	8007e1e <_dtoa_r+0x44e>
 8007f34:	4b2e      	ldr	r3, [pc, #184]	; (8007ff0 <_dtoa_r+0x620>)
 8007f36:	ec51 0b18 	vmov	r0, r1, d8
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f7f8 fb5c 	bl	80005f8 <__aeabi_dmul>
 8007f40:	4b2b      	ldr	r3, [pc, #172]	; (8007ff0 <_dtoa_r+0x620>)
 8007f42:	ec41 0b18 	vmov	d8, r0, r1
 8007f46:	2200      	movs	r2, #0
 8007f48:	4630      	mov	r0, r6
 8007f4a:	4639      	mov	r1, r7
 8007f4c:	f7f8 fb54 	bl	80005f8 <__aeabi_dmul>
 8007f50:	4606      	mov	r6, r0
 8007f52:	460f      	mov	r7, r1
 8007f54:	e7c4      	b.n	8007ee0 <_dtoa_r+0x510>
 8007f56:	ec51 0b17 	vmov	r0, r1, d7
 8007f5a:	f7f8 fb4d 	bl	80005f8 <__aeabi_dmul>
 8007f5e:	9b02      	ldr	r3, [sp, #8]
 8007f60:	9d00      	ldr	r5, [sp, #0]
 8007f62:	930c      	str	r3, [sp, #48]	; 0x30
 8007f64:	ec41 0b18 	vmov	d8, r0, r1
 8007f68:	4639      	mov	r1, r7
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f7f8 fdf4 	bl	8000b58 <__aeabi_d2iz>
 8007f70:	9011      	str	r0, [sp, #68]	; 0x44
 8007f72:	f7f8 fad7 	bl	8000524 <__aeabi_i2d>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	4639      	mov	r1, r7
 8007f7e:	f7f8 f983 	bl	8000288 <__aeabi_dsub>
 8007f82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f84:	3330      	adds	r3, #48	; 0x30
 8007f86:	f805 3b01 	strb.w	r3, [r5], #1
 8007f8a:	9b02      	ldr	r3, [sp, #8]
 8007f8c:	429d      	cmp	r5, r3
 8007f8e:	4606      	mov	r6, r0
 8007f90:	460f      	mov	r7, r1
 8007f92:	f04f 0200 	mov.w	r2, #0
 8007f96:	d133      	bne.n	8008000 <_dtoa_r+0x630>
 8007f98:	4b18      	ldr	r3, [pc, #96]	; (8007ffc <_dtoa_r+0x62c>)
 8007f9a:	ec51 0b18 	vmov	r0, r1, d8
 8007f9e:	f7f8 f975 	bl	800028c <__adddf3>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	4639      	mov	r1, r7
 8007faa:	f7f8 fdb5 	bl	8000b18 <__aeabi_dcmpgt>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d174      	bne.n	800809c <_dtoa_r+0x6cc>
 8007fb2:	ec53 2b18 	vmov	r2, r3, d8
 8007fb6:	4911      	ldr	r1, [pc, #68]	; (8007ffc <_dtoa_r+0x62c>)
 8007fb8:	2000      	movs	r0, #0
 8007fba:	f7f8 f965 	bl	8000288 <__aeabi_dsub>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	4639      	mov	r1, r7
 8007fc6:	f7f8 fd89 	bl	8000adc <__aeabi_dcmplt>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	f43f af27 	beq.w	8007e1e <_dtoa_r+0x44e>
 8007fd0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fd2:	1e6b      	subs	r3, r5, #1
 8007fd4:	930c      	str	r3, [sp, #48]	; 0x30
 8007fd6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fda:	2b30      	cmp	r3, #48	; 0x30
 8007fdc:	d0f8      	beq.n	8007fd0 <_dtoa_r+0x600>
 8007fde:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007fe2:	e049      	b.n	8008078 <_dtoa_r+0x6a8>
 8007fe4:	0800aec8 	.word	0x0800aec8
 8007fe8:	0800aea0 	.word	0x0800aea0
 8007fec:	3ff00000 	.word	0x3ff00000
 8007ff0:	40240000 	.word	0x40240000
 8007ff4:	401c0000 	.word	0x401c0000
 8007ff8:	40140000 	.word	0x40140000
 8007ffc:	3fe00000 	.word	0x3fe00000
 8008000:	4baf      	ldr	r3, [pc, #700]	; (80082c0 <_dtoa_r+0x8f0>)
 8008002:	f7f8 faf9 	bl	80005f8 <__aeabi_dmul>
 8008006:	4606      	mov	r6, r0
 8008008:	460f      	mov	r7, r1
 800800a:	e7ad      	b.n	8007f68 <_dtoa_r+0x598>
 800800c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008010:	9d00      	ldr	r5, [sp, #0]
 8008012:	4642      	mov	r2, r8
 8008014:	464b      	mov	r3, r9
 8008016:	4630      	mov	r0, r6
 8008018:	4639      	mov	r1, r7
 800801a:	f7f8 fc17 	bl	800084c <__aeabi_ddiv>
 800801e:	f7f8 fd9b 	bl	8000b58 <__aeabi_d2iz>
 8008022:	9002      	str	r0, [sp, #8]
 8008024:	f7f8 fa7e 	bl	8000524 <__aeabi_i2d>
 8008028:	4642      	mov	r2, r8
 800802a:	464b      	mov	r3, r9
 800802c:	f7f8 fae4 	bl	80005f8 <__aeabi_dmul>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	4630      	mov	r0, r6
 8008036:	4639      	mov	r1, r7
 8008038:	f7f8 f926 	bl	8000288 <__aeabi_dsub>
 800803c:	9e02      	ldr	r6, [sp, #8]
 800803e:	9f01      	ldr	r7, [sp, #4]
 8008040:	3630      	adds	r6, #48	; 0x30
 8008042:	f805 6b01 	strb.w	r6, [r5], #1
 8008046:	9e00      	ldr	r6, [sp, #0]
 8008048:	1bae      	subs	r6, r5, r6
 800804a:	42b7      	cmp	r7, r6
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	d137      	bne.n	80080c2 <_dtoa_r+0x6f2>
 8008052:	f7f8 f91b 	bl	800028c <__adddf3>
 8008056:	4642      	mov	r2, r8
 8008058:	464b      	mov	r3, r9
 800805a:	4606      	mov	r6, r0
 800805c:	460f      	mov	r7, r1
 800805e:	f7f8 fd5b 	bl	8000b18 <__aeabi_dcmpgt>
 8008062:	b9c8      	cbnz	r0, 8008098 <_dtoa_r+0x6c8>
 8008064:	4642      	mov	r2, r8
 8008066:	464b      	mov	r3, r9
 8008068:	4630      	mov	r0, r6
 800806a:	4639      	mov	r1, r7
 800806c:	f7f8 fd2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008070:	b110      	cbz	r0, 8008078 <_dtoa_r+0x6a8>
 8008072:	9b02      	ldr	r3, [sp, #8]
 8008074:	07d9      	lsls	r1, r3, #31
 8008076:	d40f      	bmi.n	8008098 <_dtoa_r+0x6c8>
 8008078:	4620      	mov	r0, r4
 800807a:	4659      	mov	r1, fp
 800807c:	f000 ffdb 	bl	8009036 <_Bfree>
 8008080:	2300      	movs	r3, #0
 8008082:	702b      	strb	r3, [r5, #0]
 8008084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008086:	f10a 0001 	add.w	r0, sl, #1
 800808a:	6018      	str	r0, [r3, #0]
 800808c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800808e:	2b00      	cmp	r3, #0
 8008090:	f43f acd9 	beq.w	8007a46 <_dtoa_r+0x76>
 8008094:	601d      	str	r5, [r3, #0]
 8008096:	e4d6      	b.n	8007a46 <_dtoa_r+0x76>
 8008098:	f8cd a01c 	str.w	sl, [sp, #28]
 800809c:	462b      	mov	r3, r5
 800809e:	461d      	mov	r5, r3
 80080a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080a4:	2a39      	cmp	r2, #57	; 0x39
 80080a6:	d108      	bne.n	80080ba <_dtoa_r+0x6ea>
 80080a8:	9a00      	ldr	r2, [sp, #0]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d1f7      	bne.n	800809e <_dtoa_r+0x6ce>
 80080ae:	9a07      	ldr	r2, [sp, #28]
 80080b0:	9900      	ldr	r1, [sp, #0]
 80080b2:	3201      	adds	r2, #1
 80080b4:	9207      	str	r2, [sp, #28]
 80080b6:	2230      	movs	r2, #48	; 0x30
 80080b8:	700a      	strb	r2, [r1, #0]
 80080ba:	781a      	ldrb	r2, [r3, #0]
 80080bc:	3201      	adds	r2, #1
 80080be:	701a      	strb	r2, [r3, #0]
 80080c0:	e78d      	b.n	8007fde <_dtoa_r+0x60e>
 80080c2:	4b7f      	ldr	r3, [pc, #508]	; (80082c0 <_dtoa_r+0x8f0>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	f7f8 fa97 	bl	80005f8 <__aeabi_dmul>
 80080ca:	2200      	movs	r2, #0
 80080cc:	2300      	movs	r3, #0
 80080ce:	4606      	mov	r6, r0
 80080d0:	460f      	mov	r7, r1
 80080d2:	f7f8 fcf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d09b      	beq.n	8008012 <_dtoa_r+0x642>
 80080da:	e7cd      	b.n	8008078 <_dtoa_r+0x6a8>
 80080dc:	9a08      	ldr	r2, [sp, #32]
 80080de:	2a00      	cmp	r2, #0
 80080e0:	f000 80c4 	beq.w	800826c <_dtoa_r+0x89c>
 80080e4:	9a05      	ldr	r2, [sp, #20]
 80080e6:	2a01      	cmp	r2, #1
 80080e8:	f300 80a8 	bgt.w	800823c <_dtoa_r+0x86c>
 80080ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080ee:	2a00      	cmp	r2, #0
 80080f0:	f000 80a0 	beq.w	8008234 <_dtoa_r+0x864>
 80080f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80080f8:	9e06      	ldr	r6, [sp, #24]
 80080fa:	4645      	mov	r5, r8
 80080fc:	9a04      	ldr	r2, [sp, #16]
 80080fe:	2101      	movs	r1, #1
 8008100:	441a      	add	r2, r3
 8008102:	4620      	mov	r0, r4
 8008104:	4498      	add	r8, r3
 8008106:	9204      	str	r2, [sp, #16]
 8008108:	f001 f838 	bl	800917c <__i2b>
 800810c:	4607      	mov	r7, r0
 800810e:	2d00      	cmp	r5, #0
 8008110:	dd0b      	ble.n	800812a <_dtoa_r+0x75a>
 8008112:	9b04      	ldr	r3, [sp, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	dd08      	ble.n	800812a <_dtoa_r+0x75a>
 8008118:	42ab      	cmp	r3, r5
 800811a:	9a04      	ldr	r2, [sp, #16]
 800811c:	bfa8      	it	ge
 800811e:	462b      	movge	r3, r5
 8008120:	eba8 0803 	sub.w	r8, r8, r3
 8008124:	1aed      	subs	r5, r5, r3
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	9304      	str	r3, [sp, #16]
 800812a:	9b06      	ldr	r3, [sp, #24]
 800812c:	b1fb      	cbz	r3, 800816e <_dtoa_r+0x79e>
 800812e:	9b08      	ldr	r3, [sp, #32]
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 809f 	beq.w	8008274 <_dtoa_r+0x8a4>
 8008136:	2e00      	cmp	r6, #0
 8008138:	dd11      	ble.n	800815e <_dtoa_r+0x78e>
 800813a:	4639      	mov	r1, r7
 800813c:	4632      	mov	r2, r6
 800813e:	4620      	mov	r0, r4
 8008140:	f001 f8d8 	bl	80092f4 <__pow5mult>
 8008144:	465a      	mov	r2, fp
 8008146:	4601      	mov	r1, r0
 8008148:	4607      	mov	r7, r0
 800814a:	4620      	mov	r0, r4
 800814c:	f001 f82c 	bl	80091a8 <__multiply>
 8008150:	4659      	mov	r1, fp
 8008152:	9007      	str	r0, [sp, #28]
 8008154:	4620      	mov	r0, r4
 8008156:	f000 ff6e 	bl	8009036 <_Bfree>
 800815a:	9b07      	ldr	r3, [sp, #28]
 800815c:	469b      	mov	fp, r3
 800815e:	9b06      	ldr	r3, [sp, #24]
 8008160:	1b9a      	subs	r2, r3, r6
 8008162:	d004      	beq.n	800816e <_dtoa_r+0x79e>
 8008164:	4659      	mov	r1, fp
 8008166:	4620      	mov	r0, r4
 8008168:	f001 f8c4 	bl	80092f4 <__pow5mult>
 800816c:	4683      	mov	fp, r0
 800816e:	2101      	movs	r1, #1
 8008170:	4620      	mov	r0, r4
 8008172:	f001 f803 	bl	800917c <__i2b>
 8008176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008178:	2b00      	cmp	r3, #0
 800817a:	4606      	mov	r6, r0
 800817c:	dd7c      	ble.n	8008278 <_dtoa_r+0x8a8>
 800817e:	461a      	mov	r2, r3
 8008180:	4601      	mov	r1, r0
 8008182:	4620      	mov	r0, r4
 8008184:	f001 f8b6 	bl	80092f4 <__pow5mult>
 8008188:	9b05      	ldr	r3, [sp, #20]
 800818a:	2b01      	cmp	r3, #1
 800818c:	4606      	mov	r6, r0
 800818e:	dd76      	ble.n	800827e <_dtoa_r+0x8ae>
 8008190:	2300      	movs	r3, #0
 8008192:	9306      	str	r3, [sp, #24]
 8008194:	6933      	ldr	r3, [r6, #16]
 8008196:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800819a:	6918      	ldr	r0, [r3, #16]
 800819c:	f000 ff9e 	bl	80090dc <__hi0bits>
 80081a0:	f1c0 0020 	rsb	r0, r0, #32
 80081a4:	9b04      	ldr	r3, [sp, #16]
 80081a6:	4418      	add	r0, r3
 80081a8:	f010 001f 	ands.w	r0, r0, #31
 80081ac:	f000 8086 	beq.w	80082bc <_dtoa_r+0x8ec>
 80081b0:	f1c0 0320 	rsb	r3, r0, #32
 80081b4:	2b04      	cmp	r3, #4
 80081b6:	dd7f      	ble.n	80082b8 <_dtoa_r+0x8e8>
 80081b8:	f1c0 001c 	rsb	r0, r0, #28
 80081bc:	9b04      	ldr	r3, [sp, #16]
 80081be:	4403      	add	r3, r0
 80081c0:	4480      	add	r8, r0
 80081c2:	4405      	add	r5, r0
 80081c4:	9304      	str	r3, [sp, #16]
 80081c6:	f1b8 0f00 	cmp.w	r8, #0
 80081ca:	dd05      	ble.n	80081d8 <_dtoa_r+0x808>
 80081cc:	4659      	mov	r1, fp
 80081ce:	4642      	mov	r2, r8
 80081d0:	4620      	mov	r0, r4
 80081d2:	f001 f8cf 	bl	8009374 <__lshift>
 80081d6:	4683      	mov	fp, r0
 80081d8:	9b04      	ldr	r3, [sp, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	dd05      	ble.n	80081ea <_dtoa_r+0x81a>
 80081de:	4631      	mov	r1, r6
 80081e0:	461a      	mov	r2, r3
 80081e2:	4620      	mov	r0, r4
 80081e4:	f001 f8c6 	bl	8009374 <__lshift>
 80081e8:	4606      	mov	r6, r0
 80081ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d069      	beq.n	80082c4 <_dtoa_r+0x8f4>
 80081f0:	4631      	mov	r1, r6
 80081f2:	4658      	mov	r0, fp
 80081f4:	f001 f92a 	bl	800944c <__mcmp>
 80081f8:	2800      	cmp	r0, #0
 80081fa:	da63      	bge.n	80082c4 <_dtoa_r+0x8f4>
 80081fc:	2300      	movs	r3, #0
 80081fe:	4659      	mov	r1, fp
 8008200:	220a      	movs	r2, #10
 8008202:	4620      	mov	r0, r4
 8008204:	f000 ff20 	bl	8009048 <__multadd>
 8008208:	9b08      	ldr	r3, [sp, #32]
 800820a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800820e:	4683      	mov	fp, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 818e 	beq.w	8008532 <_dtoa_r+0xb62>
 8008216:	4639      	mov	r1, r7
 8008218:	2300      	movs	r3, #0
 800821a:	220a      	movs	r2, #10
 800821c:	4620      	mov	r0, r4
 800821e:	f000 ff13 	bl	8009048 <__multadd>
 8008222:	f1b9 0f00 	cmp.w	r9, #0
 8008226:	4607      	mov	r7, r0
 8008228:	f300 808e 	bgt.w	8008348 <_dtoa_r+0x978>
 800822c:	9b05      	ldr	r3, [sp, #20]
 800822e:	2b02      	cmp	r3, #2
 8008230:	dc50      	bgt.n	80082d4 <_dtoa_r+0x904>
 8008232:	e089      	b.n	8008348 <_dtoa_r+0x978>
 8008234:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008236:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800823a:	e75d      	b.n	80080f8 <_dtoa_r+0x728>
 800823c:	9b01      	ldr	r3, [sp, #4]
 800823e:	1e5e      	subs	r6, r3, #1
 8008240:	9b06      	ldr	r3, [sp, #24]
 8008242:	42b3      	cmp	r3, r6
 8008244:	bfbf      	itttt	lt
 8008246:	9b06      	ldrlt	r3, [sp, #24]
 8008248:	9606      	strlt	r6, [sp, #24]
 800824a:	1af2      	sublt	r2, r6, r3
 800824c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800824e:	bfb6      	itet	lt
 8008250:	189b      	addlt	r3, r3, r2
 8008252:	1b9e      	subge	r6, r3, r6
 8008254:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008256:	9b01      	ldr	r3, [sp, #4]
 8008258:	bfb8      	it	lt
 800825a:	2600      	movlt	r6, #0
 800825c:	2b00      	cmp	r3, #0
 800825e:	bfb5      	itete	lt
 8008260:	eba8 0503 	sublt.w	r5, r8, r3
 8008264:	9b01      	ldrge	r3, [sp, #4]
 8008266:	2300      	movlt	r3, #0
 8008268:	4645      	movge	r5, r8
 800826a:	e747      	b.n	80080fc <_dtoa_r+0x72c>
 800826c:	9e06      	ldr	r6, [sp, #24]
 800826e:	9f08      	ldr	r7, [sp, #32]
 8008270:	4645      	mov	r5, r8
 8008272:	e74c      	b.n	800810e <_dtoa_r+0x73e>
 8008274:	9a06      	ldr	r2, [sp, #24]
 8008276:	e775      	b.n	8008164 <_dtoa_r+0x794>
 8008278:	9b05      	ldr	r3, [sp, #20]
 800827a:	2b01      	cmp	r3, #1
 800827c:	dc18      	bgt.n	80082b0 <_dtoa_r+0x8e0>
 800827e:	9b02      	ldr	r3, [sp, #8]
 8008280:	b9b3      	cbnz	r3, 80082b0 <_dtoa_r+0x8e0>
 8008282:	9b03      	ldr	r3, [sp, #12]
 8008284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008288:	b9a3      	cbnz	r3, 80082b4 <_dtoa_r+0x8e4>
 800828a:	9b03      	ldr	r3, [sp, #12]
 800828c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008290:	0d1b      	lsrs	r3, r3, #20
 8008292:	051b      	lsls	r3, r3, #20
 8008294:	b12b      	cbz	r3, 80082a2 <_dtoa_r+0x8d2>
 8008296:	9b04      	ldr	r3, [sp, #16]
 8008298:	3301      	adds	r3, #1
 800829a:	9304      	str	r3, [sp, #16]
 800829c:	f108 0801 	add.w	r8, r8, #1
 80082a0:	2301      	movs	r3, #1
 80082a2:	9306      	str	r3, [sp, #24]
 80082a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f47f af74 	bne.w	8008194 <_dtoa_r+0x7c4>
 80082ac:	2001      	movs	r0, #1
 80082ae:	e779      	b.n	80081a4 <_dtoa_r+0x7d4>
 80082b0:	2300      	movs	r3, #0
 80082b2:	e7f6      	b.n	80082a2 <_dtoa_r+0x8d2>
 80082b4:	9b02      	ldr	r3, [sp, #8]
 80082b6:	e7f4      	b.n	80082a2 <_dtoa_r+0x8d2>
 80082b8:	d085      	beq.n	80081c6 <_dtoa_r+0x7f6>
 80082ba:	4618      	mov	r0, r3
 80082bc:	301c      	adds	r0, #28
 80082be:	e77d      	b.n	80081bc <_dtoa_r+0x7ec>
 80082c0:	40240000 	.word	0x40240000
 80082c4:	9b01      	ldr	r3, [sp, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	dc38      	bgt.n	800833c <_dtoa_r+0x96c>
 80082ca:	9b05      	ldr	r3, [sp, #20]
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	dd35      	ble.n	800833c <_dtoa_r+0x96c>
 80082d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80082d4:	f1b9 0f00 	cmp.w	r9, #0
 80082d8:	d10d      	bne.n	80082f6 <_dtoa_r+0x926>
 80082da:	4631      	mov	r1, r6
 80082dc:	464b      	mov	r3, r9
 80082de:	2205      	movs	r2, #5
 80082e0:	4620      	mov	r0, r4
 80082e2:	f000 feb1 	bl	8009048 <__multadd>
 80082e6:	4601      	mov	r1, r0
 80082e8:	4606      	mov	r6, r0
 80082ea:	4658      	mov	r0, fp
 80082ec:	f001 f8ae 	bl	800944c <__mcmp>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	f73f adbe 	bgt.w	8007e72 <_dtoa_r+0x4a2>
 80082f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f8:	9d00      	ldr	r5, [sp, #0]
 80082fa:	ea6f 0a03 	mvn.w	sl, r3
 80082fe:	f04f 0800 	mov.w	r8, #0
 8008302:	4631      	mov	r1, r6
 8008304:	4620      	mov	r0, r4
 8008306:	f000 fe96 	bl	8009036 <_Bfree>
 800830a:	2f00      	cmp	r7, #0
 800830c:	f43f aeb4 	beq.w	8008078 <_dtoa_r+0x6a8>
 8008310:	f1b8 0f00 	cmp.w	r8, #0
 8008314:	d005      	beq.n	8008322 <_dtoa_r+0x952>
 8008316:	45b8      	cmp	r8, r7
 8008318:	d003      	beq.n	8008322 <_dtoa_r+0x952>
 800831a:	4641      	mov	r1, r8
 800831c:	4620      	mov	r0, r4
 800831e:	f000 fe8a 	bl	8009036 <_Bfree>
 8008322:	4639      	mov	r1, r7
 8008324:	4620      	mov	r0, r4
 8008326:	f000 fe86 	bl	8009036 <_Bfree>
 800832a:	e6a5      	b.n	8008078 <_dtoa_r+0x6a8>
 800832c:	2600      	movs	r6, #0
 800832e:	4637      	mov	r7, r6
 8008330:	e7e1      	b.n	80082f6 <_dtoa_r+0x926>
 8008332:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008334:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008338:	4637      	mov	r7, r6
 800833a:	e59a      	b.n	8007e72 <_dtoa_r+0x4a2>
 800833c:	9b08      	ldr	r3, [sp, #32]
 800833e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 80fc 	beq.w	8008540 <_dtoa_r+0xb70>
 8008348:	2d00      	cmp	r5, #0
 800834a:	dd05      	ble.n	8008358 <_dtoa_r+0x988>
 800834c:	4639      	mov	r1, r7
 800834e:	462a      	mov	r2, r5
 8008350:	4620      	mov	r0, r4
 8008352:	f001 f80f 	bl	8009374 <__lshift>
 8008356:	4607      	mov	r7, r0
 8008358:	9b06      	ldr	r3, [sp, #24]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d05b      	beq.n	8008416 <_dtoa_r+0xa46>
 800835e:	6879      	ldr	r1, [r7, #4]
 8008360:	4620      	mov	r0, r4
 8008362:	f000 fe43 	bl	8008fec <_Balloc>
 8008366:	4605      	mov	r5, r0
 8008368:	b920      	cbnz	r0, 8008374 <_dtoa_r+0x9a4>
 800836a:	4b80      	ldr	r3, [pc, #512]	; (800856c <_dtoa_r+0xb9c>)
 800836c:	4602      	mov	r2, r0
 800836e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008372:	e45b      	b.n	8007c2c <_dtoa_r+0x25c>
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	3202      	adds	r2, #2
 8008378:	0092      	lsls	r2, r2, #2
 800837a:	f107 010c 	add.w	r1, r7, #12
 800837e:	300c      	adds	r0, #12
 8008380:	f000 fe1a 	bl	8008fb8 <memcpy>
 8008384:	2201      	movs	r2, #1
 8008386:	4629      	mov	r1, r5
 8008388:	4620      	mov	r0, r4
 800838a:	f000 fff3 	bl	8009374 <__lshift>
 800838e:	9b00      	ldr	r3, [sp, #0]
 8008390:	3301      	adds	r3, #1
 8008392:	9301      	str	r3, [sp, #4]
 8008394:	9b00      	ldr	r3, [sp, #0]
 8008396:	444b      	add	r3, r9
 8008398:	9307      	str	r3, [sp, #28]
 800839a:	9b02      	ldr	r3, [sp, #8]
 800839c:	f003 0301 	and.w	r3, r3, #1
 80083a0:	46b8      	mov	r8, r7
 80083a2:	9306      	str	r3, [sp, #24]
 80083a4:	4607      	mov	r7, r0
 80083a6:	9b01      	ldr	r3, [sp, #4]
 80083a8:	4631      	mov	r1, r6
 80083aa:	3b01      	subs	r3, #1
 80083ac:	4658      	mov	r0, fp
 80083ae:	9302      	str	r3, [sp, #8]
 80083b0:	f7ff fa80 	bl	80078b4 <quorem>
 80083b4:	4603      	mov	r3, r0
 80083b6:	3330      	adds	r3, #48	; 0x30
 80083b8:	9004      	str	r0, [sp, #16]
 80083ba:	4641      	mov	r1, r8
 80083bc:	4658      	mov	r0, fp
 80083be:	9308      	str	r3, [sp, #32]
 80083c0:	f001 f844 	bl	800944c <__mcmp>
 80083c4:	463a      	mov	r2, r7
 80083c6:	4681      	mov	r9, r0
 80083c8:	4631      	mov	r1, r6
 80083ca:	4620      	mov	r0, r4
 80083cc:	f001 f85a 	bl	8009484 <__mdiff>
 80083d0:	68c2      	ldr	r2, [r0, #12]
 80083d2:	9b08      	ldr	r3, [sp, #32]
 80083d4:	4605      	mov	r5, r0
 80083d6:	bb02      	cbnz	r2, 800841a <_dtoa_r+0xa4a>
 80083d8:	4601      	mov	r1, r0
 80083da:	4658      	mov	r0, fp
 80083dc:	f001 f836 	bl	800944c <__mcmp>
 80083e0:	9b08      	ldr	r3, [sp, #32]
 80083e2:	4602      	mov	r2, r0
 80083e4:	4629      	mov	r1, r5
 80083e6:	4620      	mov	r0, r4
 80083e8:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80083ec:	f000 fe23 	bl	8009036 <_Bfree>
 80083f0:	9b05      	ldr	r3, [sp, #20]
 80083f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083f4:	9d01      	ldr	r5, [sp, #4]
 80083f6:	ea43 0102 	orr.w	r1, r3, r2
 80083fa:	9b06      	ldr	r3, [sp, #24]
 80083fc:	430b      	orrs	r3, r1
 80083fe:	9b08      	ldr	r3, [sp, #32]
 8008400:	d10d      	bne.n	800841e <_dtoa_r+0xa4e>
 8008402:	2b39      	cmp	r3, #57	; 0x39
 8008404:	d029      	beq.n	800845a <_dtoa_r+0xa8a>
 8008406:	f1b9 0f00 	cmp.w	r9, #0
 800840a:	dd01      	ble.n	8008410 <_dtoa_r+0xa40>
 800840c:	9b04      	ldr	r3, [sp, #16]
 800840e:	3331      	adds	r3, #49	; 0x31
 8008410:	9a02      	ldr	r2, [sp, #8]
 8008412:	7013      	strb	r3, [r2, #0]
 8008414:	e775      	b.n	8008302 <_dtoa_r+0x932>
 8008416:	4638      	mov	r0, r7
 8008418:	e7b9      	b.n	800838e <_dtoa_r+0x9be>
 800841a:	2201      	movs	r2, #1
 800841c:	e7e2      	b.n	80083e4 <_dtoa_r+0xa14>
 800841e:	f1b9 0f00 	cmp.w	r9, #0
 8008422:	db06      	blt.n	8008432 <_dtoa_r+0xa62>
 8008424:	9905      	ldr	r1, [sp, #20]
 8008426:	ea41 0909 	orr.w	r9, r1, r9
 800842a:	9906      	ldr	r1, [sp, #24]
 800842c:	ea59 0101 	orrs.w	r1, r9, r1
 8008430:	d120      	bne.n	8008474 <_dtoa_r+0xaa4>
 8008432:	2a00      	cmp	r2, #0
 8008434:	ddec      	ble.n	8008410 <_dtoa_r+0xa40>
 8008436:	4659      	mov	r1, fp
 8008438:	2201      	movs	r2, #1
 800843a:	4620      	mov	r0, r4
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	f000 ff99 	bl	8009374 <__lshift>
 8008442:	4631      	mov	r1, r6
 8008444:	4683      	mov	fp, r0
 8008446:	f001 f801 	bl	800944c <__mcmp>
 800844a:	2800      	cmp	r0, #0
 800844c:	9b01      	ldr	r3, [sp, #4]
 800844e:	dc02      	bgt.n	8008456 <_dtoa_r+0xa86>
 8008450:	d1de      	bne.n	8008410 <_dtoa_r+0xa40>
 8008452:	07da      	lsls	r2, r3, #31
 8008454:	d5dc      	bpl.n	8008410 <_dtoa_r+0xa40>
 8008456:	2b39      	cmp	r3, #57	; 0x39
 8008458:	d1d8      	bne.n	800840c <_dtoa_r+0xa3c>
 800845a:	9a02      	ldr	r2, [sp, #8]
 800845c:	2339      	movs	r3, #57	; 0x39
 800845e:	7013      	strb	r3, [r2, #0]
 8008460:	462b      	mov	r3, r5
 8008462:	461d      	mov	r5, r3
 8008464:	3b01      	subs	r3, #1
 8008466:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800846a:	2a39      	cmp	r2, #57	; 0x39
 800846c:	d050      	beq.n	8008510 <_dtoa_r+0xb40>
 800846e:	3201      	adds	r2, #1
 8008470:	701a      	strb	r2, [r3, #0]
 8008472:	e746      	b.n	8008302 <_dtoa_r+0x932>
 8008474:	2a00      	cmp	r2, #0
 8008476:	dd03      	ble.n	8008480 <_dtoa_r+0xab0>
 8008478:	2b39      	cmp	r3, #57	; 0x39
 800847a:	d0ee      	beq.n	800845a <_dtoa_r+0xa8a>
 800847c:	3301      	adds	r3, #1
 800847e:	e7c7      	b.n	8008410 <_dtoa_r+0xa40>
 8008480:	9a01      	ldr	r2, [sp, #4]
 8008482:	9907      	ldr	r1, [sp, #28]
 8008484:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008488:	428a      	cmp	r2, r1
 800848a:	d02a      	beq.n	80084e2 <_dtoa_r+0xb12>
 800848c:	4659      	mov	r1, fp
 800848e:	2300      	movs	r3, #0
 8008490:	220a      	movs	r2, #10
 8008492:	4620      	mov	r0, r4
 8008494:	f000 fdd8 	bl	8009048 <__multadd>
 8008498:	45b8      	cmp	r8, r7
 800849a:	4683      	mov	fp, r0
 800849c:	f04f 0300 	mov.w	r3, #0
 80084a0:	f04f 020a 	mov.w	r2, #10
 80084a4:	4641      	mov	r1, r8
 80084a6:	4620      	mov	r0, r4
 80084a8:	d107      	bne.n	80084ba <_dtoa_r+0xaea>
 80084aa:	f000 fdcd 	bl	8009048 <__multadd>
 80084ae:	4680      	mov	r8, r0
 80084b0:	4607      	mov	r7, r0
 80084b2:	9b01      	ldr	r3, [sp, #4]
 80084b4:	3301      	adds	r3, #1
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	e775      	b.n	80083a6 <_dtoa_r+0x9d6>
 80084ba:	f000 fdc5 	bl	8009048 <__multadd>
 80084be:	4639      	mov	r1, r7
 80084c0:	4680      	mov	r8, r0
 80084c2:	2300      	movs	r3, #0
 80084c4:	220a      	movs	r2, #10
 80084c6:	4620      	mov	r0, r4
 80084c8:	f000 fdbe 	bl	8009048 <__multadd>
 80084cc:	4607      	mov	r7, r0
 80084ce:	e7f0      	b.n	80084b2 <_dtoa_r+0xae2>
 80084d0:	f1b9 0f00 	cmp.w	r9, #0
 80084d4:	9a00      	ldr	r2, [sp, #0]
 80084d6:	bfcc      	ite	gt
 80084d8:	464d      	movgt	r5, r9
 80084da:	2501      	movle	r5, #1
 80084dc:	4415      	add	r5, r2
 80084de:	f04f 0800 	mov.w	r8, #0
 80084e2:	4659      	mov	r1, fp
 80084e4:	2201      	movs	r2, #1
 80084e6:	4620      	mov	r0, r4
 80084e8:	9301      	str	r3, [sp, #4]
 80084ea:	f000 ff43 	bl	8009374 <__lshift>
 80084ee:	4631      	mov	r1, r6
 80084f0:	4683      	mov	fp, r0
 80084f2:	f000 ffab 	bl	800944c <__mcmp>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	dcb2      	bgt.n	8008460 <_dtoa_r+0xa90>
 80084fa:	d102      	bne.n	8008502 <_dtoa_r+0xb32>
 80084fc:	9b01      	ldr	r3, [sp, #4]
 80084fe:	07db      	lsls	r3, r3, #31
 8008500:	d4ae      	bmi.n	8008460 <_dtoa_r+0xa90>
 8008502:	462b      	mov	r3, r5
 8008504:	461d      	mov	r5, r3
 8008506:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800850a:	2a30      	cmp	r2, #48	; 0x30
 800850c:	d0fa      	beq.n	8008504 <_dtoa_r+0xb34>
 800850e:	e6f8      	b.n	8008302 <_dtoa_r+0x932>
 8008510:	9a00      	ldr	r2, [sp, #0]
 8008512:	429a      	cmp	r2, r3
 8008514:	d1a5      	bne.n	8008462 <_dtoa_r+0xa92>
 8008516:	f10a 0a01 	add.w	sl, sl, #1
 800851a:	2331      	movs	r3, #49	; 0x31
 800851c:	e779      	b.n	8008412 <_dtoa_r+0xa42>
 800851e:	4b14      	ldr	r3, [pc, #80]	; (8008570 <_dtoa_r+0xba0>)
 8008520:	f7ff bab1 	b.w	8007a86 <_dtoa_r+0xb6>
 8008524:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008526:	2b00      	cmp	r3, #0
 8008528:	f47f aa93 	bne.w	8007a52 <_dtoa_r+0x82>
 800852c:	4b11      	ldr	r3, [pc, #68]	; (8008574 <_dtoa_r+0xba4>)
 800852e:	f7ff baaa 	b.w	8007a86 <_dtoa_r+0xb6>
 8008532:	f1b9 0f00 	cmp.w	r9, #0
 8008536:	dc03      	bgt.n	8008540 <_dtoa_r+0xb70>
 8008538:	9b05      	ldr	r3, [sp, #20]
 800853a:	2b02      	cmp	r3, #2
 800853c:	f73f aeca 	bgt.w	80082d4 <_dtoa_r+0x904>
 8008540:	9d00      	ldr	r5, [sp, #0]
 8008542:	4631      	mov	r1, r6
 8008544:	4658      	mov	r0, fp
 8008546:	f7ff f9b5 	bl	80078b4 <quorem>
 800854a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800854e:	f805 3b01 	strb.w	r3, [r5], #1
 8008552:	9a00      	ldr	r2, [sp, #0]
 8008554:	1aaa      	subs	r2, r5, r2
 8008556:	4591      	cmp	r9, r2
 8008558:	ddba      	ble.n	80084d0 <_dtoa_r+0xb00>
 800855a:	4659      	mov	r1, fp
 800855c:	2300      	movs	r3, #0
 800855e:	220a      	movs	r2, #10
 8008560:	4620      	mov	r0, r4
 8008562:	f000 fd71 	bl	8009048 <__multadd>
 8008566:	4683      	mov	fp, r0
 8008568:	e7eb      	b.n	8008542 <_dtoa_r+0xb72>
 800856a:	bf00      	nop
 800856c:	0800adcd 	.word	0x0800adcd
 8008570:	0800ad9e 	.word	0x0800ad9e
 8008574:	0800adc4 	.word	0x0800adc4

08008578 <__sflush_r>:
 8008578:	898b      	ldrh	r3, [r1, #12]
 800857a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800857e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008582:	4605      	mov	r5, r0
 8008584:	0718      	lsls	r0, r3, #28
 8008586:	460c      	mov	r4, r1
 8008588:	d45f      	bmi.n	800864a <__sflush_r+0xd2>
 800858a:	684b      	ldr	r3, [r1, #4]
 800858c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008590:	2b00      	cmp	r3, #0
 8008592:	818a      	strh	r2, [r1, #12]
 8008594:	dc05      	bgt.n	80085a2 <__sflush_r+0x2a>
 8008596:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008598:	2b00      	cmp	r3, #0
 800859a:	dc02      	bgt.n	80085a2 <__sflush_r+0x2a>
 800859c:	2000      	movs	r0, #0
 800859e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80085a4:	2e00      	cmp	r6, #0
 80085a6:	d0f9      	beq.n	800859c <__sflush_r+0x24>
 80085a8:	2300      	movs	r3, #0
 80085aa:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085ae:	682f      	ldr	r7, [r5, #0]
 80085b0:	602b      	str	r3, [r5, #0]
 80085b2:	d036      	beq.n	8008622 <__sflush_r+0xaa>
 80085b4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80085b6:	89a3      	ldrh	r3, [r4, #12]
 80085b8:	075a      	lsls	r2, r3, #29
 80085ba:	d505      	bpl.n	80085c8 <__sflush_r+0x50>
 80085bc:	6863      	ldr	r3, [r4, #4]
 80085be:	1ac0      	subs	r0, r0, r3
 80085c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80085c2:	b10b      	cbz	r3, 80085c8 <__sflush_r+0x50>
 80085c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80085c6:	1ac0      	subs	r0, r0, r3
 80085c8:	2300      	movs	r3, #0
 80085ca:	4602      	mov	r2, r0
 80085cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80085ce:	69e1      	ldr	r1, [r4, #28]
 80085d0:	4628      	mov	r0, r5
 80085d2:	47b0      	blx	r6
 80085d4:	1c43      	adds	r3, r0, #1
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	d106      	bne.n	80085e8 <__sflush_r+0x70>
 80085da:	6829      	ldr	r1, [r5, #0]
 80085dc:	291d      	cmp	r1, #29
 80085de:	d830      	bhi.n	8008642 <__sflush_r+0xca>
 80085e0:	4a2b      	ldr	r2, [pc, #172]	; (8008690 <__sflush_r+0x118>)
 80085e2:	40ca      	lsrs	r2, r1
 80085e4:	07d6      	lsls	r6, r2, #31
 80085e6:	d52c      	bpl.n	8008642 <__sflush_r+0xca>
 80085e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085ec:	b21b      	sxth	r3, r3
 80085ee:	2200      	movs	r2, #0
 80085f0:	6062      	str	r2, [r4, #4]
 80085f2:	04d9      	lsls	r1, r3, #19
 80085f4:	6922      	ldr	r2, [r4, #16]
 80085f6:	81a3      	strh	r3, [r4, #12]
 80085f8:	6022      	str	r2, [r4, #0]
 80085fa:	d504      	bpl.n	8008606 <__sflush_r+0x8e>
 80085fc:	1c42      	adds	r2, r0, #1
 80085fe:	d101      	bne.n	8008604 <__sflush_r+0x8c>
 8008600:	682b      	ldr	r3, [r5, #0]
 8008602:	b903      	cbnz	r3, 8008606 <__sflush_r+0x8e>
 8008604:	6520      	str	r0, [r4, #80]	; 0x50
 8008606:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008608:	602f      	str	r7, [r5, #0]
 800860a:	2900      	cmp	r1, #0
 800860c:	d0c6      	beq.n	800859c <__sflush_r+0x24>
 800860e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008612:	4299      	cmp	r1, r3
 8008614:	d002      	beq.n	800861c <__sflush_r+0xa4>
 8008616:	4628      	mov	r0, r5
 8008618:	f000 f938 	bl	800888c <_free_r>
 800861c:	2000      	movs	r0, #0
 800861e:	6320      	str	r0, [r4, #48]	; 0x30
 8008620:	e7bd      	b.n	800859e <__sflush_r+0x26>
 8008622:	69e1      	ldr	r1, [r4, #28]
 8008624:	2301      	movs	r3, #1
 8008626:	4628      	mov	r0, r5
 8008628:	47b0      	blx	r6
 800862a:	1c41      	adds	r1, r0, #1
 800862c:	d1c3      	bne.n	80085b6 <__sflush_r+0x3e>
 800862e:	682b      	ldr	r3, [r5, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0c0      	beq.n	80085b6 <__sflush_r+0x3e>
 8008634:	2b1d      	cmp	r3, #29
 8008636:	d001      	beq.n	800863c <__sflush_r+0xc4>
 8008638:	2b16      	cmp	r3, #22
 800863a:	d101      	bne.n	8008640 <__sflush_r+0xc8>
 800863c:	602f      	str	r7, [r5, #0]
 800863e:	e7ad      	b.n	800859c <__sflush_r+0x24>
 8008640:	89a3      	ldrh	r3, [r4, #12]
 8008642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008646:	81a3      	strh	r3, [r4, #12]
 8008648:	e7a9      	b.n	800859e <__sflush_r+0x26>
 800864a:	690f      	ldr	r7, [r1, #16]
 800864c:	2f00      	cmp	r7, #0
 800864e:	d0a5      	beq.n	800859c <__sflush_r+0x24>
 8008650:	079b      	lsls	r3, r3, #30
 8008652:	680e      	ldr	r6, [r1, #0]
 8008654:	bf08      	it	eq
 8008656:	694b      	ldreq	r3, [r1, #20]
 8008658:	600f      	str	r7, [r1, #0]
 800865a:	bf18      	it	ne
 800865c:	2300      	movne	r3, #0
 800865e:	eba6 0807 	sub.w	r8, r6, r7
 8008662:	608b      	str	r3, [r1, #8]
 8008664:	f1b8 0f00 	cmp.w	r8, #0
 8008668:	dd98      	ble.n	800859c <__sflush_r+0x24>
 800866a:	69e1      	ldr	r1, [r4, #28]
 800866c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800866e:	4643      	mov	r3, r8
 8008670:	463a      	mov	r2, r7
 8008672:	4628      	mov	r0, r5
 8008674:	47b0      	blx	r6
 8008676:	2800      	cmp	r0, #0
 8008678:	dc06      	bgt.n	8008688 <__sflush_r+0x110>
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008680:	81a3      	strh	r3, [r4, #12]
 8008682:	f04f 30ff 	mov.w	r0, #4294967295
 8008686:	e78a      	b.n	800859e <__sflush_r+0x26>
 8008688:	4407      	add	r7, r0
 800868a:	eba8 0800 	sub.w	r8, r8, r0
 800868e:	e7e9      	b.n	8008664 <__sflush_r+0xec>
 8008690:	20400001 	.word	0x20400001

08008694 <_fflush_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	460c      	mov	r4, r1
 8008698:	4605      	mov	r5, r0
 800869a:	b118      	cbz	r0, 80086a4 <_fflush_r+0x10>
 800869c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800869e:	b90b      	cbnz	r3, 80086a4 <_fflush_r+0x10>
 80086a0:	f000 f864 	bl	800876c <__sinit>
 80086a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086a8:	b1bb      	cbz	r3, 80086da <_fflush_r+0x46>
 80086aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086ac:	07d0      	lsls	r0, r2, #31
 80086ae:	d404      	bmi.n	80086ba <_fflush_r+0x26>
 80086b0:	0599      	lsls	r1, r3, #22
 80086b2:	d402      	bmi.n	80086ba <_fflush_r+0x26>
 80086b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086b6:	f000 f9cf 	bl	8008a58 <__retarget_lock_acquire_recursive>
 80086ba:	4628      	mov	r0, r5
 80086bc:	4621      	mov	r1, r4
 80086be:	f7ff ff5b 	bl	8008578 <__sflush_r>
 80086c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086c4:	07da      	lsls	r2, r3, #31
 80086c6:	4605      	mov	r5, r0
 80086c8:	d405      	bmi.n	80086d6 <_fflush_r+0x42>
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	059b      	lsls	r3, r3, #22
 80086ce:	d402      	bmi.n	80086d6 <_fflush_r+0x42>
 80086d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086d2:	f000 f9c2 	bl	8008a5a <__retarget_lock_release_recursive>
 80086d6:	4628      	mov	r0, r5
 80086d8:	bd38      	pop	{r3, r4, r5, pc}
 80086da:	461d      	mov	r5, r3
 80086dc:	e7fb      	b.n	80086d6 <_fflush_r+0x42>
	...

080086e0 <std>:
 80086e0:	2300      	movs	r3, #0
 80086e2:	b510      	push	{r4, lr}
 80086e4:	4604      	mov	r4, r0
 80086e6:	e9c0 3300 	strd	r3, r3, [r0]
 80086ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086ee:	6083      	str	r3, [r0, #8]
 80086f0:	8181      	strh	r1, [r0, #12]
 80086f2:	6643      	str	r3, [r0, #100]	; 0x64
 80086f4:	81c2      	strh	r2, [r0, #14]
 80086f6:	6183      	str	r3, [r0, #24]
 80086f8:	4619      	mov	r1, r3
 80086fa:	2208      	movs	r2, #8
 80086fc:	305c      	adds	r0, #92	; 0x5c
 80086fe:	f7fd fddf 	bl	80062c0 <memset>
 8008702:	4b07      	ldr	r3, [pc, #28]	; (8008720 <std+0x40>)
 8008704:	6223      	str	r3, [r4, #32]
 8008706:	4b07      	ldr	r3, [pc, #28]	; (8008724 <std+0x44>)
 8008708:	6263      	str	r3, [r4, #36]	; 0x24
 800870a:	4b07      	ldr	r3, [pc, #28]	; (8008728 <std+0x48>)
 800870c:	62a3      	str	r3, [r4, #40]	; 0x28
 800870e:	4b07      	ldr	r3, [pc, #28]	; (800872c <std+0x4c>)
 8008710:	61e4      	str	r4, [r4, #28]
 8008712:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008714:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800871c:	f000 b99a 	b.w	8008a54 <__retarget_lock_init_recursive>
 8008720:	080096dd 	.word	0x080096dd
 8008724:	080096ff 	.word	0x080096ff
 8008728:	08009737 	.word	0x08009737
 800872c:	0800975b 	.word	0x0800975b

08008730 <_cleanup_r>:
 8008730:	4901      	ldr	r1, [pc, #4]	; (8008738 <_cleanup_r+0x8>)
 8008732:	f000 b96b 	b.w	8008a0c <_fwalk_reent>
 8008736:	bf00      	nop
 8008738:	0800a2f5 	.word	0x0800a2f5

0800873c <__sfp_lock_acquire>:
 800873c:	4801      	ldr	r0, [pc, #4]	; (8008744 <__sfp_lock_acquire+0x8>)
 800873e:	f000 b98b 	b.w	8008a58 <__retarget_lock_acquire_recursive>
 8008742:	bf00      	nop
 8008744:	20000bbc 	.word	0x20000bbc

08008748 <__sfp_lock_release>:
 8008748:	4801      	ldr	r0, [pc, #4]	; (8008750 <__sfp_lock_release+0x8>)
 800874a:	f000 b986 	b.w	8008a5a <__retarget_lock_release_recursive>
 800874e:	bf00      	nop
 8008750:	20000bbc 	.word	0x20000bbc

08008754 <__sinit_lock_acquire>:
 8008754:	4801      	ldr	r0, [pc, #4]	; (800875c <__sinit_lock_acquire+0x8>)
 8008756:	f000 b97f 	b.w	8008a58 <__retarget_lock_acquire_recursive>
 800875a:	bf00      	nop
 800875c:	20000bb7 	.word	0x20000bb7

08008760 <__sinit_lock_release>:
 8008760:	4801      	ldr	r0, [pc, #4]	; (8008768 <__sinit_lock_release+0x8>)
 8008762:	f000 b97a 	b.w	8008a5a <__retarget_lock_release_recursive>
 8008766:	bf00      	nop
 8008768:	20000bb7 	.word	0x20000bb7

0800876c <__sinit>:
 800876c:	b510      	push	{r4, lr}
 800876e:	4604      	mov	r4, r0
 8008770:	f7ff fff0 	bl	8008754 <__sinit_lock_acquire>
 8008774:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008776:	b11a      	cbz	r2, 8008780 <__sinit+0x14>
 8008778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800877c:	f7ff bff0 	b.w	8008760 <__sinit_lock_release>
 8008780:	4b0d      	ldr	r3, [pc, #52]	; (80087b8 <__sinit+0x4c>)
 8008782:	63e3      	str	r3, [r4, #60]	; 0x3c
 8008784:	2303      	movs	r3, #3
 8008786:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800878a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800878e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8008792:	6860      	ldr	r0, [r4, #4]
 8008794:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8008798:	2104      	movs	r1, #4
 800879a:	f7ff ffa1 	bl	80086e0 <std>
 800879e:	68a0      	ldr	r0, [r4, #8]
 80087a0:	2201      	movs	r2, #1
 80087a2:	2109      	movs	r1, #9
 80087a4:	f7ff ff9c 	bl	80086e0 <std>
 80087a8:	68e0      	ldr	r0, [r4, #12]
 80087aa:	2202      	movs	r2, #2
 80087ac:	2112      	movs	r1, #18
 80087ae:	f7ff ff97 	bl	80086e0 <std>
 80087b2:	2301      	movs	r3, #1
 80087b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80087b6:	e7df      	b.n	8008778 <__sinit+0xc>
 80087b8:	08008731 	.word	0x08008731

080087bc <__libc_fini_array>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	4d07      	ldr	r5, [pc, #28]	; (80087dc <__libc_fini_array+0x20>)
 80087c0:	4c07      	ldr	r4, [pc, #28]	; (80087e0 <__libc_fini_array+0x24>)
 80087c2:	1b64      	subs	r4, r4, r5
 80087c4:	10a4      	asrs	r4, r4, #2
 80087c6:	b91c      	cbnz	r4, 80087d0 <__libc_fini_array+0x14>
 80087c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087cc:	f002 ba90 	b.w	800acf0 <_fini>
 80087d0:	3c01      	subs	r4, #1
 80087d2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80087d6:	4798      	blx	r3
 80087d8:	e7f5      	b.n	80087c6 <__libc_fini_array+0xa>
 80087da:	bf00      	nop
 80087dc:	0800b114 	.word	0x0800b114
 80087e0:	0800b118 	.word	0x0800b118

080087e4 <_malloc_trim_r>:
 80087e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087e8:	4606      	mov	r6, r0
 80087ea:	2008      	movs	r0, #8
 80087ec:	460c      	mov	r4, r1
 80087ee:	f000 ffcb 	bl	8009788 <sysconf>
 80087f2:	4f23      	ldr	r7, [pc, #140]	; (8008880 <_malloc_trim_r+0x9c>)
 80087f4:	4680      	mov	r8, r0
 80087f6:	4630      	mov	r0, r6
 80087f8:	f000 fbec 	bl	8008fd4 <__malloc_lock>
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	685d      	ldr	r5, [r3, #4]
 8008800:	f025 0503 	bic.w	r5, r5, #3
 8008804:	1b2c      	subs	r4, r5, r4
 8008806:	3c11      	subs	r4, #17
 8008808:	4444      	add	r4, r8
 800880a:	fbb4 f4f8 	udiv	r4, r4, r8
 800880e:	3c01      	subs	r4, #1
 8008810:	fb08 f404 	mul.w	r4, r8, r4
 8008814:	45a0      	cmp	r8, r4
 8008816:	dd05      	ble.n	8008824 <_malloc_trim_r+0x40>
 8008818:	4630      	mov	r0, r6
 800881a:	f000 fbe1 	bl	8008fe0 <__malloc_unlock>
 800881e:	2000      	movs	r0, #0
 8008820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008824:	2100      	movs	r1, #0
 8008826:	4630      	mov	r0, r6
 8008828:	f000 ff48 	bl	80096bc <_sbrk_r>
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	442b      	add	r3, r5
 8008830:	4298      	cmp	r0, r3
 8008832:	d1f1      	bne.n	8008818 <_malloc_trim_r+0x34>
 8008834:	4261      	negs	r1, r4
 8008836:	4630      	mov	r0, r6
 8008838:	f000 ff40 	bl	80096bc <_sbrk_r>
 800883c:	3001      	adds	r0, #1
 800883e:	d110      	bne.n	8008862 <_malloc_trim_r+0x7e>
 8008840:	2100      	movs	r1, #0
 8008842:	4630      	mov	r0, r6
 8008844:	f000 ff3a 	bl	80096bc <_sbrk_r>
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	1a83      	subs	r3, r0, r2
 800884c:	2b0f      	cmp	r3, #15
 800884e:	dde3      	ble.n	8008818 <_malloc_trim_r+0x34>
 8008850:	490c      	ldr	r1, [pc, #48]	; (8008884 <_malloc_trim_r+0xa0>)
 8008852:	6809      	ldr	r1, [r1, #0]
 8008854:	1a40      	subs	r0, r0, r1
 8008856:	490c      	ldr	r1, [pc, #48]	; (8008888 <_malloc_trim_r+0xa4>)
 8008858:	f043 0301 	orr.w	r3, r3, #1
 800885c:	6008      	str	r0, [r1, #0]
 800885e:	6053      	str	r3, [r2, #4]
 8008860:	e7da      	b.n	8008818 <_malloc_trim_r+0x34>
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	4a08      	ldr	r2, [pc, #32]	; (8008888 <_malloc_trim_r+0xa4>)
 8008866:	1b2d      	subs	r5, r5, r4
 8008868:	f045 0501 	orr.w	r5, r5, #1
 800886c:	605d      	str	r5, [r3, #4]
 800886e:	6813      	ldr	r3, [r2, #0]
 8008870:	4630      	mov	r0, r6
 8008872:	1b1c      	subs	r4, r3, r4
 8008874:	6014      	str	r4, [r2, #0]
 8008876:	f000 fbb3 	bl	8008fe0 <__malloc_unlock>
 800887a:	2001      	movs	r0, #1
 800887c:	e7d0      	b.n	8008820 <_malloc_trim_r+0x3c>
 800887e:	bf00      	nop
 8008880:	2000044c 	.word	0x2000044c
 8008884:	20000854 	.word	0x20000854
 8008888:	200009f0 	.word	0x200009f0

0800888c <_free_r>:
 800888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888e:	4605      	mov	r5, r0
 8008890:	460f      	mov	r7, r1
 8008892:	2900      	cmp	r1, #0
 8008894:	f000 80b1 	beq.w	80089fa <_free_r+0x16e>
 8008898:	f000 fb9c 	bl	8008fd4 <__malloc_lock>
 800889c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80088a0:	4856      	ldr	r0, [pc, #344]	; (80089fc <_free_r+0x170>)
 80088a2:	f022 0401 	bic.w	r4, r2, #1
 80088a6:	f1a7 0308 	sub.w	r3, r7, #8
 80088aa:	eb03 0c04 	add.w	ip, r3, r4
 80088ae:	6881      	ldr	r1, [r0, #8]
 80088b0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80088b4:	4561      	cmp	r1, ip
 80088b6:	f026 0603 	bic.w	r6, r6, #3
 80088ba:	f002 0201 	and.w	r2, r2, #1
 80088be:	d11b      	bne.n	80088f8 <_free_r+0x6c>
 80088c0:	4434      	add	r4, r6
 80088c2:	b93a      	cbnz	r2, 80088d4 <_free_r+0x48>
 80088c4:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80088c8:	1a9b      	subs	r3, r3, r2
 80088ca:	4414      	add	r4, r2
 80088cc:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80088d0:	60ca      	str	r2, [r1, #12]
 80088d2:	6091      	str	r1, [r2, #8]
 80088d4:	f044 0201 	orr.w	r2, r4, #1
 80088d8:	605a      	str	r2, [r3, #4]
 80088da:	6083      	str	r3, [r0, #8]
 80088dc:	4b48      	ldr	r3, [pc, #288]	; (8008a00 <_free_r+0x174>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	42a3      	cmp	r3, r4
 80088e2:	d804      	bhi.n	80088ee <_free_r+0x62>
 80088e4:	4b47      	ldr	r3, [pc, #284]	; (8008a04 <_free_r+0x178>)
 80088e6:	4628      	mov	r0, r5
 80088e8:	6819      	ldr	r1, [r3, #0]
 80088ea:	f7ff ff7b 	bl	80087e4 <_malloc_trim_r>
 80088ee:	4628      	mov	r0, r5
 80088f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80088f4:	f000 bb74 	b.w	8008fe0 <__malloc_unlock>
 80088f8:	f8cc 6004 	str.w	r6, [ip, #4]
 80088fc:	2a00      	cmp	r2, #0
 80088fe:	d138      	bne.n	8008972 <_free_r+0xe6>
 8008900:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8008904:	1a5b      	subs	r3, r3, r1
 8008906:	440c      	add	r4, r1
 8008908:	6899      	ldr	r1, [r3, #8]
 800890a:	f100 0708 	add.w	r7, r0, #8
 800890e:	42b9      	cmp	r1, r7
 8008910:	d031      	beq.n	8008976 <_free_r+0xea>
 8008912:	68df      	ldr	r7, [r3, #12]
 8008914:	60cf      	str	r7, [r1, #12]
 8008916:	60b9      	str	r1, [r7, #8]
 8008918:	eb0c 0106 	add.w	r1, ip, r6
 800891c:	6849      	ldr	r1, [r1, #4]
 800891e:	07c9      	lsls	r1, r1, #31
 8008920:	d40b      	bmi.n	800893a <_free_r+0xae>
 8008922:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8008926:	4434      	add	r4, r6
 8008928:	bb3a      	cbnz	r2, 800897a <_free_r+0xee>
 800892a:	4e37      	ldr	r6, [pc, #220]	; (8008a08 <_free_r+0x17c>)
 800892c:	42b1      	cmp	r1, r6
 800892e:	d124      	bne.n	800897a <_free_r+0xee>
 8008930:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008934:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8008938:	2201      	movs	r2, #1
 800893a:	f044 0101 	orr.w	r1, r4, #1
 800893e:	6059      	str	r1, [r3, #4]
 8008940:	511c      	str	r4, [r3, r4]
 8008942:	2a00      	cmp	r2, #0
 8008944:	d1d3      	bne.n	80088ee <_free_r+0x62>
 8008946:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800894a:	d21b      	bcs.n	8008984 <_free_r+0xf8>
 800894c:	0961      	lsrs	r1, r4, #5
 800894e:	08e2      	lsrs	r2, r4, #3
 8008950:	2401      	movs	r4, #1
 8008952:	408c      	lsls	r4, r1
 8008954:	6841      	ldr	r1, [r0, #4]
 8008956:	3201      	adds	r2, #1
 8008958:	430c      	orrs	r4, r1
 800895a:	6044      	str	r4, [r0, #4]
 800895c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8008960:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8008964:	3908      	subs	r1, #8
 8008966:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800896a:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800896e:	60e3      	str	r3, [r4, #12]
 8008970:	e7bd      	b.n	80088ee <_free_r+0x62>
 8008972:	2200      	movs	r2, #0
 8008974:	e7d0      	b.n	8008918 <_free_r+0x8c>
 8008976:	2201      	movs	r2, #1
 8008978:	e7ce      	b.n	8008918 <_free_r+0x8c>
 800897a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800897e:	60ce      	str	r6, [r1, #12]
 8008980:	60b1      	str	r1, [r6, #8]
 8008982:	e7da      	b.n	800893a <_free_r+0xae>
 8008984:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8008988:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800898c:	d214      	bcs.n	80089b8 <_free_r+0x12c>
 800898e:	09a2      	lsrs	r2, r4, #6
 8008990:	3238      	adds	r2, #56	; 0x38
 8008992:	1c51      	adds	r1, r2, #1
 8008994:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8008998:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800899c:	428e      	cmp	r6, r1
 800899e:	d125      	bne.n	80089ec <_free_r+0x160>
 80089a0:	2401      	movs	r4, #1
 80089a2:	1092      	asrs	r2, r2, #2
 80089a4:	fa04 f202 	lsl.w	r2, r4, r2
 80089a8:	6844      	ldr	r4, [r0, #4]
 80089aa:	4322      	orrs	r2, r4
 80089ac:	6042      	str	r2, [r0, #4]
 80089ae:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80089b2:	60b3      	str	r3, [r6, #8]
 80089b4:	60cb      	str	r3, [r1, #12]
 80089b6:	e79a      	b.n	80088ee <_free_r+0x62>
 80089b8:	2a14      	cmp	r2, #20
 80089ba:	d801      	bhi.n	80089c0 <_free_r+0x134>
 80089bc:	325b      	adds	r2, #91	; 0x5b
 80089be:	e7e8      	b.n	8008992 <_free_r+0x106>
 80089c0:	2a54      	cmp	r2, #84	; 0x54
 80089c2:	d802      	bhi.n	80089ca <_free_r+0x13e>
 80089c4:	0b22      	lsrs	r2, r4, #12
 80089c6:	326e      	adds	r2, #110	; 0x6e
 80089c8:	e7e3      	b.n	8008992 <_free_r+0x106>
 80089ca:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80089ce:	d802      	bhi.n	80089d6 <_free_r+0x14a>
 80089d0:	0be2      	lsrs	r2, r4, #15
 80089d2:	3277      	adds	r2, #119	; 0x77
 80089d4:	e7dd      	b.n	8008992 <_free_r+0x106>
 80089d6:	f240 5154 	movw	r1, #1364	; 0x554
 80089da:	428a      	cmp	r2, r1
 80089dc:	bf9a      	itte	ls
 80089de:	0ca2      	lsrls	r2, r4, #18
 80089e0:	327c      	addls	r2, #124	; 0x7c
 80089e2:	227e      	movhi	r2, #126	; 0x7e
 80089e4:	e7d5      	b.n	8008992 <_free_r+0x106>
 80089e6:	6889      	ldr	r1, [r1, #8]
 80089e8:	428e      	cmp	r6, r1
 80089ea:	d004      	beq.n	80089f6 <_free_r+0x16a>
 80089ec:	684a      	ldr	r2, [r1, #4]
 80089ee:	f022 0203 	bic.w	r2, r2, #3
 80089f2:	42a2      	cmp	r2, r4
 80089f4:	d8f7      	bhi.n	80089e6 <_free_r+0x15a>
 80089f6:	68ce      	ldr	r6, [r1, #12]
 80089f8:	e7d9      	b.n	80089ae <_free_r+0x122>
 80089fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089fc:	2000044c 	.word	0x2000044c
 8008a00:	20000858 	.word	0x20000858
 8008a04:	20000a20 	.word	0x20000a20
 8008a08:	20000454 	.word	0x20000454

08008a0c <_fwalk_reent>:
 8008a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a10:	4606      	mov	r6, r0
 8008a12:	4688      	mov	r8, r1
 8008a14:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8008a18:	2700      	movs	r7, #0
 8008a1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a1e:	f1b9 0901 	subs.w	r9, r9, #1
 8008a22:	d505      	bpl.n	8008a30 <_fwalk_reent+0x24>
 8008a24:	6824      	ldr	r4, [r4, #0]
 8008a26:	2c00      	cmp	r4, #0
 8008a28:	d1f7      	bne.n	8008a1a <_fwalk_reent+0xe>
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a30:	89ab      	ldrh	r3, [r5, #12]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d907      	bls.n	8008a46 <_fwalk_reent+0x3a>
 8008a36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	d003      	beq.n	8008a46 <_fwalk_reent+0x3a>
 8008a3e:	4629      	mov	r1, r5
 8008a40:	4630      	mov	r0, r6
 8008a42:	47c0      	blx	r8
 8008a44:	4307      	orrs	r7, r0
 8008a46:	3568      	adds	r5, #104	; 0x68
 8008a48:	e7e9      	b.n	8008a1e <_fwalk_reent+0x12>
	...

08008a4c <_localeconv_r>:
 8008a4c:	4800      	ldr	r0, [pc, #0]	; (8008a50 <_localeconv_r+0x4>)
 8008a4e:	4770      	bx	lr
 8008a50:	2000094c 	.word	0x2000094c

08008a54 <__retarget_lock_init_recursive>:
 8008a54:	4770      	bx	lr

08008a56 <__retarget_lock_close_recursive>:
 8008a56:	4770      	bx	lr

08008a58 <__retarget_lock_acquire_recursive>:
 8008a58:	4770      	bx	lr

08008a5a <__retarget_lock_release_recursive>:
 8008a5a:	4770      	bx	lr

08008a5c <__swhatbuf_r>:
 8008a5c:	b570      	push	{r4, r5, r6, lr}
 8008a5e:	460e      	mov	r6, r1
 8008a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a64:	2900      	cmp	r1, #0
 8008a66:	b096      	sub	sp, #88	; 0x58
 8008a68:	4614      	mov	r4, r2
 8008a6a:	461d      	mov	r5, r3
 8008a6c:	da09      	bge.n	8008a82 <__swhatbuf_r+0x26>
 8008a6e:	89b3      	ldrh	r3, [r6, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008a76:	602a      	str	r2, [r5, #0]
 8008a78:	d116      	bne.n	8008aa8 <__swhatbuf_r+0x4c>
 8008a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a7e:	6023      	str	r3, [r4, #0]
 8008a80:	e015      	b.n	8008aae <__swhatbuf_r+0x52>
 8008a82:	466a      	mov	r2, sp
 8008a84:	f001 fd0c 	bl	800a4a0 <_fstat_r>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	dbf0      	blt.n	8008a6e <__swhatbuf_r+0x12>
 8008a8c:	9a01      	ldr	r2, [sp, #4]
 8008a8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a96:	425a      	negs	r2, r3
 8008a98:	415a      	adcs	r2, r3
 8008a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a9e:	602a      	str	r2, [r5, #0]
 8008aa0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008aa4:	6023      	str	r3, [r4, #0]
 8008aa6:	e002      	b.n	8008aae <__swhatbuf_r+0x52>
 8008aa8:	2340      	movs	r3, #64	; 0x40
 8008aaa:	6023      	str	r3, [r4, #0]
 8008aac:	4610      	mov	r0, r2
 8008aae:	b016      	add	sp, #88	; 0x58
 8008ab0:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ab4 <__smakebuf_r>:
 8008ab4:	898b      	ldrh	r3, [r1, #12]
 8008ab6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ab8:	079d      	lsls	r5, r3, #30
 8008aba:	4606      	mov	r6, r0
 8008abc:	460c      	mov	r4, r1
 8008abe:	d507      	bpl.n	8008ad0 <__smakebuf_r+0x1c>
 8008ac0:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	6123      	str	r3, [r4, #16]
 8008ac8:	2301      	movs	r3, #1
 8008aca:	6163      	str	r3, [r4, #20]
 8008acc:	b002      	add	sp, #8
 8008ace:	bd70      	pop	{r4, r5, r6, pc}
 8008ad0:	ab01      	add	r3, sp, #4
 8008ad2:	466a      	mov	r2, sp
 8008ad4:	f7ff ffc2 	bl	8008a5c <__swhatbuf_r>
 8008ad8:	9900      	ldr	r1, [sp, #0]
 8008ada:	4605      	mov	r5, r0
 8008adc:	4630      	mov	r0, r6
 8008ade:	f000 f829 	bl	8008b34 <_malloc_r>
 8008ae2:	b948      	cbnz	r0, 8008af8 <__smakebuf_r+0x44>
 8008ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ae8:	059a      	lsls	r2, r3, #22
 8008aea:	d4ef      	bmi.n	8008acc <__smakebuf_r+0x18>
 8008aec:	f023 0303 	bic.w	r3, r3, #3
 8008af0:	f043 0302 	orr.w	r3, r3, #2
 8008af4:	81a3      	strh	r3, [r4, #12]
 8008af6:	e7e3      	b.n	8008ac0 <__smakebuf_r+0xc>
 8008af8:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <__smakebuf_r+0x7c>)
 8008afa:	63f3      	str	r3, [r6, #60]	; 0x3c
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	6020      	str	r0, [r4, #0]
 8008b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b04:	81a3      	strh	r3, [r4, #12]
 8008b06:	9b00      	ldr	r3, [sp, #0]
 8008b08:	6163      	str	r3, [r4, #20]
 8008b0a:	9b01      	ldr	r3, [sp, #4]
 8008b0c:	6120      	str	r0, [r4, #16]
 8008b0e:	b15b      	cbz	r3, 8008b28 <__smakebuf_r+0x74>
 8008b10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b14:	4630      	mov	r0, r6
 8008b16:	f001 fe1f 	bl	800a758 <_isatty_r>
 8008b1a:	b128      	cbz	r0, 8008b28 <__smakebuf_r+0x74>
 8008b1c:	89a3      	ldrh	r3, [r4, #12]
 8008b1e:	f023 0303 	bic.w	r3, r3, #3
 8008b22:	f043 0301 	orr.w	r3, r3, #1
 8008b26:	81a3      	strh	r3, [r4, #12]
 8008b28:	89a0      	ldrh	r0, [r4, #12]
 8008b2a:	4305      	orrs	r5, r0
 8008b2c:	81a5      	strh	r5, [r4, #12]
 8008b2e:	e7cd      	b.n	8008acc <__smakebuf_r+0x18>
 8008b30:	08008731 	.word	0x08008731

08008b34 <_malloc_r>:
 8008b34:	f101 030b 	add.w	r3, r1, #11
 8008b38:	2b16      	cmp	r3, #22
 8008b3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3e:	4605      	mov	r5, r0
 8008b40:	d906      	bls.n	8008b50 <_malloc_r+0x1c>
 8008b42:	f033 0707 	bics.w	r7, r3, #7
 8008b46:	d504      	bpl.n	8008b52 <_malloc_r+0x1e>
 8008b48:	230c      	movs	r3, #12
 8008b4a:	602b      	str	r3, [r5, #0]
 8008b4c:	2400      	movs	r4, #0
 8008b4e:	e1ae      	b.n	8008eae <_malloc_r+0x37a>
 8008b50:	2710      	movs	r7, #16
 8008b52:	42b9      	cmp	r1, r7
 8008b54:	d8f8      	bhi.n	8008b48 <_malloc_r+0x14>
 8008b56:	4628      	mov	r0, r5
 8008b58:	f000 fa3c 	bl	8008fd4 <__malloc_lock>
 8008b5c:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8008b60:	4ec3      	ldr	r6, [pc, #780]	; (8008e70 <_malloc_r+0x33c>)
 8008b62:	d238      	bcs.n	8008bd6 <_malloc_r+0xa2>
 8008b64:	f107 0208 	add.w	r2, r7, #8
 8008b68:	4432      	add	r2, r6
 8008b6a:	f1a2 0108 	sub.w	r1, r2, #8
 8008b6e:	6854      	ldr	r4, [r2, #4]
 8008b70:	428c      	cmp	r4, r1
 8008b72:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8008b76:	d102      	bne.n	8008b7e <_malloc_r+0x4a>
 8008b78:	68d4      	ldr	r4, [r2, #12]
 8008b7a:	42a2      	cmp	r2, r4
 8008b7c:	d010      	beq.n	8008ba0 <_malloc_r+0x6c>
 8008b7e:	6863      	ldr	r3, [r4, #4]
 8008b80:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8008b84:	f023 0303 	bic.w	r3, r3, #3
 8008b88:	60ca      	str	r2, [r1, #12]
 8008b8a:	4423      	add	r3, r4
 8008b8c:	6091      	str	r1, [r2, #8]
 8008b8e:	685a      	ldr	r2, [r3, #4]
 8008b90:	f042 0201 	orr.w	r2, r2, #1
 8008b94:	605a      	str	r2, [r3, #4]
 8008b96:	4628      	mov	r0, r5
 8008b98:	f000 fa22 	bl	8008fe0 <__malloc_unlock>
 8008b9c:	3408      	adds	r4, #8
 8008b9e:	e186      	b.n	8008eae <_malloc_r+0x37a>
 8008ba0:	3302      	adds	r3, #2
 8008ba2:	4ab4      	ldr	r2, [pc, #720]	; (8008e74 <_malloc_r+0x340>)
 8008ba4:	6934      	ldr	r4, [r6, #16]
 8008ba6:	4294      	cmp	r4, r2
 8008ba8:	4611      	mov	r1, r2
 8008baa:	d077      	beq.n	8008c9c <_malloc_r+0x168>
 8008bac:	6860      	ldr	r0, [r4, #4]
 8008bae:	f020 0c03 	bic.w	ip, r0, #3
 8008bb2:	ebac 0007 	sub.w	r0, ip, r7
 8008bb6:	280f      	cmp	r0, #15
 8008bb8:	dd48      	ble.n	8008c4c <_malloc_r+0x118>
 8008bba:	19e1      	adds	r1, r4, r7
 8008bbc:	f040 0301 	orr.w	r3, r0, #1
 8008bc0:	f047 0701 	orr.w	r7, r7, #1
 8008bc4:	6067      	str	r7, [r4, #4]
 8008bc6:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8008bca:	e9c1 2202 	strd	r2, r2, [r1, #8]
 8008bce:	604b      	str	r3, [r1, #4]
 8008bd0:	f844 000c 	str.w	r0, [r4, ip]
 8008bd4:	e7df      	b.n	8008b96 <_malloc_r+0x62>
 8008bd6:	0a7b      	lsrs	r3, r7, #9
 8008bd8:	d02a      	beq.n	8008c30 <_malloc_r+0xfc>
 8008bda:	2b04      	cmp	r3, #4
 8008bdc:	d812      	bhi.n	8008c04 <_malloc_r+0xd0>
 8008bde:	09bb      	lsrs	r3, r7, #6
 8008be0:	3338      	adds	r3, #56	; 0x38
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8008be8:	f1a2 0c08 	sub.w	ip, r2, #8
 8008bec:	6854      	ldr	r4, [r2, #4]
 8008bee:	4564      	cmp	r4, ip
 8008bf0:	d006      	beq.n	8008c00 <_malloc_r+0xcc>
 8008bf2:	6862      	ldr	r2, [r4, #4]
 8008bf4:	f022 0203 	bic.w	r2, r2, #3
 8008bf8:	1bd0      	subs	r0, r2, r7
 8008bfa:	280f      	cmp	r0, #15
 8008bfc:	dd1c      	ble.n	8008c38 <_malloc_r+0x104>
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	3301      	adds	r3, #1
 8008c02:	e7ce      	b.n	8008ba2 <_malloc_r+0x6e>
 8008c04:	2b14      	cmp	r3, #20
 8008c06:	d801      	bhi.n	8008c0c <_malloc_r+0xd8>
 8008c08:	335b      	adds	r3, #91	; 0x5b
 8008c0a:	e7ea      	b.n	8008be2 <_malloc_r+0xae>
 8008c0c:	2b54      	cmp	r3, #84	; 0x54
 8008c0e:	d802      	bhi.n	8008c16 <_malloc_r+0xe2>
 8008c10:	0b3b      	lsrs	r3, r7, #12
 8008c12:	336e      	adds	r3, #110	; 0x6e
 8008c14:	e7e5      	b.n	8008be2 <_malloc_r+0xae>
 8008c16:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008c1a:	d802      	bhi.n	8008c22 <_malloc_r+0xee>
 8008c1c:	0bfb      	lsrs	r3, r7, #15
 8008c1e:	3377      	adds	r3, #119	; 0x77
 8008c20:	e7df      	b.n	8008be2 <_malloc_r+0xae>
 8008c22:	f240 5254 	movw	r2, #1364	; 0x554
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d804      	bhi.n	8008c34 <_malloc_r+0x100>
 8008c2a:	0cbb      	lsrs	r3, r7, #18
 8008c2c:	337c      	adds	r3, #124	; 0x7c
 8008c2e:	e7d8      	b.n	8008be2 <_malloc_r+0xae>
 8008c30:	233f      	movs	r3, #63	; 0x3f
 8008c32:	e7d6      	b.n	8008be2 <_malloc_r+0xae>
 8008c34:	237e      	movs	r3, #126	; 0x7e
 8008c36:	e7d4      	b.n	8008be2 <_malloc_r+0xae>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	68e1      	ldr	r1, [r4, #12]
 8008c3c:	db04      	blt.n	8008c48 <_malloc_r+0x114>
 8008c3e:	68a3      	ldr	r3, [r4, #8]
 8008c40:	60d9      	str	r1, [r3, #12]
 8008c42:	608b      	str	r3, [r1, #8]
 8008c44:	18a3      	adds	r3, r4, r2
 8008c46:	e7a2      	b.n	8008b8e <_malloc_r+0x5a>
 8008c48:	460c      	mov	r4, r1
 8008c4a:	e7d0      	b.n	8008bee <_malloc_r+0xba>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8008c52:	db07      	blt.n	8008c64 <_malloc_r+0x130>
 8008c54:	44a4      	add	ip, r4
 8008c56:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008c5a:	f043 0301 	orr.w	r3, r3, #1
 8008c5e:	f8cc 3004 	str.w	r3, [ip, #4]
 8008c62:	e798      	b.n	8008b96 <_malloc_r+0x62>
 8008c64:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8008c68:	6870      	ldr	r0, [r6, #4]
 8008c6a:	f080 809e 	bcs.w	8008daa <_malloc_r+0x276>
 8008c6e:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8008c72:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8008c76:	f04f 0c01 	mov.w	ip, #1
 8008c7a:	3201      	adds	r2, #1
 8008c7c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8008c80:	ea4c 0000 	orr.w	r0, ip, r0
 8008c84:	6070      	str	r0, [r6, #4]
 8008c86:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8008c8a:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8008c8e:	3808      	subs	r0, #8
 8008c90:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8008c94:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8008c98:	f8cc 400c 	str.w	r4, [ip, #12]
 8008c9c:	2001      	movs	r0, #1
 8008c9e:	109a      	asrs	r2, r3, #2
 8008ca0:	fa00 f202 	lsl.w	r2, r0, r2
 8008ca4:	6870      	ldr	r0, [r6, #4]
 8008ca6:	4290      	cmp	r0, r2
 8008ca8:	d326      	bcc.n	8008cf8 <_malloc_r+0x1c4>
 8008caa:	4210      	tst	r0, r2
 8008cac:	d106      	bne.n	8008cbc <_malloc_r+0x188>
 8008cae:	f023 0303 	bic.w	r3, r3, #3
 8008cb2:	0052      	lsls	r2, r2, #1
 8008cb4:	4210      	tst	r0, r2
 8008cb6:	f103 0304 	add.w	r3, r3, #4
 8008cba:	d0fa      	beq.n	8008cb2 <_malloc_r+0x17e>
 8008cbc:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8008cc0:	46c1      	mov	r9, r8
 8008cc2:	469e      	mov	lr, r3
 8008cc4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8008cc8:	454c      	cmp	r4, r9
 8008cca:	f040 80b3 	bne.w	8008e34 <_malloc_r+0x300>
 8008cce:	f10e 0e01 	add.w	lr, lr, #1
 8008cd2:	f01e 0f03 	tst.w	lr, #3
 8008cd6:	f109 0908 	add.w	r9, r9, #8
 8008cda:	d1f3      	bne.n	8008cc4 <_malloc_r+0x190>
 8008cdc:	0798      	lsls	r0, r3, #30
 8008cde:	f040 80ec 	bne.w	8008eba <_malloc_r+0x386>
 8008ce2:	6873      	ldr	r3, [r6, #4]
 8008ce4:	ea23 0302 	bic.w	r3, r3, r2
 8008ce8:	6073      	str	r3, [r6, #4]
 8008cea:	6870      	ldr	r0, [r6, #4]
 8008cec:	0052      	lsls	r2, r2, #1
 8008cee:	4290      	cmp	r0, r2
 8008cf0:	d302      	bcc.n	8008cf8 <_malloc_r+0x1c4>
 8008cf2:	2a00      	cmp	r2, #0
 8008cf4:	f040 80ee 	bne.w	8008ed4 <_malloc_r+0x3a0>
 8008cf8:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8008cfc:	f8db 1004 	ldr.w	r1, [fp, #4]
 8008d00:	f021 0903 	bic.w	r9, r1, #3
 8008d04:	45b9      	cmp	r9, r7
 8008d06:	d304      	bcc.n	8008d12 <_malloc_r+0x1de>
 8008d08:	eba9 0207 	sub.w	r2, r9, r7
 8008d0c:	2a0f      	cmp	r2, #15
 8008d0e:	f300 8149 	bgt.w	8008fa4 <_malloc_r+0x470>
 8008d12:	4a59      	ldr	r2, [pc, #356]	; (8008e78 <_malloc_r+0x344>)
 8008d14:	6811      	ldr	r1, [r2, #0]
 8008d16:	3110      	adds	r1, #16
 8008d18:	eb0b 0309 	add.w	r3, fp, r9
 8008d1c:	4439      	add	r1, r7
 8008d1e:	2008      	movs	r0, #8
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	9100      	str	r1, [sp, #0]
 8008d24:	f000 fd30 	bl	8009788 <sysconf>
 8008d28:	4a54      	ldr	r2, [pc, #336]	; (8008e7c <_malloc_r+0x348>)
 8008d2a:	e9dd 1300 	ldrd	r1, r3, [sp]
 8008d2e:	4680      	mov	r8, r0
 8008d30:	6810      	ldr	r0, [r2, #0]
 8008d32:	3001      	adds	r0, #1
 8008d34:	bf1f      	itttt	ne
 8008d36:	f101 31ff 	addne.w	r1, r1, #4294967295
 8008d3a:	4441      	addne	r1, r8
 8008d3c:	f1c8 0000 	rsbne	r0, r8, #0
 8008d40:	4001      	andne	r1, r0
 8008d42:	4628      	mov	r0, r5
 8008d44:	e9cd 1300 	strd	r1, r3, [sp]
 8008d48:	f000 fcb8 	bl	80096bc <_sbrk_r>
 8008d4c:	1c42      	adds	r2, r0, #1
 8008d4e:	4604      	mov	r4, r0
 8008d50:	f000 80fc 	beq.w	8008f4c <_malloc_r+0x418>
 8008d54:	9b01      	ldr	r3, [sp, #4]
 8008d56:	9900      	ldr	r1, [sp, #0]
 8008d58:	4a48      	ldr	r2, [pc, #288]	; (8008e7c <_malloc_r+0x348>)
 8008d5a:	4283      	cmp	r3, r0
 8008d5c:	d902      	bls.n	8008d64 <_malloc_r+0x230>
 8008d5e:	45b3      	cmp	fp, r6
 8008d60:	f040 80f4 	bne.w	8008f4c <_malloc_r+0x418>
 8008d64:	f8df a120 	ldr.w	sl, [pc, #288]	; 8008e88 <_malloc_r+0x354>
 8008d68:	f8da 0000 	ldr.w	r0, [sl]
 8008d6c:	42a3      	cmp	r3, r4
 8008d6e:	eb00 0e01 	add.w	lr, r0, r1
 8008d72:	f8ca e000 	str.w	lr, [sl]
 8008d76:	f108 3cff 	add.w	ip, r8, #4294967295
 8008d7a:	f040 80ad 	bne.w	8008ed8 <_malloc_r+0x3a4>
 8008d7e:	ea13 0f0c 	tst.w	r3, ip
 8008d82:	f040 80a9 	bne.w	8008ed8 <_malloc_r+0x3a4>
 8008d86:	68b3      	ldr	r3, [r6, #8]
 8008d88:	4449      	add	r1, r9
 8008d8a:	f041 0101 	orr.w	r1, r1, #1
 8008d8e:	6059      	str	r1, [r3, #4]
 8008d90:	4a3b      	ldr	r2, [pc, #236]	; (8008e80 <_malloc_r+0x34c>)
 8008d92:	f8da 3000 	ldr.w	r3, [sl]
 8008d96:	6811      	ldr	r1, [r2, #0]
 8008d98:	428b      	cmp	r3, r1
 8008d9a:	bf88      	it	hi
 8008d9c:	6013      	strhi	r3, [r2, #0]
 8008d9e:	4a39      	ldr	r2, [pc, #228]	; (8008e84 <_malloc_r+0x350>)
 8008da0:	6811      	ldr	r1, [r2, #0]
 8008da2:	428b      	cmp	r3, r1
 8008da4:	bf88      	it	hi
 8008da6:	6013      	strhi	r3, [r2, #0]
 8008da8:	e0d0      	b.n	8008f4c <_malloc_r+0x418>
 8008daa:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8008dae:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8008db2:	d218      	bcs.n	8008de6 <_malloc_r+0x2b2>
 8008db4:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8008db8:	3238      	adds	r2, #56	; 0x38
 8008dba:	f102 0e01 	add.w	lr, r2, #1
 8008dbe:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8008dc2:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8008dc6:	45f0      	cmp	r8, lr
 8008dc8:	d12b      	bne.n	8008e22 <_malloc_r+0x2ee>
 8008dca:	1092      	asrs	r2, r2, #2
 8008dcc:	f04f 0c01 	mov.w	ip, #1
 8008dd0:	fa0c f202 	lsl.w	r2, ip, r2
 8008dd4:	4310      	orrs	r0, r2
 8008dd6:	6070      	str	r0, [r6, #4]
 8008dd8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8008ddc:	f8c8 4008 	str.w	r4, [r8, #8]
 8008de0:	f8ce 400c 	str.w	r4, [lr, #12]
 8008de4:	e75a      	b.n	8008c9c <_malloc_r+0x168>
 8008de6:	2a14      	cmp	r2, #20
 8008de8:	d801      	bhi.n	8008dee <_malloc_r+0x2ba>
 8008dea:	325b      	adds	r2, #91	; 0x5b
 8008dec:	e7e5      	b.n	8008dba <_malloc_r+0x286>
 8008dee:	2a54      	cmp	r2, #84	; 0x54
 8008df0:	d803      	bhi.n	8008dfa <_malloc_r+0x2c6>
 8008df2:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8008df6:	326e      	adds	r2, #110	; 0x6e
 8008df8:	e7df      	b.n	8008dba <_malloc_r+0x286>
 8008dfa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008dfe:	d803      	bhi.n	8008e08 <_malloc_r+0x2d4>
 8008e00:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8008e04:	3277      	adds	r2, #119	; 0x77
 8008e06:	e7d8      	b.n	8008dba <_malloc_r+0x286>
 8008e08:	f240 5e54 	movw	lr, #1364	; 0x554
 8008e0c:	4572      	cmp	r2, lr
 8008e0e:	bf9a      	itte	ls
 8008e10:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8008e14:	327c      	addls	r2, #124	; 0x7c
 8008e16:	227e      	movhi	r2, #126	; 0x7e
 8008e18:	e7cf      	b.n	8008dba <_malloc_r+0x286>
 8008e1a:	f8de e008 	ldr.w	lr, [lr, #8]
 8008e1e:	45f0      	cmp	r8, lr
 8008e20:	d005      	beq.n	8008e2e <_malloc_r+0x2fa>
 8008e22:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008e26:	f022 0203 	bic.w	r2, r2, #3
 8008e2a:	4562      	cmp	r2, ip
 8008e2c:	d8f5      	bhi.n	8008e1a <_malloc_r+0x2e6>
 8008e2e:	f8de 800c 	ldr.w	r8, [lr, #12]
 8008e32:	e7d1      	b.n	8008dd8 <_malloc_r+0x2a4>
 8008e34:	6860      	ldr	r0, [r4, #4]
 8008e36:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8008e3a:	f020 0003 	bic.w	r0, r0, #3
 8008e3e:	eba0 0a07 	sub.w	sl, r0, r7
 8008e42:	f1ba 0f0f 	cmp.w	sl, #15
 8008e46:	dd21      	ble.n	8008e8c <_malloc_r+0x358>
 8008e48:	68a3      	ldr	r3, [r4, #8]
 8008e4a:	19e2      	adds	r2, r4, r7
 8008e4c:	f047 0701 	orr.w	r7, r7, #1
 8008e50:	6067      	str	r7, [r4, #4]
 8008e52:	f8c3 c00c 	str.w	ip, [r3, #12]
 8008e56:	f8cc 3008 	str.w	r3, [ip, #8]
 8008e5a:	f04a 0301 	orr.w	r3, sl, #1
 8008e5e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8008e62:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8008e66:	6053      	str	r3, [r2, #4]
 8008e68:	f844 a000 	str.w	sl, [r4, r0]
 8008e6c:	e693      	b.n	8008b96 <_malloc_r+0x62>
 8008e6e:	bf00      	nop
 8008e70:	2000044c 	.word	0x2000044c
 8008e74:	20000454 	.word	0x20000454
 8008e78:	20000a20 	.word	0x20000a20
 8008e7c:	20000854 	.word	0x20000854
 8008e80:	20000a18 	.word	0x20000a18
 8008e84:	20000a1c 	.word	0x20000a1c
 8008e88:	200009f0 	.word	0x200009f0
 8008e8c:	f1ba 0f00 	cmp.w	sl, #0
 8008e90:	db11      	blt.n	8008eb6 <_malloc_r+0x382>
 8008e92:	4420      	add	r0, r4
 8008e94:	6843      	ldr	r3, [r0, #4]
 8008e96:	f043 0301 	orr.w	r3, r3, #1
 8008e9a:	6043      	str	r3, [r0, #4]
 8008e9c:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	f8c3 c00c 	str.w	ip, [r3, #12]
 8008ea6:	f8cc 3008 	str.w	r3, [ip, #8]
 8008eaa:	f000 f899 	bl	8008fe0 <__malloc_unlock>
 8008eae:	4620      	mov	r0, r4
 8008eb0:	b003      	add	sp, #12
 8008eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb6:	4664      	mov	r4, ip
 8008eb8:	e706      	b.n	8008cc8 <_malloc_r+0x194>
 8008eba:	f858 0908 	ldr.w	r0, [r8], #-8
 8008ebe:	4540      	cmp	r0, r8
 8008ec0:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ec4:	f43f af0a 	beq.w	8008cdc <_malloc_r+0x1a8>
 8008ec8:	e70f      	b.n	8008cea <_malloc_r+0x1b6>
 8008eca:	3304      	adds	r3, #4
 8008ecc:	0052      	lsls	r2, r2, #1
 8008ece:	4210      	tst	r0, r2
 8008ed0:	d0fb      	beq.n	8008eca <_malloc_r+0x396>
 8008ed2:	e6f3      	b.n	8008cbc <_malloc_r+0x188>
 8008ed4:	4673      	mov	r3, lr
 8008ed6:	e7fa      	b.n	8008ece <_malloc_r+0x39a>
 8008ed8:	6810      	ldr	r0, [r2, #0]
 8008eda:	3001      	adds	r0, #1
 8008edc:	bf1b      	ittet	ne
 8008ede:	1ae3      	subne	r3, r4, r3
 8008ee0:	4473      	addne	r3, lr
 8008ee2:	6014      	streq	r4, [r2, #0]
 8008ee4:	f8ca 3000 	strne.w	r3, [sl]
 8008ee8:	f014 0307 	ands.w	r3, r4, #7
 8008eec:	bf1a      	itte	ne
 8008eee:	f1c3 0008 	rsbne	r0, r3, #8
 8008ef2:	1824      	addne	r4, r4, r0
 8008ef4:	4618      	moveq	r0, r3
 8008ef6:	1862      	adds	r2, r4, r1
 8008ef8:	ea02 010c 	and.w	r1, r2, ip
 8008efc:	4480      	add	r8, r0
 8008efe:	eba8 0801 	sub.w	r8, r8, r1
 8008f02:	ea08 080c 	and.w	r8, r8, ip
 8008f06:	4641      	mov	r1, r8
 8008f08:	4628      	mov	r0, r5
 8008f0a:	9301      	str	r3, [sp, #4]
 8008f0c:	9200      	str	r2, [sp, #0]
 8008f0e:	f000 fbd5 	bl	80096bc <_sbrk_r>
 8008f12:	1c43      	adds	r3, r0, #1
 8008f14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f18:	d105      	bne.n	8008f26 <_malloc_r+0x3f2>
 8008f1a:	b32b      	cbz	r3, 8008f68 <_malloc_r+0x434>
 8008f1c:	f1a3 0008 	sub.w	r0, r3, #8
 8008f20:	4410      	add	r0, r2
 8008f22:	f04f 0800 	mov.w	r8, #0
 8008f26:	f8da 2000 	ldr.w	r2, [sl]
 8008f2a:	60b4      	str	r4, [r6, #8]
 8008f2c:	1b00      	subs	r0, r0, r4
 8008f2e:	4440      	add	r0, r8
 8008f30:	4442      	add	r2, r8
 8008f32:	f040 0001 	orr.w	r0, r0, #1
 8008f36:	45b3      	cmp	fp, r6
 8008f38:	f8ca 2000 	str.w	r2, [sl]
 8008f3c:	6060      	str	r0, [r4, #4]
 8008f3e:	f43f af27 	beq.w	8008d90 <_malloc_r+0x25c>
 8008f42:	f1b9 0f0f 	cmp.w	r9, #15
 8008f46:	d812      	bhi.n	8008f6e <_malloc_r+0x43a>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	6063      	str	r3, [r4, #4]
 8008f4c:	68b3      	ldr	r3, [r6, #8]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	f023 0303 	bic.w	r3, r3, #3
 8008f54:	42bb      	cmp	r3, r7
 8008f56:	eba3 0207 	sub.w	r2, r3, r7
 8008f5a:	d301      	bcc.n	8008f60 <_malloc_r+0x42c>
 8008f5c:	2a0f      	cmp	r2, #15
 8008f5e:	dc21      	bgt.n	8008fa4 <_malloc_r+0x470>
 8008f60:	4628      	mov	r0, r5
 8008f62:	f000 f83d 	bl	8008fe0 <__malloc_unlock>
 8008f66:	e5f1      	b.n	8008b4c <_malloc_r+0x18>
 8008f68:	4610      	mov	r0, r2
 8008f6a:	4698      	mov	r8, r3
 8008f6c:	e7db      	b.n	8008f26 <_malloc_r+0x3f2>
 8008f6e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8008f72:	f1a9 090c 	sub.w	r9, r9, #12
 8008f76:	f029 0907 	bic.w	r9, r9, #7
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	ea43 0309 	orr.w	r3, r3, r9
 8008f82:	f8cb 3004 	str.w	r3, [fp, #4]
 8008f86:	2205      	movs	r2, #5
 8008f88:	eb0b 0309 	add.w	r3, fp, r9
 8008f8c:	f1b9 0f0f 	cmp.w	r9, #15
 8008f90:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8008f94:	f67f aefc 	bls.w	8008d90 <_malloc_r+0x25c>
 8008f98:	f10b 0108 	add.w	r1, fp, #8
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	f7ff fc75 	bl	800888c <_free_r>
 8008fa2:	e6f5      	b.n	8008d90 <_malloc_r+0x25c>
 8008fa4:	68b4      	ldr	r4, [r6, #8]
 8008fa6:	f047 0301 	orr.w	r3, r7, #1
 8008faa:	4427      	add	r7, r4
 8008fac:	f042 0201 	orr.w	r2, r2, #1
 8008fb0:	6063      	str	r3, [r4, #4]
 8008fb2:	60b7      	str	r7, [r6, #8]
 8008fb4:	607a      	str	r2, [r7, #4]
 8008fb6:	e5ee      	b.n	8008b96 <_malloc_r+0x62>

08008fb8 <memcpy>:
 8008fb8:	440a      	add	r2, r1
 8008fba:	4291      	cmp	r1, r2
 8008fbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fc0:	d100      	bne.n	8008fc4 <memcpy+0xc>
 8008fc2:	4770      	bx	lr
 8008fc4:	b510      	push	{r4, lr}
 8008fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fce:	4291      	cmp	r1, r2
 8008fd0:	d1f9      	bne.n	8008fc6 <memcpy+0xe>
 8008fd2:	bd10      	pop	{r4, pc}

08008fd4 <__malloc_lock>:
 8008fd4:	4801      	ldr	r0, [pc, #4]	; (8008fdc <__malloc_lock+0x8>)
 8008fd6:	f7ff bd3f 	b.w	8008a58 <__retarget_lock_acquire_recursive>
 8008fda:	bf00      	nop
 8008fdc:	20000bb8 	.word	0x20000bb8

08008fe0 <__malloc_unlock>:
 8008fe0:	4801      	ldr	r0, [pc, #4]	; (8008fe8 <__malloc_unlock+0x8>)
 8008fe2:	f7ff bd3a 	b.w	8008a5a <__retarget_lock_release_recursive>
 8008fe6:	bf00      	nop
 8008fe8:	20000bb8 	.word	0x20000bb8

08008fec <_Balloc>:
 8008fec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008fee:	b570      	push	{r4, r5, r6, lr}
 8008ff0:	4605      	mov	r5, r0
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	b17b      	cbz	r3, 8009016 <_Balloc+0x2a>
 8008ff6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8008ff8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008ffc:	b9a0      	cbnz	r0, 8009028 <_Balloc+0x3c>
 8008ffe:	2101      	movs	r1, #1
 8009000:	fa01 f604 	lsl.w	r6, r1, r4
 8009004:	1d72      	adds	r2, r6, #5
 8009006:	0092      	lsls	r2, r2, #2
 8009008:	4628      	mov	r0, r5
 800900a:	f001 f935 	bl	800a278 <_calloc_r>
 800900e:	b148      	cbz	r0, 8009024 <_Balloc+0x38>
 8009010:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8009014:	e00b      	b.n	800902e <_Balloc+0x42>
 8009016:	2221      	movs	r2, #33	; 0x21
 8009018:	2104      	movs	r1, #4
 800901a:	f001 f92d 	bl	800a278 <_calloc_r>
 800901e:	64e8      	str	r0, [r5, #76]	; 0x4c
 8009020:	2800      	cmp	r0, #0
 8009022:	d1e8      	bne.n	8008ff6 <_Balloc+0xa>
 8009024:	2000      	movs	r0, #0
 8009026:	bd70      	pop	{r4, r5, r6, pc}
 8009028:	6802      	ldr	r2, [r0, #0]
 800902a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800902e:	2300      	movs	r3, #0
 8009030:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009034:	e7f7      	b.n	8009026 <_Balloc+0x3a>

08009036 <_Bfree>:
 8009036:	b131      	cbz	r1, 8009046 <_Bfree+0x10>
 8009038:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800903a:	684a      	ldr	r2, [r1, #4]
 800903c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009040:	6008      	str	r0, [r1, #0]
 8009042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009046:	4770      	bx	lr

08009048 <__multadd>:
 8009048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800904c:	690e      	ldr	r6, [r1, #16]
 800904e:	4607      	mov	r7, r0
 8009050:	4698      	mov	r8, r3
 8009052:	460c      	mov	r4, r1
 8009054:	f101 0014 	add.w	r0, r1, #20
 8009058:	2300      	movs	r3, #0
 800905a:	6805      	ldr	r5, [r0, #0]
 800905c:	b2a9      	uxth	r1, r5
 800905e:	fb02 8101 	mla	r1, r2, r1, r8
 8009062:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009066:	0c2d      	lsrs	r5, r5, #16
 8009068:	fb02 c505 	mla	r5, r2, r5, ip
 800906c:	b289      	uxth	r1, r1
 800906e:	3301      	adds	r3, #1
 8009070:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009074:	429e      	cmp	r6, r3
 8009076:	f840 1b04 	str.w	r1, [r0], #4
 800907a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800907e:	dcec      	bgt.n	800905a <__multadd+0x12>
 8009080:	f1b8 0f00 	cmp.w	r8, #0
 8009084:	d022      	beq.n	80090cc <__multadd+0x84>
 8009086:	68a3      	ldr	r3, [r4, #8]
 8009088:	42b3      	cmp	r3, r6
 800908a:	dc19      	bgt.n	80090c0 <__multadd+0x78>
 800908c:	6861      	ldr	r1, [r4, #4]
 800908e:	4638      	mov	r0, r7
 8009090:	3101      	adds	r1, #1
 8009092:	f7ff ffab 	bl	8008fec <_Balloc>
 8009096:	4605      	mov	r5, r0
 8009098:	b928      	cbnz	r0, 80090a6 <__multadd+0x5e>
 800909a:	4602      	mov	r2, r0
 800909c:	4b0d      	ldr	r3, [pc, #52]	; (80090d4 <__multadd+0x8c>)
 800909e:	480e      	ldr	r0, [pc, #56]	; (80090d8 <__multadd+0x90>)
 80090a0:	21b5      	movs	r1, #181	; 0xb5
 80090a2:	f001 f8cb 	bl	800a23c <__assert_func>
 80090a6:	6922      	ldr	r2, [r4, #16]
 80090a8:	3202      	adds	r2, #2
 80090aa:	f104 010c 	add.w	r1, r4, #12
 80090ae:	0092      	lsls	r2, r2, #2
 80090b0:	300c      	adds	r0, #12
 80090b2:	f7ff ff81 	bl	8008fb8 <memcpy>
 80090b6:	4621      	mov	r1, r4
 80090b8:	4638      	mov	r0, r7
 80090ba:	f7ff ffbc 	bl	8009036 <_Bfree>
 80090be:	462c      	mov	r4, r5
 80090c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80090c4:	3601      	adds	r6, #1
 80090c6:	f8c3 8014 	str.w	r8, [r3, #20]
 80090ca:	6126      	str	r6, [r4, #16]
 80090cc:	4620      	mov	r0, r4
 80090ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d2:	bf00      	nop
 80090d4:	0800adcd 	.word	0x0800adcd
 80090d8:	0800ae3d 	.word	0x0800ae3d

080090dc <__hi0bits>:
 80090dc:	0c03      	lsrs	r3, r0, #16
 80090de:	041b      	lsls	r3, r3, #16
 80090e0:	b9d3      	cbnz	r3, 8009118 <__hi0bits+0x3c>
 80090e2:	0400      	lsls	r0, r0, #16
 80090e4:	2310      	movs	r3, #16
 80090e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80090ea:	bf04      	itt	eq
 80090ec:	0200      	lsleq	r0, r0, #8
 80090ee:	3308      	addeq	r3, #8
 80090f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80090f4:	bf04      	itt	eq
 80090f6:	0100      	lsleq	r0, r0, #4
 80090f8:	3304      	addeq	r3, #4
 80090fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80090fe:	bf04      	itt	eq
 8009100:	0080      	lsleq	r0, r0, #2
 8009102:	3302      	addeq	r3, #2
 8009104:	2800      	cmp	r0, #0
 8009106:	db05      	blt.n	8009114 <__hi0bits+0x38>
 8009108:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800910c:	f103 0301 	add.w	r3, r3, #1
 8009110:	bf08      	it	eq
 8009112:	2320      	moveq	r3, #32
 8009114:	4618      	mov	r0, r3
 8009116:	4770      	bx	lr
 8009118:	2300      	movs	r3, #0
 800911a:	e7e4      	b.n	80090e6 <__hi0bits+0xa>

0800911c <__lo0bits>:
 800911c:	6803      	ldr	r3, [r0, #0]
 800911e:	f013 0207 	ands.w	r2, r3, #7
 8009122:	4601      	mov	r1, r0
 8009124:	d00b      	beq.n	800913e <__lo0bits+0x22>
 8009126:	07da      	lsls	r2, r3, #31
 8009128:	d424      	bmi.n	8009174 <__lo0bits+0x58>
 800912a:	0798      	lsls	r0, r3, #30
 800912c:	bf49      	itett	mi
 800912e:	085b      	lsrmi	r3, r3, #1
 8009130:	089b      	lsrpl	r3, r3, #2
 8009132:	2001      	movmi	r0, #1
 8009134:	600b      	strmi	r3, [r1, #0]
 8009136:	bf5c      	itt	pl
 8009138:	600b      	strpl	r3, [r1, #0]
 800913a:	2002      	movpl	r0, #2
 800913c:	4770      	bx	lr
 800913e:	b298      	uxth	r0, r3
 8009140:	b9b0      	cbnz	r0, 8009170 <__lo0bits+0x54>
 8009142:	0c1b      	lsrs	r3, r3, #16
 8009144:	2010      	movs	r0, #16
 8009146:	f013 0fff 	tst.w	r3, #255	; 0xff
 800914a:	bf04      	itt	eq
 800914c:	0a1b      	lsreq	r3, r3, #8
 800914e:	3008      	addeq	r0, #8
 8009150:	071a      	lsls	r2, r3, #28
 8009152:	bf04      	itt	eq
 8009154:	091b      	lsreq	r3, r3, #4
 8009156:	3004      	addeq	r0, #4
 8009158:	079a      	lsls	r2, r3, #30
 800915a:	bf04      	itt	eq
 800915c:	089b      	lsreq	r3, r3, #2
 800915e:	3002      	addeq	r0, #2
 8009160:	07da      	lsls	r2, r3, #31
 8009162:	d403      	bmi.n	800916c <__lo0bits+0x50>
 8009164:	085b      	lsrs	r3, r3, #1
 8009166:	f100 0001 	add.w	r0, r0, #1
 800916a:	d005      	beq.n	8009178 <__lo0bits+0x5c>
 800916c:	600b      	str	r3, [r1, #0]
 800916e:	4770      	bx	lr
 8009170:	4610      	mov	r0, r2
 8009172:	e7e8      	b.n	8009146 <__lo0bits+0x2a>
 8009174:	2000      	movs	r0, #0
 8009176:	4770      	bx	lr
 8009178:	2020      	movs	r0, #32
 800917a:	4770      	bx	lr

0800917c <__i2b>:
 800917c:	b510      	push	{r4, lr}
 800917e:	460c      	mov	r4, r1
 8009180:	2101      	movs	r1, #1
 8009182:	f7ff ff33 	bl	8008fec <_Balloc>
 8009186:	4602      	mov	r2, r0
 8009188:	b928      	cbnz	r0, 8009196 <__i2b+0x1a>
 800918a:	4b05      	ldr	r3, [pc, #20]	; (80091a0 <__i2b+0x24>)
 800918c:	4805      	ldr	r0, [pc, #20]	; (80091a4 <__i2b+0x28>)
 800918e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009192:	f001 f853 	bl	800a23c <__assert_func>
 8009196:	2301      	movs	r3, #1
 8009198:	6144      	str	r4, [r0, #20]
 800919a:	6103      	str	r3, [r0, #16]
 800919c:	bd10      	pop	{r4, pc}
 800919e:	bf00      	nop
 80091a0:	0800adcd 	.word	0x0800adcd
 80091a4:	0800ae3d 	.word	0x0800ae3d

080091a8 <__multiply>:
 80091a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ac:	4614      	mov	r4, r2
 80091ae:	690a      	ldr	r2, [r1, #16]
 80091b0:	6923      	ldr	r3, [r4, #16]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	bfb8      	it	lt
 80091b6:	460b      	movlt	r3, r1
 80091b8:	460d      	mov	r5, r1
 80091ba:	bfbc      	itt	lt
 80091bc:	4625      	movlt	r5, r4
 80091be:	461c      	movlt	r4, r3
 80091c0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80091c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80091c8:	68ab      	ldr	r3, [r5, #8]
 80091ca:	6869      	ldr	r1, [r5, #4]
 80091cc:	eb0a 0709 	add.w	r7, sl, r9
 80091d0:	42bb      	cmp	r3, r7
 80091d2:	b085      	sub	sp, #20
 80091d4:	bfb8      	it	lt
 80091d6:	3101      	addlt	r1, #1
 80091d8:	f7ff ff08 	bl	8008fec <_Balloc>
 80091dc:	b930      	cbnz	r0, 80091ec <__multiply+0x44>
 80091de:	4602      	mov	r2, r0
 80091e0:	4b42      	ldr	r3, [pc, #264]	; (80092ec <__multiply+0x144>)
 80091e2:	4843      	ldr	r0, [pc, #268]	; (80092f0 <__multiply+0x148>)
 80091e4:	f240 115d 	movw	r1, #349	; 0x15d
 80091e8:	f001 f828 	bl	800a23c <__assert_func>
 80091ec:	f100 0614 	add.w	r6, r0, #20
 80091f0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80091f4:	4633      	mov	r3, r6
 80091f6:	2200      	movs	r2, #0
 80091f8:	4543      	cmp	r3, r8
 80091fa:	d31e      	bcc.n	800923a <__multiply+0x92>
 80091fc:	f105 0c14 	add.w	ip, r5, #20
 8009200:	f104 0314 	add.w	r3, r4, #20
 8009204:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009208:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800920c:	9202      	str	r2, [sp, #8]
 800920e:	ebac 0205 	sub.w	r2, ip, r5
 8009212:	3a15      	subs	r2, #21
 8009214:	f022 0203 	bic.w	r2, r2, #3
 8009218:	3204      	adds	r2, #4
 800921a:	f105 0115 	add.w	r1, r5, #21
 800921e:	458c      	cmp	ip, r1
 8009220:	bf38      	it	cc
 8009222:	2204      	movcc	r2, #4
 8009224:	9201      	str	r2, [sp, #4]
 8009226:	9a02      	ldr	r2, [sp, #8]
 8009228:	9303      	str	r3, [sp, #12]
 800922a:	429a      	cmp	r2, r3
 800922c:	d808      	bhi.n	8009240 <__multiply+0x98>
 800922e:	2f00      	cmp	r7, #0
 8009230:	dc55      	bgt.n	80092de <__multiply+0x136>
 8009232:	6107      	str	r7, [r0, #16]
 8009234:	b005      	add	sp, #20
 8009236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923a:	f843 2b04 	str.w	r2, [r3], #4
 800923e:	e7db      	b.n	80091f8 <__multiply+0x50>
 8009240:	f8b3 a000 	ldrh.w	sl, [r3]
 8009244:	f1ba 0f00 	cmp.w	sl, #0
 8009248:	d020      	beq.n	800928c <__multiply+0xe4>
 800924a:	f105 0e14 	add.w	lr, r5, #20
 800924e:	46b1      	mov	r9, r6
 8009250:	2200      	movs	r2, #0
 8009252:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009256:	f8d9 b000 	ldr.w	fp, [r9]
 800925a:	b2a1      	uxth	r1, r4
 800925c:	fa1f fb8b 	uxth.w	fp, fp
 8009260:	fb0a b101 	mla	r1, sl, r1, fp
 8009264:	4411      	add	r1, r2
 8009266:	f8d9 2000 	ldr.w	r2, [r9]
 800926a:	0c24      	lsrs	r4, r4, #16
 800926c:	0c12      	lsrs	r2, r2, #16
 800926e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009272:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009276:	b289      	uxth	r1, r1
 8009278:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800927c:	45f4      	cmp	ip, lr
 800927e:	f849 1b04 	str.w	r1, [r9], #4
 8009282:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009286:	d8e4      	bhi.n	8009252 <__multiply+0xaa>
 8009288:	9901      	ldr	r1, [sp, #4]
 800928a:	5072      	str	r2, [r6, r1]
 800928c:	9a03      	ldr	r2, [sp, #12]
 800928e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009292:	3304      	adds	r3, #4
 8009294:	f1b9 0f00 	cmp.w	r9, #0
 8009298:	d01f      	beq.n	80092da <__multiply+0x132>
 800929a:	6834      	ldr	r4, [r6, #0]
 800929c:	f105 0114 	add.w	r1, r5, #20
 80092a0:	46b6      	mov	lr, r6
 80092a2:	f04f 0a00 	mov.w	sl, #0
 80092a6:	880a      	ldrh	r2, [r1, #0]
 80092a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80092ac:	fb09 b202 	mla	r2, r9, r2, fp
 80092b0:	4492      	add	sl, r2
 80092b2:	b2a4      	uxth	r4, r4
 80092b4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80092b8:	f84e 4b04 	str.w	r4, [lr], #4
 80092bc:	f851 4b04 	ldr.w	r4, [r1], #4
 80092c0:	f8be 2000 	ldrh.w	r2, [lr]
 80092c4:	0c24      	lsrs	r4, r4, #16
 80092c6:	fb09 2404 	mla	r4, r9, r4, r2
 80092ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80092ce:	458c      	cmp	ip, r1
 80092d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80092d4:	d8e7      	bhi.n	80092a6 <__multiply+0xfe>
 80092d6:	9a01      	ldr	r2, [sp, #4]
 80092d8:	50b4      	str	r4, [r6, r2]
 80092da:	3604      	adds	r6, #4
 80092dc:	e7a3      	b.n	8009226 <__multiply+0x7e>
 80092de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1a5      	bne.n	8009232 <__multiply+0x8a>
 80092e6:	3f01      	subs	r7, #1
 80092e8:	e7a1      	b.n	800922e <__multiply+0x86>
 80092ea:	bf00      	nop
 80092ec:	0800adcd 	.word	0x0800adcd
 80092f0:	0800ae3d 	.word	0x0800ae3d

080092f4 <__pow5mult>:
 80092f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f8:	4615      	mov	r5, r2
 80092fa:	f012 0203 	ands.w	r2, r2, #3
 80092fe:	4606      	mov	r6, r0
 8009300:	460f      	mov	r7, r1
 8009302:	d007      	beq.n	8009314 <__pow5mult+0x20>
 8009304:	4c1a      	ldr	r4, [pc, #104]	; (8009370 <__pow5mult+0x7c>)
 8009306:	3a01      	subs	r2, #1
 8009308:	2300      	movs	r3, #0
 800930a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800930e:	f7ff fe9b 	bl	8009048 <__multadd>
 8009312:	4607      	mov	r7, r0
 8009314:	10ad      	asrs	r5, r5, #2
 8009316:	d027      	beq.n	8009368 <__pow5mult+0x74>
 8009318:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800931a:	b944      	cbnz	r4, 800932e <__pow5mult+0x3a>
 800931c:	f240 2171 	movw	r1, #625	; 0x271
 8009320:	4630      	mov	r0, r6
 8009322:	f7ff ff2b 	bl	800917c <__i2b>
 8009326:	2300      	movs	r3, #0
 8009328:	64b0      	str	r0, [r6, #72]	; 0x48
 800932a:	4604      	mov	r4, r0
 800932c:	6003      	str	r3, [r0, #0]
 800932e:	f04f 0900 	mov.w	r9, #0
 8009332:	07eb      	lsls	r3, r5, #31
 8009334:	d50a      	bpl.n	800934c <__pow5mult+0x58>
 8009336:	4639      	mov	r1, r7
 8009338:	4622      	mov	r2, r4
 800933a:	4630      	mov	r0, r6
 800933c:	f7ff ff34 	bl	80091a8 <__multiply>
 8009340:	4639      	mov	r1, r7
 8009342:	4680      	mov	r8, r0
 8009344:	4630      	mov	r0, r6
 8009346:	f7ff fe76 	bl	8009036 <_Bfree>
 800934a:	4647      	mov	r7, r8
 800934c:	106d      	asrs	r5, r5, #1
 800934e:	d00b      	beq.n	8009368 <__pow5mult+0x74>
 8009350:	6820      	ldr	r0, [r4, #0]
 8009352:	b938      	cbnz	r0, 8009364 <__pow5mult+0x70>
 8009354:	4622      	mov	r2, r4
 8009356:	4621      	mov	r1, r4
 8009358:	4630      	mov	r0, r6
 800935a:	f7ff ff25 	bl	80091a8 <__multiply>
 800935e:	6020      	str	r0, [r4, #0]
 8009360:	f8c0 9000 	str.w	r9, [r0]
 8009364:	4604      	mov	r4, r0
 8009366:	e7e4      	b.n	8009332 <__pow5mult+0x3e>
 8009368:	4638      	mov	r0, r7
 800936a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800936e:	bf00      	nop
 8009370:	0800af90 	.word	0x0800af90

08009374 <__lshift>:
 8009374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009378:	460c      	mov	r4, r1
 800937a:	6849      	ldr	r1, [r1, #4]
 800937c:	6923      	ldr	r3, [r4, #16]
 800937e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009382:	68a3      	ldr	r3, [r4, #8]
 8009384:	4607      	mov	r7, r0
 8009386:	4691      	mov	r9, r2
 8009388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800938c:	f108 0601 	add.w	r6, r8, #1
 8009390:	42b3      	cmp	r3, r6
 8009392:	db0b      	blt.n	80093ac <__lshift+0x38>
 8009394:	4638      	mov	r0, r7
 8009396:	f7ff fe29 	bl	8008fec <_Balloc>
 800939a:	4605      	mov	r5, r0
 800939c:	b948      	cbnz	r0, 80093b2 <__lshift+0x3e>
 800939e:	4602      	mov	r2, r0
 80093a0:	4b28      	ldr	r3, [pc, #160]	; (8009444 <__lshift+0xd0>)
 80093a2:	4829      	ldr	r0, [pc, #164]	; (8009448 <__lshift+0xd4>)
 80093a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80093a8:	f000 ff48 	bl	800a23c <__assert_func>
 80093ac:	3101      	adds	r1, #1
 80093ae:	005b      	lsls	r3, r3, #1
 80093b0:	e7ee      	b.n	8009390 <__lshift+0x1c>
 80093b2:	2300      	movs	r3, #0
 80093b4:	f100 0114 	add.w	r1, r0, #20
 80093b8:	f100 0210 	add.w	r2, r0, #16
 80093bc:	4618      	mov	r0, r3
 80093be:	4553      	cmp	r3, sl
 80093c0:	db33      	blt.n	800942a <__lshift+0xb6>
 80093c2:	6920      	ldr	r0, [r4, #16]
 80093c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093c8:	f104 0314 	add.w	r3, r4, #20
 80093cc:	f019 091f 	ands.w	r9, r9, #31
 80093d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093d8:	d02b      	beq.n	8009432 <__lshift+0xbe>
 80093da:	f1c9 0e20 	rsb	lr, r9, #32
 80093de:	468a      	mov	sl, r1
 80093e0:	2200      	movs	r2, #0
 80093e2:	6818      	ldr	r0, [r3, #0]
 80093e4:	fa00 f009 	lsl.w	r0, r0, r9
 80093e8:	4302      	orrs	r2, r0
 80093ea:	f84a 2b04 	str.w	r2, [sl], #4
 80093ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f2:	459c      	cmp	ip, r3
 80093f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80093f8:	d8f3      	bhi.n	80093e2 <__lshift+0x6e>
 80093fa:	ebac 0304 	sub.w	r3, ip, r4
 80093fe:	3b15      	subs	r3, #21
 8009400:	f023 0303 	bic.w	r3, r3, #3
 8009404:	3304      	adds	r3, #4
 8009406:	f104 0015 	add.w	r0, r4, #21
 800940a:	4584      	cmp	ip, r0
 800940c:	bf38      	it	cc
 800940e:	2304      	movcc	r3, #4
 8009410:	50ca      	str	r2, [r1, r3]
 8009412:	b10a      	cbz	r2, 8009418 <__lshift+0xa4>
 8009414:	f108 0602 	add.w	r6, r8, #2
 8009418:	3e01      	subs	r6, #1
 800941a:	4638      	mov	r0, r7
 800941c:	612e      	str	r6, [r5, #16]
 800941e:	4621      	mov	r1, r4
 8009420:	f7ff fe09 	bl	8009036 <_Bfree>
 8009424:	4628      	mov	r0, r5
 8009426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800942a:	f842 0f04 	str.w	r0, [r2, #4]!
 800942e:	3301      	adds	r3, #1
 8009430:	e7c5      	b.n	80093be <__lshift+0x4a>
 8009432:	3904      	subs	r1, #4
 8009434:	f853 2b04 	ldr.w	r2, [r3], #4
 8009438:	f841 2f04 	str.w	r2, [r1, #4]!
 800943c:	459c      	cmp	ip, r3
 800943e:	d8f9      	bhi.n	8009434 <__lshift+0xc0>
 8009440:	e7ea      	b.n	8009418 <__lshift+0xa4>
 8009442:	bf00      	nop
 8009444:	0800adcd 	.word	0x0800adcd
 8009448:	0800ae3d 	.word	0x0800ae3d

0800944c <__mcmp>:
 800944c:	b530      	push	{r4, r5, lr}
 800944e:	6902      	ldr	r2, [r0, #16]
 8009450:	690c      	ldr	r4, [r1, #16]
 8009452:	1b12      	subs	r2, r2, r4
 8009454:	d10e      	bne.n	8009474 <__mcmp+0x28>
 8009456:	f100 0314 	add.w	r3, r0, #20
 800945a:	3114      	adds	r1, #20
 800945c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009460:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009464:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009468:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800946c:	42a5      	cmp	r5, r4
 800946e:	d003      	beq.n	8009478 <__mcmp+0x2c>
 8009470:	d305      	bcc.n	800947e <__mcmp+0x32>
 8009472:	2201      	movs	r2, #1
 8009474:	4610      	mov	r0, r2
 8009476:	bd30      	pop	{r4, r5, pc}
 8009478:	4283      	cmp	r3, r0
 800947a:	d3f3      	bcc.n	8009464 <__mcmp+0x18>
 800947c:	e7fa      	b.n	8009474 <__mcmp+0x28>
 800947e:	f04f 32ff 	mov.w	r2, #4294967295
 8009482:	e7f7      	b.n	8009474 <__mcmp+0x28>

08009484 <__mdiff>:
 8009484:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009488:	460c      	mov	r4, r1
 800948a:	4606      	mov	r6, r0
 800948c:	4611      	mov	r1, r2
 800948e:	4620      	mov	r0, r4
 8009490:	4617      	mov	r7, r2
 8009492:	f7ff ffdb 	bl	800944c <__mcmp>
 8009496:	1e05      	subs	r5, r0, #0
 8009498:	d110      	bne.n	80094bc <__mdiff+0x38>
 800949a:	4629      	mov	r1, r5
 800949c:	4630      	mov	r0, r6
 800949e:	f7ff fda5 	bl	8008fec <_Balloc>
 80094a2:	b930      	cbnz	r0, 80094b2 <__mdiff+0x2e>
 80094a4:	4b39      	ldr	r3, [pc, #228]	; (800958c <__mdiff+0x108>)
 80094a6:	4602      	mov	r2, r0
 80094a8:	f240 2132 	movw	r1, #562	; 0x232
 80094ac:	4838      	ldr	r0, [pc, #224]	; (8009590 <__mdiff+0x10c>)
 80094ae:	f000 fec5 	bl	800a23c <__assert_func>
 80094b2:	2301      	movs	r3, #1
 80094b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094bc:	bfa4      	itt	ge
 80094be:	463b      	movge	r3, r7
 80094c0:	4627      	movge	r7, r4
 80094c2:	4630      	mov	r0, r6
 80094c4:	6879      	ldr	r1, [r7, #4]
 80094c6:	bfa6      	itte	ge
 80094c8:	461c      	movge	r4, r3
 80094ca:	2500      	movge	r5, #0
 80094cc:	2501      	movlt	r5, #1
 80094ce:	f7ff fd8d 	bl	8008fec <_Balloc>
 80094d2:	b920      	cbnz	r0, 80094de <__mdiff+0x5a>
 80094d4:	4b2d      	ldr	r3, [pc, #180]	; (800958c <__mdiff+0x108>)
 80094d6:	4602      	mov	r2, r0
 80094d8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80094dc:	e7e6      	b.n	80094ac <__mdiff+0x28>
 80094de:	693e      	ldr	r6, [r7, #16]
 80094e0:	60c5      	str	r5, [r0, #12]
 80094e2:	6925      	ldr	r5, [r4, #16]
 80094e4:	f107 0114 	add.w	r1, r7, #20
 80094e8:	f104 0914 	add.w	r9, r4, #20
 80094ec:	f100 0e14 	add.w	lr, r0, #20
 80094f0:	f107 0210 	add.w	r2, r7, #16
 80094f4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80094f8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80094fc:	46f2      	mov	sl, lr
 80094fe:	2700      	movs	r7, #0
 8009500:	f859 3b04 	ldr.w	r3, [r9], #4
 8009504:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009508:	fa1f f883 	uxth.w	r8, r3
 800950c:	fa17 f78b 	uxtah	r7, r7, fp
 8009510:	0c1b      	lsrs	r3, r3, #16
 8009512:	eba7 0808 	sub.w	r8, r7, r8
 8009516:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800951a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800951e:	fa1f f888 	uxth.w	r8, r8
 8009522:	141f      	asrs	r7, r3, #16
 8009524:	454d      	cmp	r5, r9
 8009526:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800952a:	f84a 3b04 	str.w	r3, [sl], #4
 800952e:	d8e7      	bhi.n	8009500 <__mdiff+0x7c>
 8009530:	1b2b      	subs	r3, r5, r4
 8009532:	3b15      	subs	r3, #21
 8009534:	f023 0303 	bic.w	r3, r3, #3
 8009538:	3304      	adds	r3, #4
 800953a:	3415      	adds	r4, #21
 800953c:	42a5      	cmp	r5, r4
 800953e:	bf38      	it	cc
 8009540:	2304      	movcc	r3, #4
 8009542:	4419      	add	r1, r3
 8009544:	4473      	add	r3, lr
 8009546:	469e      	mov	lr, r3
 8009548:	460d      	mov	r5, r1
 800954a:	4565      	cmp	r5, ip
 800954c:	d30e      	bcc.n	800956c <__mdiff+0xe8>
 800954e:	f10c 0203 	add.w	r2, ip, #3
 8009552:	1a52      	subs	r2, r2, r1
 8009554:	f022 0203 	bic.w	r2, r2, #3
 8009558:	3903      	subs	r1, #3
 800955a:	458c      	cmp	ip, r1
 800955c:	bf38      	it	cc
 800955e:	2200      	movcc	r2, #0
 8009560:	441a      	add	r2, r3
 8009562:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009566:	b17b      	cbz	r3, 8009588 <__mdiff+0x104>
 8009568:	6106      	str	r6, [r0, #16]
 800956a:	e7a5      	b.n	80094b8 <__mdiff+0x34>
 800956c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009570:	fa17 f488 	uxtah	r4, r7, r8
 8009574:	1422      	asrs	r2, r4, #16
 8009576:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800957a:	b2a4      	uxth	r4, r4
 800957c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009580:	f84e 4b04 	str.w	r4, [lr], #4
 8009584:	1417      	asrs	r7, r2, #16
 8009586:	e7e0      	b.n	800954a <__mdiff+0xc6>
 8009588:	3e01      	subs	r6, #1
 800958a:	e7ea      	b.n	8009562 <__mdiff+0xde>
 800958c:	0800adcd 	.word	0x0800adcd
 8009590:	0800ae3d 	.word	0x0800ae3d

08009594 <__d2b>:
 8009594:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009598:	4689      	mov	r9, r1
 800959a:	2101      	movs	r1, #1
 800959c:	ec57 6b10 	vmov	r6, r7, d0
 80095a0:	4690      	mov	r8, r2
 80095a2:	f7ff fd23 	bl	8008fec <_Balloc>
 80095a6:	4604      	mov	r4, r0
 80095a8:	b930      	cbnz	r0, 80095b8 <__d2b+0x24>
 80095aa:	4602      	mov	r2, r0
 80095ac:	4b25      	ldr	r3, [pc, #148]	; (8009644 <__d2b+0xb0>)
 80095ae:	4826      	ldr	r0, [pc, #152]	; (8009648 <__d2b+0xb4>)
 80095b0:	f240 310a 	movw	r1, #778	; 0x30a
 80095b4:	f000 fe42 	bl	800a23c <__assert_func>
 80095b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80095bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80095c0:	bb35      	cbnz	r5, 8009610 <__d2b+0x7c>
 80095c2:	2e00      	cmp	r6, #0
 80095c4:	9301      	str	r3, [sp, #4]
 80095c6:	d028      	beq.n	800961a <__d2b+0x86>
 80095c8:	4668      	mov	r0, sp
 80095ca:	9600      	str	r6, [sp, #0]
 80095cc:	f7ff fda6 	bl	800911c <__lo0bits>
 80095d0:	9900      	ldr	r1, [sp, #0]
 80095d2:	b300      	cbz	r0, 8009616 <__d2b+0x82>
 80095d4:	9a01      	ldr	r2, [sp, #4]
 80095d6:	f1c0 0320 	rsb	r3, r0, #32
 80095da:	fa02 f303 	lsl.w	r3, r2, r3
 80095de:	430b      	orrs	r3, r1
 80095e0:	40c2      	lsrs	r2, r0
 80095e2:	6163      	str	r3, [r4, #20]
 80095e4:	9201      	str	r2, [sp, #4]
 80095e6:	9b01      	ldr	r3, [sp, #4]
 80095e8:	61a3      	str	r3, [r4, #24]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	bf14      	ite	ne
 80095ee:	2202      	movne	r2, #2
 80095f0:	2201      	moveq	r2, #1
 80095f2:	6122      	str	r2, [r4, #16]
 80095f4:	b1d5      	cbz	r5, 800962c <__d2b+0x98>
 80095f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80095fa:	4405      	add	r5, r0
 80095fc:	f8c9 5000 	str.w	r5, [r9]
 8009600:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009604:	f8c8 0000 	str.w	r0, [r8]
 8009608:	4620      	mov	r0, r4
 800960a:	b003      	add	sp, #12
 800960c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009610:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009614:	e7d5      	b.n	80095c2 <__d2b+0x2e>
 8009616:	6161      	str	r1, [r4, #20]
 8009618:	e7e5      	b.n	80095e6 <__d2b+0x52>
 800961a:	a801      	add	r0, sp, #4
 800961c:	f7ff fd7e 	bl	800911c <__lo0bits>
 8009620:	9b01      	ldr	r3, [sp, #4]
 8009622:	6163      	str	r3, [r4, #20]
 8009624:	2201      	movs	r2, #1
 8009626:	6122      	str	r2, [r4, #16]
 8009628:	3020      	adds	r0, #32
 800962a:	e7e3      	b.n	80095f4 <__d2b+0x60>
 800962c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009630:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009634:	f8c9 0000 	str.w	r0, [r9]
 8009638:	6918      	ldr	r0, [r3, #16]
 800963a:	f7ff fd4f 	bl	80090dc <__hi0bits>
 800963e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009642:	e7df      	b.n	8009604 <__d2b+0x70>
 8009644:	0800adcd 	.word	0x0800adcd
 8009648:	0800ae3d 	.word	0x0800ae3d

0800964c <frexp>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	2100      	movs	r1, #0
 8009650:	ec55 4b10 	vmov	r4, r5, d0
 8009654:	6001      	str	r1, [r0, #0]
 8009656:	4916      	ldr	r1, [pc, #88]	; (80096b0 <frexp+0x64>)
 8009658:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800965c:	428a      	cmp	r2, r1
 800965e:	4606      	mov	r6, r0
 8009660:	462b      	mov	r3, r5
 8009662:	dc22      	bgt.n	80096aa <frexp+0x5e>
 8009664:	ee10 1a10 	vmov	r1, s0
 8009668:	4311      	orrs	r1, r2
 800966a:	d01e      	beq.n	80096aa <frexp+0x5e>
 800966c:	4911      	ldr	r1, [pc, #68]	; (80096b4 <frexp+0x68>)
 800966e:	4029      	ands	r1, r5
 8009670:	b969      	cbnz	r1, 800968e <frexp+0x42>
 8009672:	4b11      	ldr	r3, [pc, #68]	; (80096b8 <frexp+0x6c>)
 8009674:	2200      	movs	r2, #0
 8009676:	ee10 0a10 	vmov	r0, s0
 800967a:	4629      	mov	r1, r5
 800967c:	f7f6 ffbc 	bl	80005f8 <__aeabi_dmul>
 8009680:	460b      	mov	r3, r1
 8009682:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009686:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800968a:	4604      	mov	r4, r0
 800968c:	6031      	str	r1, [r6, #0]
 800968e:	6831      	ldr	r1, [r6, #0]
 8009690:	1512      	asrs	r2, r2, #20
 8009692:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009696:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800969a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800969e:	440a      	add	r2, r1
 80096a0:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80096a4:	6032      	str	r2, [r6, #0]
 80096a6:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80096aa:	ec45 4b10 	vmov	d0, r4, r5
 80096ae:	bd70      	pop	{r4, r5, r6, pc}
 80096b0:	7fefffff 	.word	0x7fefffff
 80096b4:	7ff00000 	.word	0x7ff00000
 80096b8:	43500000 	.word	0x43500000

080096bc <_sbrk_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	4d06      	ldr	r5, [pc, #24]	; (80096d8 <_sbrk_r+0x1c>)
 80096c0:	2300      	movs	r3, #0
 80096c2:	4604      	mov	r4, r0
 80096c4:	4608      	mov	r0, r1
 80096c6:	602b      	str	r3, [r5, #0]
 80096c8:	f7f8 f9d2 	bl	8001a70 <_sbrk>
 80096cc:	1c43      	adds	r3, r0, #1
 80096ce:	d102      	bne.n	80096d6 <_sbrk_r+0x1a>
 80096d0:	682b      	ldr	r3, [r5, #0]
 80096d2:	b103      	cbz	r3, 80096d6 <_sbrk_r+0x1a>
 80096d4:	6023      	str	r3, [r4, #0]
 80096d6:	bd38      	pop	{r3, r4, r5, pc}
 80096d8:	20000bc0 	.word	0x20000bc0

080096dc <__sread>:
 80096dc:	b510      	push	{r4, lr}
 80096de:	460c      	mov	r4, r1
 80096e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e4:	f001 f88c 	bl	800a800 <_read_r>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	bfab      	itete	ge
 80096ec:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 80096ee:	89a3      	ldrhlt	r3, [r4, #12]
 80096f0:	181b      	addge	r3, r3, r0
 80096f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096f6:	bfac      	ite	ge
 80096f8:	6523      	strge	r3, [r4, #80]	; 0x50
 80096fa:	81a3      	strhlt	r3, [r4, #12]
 80096fc:	bd10      	pop	{r4, pc}

080096fe <__swrite>:
 80096fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009702:	461f      	mov	r7, r3
 8009704:	898b      	ldrh	r3, [r1, #12]
 8009706:	05db      	lsls	r3, r3, #23
 8009708:	4605      	mov	r5, r0
 800970a:	460c      	mov	r4, r1
 800970c:	4616      	mov	r6, r2
 800970e:	d505      	bpl.n	800971c <__swrite+0x1e>
 8009710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009714:	2302      	movs	r3, #2
 8009716:	2200      	movs	r2, #0
 8009718:	f001 f834 	bl	800a784 <_lseek_r>
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009726:	81a3      	strh	r3, [r4, #12]
 8009728:	4632      	mov	r2, r6
 800972a:	463b      	mov	r3, r7
 800972c:	4628      	mov	r0, r5
 800972e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009732:	f000 bd31 	b.w	800a198 <_write_r>

08009736 <__sseek>:
 8009736:	b510      	push	{r4, lr}
 8009738:	460c      	mov	r4, r1
 800973a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800973e:	f001 f821 	bl	800a784 <_lseek_r>
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	89a3      	ldrh	r3, [r4, #12]
 8009746:	bf15      	itete	ne
 8009748:	6520      	strne	r0, [r4, #80]	; 0x50
 800974a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800974e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009752:	81a3      	strheq	r3, [r4, #12]
 8009754:	bf18      	it	ne
 8009756:	81a3      	strhne	r3, [r4, #12]
 8009758:	bd10      	pop	{r4, pc}

0800975a <__sclose>:
 800975a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800975e:	f000 bdb9 	b.w	800a2d4 <_close_r>

08009762 <strncpy>:
 8009762:	b510      	push	{r4, lr}
 8009764:	3901      	subs	r1, #1
 8009766:	4603      	mov	r3, r0
 8009768:	b132      	cbz	r2, 8009778 <strncpy+0x16>
 800976a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800976e:	f803 4b01 	strb.w	r4, [r3], #1
 8009772:	3a01      	subs	r2, #1
 8009774:	2c00      	cmp	r4, #0
 8009776:	d1f7      	bne.n	8009768 <strncpy+0x6>
 8009778:	441a      	add	r2, r3
 800977a:	2100      	movs	r1, #0
 800977c:	4293      	cmp	r3, r2
 800977e:	d100      	bne.n	8009782 <strncpy+0x20>
 8009780:	bd10      	pop	{r4, pc}
 8009782:	f803 1b01 	strb.w	r1, [r3], #1
 8009786:	e7f9      	b.n	800977c <strncpy+0x1a>

08009788 <sysconf>:
 8009788:	2808      	cmp	r0, #8
 800978a:	b508      	push	{r3, lr}
 800978c:	d006      	beq.n	800979c <sysconf+0x14>
 800978e:	f7fc fd6d 	bl	800626c <__errno>
 8009792:	2316      	movs	r3, #22
 8009794:	6003      	str	r3, [r0, #0]
 8009796:	f04f 30ff 	mov.w	r0, #4294967295
 800979a:	bd08      	pop	{r3, pc}
 800979c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80097a0:	e7fb      	b.n	800979a <sysconf+0x12>

080097a2 <__sprint_r>:
 80097a2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a6:	6893      	ldr	r3, [r2, #8]
 80097a8:	4680      	mov	r8, r0
 80097aa:	460f      	mov	r7, r1
 80097ac:	4614      	mov	r4, r2
 80097ae:	b91b      	cbnz	r3, 80097b8 <__sprint_r+0x16>
 80097b0:	6053      	str	r3, [r2, #4]
 80097b2:	4618      	mov	r0, r3
 80097b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80097ba:	049d      	lsls	r5, r3, #18
 80097bc:	d520      	bpl.n	8009800 <__sprint_r+0x5e>
 80097be:	6815      	ldr	r5, [r2, #0]
 80097c0:	3508      	adds	r5, #8
 80097c2:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 80097c6:	f04f 0900 	mov.w	r9, #0
 80097ca:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 80097ce:	45ca      	cmp	sl, r9
 80097d0:	dc0b      	bgt.n	80097ea <__sprint_r+0x48>
 80097d2:	68a3      	ldr	r3, [r4, #8]
 80097d4:	f026 0003 	bic.w	r0, r6, #3
 80097d8:	1a18      	subs	r0, r3, r0
 80097da:	60a0      	str	r0, [r4, #8]
 80097dc:	3508      	adds	r5, #8
 80097de:	2800      	cmp	r0, #0
 80097e0:	d1ef      	bne.n	80097c2 <__sprint_r+0x20>
 80097e2:	2300      	movs	r3, #0
 80097e4:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80097e8:	e7e4      	b.n	80097b4 <__sprint_r+0x12>
 80097ea:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80097ee:	463a      	mov	r2, r7
 80097f0:	4640      	mov	r0, r8
 80097f2:	f000 fe2a 	bl	800a44a <_fputwc_r>
 80097f6:	1c43      	adds	r3, r0, #1
 80097f8:	d0f3      	beq.n	80097e2 <__sprint_r+0x40>
 80097fa:	f109 0901 	add.w	r9, r9, #1
 80097fe:	e7e6      	b.n	80097ce <__sprint_r+0x2c>
 8009800:	f000 fe60 	bl	800a4c4 <__sfvwrite_r>
 8009804:	e7ed      	b.n	80097e2 <__sprint_r+0x40>
	...

08009808 <_vfiprintf_r>:
 8009808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980c:	ed2d 8b02 	vpush	{d8}
 8009810:	b0b9      	sub	sp, #228	; 0xe4
 8009812:	460f      	mov	r7, r1
 8009814:	9201      	str	r2, [sp, #4]
 8009816:	461d      	mov	r5, r3
 8009818:	461c      	mov	r4, r3
 800981a:	4681      	mov	r9, r0
 800981c:	b118      	cbz	r0, 8009826 <_vfiprintf_r+0x1e>
 800981e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009820:	b90b      	cbnz	r3, 8009826 <_vfiprintf_r+0x1e>
 8009822:	f7fe ffa3 	bl	800876c <__sinit>
 8009826:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009828:	07d8      	lsls	r0, r3, #31
 800982a:	d405      	bmi.n	8009838 <_vfiprintf_r+0x30>
 800982c:	89bb      	ldrh	r3, [r7, #12]
 800982e:	0599      	lsls	r1, r3, #22
 8009830:	d402      	bmi.n	8009838 <_vfiprintf_r+0x30>
 8009832:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009834:	f7ff f910 	bl	8008a58 <__retarget_lock_acquire_recursive>
 8009838:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800983c:	049a      	lsls	r2, r3, #18
 800983e:	d406      	bmi.n	800984e <_vfiprintf_r+0x46>
 8009840:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009844:	81bb      	strh	r3, [r7, #12]
 8009846:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800984c:	667b      	str	r3, [r7, #100]	; 0x64
 800984e:	89bb      	ldrh	r3, [r7, #12]
 8009850:	071e      	lsls	r6, r3, #28
 8009852:	d501      	bpl.n	8009858 <_vfiprintf_r+0x50>
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	b9bb      	cbnz	r3, 8009888 <_vfiprintf_r+0x80>
 8009858:	4639      	mov	r1, r7
 800985a:	4648      	mov	r0, r9
 800985c:	f7fd ffc2 	bl	80077e4 <__swsetup_r>
 8009860:	b190      	cbz	r0, 8009888 <_vfiprintf_r+0x80>
 8009862:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009864:	07d8      	lsls	r0, r3, #31
 8009866:	d508      	bpl.n	800987a <_vfiprintf_r+0x72>
 8009868:	f04f 33ff 	mov.w	r3, #4294967295
 800986c:	9302      	str	r3, [sp, #8]
 800986e:	9802      	ldr	r0, [sp, #8]
 8009870:	b039      	add	sp, #228	; 0xe4
 8009872:	ecbd 8b02 	vpop	{d8}
 8009876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987a:	89bb      	ldrh	r3, [r7, #12]
 800987c:	0599      	lsls	r1, r3, #22
 800987e:	d4f3      	bmi.n	8009868 <_vfiprintf_r+0x60>
 8009880:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009882:	f7ff f8ea 	bl	8008a5a <__retarget_lock_release_recursive>
 8009886:	e7ef      	b.n	8009868 <_vfiprintf_r+0x60>
 8009888:	89bb      	ldrh	r3, [r7, #12]
 800988a:	f003 021a 	and.w	r2, r3, #26
 800988e:	2a0a      	cmp	r2, #10
 8009890:	d113      	bne.n	80098ba <_vfiprintf_r+0xb2>
 8009892:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009896:	2a00      	cmp	r2, #0
 8009898:	db0f      	blt.n	80098ba <_vfiprintf_r+0xb2>
 800989a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800989c:	07d2      	lsls	r2, r2, #31
 800989e:	d404      	bmi.n	80098aa <_vfiprintf_r+0xa2>
 80098a0:	059e      	lsls	r6, r3, #22
 80098a2:	d402      	bmi.n	80098aa <_vfiprintf_r+0xa2>
 80098a4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80098a6:	f7ff f8d8 	bl	8008a5a <__retarget_lock_release_recursive>
 80098aa:	9a01      	ldr	r2, [sp, #4]
 80098ac:	462b      	mov	r3, r5
 80098ae:	4639      	mov	r1, r7
 80098b0:	4648      	mov	r0, r9
 80098b2:	f000 fc31 	bl	800a118 <__sbprintf>
 80098b6:	9002      	str	r0, [sp, #8]
 80098b8:	e7d9      	b.n	800986e <_vfiprintf_r+0x66>
 80098ba:	2300      	movs	r3, #0
 80098bc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80098c0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80098c4:	ae0f      	add	r6, sp, #60	; 0x3c
 80098c6:	ee08 3a10 	vmov	s16, r3
 80098ca:	960c      	str	r6, [sp, #48]	; 0x30
 80098cc:	9307      	str	r3, [sp, #28]
 80098ce:	9302      	str	r3, [sp, #8]
 80098d0:	9b01      	ldr	r3, [sp, #4]
 80098d2:	461d      	mov	r5, r3
 80098d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098d8:	b10a      	cbz	r2, 80098de <_vfiprintf_r+0xd6>
 80098da:	2a25      	cmp	r2, #37	; 0x25
 80098dc:	d1f9      	bne.n	80098d2 <_vfiprintf_r+0xca>
 80098de:	9b01      	ldr	r3, [sp, #4]
 80098e0:	ebb5 0803 	subs.w	r8, r5, r3
 80098e4:	d00d      	beq.n	8009902 <_vfiprintf_r+0xfa>
 80098e6:	e9c6 3800 	strd	r3, r8, [r6]
 80098ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098ec:	4443      	add	r3, r8
 80098ee:	930e      	str	r3, [sp, #56]	; 0x38
 80098f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098f2:	3301      	adds	r3, #1
 80098f4:	2b07      	cmp	r3, #7
 80098f6:	930d      	str	r3, [sp, #52]	; 0x34
 80098f8:	dc75      	bgt.n	80099e6 <_vfiprintf_r+0x1de>
 80098fa:	3608      	adds	r6, #8
 80098fc:	9b02      	ldr	r3, [sp, #8]
 80098fe:	4443      	add	r3, r8
 8009900:	9302      	str	r3, [sp, #8]
 8009902:	782b      	ldrb	r3, [r5, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	f000 83c8 	beq.w	800a09a <_vfiprintf_r+0x892>
 800990a:	2300      	movs	r3, #0
 800990c:	f04f 31ff 	mov.w	r1, #4294967295
 8009910:	1c6a      	adds	r2, r5, #1
 8009912:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8009916:	9100      	str	r1, [sp, #0]
 8009918:	9303      	str	r3, [sp, #12]
 800991a:	469a      	mov	sl, r3
 800991c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009920:	9201      	str	r2, [sp, #4]
 8009922:	f1a3 0220 	sub.w	r2, r3, #32
 8009926:	2a5a      	cmp	r2, #90	; 0x5a
 8009928:	f200 8310 	bhi.w	8009f4c <_vfiprintf_r+0x744>
 800992c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009930:	030e0099 	.word	0x030e0099
 8009934:	00a1030e 	.word	0x00a1030e
 8009938:	030e030e 	.word	0x030e030e
 800993c:	0080030e 	.word	0x0080030e
 8009940:	030e030e 	.word	0x030e030e
 8009944:	00ae00a4 	.word	0x00ae00a4
 8009948:	00ab030e 	.word	0x00ab030e
 800994c:	030e00b0 	.word	0x030e00b0
 8009950:	00ce00cb 	.word	0x00ce00cb
 8009954:	00ce00ce 	.word	0x00ce00ce
 8009958:	00ce00ce 	.word	0x00ce00ce
 800995c:	00ce00ce 	.word	0x00ce00ce
 8009960:	00ce00ce 	.word	0x00ce00ce
 8009964:	030e030e 	.word	0x030e030e
 8009968:	030e030e 	.word	0x030e030e
 800996c:	030e030e 	.word	0x030e030e
 8009970:	030e030e 	.word	0x030e030e
 8009974:	00f8030e 	.word	0x00f8030e
 8009978:	030e0106 	.word	0x030e0106
 800997c:	030e030e 	.word	0x030e030e
 8009980:	030e030e 	.word	0x030e030e
 8009984:	030e030e 	.word	0x030e030e
 8009988:	030e030e 	.word	0x030e030e
 800998c:	014d030e 	.word	0x014d030e
 8009990:	030e030e 	.word	0x030e030e
 8009994:	0192030e 	.word	0x0192030e
 8009998:	0270030e 	.word	0x0270030e
 800999c:	030e030e 	.word	0x030e030e
 80099a0:	030e028e 	.word	0x030e028e
 80099a4:	030e030e 	.word	0x030e030e
 80099a8:	030e030e 	.word	0x030e030e
 80099ac:	030e030e 	.word	0x030e030e
 80099b0:	030e030e 	.word	0x030e030e
 80099b4:	00f8030e 	.word	0x00f8030e
 80099b8:	030e0108 	.word	0x030e0108
 80099bc:	030e030e 	.word	0x030e030e
 80099c0:	010800de 	.word	0x010800de
 80099c4:	030e00f2 	.word	0x030e00f2
 80099c8:	030e00eb 	.word	0x030e00eb
 80099cc:	014f0130 	.word	0x014f0130
 80099d0:	00f20182 	.word	0x00f20182
 80099d4:	0192030e 	.word	0x0192030e
 80099d8:	02720097 	.word	0x02720097
 80099dc:	030e030e 	.word	0x030e030e
 80099e0:	030e0065 	.word	0x030e0065
 80099e4:	0097      	.short	0x0097
 80099e6:	aa0c      	add	r2, sp, #48	; 0x30
 80099e8:	4639      	mov	r1, r7
 80099ea:	4648      	mov	r0, r9
 80099ec:	f7ff fed9 	bl	80097a2 <__sprint_r>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	f040 8331 	bne.w	800a058 <_vfiprintf_r+0x850>
 80099f6:	ae0f      	add	r6, sp, #60	; 0x3c
 80099f8:	e780      	b.n	80098fc <_vfiprintf_r+0xf4>
 80099fa:	4a95      	ldr	r2, [pc, #596]	; (8009c50 <_vfiprintf_r+0x448>)
 80099fc:	9205      	str	r2, [sp, #20]
 80099fe:	f01a 0f20 	tst.w	sl, #32
 8009a02:	f000 8225 	beq.w	8009e50 <_vfiprintf_r+0x648>
 8009a06:	3407      	adds	r4, #7
 8009a08:	f024 0b07 	bic.w	fp, r4, #7
 8009a0c:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8009a10:	f01a 0f01 	tst.w	sl, #1
 8009a14:	d009      	beq.n	8009a2a <_vfiprintf_r+0x222>
 8009a16:	ea54 0205 	orrs.w	r2, r4, r5
 8009a1a:	bf1f      	itttt	ne
 8009a1c:	2230      	movne	r2, #48	; 0x30
 8009a1e:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 8009a22:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 8009a26:	f04a 0a02 	orrne.w	sl, sl, #2
 8009a2a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8009a2e:	e10d      	b.n	8009c4c <_vfiprintf_r+0x444>
 8009a30:	4648      	mov	r0, r9
 8009a32:	f7ff f80b 	bl	8008a4c <_localeconv_r>
 8009a36:	6843      	ldr	r3, [r0, #4]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	ee08 3a10 	vmov	s16, r3
 8009a3e:	f7f6 fc17 	bl	8000270 <strlen>
 8009a42:	9007      	str	r0, [sp, #28]
 8009a44:	4648      	mov	r0, r9
 8009a46:	f7ff f801 	bl	8008a4c <_localeconv_r>
 8009a4a:	6883      	ldr	r3, [r0, #8]
 8009a4c:	9306      	str	r3, [sp, #24]
 8009a4e:	9b07      	ldr	r3, [sp, #28]
 8009a50:	b12b      	cbz	r3, 8009a5e <_vfiprintf_r+0x256>
 8009a52:	9b06      	ldr	r3, [sp, #24]
 8009a54:	b11b      	cbz	r3, 8009a5e <_vfiprintf_r+0x256>
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	b10b      	cbz	r3, 8009a5e <_vfiprintf_r+0x256>
 8009a5a:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8009a5e:	9a01      	ldr	r2, [sp, #4]
 8009a60:	e75c      	b.n	800991c <_vfiprintf_r+0x114>
 8009a62:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1f9      	bne.n	8009a5e <_vfiprintf_r+0x256>
 8009a6a:	2320      	movs	r3, #32
 8009a6c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8009a70:	e7f5      	b.n	8009a5e <_vfiprintf_r+0x256>
 8009a72:	f04a 0a01 	orr.w	sl, sl, #1
 8009a76:	e7f2      	b.n	8009a5e <_vfiprintf_r+0x256>
 8009a78:	f854 3b04 	ldr.w	r3, [r4], #4
 8009a7c:	9303      	str	r3, [sp, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	daed      	bge.n	8009a5e <_vfiprintf_r+0x256>
 8009a82:	425b      	negs	r3, r3
 8009a84:	9303      	str	r3, [sp, #12]
 8009a86:	f04a 0a04 	orr.w	sl, sl, #4
 8009a8a:	e7e8      	b.n	8009a5e <_vfiprintf_r+0x256>
 8009a8c:	232b      	movs	r3, #43	; 0x2b
 8009a8e:	e7ed      	b.n	8009a6c <_vfiprintf_r+0x264>
 8009a90:	9a01      	ldr	r2, [sp, #4]
 8009a92:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009a96:	2b2a      	cmp	r3, #42	; 0x2a
 8009a98:	d112      	bne.n	8009ac0 <_vfiprintf_r+0x2b8>
 8009a9a:	f854 0b04 	ldr.w	r0, [r4], #4
 8009a9e:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8009aa2:	e9cd 3200 	strd	r3, r2, [sp]
 8009aa6:	e7da      	b.n	8009a5e <_vfiprintf_r+0x256>
 8009aa8:	9b00      	ldr	r3, [sp, #0]
 8009aaa:	200a      	movs	r0, #10
 8009aac:	fb00 1303 	mla	r3, r0, r3, r1
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009ab6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009aba:	2909      	cmp	r1, #9
 8009abc:	d9f4      	bls.n	8009aa8 <_vfiprintf_r+0x2a0>
 8009abe:	e72f      	b.n	8009920 <_vfiprintf_r+0x118>
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	9100      	str	r1, [sp, #0]
 8009ac4:	e7f7      	b.n	8009ab6 <_vfiprintf_r+0x2ae>
 8009ac6:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8009aca:	e7c8      	b.n	8009a5e <_vfiprintf_r+0x256>
 8009acc:	2100      	movs	r1, #0
 8009ace:	9a01      	ldr	r2, [sp, #4]
 8009ad0:	9103      	str	r1, [sp, #12]
 8009ad2:	9903      	ldr	r1, [sp, #12]
 8009ad4:	3b30      	subs	r3, #48	; 0x30
 8009ad6:	200a      	movs	r0, #10
 8009ad8:	fb00 3301 	mla	r3, r0, r1, r3
 8009adc:	9303      	str	r3, [sp, #12]
 8009ade:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009ae2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009ae6:	2909      	cmp	r1, #9
 8009ae8:	d9f3      	bls.n	8009ad2 <_vfiprintf_r+0x2ca>
 8009aea:	e719      	b.n	8009920 <_vfiprintf_r+0x118>
 8009aec:	9b01      	ldr	r3, [sp, #4]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	2b68      	cmp	r3, #104	; 0x68
 8009af2:	bf01      	itttt	eq
 8009af4:	9b01      	ldreq	r3, [sp, #4]
 8009af6:	3301      	addeq	r3, #1
 8009af8:	9301      	streq	r3, [sp, #4]
 8009afa:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8009afe:	bf18      	it	ne
 8009b00:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8009b04:	e7ab      	b.n	8009a5e <_vfiprintf_r+0x256>
 8009b06:	9b01      	ldr	r3, [sp, #4]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	2b6c      	cmp	r3, #108	; 0x6c
 8009b0c:	d105      	bne.n	8009b1a <_vfiprintf_r+0x312>
 8009b0e:	9b01      	ldr	r3, [sp, #4]
 8009b10:	3301      	adds	r3, #1
 8009b12:	9301      	str	r3, [sp, #4]
 8009b14:	f04a 0a20 	orr.w	sl, sl, #32
 8009b18:	e7a1      	b.n	8009a5e <_vfiprintf_r+0x256>
 8009b1a:	f04a 0a10 	orr.w	sl, sl, #16
 8009b1e:	e79e      	b.n	8009a5e <_vfiprintf_r+0x256>
 8009b20:	46a3      	mov	fp, r4
 8009b22:	2100      	movs	r1, #0
 8009b24:	f85b 3b04 	ldr.w	r3, [fp], #4
 8009b28:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8009b2c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8009b30:	2301      	movs	r3, #1
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	460d      	mov	r5, r1
 8009b36:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8009b3a:	e0a0      	b.n	8009c7e <_vfiprintf_r+0x476>
 8009b3c:	f04a 0a10 	orr.w	sl, sl, #16
 8009b40:	f01a 0f20 	tst.w	sl, #32
 8009b44:	d011      	beq.n	8009b6a <_vfiprintf_r+0x362>
 8009b46:	3407      	adds	r4, #7
 8009b48:	f024 0b07 	bic.w	fp, r4, #7
 8009b4c:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8009b50:	2c00      	cmp	r4, #0
 8009b52:	f175 0300 	sbcs.w	r3, r5, #0
 8009b56:	da06      	bge.n	8009b66 <_vfiprintf_r+0x35e>
 8009b58:	4264      	negs	r4, r4
 8009b5a:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8009b5e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8009b62:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8009b66:	2301      	movs	r3, #1
 8009b68:	e03f      	b.n	8009bea <_vfiprintf_r+0x3e2>
 8009b6a:	f01a 0f10 	tst.w	sl, #16
 8009b6e:	f104 0b04 	add.w	fp, r4, #4
 8009b72:	d002      	beq.n	8009b7a <_vfiprintf_r+0x372>
 8009b74:	6824      	ldr	r4, [r4, #0]
 8009b76:	17e5      	asrs	r5, r4, #31
 8009b78:	e7ea      	b.n	8009b50 <_vfiprintf_r+0x348>
 8009b7a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009b7e:	6824      	ldr	r4, [r4, #0]
 8009b80:	d001      	beq.n	8009b86 <_vfiprintf_r+0x37e>
 8009b82:	b224      	sxth	r4, r4
 8009b84:	e7f7      	b.n	8009b76 <_vfiprintf_r+0x36e>
 8009b86:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009b8a:	bf18      	it	ne
 8009b8c:	b264      	sxtbne	r4, r4
 8009b8e:	e7f2      	b.n	8009b76 <_vfiprintf_r+0x36e>
 8009b90:	f01a 0f20 	tst.w	sl, #32
 8009b94:	f854 3b04 	ldr.w	r3, [r4], #4
 8009b98:	d005      	beq.n	8009ba6 <_vfiprintf_r+0x39e>
 8009b9a:	9a02      	ldr	r2, [sp, #8]
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	17d1      	asrs	r1, r2, #31
 8009ba0:	e9c3 0100 	strd	r0, r1, [r3]
 8009ba4:	e694      	b.n	80098d0 <_vfiprintf_r+0xc8>
 8009ba6:	f01a 0f10 	tst.w	sl, #16
 8009baa:	d002      	beq.n	8009bb2 <_vfiprintf_r+0x3aa>
 8009bac:	9a02      	ldr	r2, [sp, #8]
 8009bae:	601a      	str	r2, [r3, #0]
 8009bb0:	e68e      	b.n	80098d0 <_vfiprintf_r+0xc8>
 8009bb2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009bb6:	d002      	beq.n	8009bbe <_vfiprintf_r+0x3b6>
 8009bb8:	9a02      	ldr	r2, [sp, #8]
 8009bba:	801a      	strh	r2, [r3, #0]
 8009bbc:	e688      	b.n	80098d0 <_vfiprintf_r+0xc8>
 8009bbe:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009bc2:	d0f3      	beq.n	8009bac <_vfiprintf_r+0x3a4>
 8009bc4:	9a02      	ldr	r2, [sp, #8]
 8009bc6:	701a      	strb	r2, [r3, #0]
 8009bc8:	e682      	b.n	80098d0 <_vfiprintf_r+0xc8>
 8009bca:	f04a 0a10 	orr.w	sl, sl, #16
 8009bce:	f01a 0f20 	tst.w	sl, #32
 8009bd2:	d01d      	beq.n	8009c10 <_vfiprintf_r+0x408>
 8009bd4:	3407      	adds	r4, #7
 8009bd6:	f024 0b07 	bic.w	fp, r4, #7
 8009bda:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8009bde:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8009be2:	2300      	movs	r3, #0
 8009be4:	2200      	movs	r2, #0
 8009be6:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8009bea:	9a00      	ldr	r2, [sp, #0]
 8009bec:	3201      	adds	r2, #1
 8009bee:	f000 8261 	beq.w	800a0b4 <_vfiprintf_r+0x8ac>
 8009bf2:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8009bf6:	9204      	str	r2, [sp, #16]
 8009bf8:	ea54 0205 	orrs.w	r2, r4, r5
 8009bfc:	f040 8260 	bne.w	800a0c0 <_vfiprintf_r+0x8b8>
 8009c00:	9a00      	ldr	r2, [sp, #0]
 8009c02:	2a00      	cmp	r2, #0
 8009c04:	f000 8197 	beq.w	8009f36 <_vfiprintf_r+0x72e>
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	f040 825c 	bne.w	800a0c6 <_vfiprintf_r+0x8be>
 8009c0e:	e135      	b.n	8009e7c <_vfiprintf_r+0x674>
 8009c10:	f01a 0f10 	tst.w	sl, #16
 8009c14:	f104 0b04 	add.w	fp, r4, #4
 8009c18:	d001      	beq.n	8009c1e <_vfiprintf_r+0x416>
 8009c1a:	6824      	ldr	r4, [r4, #0]
 8009c1c:	e003      	b.n	8009c26 <_vfiprintf_r+0x41e>
 8009c1e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009c22:	d002      	beq.n	8009c2a <_vfiprintf_r+0x422>
 8009c24:	8824      	ldrh	r4, [r4, #0]
 8009c26:	2500      	movs	r5, #0
 8009c28:	e7d9      	b.n	8009bde <_vfiprintf_r+0x3d6>
 8009c2a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009c2e:	d0f4      	beq.n	8009c1a <_vfiprintf_r+0x412>
 8009c30:	7824      	ldrb	r4, [r4, #0]
 8009c32:	e7f8      	b.n	8009c26 <_vfiprintf_r+0x41e>
 8009c34:	46a3      	mov	fp, r4
 8009c36:	f647 0330 	movw	r3, #30768	; 0x7830
 8009c3a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8009c3e:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009c42:	4b03      	ldr	r3, [pc, #12]	; (8009c50 <_vfiprintf_r+0x448>)
 8009c44:	9305      	str	r3, [sp, #20]
 8009c46:	2500      	movs	r5, #0
 8009c48:	f04a 0a02 	orr.w	sl, sl, #2
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	e7c9      	b.n	8009be4 <_vfiprintf_r+0x3dc>
 8009c50:	0800ad7c 	.word	0x0800ad7c
 8009c54:	9b00      	ldr	r3, [sp, #0]
 8009c56:	46a3      	mov	fp, r4
 8009c58:	2500      	movs	r5, #0
 8009c5a:	1c5c      	adds	r4, r3, #1
 8009c5c:	f85b 8b04 	ldr.w	r8, [fp], #4
 8009c60:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8009c64:	f000 80cf 	beq.w	8009e06 <_vfiprintf_r+0x5fe>
 8009c68:	461a      	mov	r2, r3
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	4640      	mov	r0, r8
 8009c6e:	f7f6 faaf 	bl	80001d0 <memchr>
 8009c72:	2800      	cmp	r0, #0
 8009c74:	f000 8174 	beq.w	8009f60 <_vfiprintf_r+0x758>
 8009c78:	eba0 0308 	sub.w	r3, r0, r8
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	9b00      	ldr	r3, [sp, #0]
 8009c80:	42ab      	cmp	r3, r5
 8009c82:	bfb8      	it	lt
 8009c84:	462b      	movlt	r3, r5
 8009c86:	9304      	str	r3, [sp, #16]
 8009c88:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8009c8c:	b113      	cbz	r3, 8009c94 <_vfiprintf_r+0x48c>
 8009c8e:	9b04      	ldr	r3, [sp, #16]
 8009c90:	3301      	adds	r3, #1
 8009c92:	9304      	str	r3, [sp, #16]
 8009c94:	f01a 0302 	ands.w	r3, sl, #2
 8009c98:	9308      	str	r3, [sp, #32]
 8009c9a:	bf1e      	ittt	ne
 8009c9c:	9b04      	ldrne	r3, [sp, #16]
 8009c9e:	3302      	addne	r3, #2
 8009ca0:	9304      	strne	r3, [sp, #16]
 8009ca2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8009ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca8:	d11f      	bne.n	8009cea <_vfiprintf_r+0x4e2>
 8009caa:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8009cae:	1a9c      	subs	r4, r3, r2
 8009cb0:	2c00      	cmp	r4, #0
 8009cb2:	dd1a      	ble.n	8009cea <_vfiprintf_r+0x4e2>
 8009cb4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009cb8:	48b9      	ldr	r0, [pc, #740]	; (8009fa0 <_vfiprintf_r+0x798>)
 8009cba:	6030      	str	r0, [r6, #0]
 8009cbc:	2c10      	cmp	r4, #16
 8009cbe:	f103 0301 	add.w	r3, r3, #1
 8009cc2:	f106 0108 	add.w	r1, r6, #8
 8009cc6:	f300 814d 	bgt.w	8009f64 <_vfiprintf_r+0x75c>
 8009cca:	6074      	str	r4, [r6, #4]
 8009ccc:	2b07      	cmp	r3, #7
 8009cce:	4414      	add	r4, r2
 8009cd0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8009cd4:	f340 8158 	ble.w	8009f88 <_vfiprintf_r+0x780>
 8009cd8:	aa0c      	add	r2, sp, #48	; 0x30
 8009cda:	4639      	mov	r1, r7
 8009cdc:	4648      	mov	r0, r9
 8009cde:	f7ff fd60 	bl	80097a2 <__sprint_r>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	f040 81b8 	bne.w	800a058 <_vfiprintf_r+0x850>
 8009ce8:	ae0f      	add	r6, sp, #60	; 0x3c
 8009cea:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8009cee:	b173      	cbz	r3, 8009d0e <_vfiprintf_r+0x506>
 8009cf0:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8009cf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cf6:	6032      	str	r2, [r6, #0]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	6072      	str	r2, [r6, #4]
 8009cfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cfe:	3301      	adds	r3, #1
 8009d00:	3201      	adds	r2, #1
 8009d02:	2b07      	cmp	r3, #7
 8009d04:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009d08:	f300 8140 	bgt.w	8009f8c <_vfiprintf_r+0x784>
 8009d0c:	3608      	adds	r6, #8
 8009d0e:	9b08      	ldr	r3, [sp, #32]
 8009d10:	b16b      	cbz	r3, 8009d2e <_vfiprintf_r+0x526>
 8009d12:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d16:	6032      	str	r2, [r6, #0]
 8009d18:	2202      	movs	r2, #2
 8009d1a:	6072      	str	r2, [r6, #4]
 8009d1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d1e:	3301      	adds	r3, #1
 8009d20:	3202      	adds	r2, #2
 8009d22:	2b07      	cmp	r3, #7
 8009d24:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009d28:	f300 8140 	bgt.w	8009fac <_vfiprintf_r+0x7a4>
 8009d2c:	3608      	adds	r6, #8
 8009d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d30:	2b80      	cmp	r3, #128	; 0x80
 8009d32:	d11f      	bne.n	8009d74 <_vfiprintf_r+0x56c>
 8009d34:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8009d38:	1a9c      	subs	r4, r3, r2
 8009d3a:	2c00      	cmp	r4, #0
 8009d3c:	dd1a      	ble.n	8009d74 <_vfiprintf_r+0x56c>
 8009d3e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009d42:	4898      	ldr	r0, [pc, #608]	; (8009fa4 <_vfiprintf_r+0x79c>)
 8009d44:	6030      	str	r0, [r6, #0]
 8009d46:	2c10      	cmp	r4, #16
 8009d48:	f103 0301 	add.w	r3, r3, #1
 8009d4c:	f106 0108 	add.w	r1, r6, #8
 8009d50:	f300 8135 	bgt.w	8009fbe <_vfiprintf_r+0x7b6>
 8009d54:	6074      	str	r4, [r6, #4]
 8009d56:	2b07      	cmp	r3, #7
 8009d58:	4414      	add	r4, r2
 8009d5a:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8009d5e:	f340 8140 	ble.w	8009fe2 <_vfiprintf_r+0x7da>
 8009d62:	aa0c      	add	r2, sp, #48	; 0x30
 8009d64:	4639      	mov	r1, r7
 8009d66:	4648      	mov	r0, r9
 8009d68:	f7ff fd1b 	bl	80097a2 <__sprint_r>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	f040 8173 	bne.w	800a058 <_vfiprintf_r+0x850>
 8009d72:	ae0f      	add	r6, sp, #60	; 0x3c
 8009d74:	9b00      	ldr	r3, [sp, #0]
 8009d76:	1aec      	subs	r4, r5, r3
 8009d78:	2c00      	cmp	r4, #0
 8009d7a:	dd1a      	ble.n	8009db2 <_vfiprintf_r+0x5aa>
 8009d7c:	4d89      	ldr	r5, [pc, #548]	; (8009fa4 <_vfiprintf_r+0x79c>)
 8009d7e:	6035      	str	r5, [r6, #0]
 8009d80:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 8009d84:	2c10      	cmp	r4, #16
 8009d86:	f103 0301 	add.w	r3, r3, #1
 8009d8a:	f106 0208 	add.w	r2, r6, #8
 8009d8e:	f300 812a 	bgt.w	8009fe6 <_vfiprintf_r+0x7de>
 8009d92:	6074      	str	r4, [r6, #4]
 8009d94:	2b07      	cmp	r3, #7
 8009d96:	440c      	add	r4, r1
 8009d98:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8009d9c:	f340 8134 	ble.w	800a008 <_vfiprintf_r+0x800>
 8009da0:	aa0c      	add	r2, sp, #48	; 0x30
 8009da2:	4639      	mov	r1, r7
 8009da4:	4648      	mov	r0, r9
 8009da6:	f7ff fcfc 	bl	80097a2 <__sprint_r>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	f040 8154 	bne.w	800a058 <_vfiprintf_r+0x850>
 8009db0:	ae0f      	add	r6, sp, #60	; 0x3c
 8009db2:	9b00      	ldr	r3, [sp, #0]
 8009db4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009db6:	6073      	str	r3, [r6, #4]
 8009db8:	4418      	add	r0, r3
 8009dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dbc:	f8c6 8000 	str.w	r8, [r6]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	2b07      	cmp	r3, #7
 8009dc4:	900e      	str	r0, [sp, #56]	; 0x38
 8009dc6:	930d      	str	r3, [sp, #52]	; 0x34
 8009dc8:	f300 8120 	bgt.w	800a00c <_vfiprintf_r+0x804>
 8009dcc:	f106 0308 	add.w	r3, r6, #8
 8009dd0:	f01a 0f04 	tst.w	sl, #4
 8009dd4:	f040 8122 	bne.w	800a01c <_vfiprintf_r+0x814>
 8009dd8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009ddc:	9904      	ldr	r1, [sp, #16]
 8009dde:	428a      	cmp	r2, r1
 8009de0:	bfac      	ite	ge
 8009de2:	189b      	addge	r3, r3, r2
 8009de4:	185b      	addlt	r3, r3, r1
 8009de6:	9302      	str	r3, [sp, #8]
 8009de8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dea:	b13b      	cbz	r3, 8009dfc <_vfiprintf_r+0x5f4>
 8009dec:	aa0c      	add	r2, sp, #48	; 0x30
 8009dee:	4639      	mov	r1, r7
 8009df0:	4648      	mov	r0, r9
 8009df2:	f7ff fcd6 	bl	80097a2 <__sprint_r>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	f040 812e 	bne.w	800a058 <_vfiprintf_r+0x850>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	930d      	str	r3, [sp, #52]	; 0x34
 8009e00:	465c      	mov	r4, fp
 8009e02:	ae0f      	add	r6, sp, #60	; 0x3c
 8009e04:	e564      	b.n	80098d0 <_vfiprintf_r+0xc8>
 8009e06:	4640      	mov	r0, r8
 8009e08:	f7f6 fa32 	bl	8000270 <strlen>
 8009e0c:	9000      	str	r0, [sp, #0]
 8009e0e:	e736      	b.n	8009c7e <_vfiprintf_r+0x476>
 8009e10:	f04a 0a10 	orr.w	sl, sl, #16
 8009e14:	f01a 0f20 	tst.w	sl, #32
 8009e18:	d006      	beq.n	8009e28 <_vfiprintf_r+0x620>
 8009e1a:	3407      	adds	r4, #7
 8009e1c:	f024 0b07 	bic.w	fp, r4, #7
 8009e20:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8009e24:	2301      	movs	r3, #1
 8009e26:	e6dd      	b.n	8009be4 <_vfiprintf_r+0x3dc>
 8009e28:	f01a 0f10 	tst.w	sl, #16
 8009e2c:	f104 0b04 	add.w	fp, r4, #4
 8009e30:	d001      	beq.n	8009e36 <_vfiprintf_r+0x62e>
 8009e32:	6824      	ldr	r4, [r4, #0]
 8009e34:	e003      	b.n	8009e3e <_vfiprintf_r+0x636>
 8009e36:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009e3a:	d002      	beq.n	8009e42 <_vfiprintf_r+0x63a>
 8009e3c:	8824      	ldrh	r4, [r4, #0]
 8009e3e:	2500      	movs	r5, #0
 8009e40:	e7f0      	b.n	8009e24 <_vfiprintf_r+0x61c>
 8009e42:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009e46:	d0f4      	beq.n	8009e32 <_vfiprintf_r+0x62a>
 8009e48:	7824      	ldrb	r4, [r4, #0]
 8009e4a:	e7f8      	b.n	8009e3e <_vfiprintf_r+0x636>
 8009e4c:	4a56      	ldr	r2, [pc, #344]	; (8009fa8 <_vfiprintf_r+0x7a0>)
 8009e4e:	e5d5      	b.n	80099fc <_vfiprintf_r+0x1f4>
 8009e50:	f01a 0f10 	tst.w	sl, #16
 8009e54:	f104 0b04 	add.w	fp, r4, #4
 8009e58:	d001      	beq.n	8009e5e <_vfiprintf_r+0x656>
 8009e5a:	6824      	ldr	r4, [r4, #0]
 8009e5c:	e003      	b.n	8009e66 <_vfiprintf_r+0x65e>
 8009e5e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009e62:	d002      	beq.n	8009e6a <_vfiprintf_r+0x662>
 8009e64:	8824      	ldrh	r4, [r4, #0]
 8009e66:	2500      	movs	r5, #0
 8009e68:	e5d2      	b.n	8009a10 <_vfiprintf_r+0x208>
 8009e6a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009e6e:	d0f4      	beq.n	8009e5a <_vfiprintf_r+0x652>
 8009e70:	7824      	ldrb	r4, [r4, #0]
 8009e72:	e7f8      	b.n	8009e66 <_vfiprintf_r+0x65e>
 8009e74:	2d00      	cmp	r5, #0
 8009e76:	bf08      	it	eq
 8009e78:	2c0a      	cmpeq	r4, #10
 8009e7a:	d205      	bcs.n	8009e88 <_vfiprintf_r+0x680>
 8009e7c:	3430      	adds	r4, #48	; 0x30
 8009e7e:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 8009e82:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 8009e86:	e13c      	b.n	800a102 <_vfiprintf_r+0x8fa>
 8009e88:	ab38      	add	r3, sp, #224	; 0xe0
 8009e8a:	9308      	str	r3, [sp, #32]
 8009e8c:	9b04      	ldr	r3, [sp, #16]
 8009e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e92:	f04f 0a00 	mov.w	sl, #0
 8009e96:	9309      	str	r3, [sp, #36]	; 0x24
 8009e98:	9b08      	ldr	r3, [sp, #32]
 8009e9a:	220a      	movs	r2, #10
 8009e9c:	f103 38ff 	add.w	r8, r3, #4294967295
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	f7f6 fecf 	bl	8000c48 <__aeabi_uldivmod>
 8009eaa:	9b08      	ldr	r3, [sp, #32]
 8009eac:	3230      	adds	r2, #48	; 0x30
 8009eae:	f803 2c01 	strb.w	r2, [r3, #-1]
 8009eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb4:	f10a 0a01 	add.w	sl, sl, #1
 8009eb8:	b1db      	cbz	r3, 8009ef2 <_vfiprintf_r+0x6ea>
 8009eba:	9b06      	ldr	r3, [sp, #24]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	4553      	cmp	r3, sl
 8009ec0:	d117      	bne.n	8009ef2 <_vfiprintf_r+0x6ea>
 8009ec2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8009ec6:	d014      	beq.n	8009ef2 <_vfiprintf_r+0x6ea>
 8009ec8:	2d00      	cmp	r5, #0
 8009eca:	bf08      	it	eq
 8009ecc:	2c0a      	cmpeq	r4, #10
 8009ece:	d310      	bcc.n	8009ef2 <_vfiprintf_r+0x6ea>
 8009ed0:	9b07      	ldr	r3, [sp, #28]
 8009ed2:	eba8 0803 	sub.w	r8, r8, r3
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	ee18 1a10 	vmov	r1, s16
 8009edc:	4640      	mov	r0, r8
 8009ede:	f7ff fc40 	bl	8009762 <strncpy>
 8009ee2:	9b06      	ldr	r3, [sp, #24]
 8009ee4:	785b      	ldrb	r3, [r3, #1]
 8009ee6:	b1a3      	cbz	r3, 8009f12 <_vfiprintf_r+0x70a>
 8009ee8:	9b06      	ldr	r3, [sp, #24]
 8009eea:	3301      	adds	r3, #1
 8009eec:	9306      	str	r3, [sp, #24]
 8009eee:	f04f 0a00 	mov.w	sl, #0
 8009ef2:	220a      	movs	r2, #10
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	4629      	mov	r1, r5
 8009efa:	f7f6 fea5 	bl	8000c48 <__aeabi_uldivmod>
 8009efe:	2d00      	cmp	r5, #0
 8009f00:	bf08      	it	eq
 8009f02:	2c0a      	cmpeq	r4, #10
 8009f04:	f0c0 80fd 	bcc.w	800a102 <_vfiprintf_r+0x8fa>
 8009f08:	4604      	mov	r4, r0
 8009f0a:	460d      	mov	r5, r1
 8009f0c:	f8cd 8020 	str.w	r8, [sp, #32]
 8009f10:	e7c2      	b.n	8009e98 <_vfiprintf_r+0x690>
 8009f12:	469a      	mov	sl, r3
 8009f14:	e7ed      	b.n	8009ef2 <_vfiprintf_r+0x6ea>
 8009f16:	9a05      	ldr	r2, [sp, #20]
 8009f18:	f004 030f 	and.w	r3, r4, #15
 8009f1c:	5cd3      	ldrb	r3, [r2, r3]
 8009f1e:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8009f22:	0923      	lsrs	r3, r4, #4
 8009f24:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8009f28:	092a      	lsrs	r2, r5, #4
 8009f2a:	461c      	mov	r4, r3
 8009f2c:	4615      	mov	r5, r2
 8009f2e:	ea54 0305 	orrs.w	r3, r4, r5
 8009f32:	d1f0      	bne.n	8009f16 <_vfiprintf_r+0x70e>
 8009f34:	e0e5      	b.n	800a102 <_vfiprintf_r+0x8fa>
 8009f36:	b933      	cbnz	r3, 8009f46 <_vfiprintf_r+0x73e>
 8009f38:	f01a 0f01 	tst.w	sl, #1
 8009f3c:	d003      	beq.n	8009f46 <_vfiprintf_r+0x73e>
 8009f3e:	2330      	movs	r3, #48	; 0x30
 8009f40:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8009f44:	e79d      	b.n	8009e82 <_vfiprintf_r+0x67a>
 8009f46:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8009f4a:	e0da      	b.n	800a102 <_vfiprintf_r+0x8fa>
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f000 80a4 	beq.w	800a09a <_vfiprintf_r+0x892>
 8009f52:	2100      	movs	r1, #0
 8009f54:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8009f58:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8009f5c:	46a3      	mov	fp, r4
 8009f5e:	e5e7      	b.n	8009b30 <_vfiprintf_r+0x328>
 8009f60:	4605      	mov	r5, r0
 8009f62:	e68c      	b.n	8009c7e <_vfiprintf_r+0x476>
 8009f64:	2010      	movs	r0, #16
 8009f66:	4402      	add	r2, r0
 8009f68:	2b07      	cmp	r3, #7
 8009f6a:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009f6e:	6070      	str	r0, [r6, #4]
 8009f70:	dd07      	ble.n	8009f82 <_vfiprintf_r+0x77a>
 8009f72:	aa0c      	add	r2, sp, #48	; 0x30
 8009f74:	4639      	mov	r1, r7
 8009f76:	4648      	mov	r0, r9
 8009f78:	f7ff fc13 	bl	80097a2 <__sprint_r>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d16b      	bne.n	800a058 <_vfiprintf_r+0x850>
 8009f80:	a90f      	add	r1, sp, #60	; 0x3c
 8009f82:	3c10      	subs	r4, #16
 8009f84:	460e      	mov	r6, r1
 8009f86:	e695      	b.n	8009cb4 <_vfiprintf_r+0x4ac>
 8009f88:	460e      	mov	r6, r1
 8009f8a:	e6ae      	b.n	8009cea <_vfiprintf_r+0x4e2>
 8009f8c:	aa0c      	add	r2, sp, #48	; 0x30
 8009f8e:	4639      	mov	r1, r7
 8009f90:	4648      	mov	r0, r9
 8009f92:	f7ff fc06 	bl	80097a2 <__sprint_r>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d15e      	bne.n	800a058 <_vfiprintf_r+0x850>
 8009f9a:	ae0f      	add	r6, sp, #60	; 0x3c
 8009f9c:	e6b7      	b.n	8009d0e <_vfiprintf_r+0x506>
 8009f9e:	bf00      	nop
 8009fa0:	0800af9c 	.word	0x0800af9c
 8009fa4:	0800afac 	.word	0x0800afac
 8009fa8:	0800ad8d 	.word	0x0800ad8d
 8009fac:	aa0c      	add	r2, sp, #48	; 0x30
 8009fae:	4639      	mov	r1, r7
 8009fb0:	4648      	mov	r0, r9
 8009fb2:	f7ff fbf6 	bl	80097a2 <__sprint_r>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d14e      	bne.n	800a058 <_vfiprintf_r+0x850>
 8009fba:	ae0f      	add	r6, sp, #60	; 0x3c
 8009fbc:	e6b7      	b.n	8009d2e <_vfiprintf_r+0x526>
 8009fbe:	2010      	movs	r0, #16
 8009fc0:	4402      	add	r2, r0
 8009fc2:	2b07      	cmp	r3, #7
 8009fc4:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009fc8:	6070      	str	r0, [r6, #4]
 8009fca:	dd07      	ble.n	8009fdc <_vfiprintf_r+0x7d4>
 8009fcc:	aa0c      	add	r2, sp, #48	; 0x30
 8009fce:	4639      	mov	r1, r7
 8009fd0:	4648      	mov	r0, r9
 8009fd2:	f7ff fbe6 	bl	80097a2 <__sprint_r>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d13e      	bne.n	800a058 <_vfiprintf_r+0x850>
 8009fda:	a90f      	add	r1, sp, #60	; 0x3c
 8009fdc:	3c10      	subs	r4, #16
 8009fde:	460e      	mov	r6, r1
 8009fe0:	e6ad      	b.n	8009d3e <_vfiprintf_r+0x536>
 8009fe2:	460e      	mov	r6, r1
 8009fe4:	e6c6      	b.n	8009d74 <_vfiprintf_r+0x56c>
 8009fe6:	2010      	movs	r0, #16
 8009fe8:	4401      	add	r1, r0
 8009fea:	2b07      	cmp	r3, #7
 8009fec:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009ff0:	6070      	str	r0, [r6, #4]
 8009ff2:	dd06      	ble.n	800a002 <_vfiprintf_r+0x7fa>
 8009ff4:	aa0c      	add	r2, sp, #48	; 0x30
 8009ff6:	4639      	mov	r1, r7
 8009ff8:	4648      	mov	r0, r9
 8009ffa:	f7ff fbd2 	bl	80097a2 <__sprint_r>
 8009ffe:	bb58      	cbnz	r0, 800a058 <_vfiprintf_r+0x850>
 800a000:	aa0f      	add	r2, sp, #60	; 0x3c
 800a002:	3c10      	subs	r4, #16
 800a004:	4616      	mov	r6, r2
 800a006:	e6ba      	b.n	8009d7e <_vfiprintf_r+0x576>
 800a008:	4616      	mov	r6, r2
 800a00a:	e6d2      	b.n	8009db2 <_vfiprintf_r+0x5aa>
 800a00c:	aa0c      	add	r2, sp, #48	; 0x30
 800a00e:	4639      	mov	r1, r7
 800a010:	4648      	mov	r0, r9
 800a012:	f7ff fbc6 	bl	80097a2 <__sprint_r>
 800a016:	b9f8      	cbnz	r0, 800a058 <_vfiprintf_r+0x850>
 800a018:	ab0f      	add	r3, sp, #60	; 0x3c
 800a01a:	e6d9      	b.n	8009dd0 <_vfiprintf_r+0x5c8>
 800a01c:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800a020:	1a54      	subs	r4, r2, r1
 800a022:	2c00      	cmp	r4, #0
 800a024:	f77f aed8 	ble.w	8009dd8 <_vfiprintf_r+0x5d0>
 800a028:	4d3a      	ldr	r5, [pc, #232]	; (800a114 <_vfiprintf_r+0x90c>)
 800a02a:	2610      	movs	r6, #16
 800a02c:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800a030:	2c10      	cmp	r4, #16
 800a032:	f102 0201 	add.w	r2, r2, #1
 800a036:	601d      	str	r5, [r3, #0]
 800a038:	dc1d      	bgt.n	800a076 <_vfiprintf_r+0x86e>
 800a03a:	605c      	str	r4, [r3, #4]
 800a03c:	2a07      	cmp	r2, #7
 800a03e:	440c      	add	r4, r1
 800a040:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800a044:	f77f aec8 	ble.w	8009dd8 <_vfiprintf_r+0x5d0>
 800a048:	aa0c      	add	r2, sp, #48	; 0x30
 800a04a:	4639      	mov	r1, r7
 800a04c:	4648      	mov	r0, r9
 800a04e:	f7ff fba8 	bl	80097a2 <__sprint_r>
 800a052:	2800      	cmp	r0, #0
 800a054:	f43f aec0 	beq.w	8009dd8 <_vfiprintf_r+0x5d0>
 800a058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a05a:	07d9      	lsls	r1, r3, #31
 800a05c:	d405      	bmi.n	800a06a <_vfiprintf_r+0x862>
 800a05e:	89bb      	ldrh	r3, [r7, #12]
 800a060:	059a      	lsls	r2, r3, #22
 800a062:	d402      	bmi.n	800a06a <_vfiprintf_r+0x862>
 800a064:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a066:	f7fe fcf8 	bl	8008a5a <__retarget_lock_release_recursive>
 800a06a:	89bb      	ldrh	r3, [r7, #12]
 800a06c:	065b      	lsls	r3, r3, #25
 800a06e:	f57f abfe 	bpl.w	800986e <_vfiprintf_r+0x66>
 800a072:	f7ff bbf9 	b.w	8009868 <_vfiprintf_r+0x60>
 800a076:	3110      	adds	r1, #16
 800a078:	2a07      	cmp	r2, #7
 800a07a:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 800a07e:	605e      	str	r6, [r3, #4]
 800a080:	dc02      	bgt.n	800a088 <_vfiprintf_r+0x880>
 800a082:	3308      	adds	r3, #8
 800a084:	3c10      	subs	r4, #16
 800a086:	e7d1      	b.n	800a02c <_vfiprintf_r+0x824>
 800a088:	aa0c      	add	r2, sp, #48	; 0x30
 800a08a:	4639      	mov	r1, r7
 800a08c:	4648      	mov	r0, r9
 800a08e:	f7ff fb88 	bl	80097a2 <__sprint_r>
 800a092:	2800      	cmp	r0, #0
 800a094:	d1e0      	bne.n	800a058 <_vfiprintf_r+0x850>
 800a096:	ab0f      	add	r3, sp, #60	; 0x3c
 800a098:	e7f4      	b.n	800a084 <_vfiprintf_r+0x87c>
 800a09a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a09c:	b913      	cbnz	r3, 800a0a4 <_vfiprintf_r+0x89c>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	930d      	str	r3, [sp, #52]	; 0x34
 800a0a2:	e7d9      	b.n	800a058 <_vfiprintf_r+0x850>
 800a0a4:	aa0c      	add	r2, sp, #48	; 0x30
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	4648      	mov	r0, r9
 800a0aa:	f7ff fb7a 	bl	80097a2 <__sprint_r>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d0f5      	beq.n	800a09e <_vfiprintf_r+0x896>
 800a0b2:	e7d1      	b.n	800a058 <_vfiprintf_r+0x850>
 800a0b4:	ea54 0205 	orrs.w	r2, r4, r5
 800a0b8:	f8cd a010 	str.w	sl, [sp, #16]
 800a0bc:	f43f ada4 	beq.w	8009c08 <_vfiprintf_r+0x400>
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	f43f aed7 	beq.w	8009e74 <_vfiprintf_r+0x66c>
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800a0cc:	f43f af23 	beq.w	8009f16 <_vfiprintf_r+0x70e>
 800a0d0:	08e2      	lsrs	r2, r4, #3
 800a0d2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800a0d6:	08e8      	lsrs	r0, r5, #3
 800a0d8:	f004 0307 	and.w	r3, r4, #7
 800a0dc:	4605      	mov	r5, r0
 800a0de:	4614      	mov	r4, r2
 800a0e0:	3330      	adds	r3, #48	; 0x30
 800a0e2:	ea54 0205 	orrs.w	r2, r4, r5
 800a0e6:	4641      	mov	r1, r8
 800a0e8:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800a0ec:	d1f0      	bne.n	800a0d0 <_vfiprintf_r+0x8c8>
 800a0ee:	9a04      	ldr	r2, [sp, #16]
 800a0f0:	07d0      	lsls	r0, r2, #31
 800a0f2:	d506      	bpl.n	800a102 <_vfiprintf_r+0x8fa>
 800a0f4:	2b30      	cmp	r3, #48	; 0x30
 800a0f6:	d004      	beq.n	800a102 <_vfiprintf_r+0x8fa>
 800a0f8:	2330      	movs	r3, #48	; 0x30
 800a0fa:	f808 3c01 	strb.w	r3, [r8, #-1]
 800a0fe:	f1a1 0802 	sub.w	r8, r1, #2
 800a102:	ab38      	add	r3, sp, #224	; 0xe0
 800a104:	eba3 0308 	sub.w	r3, r3, r8
 800a108:	9d00      	ldr	r5, [sp, #0]
 800a10a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	e5b5      	b.n	8009c7e <_vfiprintf_r+0x476>
 800a112:	bf00      	nop
 800a114:	0800af9c 	.word	0x0800af9c

0800a118 <__sbprintf>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	460c      	mov	r4, r1
 800a11c:	8989      	ldrh	r1, [r1, #12]
 800a11e:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800a122:	f021 0102 	bic.w	r1, r1, #2
 800a126:	f8ad 1014 	strh.w	r1, [sp, #20]
 800a12a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a12c:	911b      	str	r1, [sp, #108]	; 0x6c
 800a12e:	89e1      	ldrh	r1, [r4, #14]
 800a130:	f8ad 1016 	strh.w	r1, [sp, #22]
 800a134:	69e1      	ldr	r1, [r4, #28]
 800a136:	9109      	str	r1, [sp, #36]	; 0x24
 800a138:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a13a:	910b      	str	r1, [sp, #44]	; 0x2c
 800a13c:	a91c      	add	r1, sp, #112	; 0x70
 800a13e:	9102      	str	r1, [sp, #8]
 800a140:	9106      	str	r1, [sp, #24]
 800a142:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a146:	4606      	mov	r6, r0
 800a148:	9104      	str	r1, [sp, #16]
 800a14a:	9107      	str	r1, [sp, #28]
 800a14c:	a818      	add	r0, sp, #96	; 0x60
 800a14e:	2100      	movs	r1, #0
 800a150:	e9cd 3200 	strd	r3, r2, [sp]
 800a154:	9108      	str	r1, [sp, #32]
 800a156:	f7fe fc7d 	bl	8008a54 <__retarget_lock_init_recursive>
 800a15a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a15e:	a902      	add	r1, sp, #8
 800a160:	4630      	mov	r0, r6
 800a162:	f7ff fb51 	bl	8009808 <_vfiprintf_r>
 800a166:	1e05      	subs	r5, r0, #0
 800a168:	db07      	blt.n	800a17a <__sbprintf+0x62>
 800a16a:	a902      	add	r1, sp, #8
 800a16c:	4630      	mov	r0, r6
 800a16e:	f7fe fa91 	bl	8008694 <_fflush_r>
 800a172:	2800      	cmp	r0, #0
 800a174:	bf18      	it	ne
 800a176:	f04f 35ff 	movne.w	r5, #4294967295
 800a17a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800a17e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800a180:	065b      	lsls	r3, r3, #25
 800a182:	bf42      	ittt	mi
 800a184:	89a3      	ldrhmi	r3, [r4, #12]
 800a186:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800a18a:	81a3      	strhmi	r3, [r4, #12]
 800a18c:	f7fe fc63 	bl	8008a56 <__retarget_lock_close_recursive>
 800a190:	4628      	mov	r0, r5
 800a192:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800a196:	bd70      	pop	{r4, r5, r6, pc}

0800a198 <_write_r>:
 800a198:	b538      	push	{r3, r4, r5, lr}
 800a19a:	4d07      	ldr	r5, [pc, #28]	; (800a1b8 <_write_r+0x20>)
 800a19c:	4604      	mov	r4, r0
 800a19e:	4608      	mov	r0, r1
 800a1a0:	4611      	mov	r1, r2
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	602a      	str	r2, [r5, #0]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	f7f7 fc0c 	bl	80019c4 <_write>
 800a1ac:	1c43      	adds	r3, r0, #1
 800a1ae:	d102      	bne.n	800a1b6 <_write_r+0x1e>
 800a1b0:	682b      	ldr	r3, [r5, #0]
 800a1b2:	b103      	cbz	r3, 800a1b6 <_write_r+0x1e>
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	bd38      	pop	{r3, r4, r5, pc}
 800a1b8:	20000bc0 	.word	0x20000bc0

0800a1bc <__register_exitproc>:
 800a1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1c0:	4d1c      	ldr	r5, [pc, #112]	; (800a234 <__register_exitproc+0x78>)
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	6828      	ldr	r0, [r5, #0]
 800a1c6:	4698      	mov	r8, r3
 800a1c8:	460f      	mov	r7, r1
 800a1ca:	4691      	mov	r9, r2
 800a1cc:	f7fe fc44 	bl	8008a58 <__retarget_lock_acquire_recursive>
 800a1d0:	4b19      	ldr	r3, [pc, #100]	; (800a238 <__register_exitproc+0x7c>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800a1d8:	4628      	mov	r0, r5
 800a1da:	b91c      	cbnz	r4, 800a1e4 <__register_exitproc+0x28>
 800a1dc:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800a1e0:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800a1e4:	6865      	ldr	r5, [r4, #4]
 800a1e6:	6800      	ldr	r0, [r0, #0]
 800a1e8:	2d1f      	cmp	r5, #31
 800a1ea:	dd05      	ble.n	800a1f8 <__register_exitproc+0x3c>
 800a1ec:	f7fe fc35 	bl	8008a5a <__retarget_lock_release_recursive>
 800a1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1f8:	b19e      	cbz	r6, 800a222 <__register_exitproc+0x66>
 800a1fa:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800a1fe:	2201      	movs	r2, #1
 800a200:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800a204:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800a208:	40aa      	lsls	r2, r5
 800a20a:	4313      	orrs	r3, r2
 800a20c:	2e02      	cmp	r6, #2
 800a20e:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800a212:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800a216:	bf02      	ittt	eq
 800a218:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800a21c:	431a      	orreq	r2, r3
 800a21e:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 800a222:	1c6b      	adds	r3, r5, #1
 800a224:	3502      	adds	r5, #2
 800a226:	6063      	str	r3, [r4, #4]
 800a228:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800a22c:	f7fe fc15 	bl	8008a5a <__retarget_lock_release_recursive>
 800a230:	2000      	movs	r0, #0
 800a232:	e7df      	b.n	800a1f4 <__register_exitproc+0x38>
 800a234:	20000448 	.word	0x20000448
 800a238:	0800ad68 	.word	0x0800ad68

0800a23c <__assert_func>:
 800a23c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a23e:	4614      	mov	r4, r2
 800a240:	461a      	mov	r2, r3
 800a242:	4b09      	ldr	r3, [pc, #36]	; (800a268 <__assert_func+0x2c>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4605      	mov	r5, r0
 800a248:	68d8      	ldr	r0, [r3, #12]
 800a24a:	b14c      	cbz	r4, 800a260 <__assert_func+0x24>
 800a24c:	4b07      	ldr	r3, [pc, #28]	; (800a26c <__assert_func+0x30>)
 800a24e:	9100      	str	r1, [sp, #0]
 800a250:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a254:	4906      	ldr	r1, [pc, #24]	; (800a270 <__assert_func+0x34>)
 800a256:	462b      	mov	r3, r5
 800a258:	f000 f8a4 	bl	800a3a4 <fiprintf>
 800a25c:	f000 fcf5 	bl	800ac4a <abort>
 800a260:	4b04      	ldr	r3, [pc, #16]	; (800a274 <__assert_func+0x38>)
 800a262:	461c      	mov	r4, r3
 800a264:	e7f3      	b.n	800a24e <__assert_func+0x12>
 800a266:	bf00      	nop
 800a268:	2000001c 	.word	0x2000001c
 800a26c:	0800afbc 	.word	0x0800afbc
 800a270:	0800afc9 	.word	0x0800afc9
 800a274:	0800aff7 	.word	0x0800aff7

0800a278 <_calloc_r>:
 800a278:	b510      	push	{r4, lr}
 800a27a:	4351      	muls	r1, r2
 800a27c:	f7fe fc5a 	bl	8008b34 <_malloc_r>
 800a280:	4604      	mov	r4, r0
 800a282:	b198      	cbz	r0, 800a2ac <_calloc_r+0x34>
 800a284:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a288:	f022 0203 	bic.w	r2, r2, #3
 800a28c:	3a04      	subs	r2, #4
 800a28e:	2a24      	cmp	r2, #36	; 0x24
 800a290:	d81b      	bhi.n	800a2ca <_calloc_r+0x52>
 800a292:	2a13      	cmp	r2, #19
 800a294:	d917      	bls.n	800a2c6 <_calloc_r+0x4e>
 800a296:	2100      	movs	r1, #0
 800a298:	2a1b      	cmp	r2, #27
 800a29a:	e9c0 1100 	strd	r1, r1, [r0]
 800a29e:	d807      	bhi.n	800a2b0 <_calloc_r+0x38>
 800a2a0:	f100 0308 	add.w	r3, r0, #8
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	e9c3 2200 	strd	r2, r2, [r3]
 800a2aa:	609a      	str	r2, [r3, #8]
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	bd10      	pop	{r4, pc}
 800a2b0:	2a24      	cmp	r2, #36	; 0x24
 800a2b2:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800a2b6:	bf11      	iteee	ne
 800a2b8:	f100 0310 	addne.w	r3, r0, #16
 800a2bc:	6101      	streq	r1, [r0, #16]
 800a2be:	f100 0318 	addeq.w	r3, r0, #24
 800a2c2:	6141      	streq	r1, [r0, #20]
 800a2c4:	e7ee      	b.n	800a2a4 <_calloc_r+0x2c>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	e7ec      	b.n	800a2a4 <_calloc_r+0x2c>
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	f7fb fff8 	bl	80062c0 <memset>
 800a2d0:	e7ec      	b.n	800a2ac <_calloc_r+0x34>
	...

0800a2d4 <_close_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4d06      	ldr	r5, [pc, #24]	; (800a2f0 <_close_r+0x1c>)
 800a2d8:	2300      	movs	r3, #0
 800a2da:	4604      	mov	r4, r0
 800a2dc:	4608      	mov	r0, r1
 800a2de:	602b      	str	r3, [r5, #0]
 800a2e0:	f7f7 fb92 	bl	8001a08 <_close>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	d102      	bne.n	800a2ee <_close_r+0x1a>
 800a2e8:	682b      	ldr	r3, [r5, #0]
 800a2ea:	b103      	cbz	r3, 800a2ee <_close_r+0x1a>
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	bd38      	pop	{r3, r4, r5, pc}
 800a2f0:	20000bc0 	.word	0x20000bc0

0800a2f4 <_fclose_r>:
 800a2f4:	b570      	push	{r4, r5, r6, lr}
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	460c      	mov	r4, r1
 800a2fa:	b911      	cbnz	r1, 800a302 <_fclose_r+0xe>
 800a2fc:	2500      	movs	r5, #0
 800a2fe:	4628      	mov	r0, r5
 800a300:	bd70      	pop	{r4, r5, r6, pc}
 800a302:	b118      	cbz	r0, 800a30c <_fclose_r+0x18>
 800a304:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a306:	b90b      	cbnz	r3, 800a30c <_fclose_r+0x18>
 800a308:	f7fe fa30 	bl	800876c <__sinit>
 800a30c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a30e:	07d8      	lsls	r0, r3, #31
 800a310:	d405      	bmi.n	800a31e <_fclose_r+0x2a>
 800a312:	89a3      	ldrh	r3, [r4, #12]
 800a314:	0599      	lsls	r1, r3, #22
 800a316:	d402      	bmi.n	800a31e <_fclose_r+0x2a>
 800a318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a31a:	f7fe fb9d 	bl	8008a58 <__retarget_lock_acquire_recursive>
 800a31e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a322:	b93b      	cbnz	r3, 800a334 <_fclose_r+0x40>
 800a324:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a326:	f015 0501 	ands.w	r5, r5, #1
 800a32a:	d1e7      	bne.n	800a2fc <_fclose_r+0x8>
 800a32c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a32e:	f7fe fb94 	bl	8008a5a <__retarget_lock_release_recursive>
 800a332:	e7e4      	b.n	800a2fe <_fclose_r+0xa>
 800a334:	4621      	mov	r1, r4
 800a336:	4630      	mov	r0, r6
 800a338:	f7fe f91e 	bl	8008578 <__sflush_r>
 800a33c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a33e:	4605      	mov	r5, r0
 800a340:	b133      	cbz	r3, 800a350 <_fclose_r+0x5c>
 800a342:	69e1      	ldr	r1, [r4, #28]
 800a344:	4630      	mov	r0, r6
 800a346:	4798      	blx	r3
 800a348:	2800      	cmp	r0, #0
 800a34a:	bfb8      	it	lt
 800a34c:	f04f 35ff 	movlt.w	r5, #4294967295
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	061a      	lsls	r2, r3, #24
 800a354:	d503      	bpl.n	800a35e <_fclose_r+0x6a>
 800a356:	6921      	ldr	r1, [r4, #16]
 800a358:	4630      	mov	r0, r6
 800a35a:	f7fe fa97 	bl	800888c <_free_r>
 800a35e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a360:	b141      	cbz	r1, 800a374 <_fclose_r+0x80>
 800a362:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a366:	4299      	cmp	r1, r3
 800a368:	d002      	beq.n	800a370 <_fclose_r+0x7c>
 800a36a:	4630      	mov	r0, r6
 800a36c:	f7fe fa8e 	bl	800888c <_free_r>
 800a370:	2300      	movs	r3, #0
 800a372:	6323      	str	r3, [r4, #48]	; 0x30
 800a374:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a376:	b121      	cbz	r1, 800a382 <_fclose_r+0x8e>
 800a378:	4630      	mov	r0, r6
 800a37a:	f7fe fa87 	bl	800888c <_free_r>
 800a37e:	2300      	movs	r3, #0
 800a380:	6463      	str	r3, [r4, #68]	; 0x44
 800a382:	f7fe f9db 	bl	800873c <__sfp_lock_acquire>
 800a386:	2300      	movs	r3, #0
 800a388:	81a3      	strh	r3, [r4, #12]
 800a38a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a38c:	07db      	lsls	r3, r3, #31
 800a38e:	d402      	bmi.n	800a396 <_fclose_r+0xa2>
 800a390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a392:	f7fe fb62 	bl	8008a5a <__retarget_lock_release_recursive>
 800a396:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a398:	f7fe fb5d 	bl	8008a56 <__retarget_lock_close_recursive>
 800a39c:	f7fe f9d4 	bl	8008748 <__sfp_lock_release>
 800a3a0:	e7ad      	b.n	800a2fe <_fclose_r+0xa>
	...

0800a3a4 <fiprintf>:
 800a3a4:	b40e      	push	{r1, r2, r3}
 800a3a6:	b503      	push	{r0, r1, lr}
 800a3a8:	4601      	mov	r1, r0
 800a3aa:	ab03      	add	r3, sp, #12
 800a3ac:	4805      	ldr	r0, [pc, #20]	; (800a3c4 <fiprintf+0x20>)
 800a3ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3b2:	6800      	ldr	r0, [r0, #0]
 800a3b4:	9301      	str	r3, [sp, #4]
 800a3b6:	f7ff fa27 	bl	8009808 <_vfiprintf_r>
 800a3ba:	b002      	add	sp, #8
 800a3bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3c0:	b003      	add	sp, #12
 800a3c2:	4770      	bx	lr
 800a3c4:	2000001c 	.word	0x2000001c

0800a3c8 <__fputwc>:
 800a3c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a3cc:	4680      	mov	r8, r0
 800a3ce:	460e      	mov	r6, r1
 800a3d0:	4615      	mov	r5, r2
 800a3d2:	f000 f9d1 	bl	800a778 <__locale_mb_cur_max>
 800a3d6:	2801      	cmp	r0, #1
 800a3d8:	d11c      	bne.n	800a414 <__fputwc+0x4c>
 800a3da:	1e73      	subs	r3, r6, #1
 800a3dc:	2bfe      	cmp	r3, #254	; 0xfe
 800a3de:	d819      	bhi.n	800a414 <__fputwc+0x4c>
 800a3e0:	f88d 6004 	strb.w	r6, [sp, #4]
 800a3e4:	4604      	mov	r4, r0
 800a3e6:	2700      	movs	r7, #0
 800a3e8:	f10d 0904 	add.w	r9, sp, #4
 800a3ec:	42a7      	cmp	r7, r4
 800a3ee:	d020      	beq.n	800a432 <__fputwc+0x6a>
 800a3f0:	68ab      	ldr	r3, [r5, #8]
 800a3f2:	f817 1009 	ldrb.w	r1, [r7, r9]
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	60ab      	str	r3, [r5, #8]
 800a3fc:	da04      	bge.n	800a408 <__fputwc+0x40>
 800a3fe:	69aa      	ldr	r2, [r5, #24]
 800a400:	4293      	cmp	r3, r2
 800a402:	db1a      	blt.n	800a43a <__fputwc+0x72>
 800a404:	290a      	cmp	r1, #10
 800a406:	d018      	beq.n	800a43a <__fputwc+0x72>
 800a408:	682b      	ldr	r3, [r5, #0]
 800a40a:	1c5a      	adds	r2, r3, #1
 800a40c:	602a      	str	r2, [r5, #0]
 800a40e:	7019      	strb	r1, [r3, #0]
 800a410:	3701      	adds	r7, #1
 800a412:	e7eb      	b.n	800a3ec <__fputwc+0x24>
 800a414:	4632      	mov	r2, r6
 800a416:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800a41a:	a901      	add	r1, sp, #4
 800a41c:	4640      	mov	r0, r8
 800a41e:	f000 fbf1 	bl	800ac04 <_wcrtomb_r>
 800a422:	1c42      	adds	r2, r0, #1
 800a424:	4604      	mov	r4, r0
 800a426:	d1de      	bne.n	800a3e6 <__fputwc+0x1e>
 800a428:	89ab      	ldrh	r3, [r5, #12]
 800a42a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a42e:	81ab      	strh	r3, [r5, #12]
 800a430:	4606      	mov	r6, r0
 800a432:	4630      	mov	r0, r6
 800a434:	b003      	add	sp, #12
 800a436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a43a:	462a      	mov	r2, r5
 800a43c:	4640      	mov	r0, r8
 800a43e:	f000 fb97 	bl	800ab70 <__swbuf_r>
 800a442:	1c43      	adds	r3, r0, #1
 800a444:	d1e4      	bne.n	800a410 <__fputwc+0x48>
 800a446:	4606      	mov	r6, r0
 800a448:	e7f3      	b.n	800a432 <__fputwc+0x6a>

0800a44a <_fputwc_r>:
 800a44a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800a44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a44e:	4614      	mov	r4, r2
 800a450:	07da      	lsls	r2, r3, #31
 800a452:	4605      	mov	r5, r0
 800a454:	d407      	bmi.n	800a466 <_fputwc_r+0x1c>
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	059b      	lsls	r3, r3, #22
 800a45a:	d404      	bmi.n	800a466 <_fputwc_r+0x1c>
 800a45c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a45e:	9101      	str	r1, [sp, #4]
 800a460:	f7fe fafa 	bl	8008a58 <__retarget_lock_acquire_recursive>
 800a464:	9901      	ldr	r1, [sp, #4]
 800a466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a46a:	0498      	lsls	r0, r3, #18
 800a46c:	d406      	bmi.n	800a47c <_fputwc_r+0x32>
 800a46e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a472:	81a3      	strh	r3, [r4, #12]
 800a474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a476:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a47a:	6663      	str	r3, [r4, #100]	; 0x64
 800a47c:	4622      	mov	r2, r4
 800a47e:	4628      	mov	r0, r5
 800a480:	f7ff ffa2 	bl	800a3c8 <__fputwc>
 800a484:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a486:	07da      	lsls	r2, r3, #31
 800a488:	4605      	mov	r5, r0
 800a48a:	d405      	bmi.n	800a498 <_fputwc_r+0x4e>
 800a48c:	89a3      	ldrh	r3, [r4, #12]
 800a48e:	059b      	lsls	r3, r3, #22
 800a490:	d402      	bmi.n	800a498 <_fputwc_r+0x4e>
 800a492:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a494:	f7fe fae1 	bl	8008a5a <__retarget_lock_release_recursive>
 800a498:	4628      	mov	r0, r5
 800a49a:	b003      	add	sp, #12
 800a49c:	bd30      	pop	{r4, r5, pc}
	...

0800a4a0 <_fstat_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4d07      	ldr	r5, [pc, #28]	; (800a4c0 <_fstat_r+0x20>)
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	4608      	mov	r0, r1
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	602b      	str	r3, [r5, #0]
 800a4ae:	f7f7 fab7 	bl	8001a20 <_fstat>
 800a4b2:	1c43      	adds	r3, r0, #1
 800a4b4:	d102      	bne.n	800a4bc <_fstat_r+0x1c>
 800a4b6:	682b      	ldr	r3, [r5, #0]
 800a4b8:	b103      	cbz	r3, 800a4bc <_fstat_r+0x1c>
 800a4ba:	6023      	str	r3, [r4, #0]
 800a4bc:	bd38      	pop	{r3, r4, r5, pc}
 800a4be:	bf00      	nop
 800a4c0:	20000bc0 	.word	0x20000bc0

0800a4c4 <__sfvwrite_r>:
 800a4c4:	6893      	ldr	r3, [r2, #8]
 800a4c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	460c      	mov	r4, r1
 800a4ce:	4690      	mov	r8, r2
 800a4d0:	b91b      	cbnz	r3, 800a4da <__sfvwrite_r+0x16>
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	b003      	add	sp, #12
 800a4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4da:	898b      	ldrh	r3, [r1, #12]
 800a4dc:	0718      	lsls	r0, r3, #28
 800a4de:	d550      	bpl.n	800a582 <__sfvwrite_r+0xbe>
 800a4e0:	690b      	ldr	r3, [r1, #16]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d04d      	beq.n	800a582 <__sfvwrite_r+0xbe>
 800a4e6:	89a3      	ldrh	r3, [r4, #12]
 800a4e8:	f8d8 7000 	ldr.w	r7, [r8]
 800a4ec:	f013 0902 	ands.w	r9, r3, #2
 800a4f0:	d16c      	bne.n	800a5cc <__sfvwrite_r+0x108>
 800a4f2:	f013 0301 	ands.w	r3, r3, #1
 800a4f6:	f000 809c 	beq.w	800a632 <__sfvwrite_r+0x16e>
 800a4fa:	4648      	mov	r0, r9
 800a4fc:	46ca      	mov	sl, r9
 800a4fe:	46cb      	mov	fp, r9
 800a500:	f1bb 0f00 	cmp.w	fp, #0
 800a504:	f000 8103 	beq.w	800a70e <__sfvwrite_r+0x24a>
 800a508:	b950      	cbnz	r0, 800a520 <__sfvwrite_r+0x5c>
 800a50a:	465a      	mov	r2, fp
 800a50c:	210a      	movs	r1, #10
 800a50e:	4650      	mov	r0, sl
 800a510:	f7f5 fe5e 	bl	80001d0 <memchr>
 800a514:	2800      	cmp	r0, #0
 800a516:	f000 80ff 	beq.w	800a718 <__sfvwrite_r+0x254>
 800a51a:	3001      	adds	r0, #1
 800a51c:	eba0 090a 	sub.w	r9, r0, sl
 800a520:	6820      	ldr	r0, [r4, #0]
 800a522:	6921      	ldr	r1, [r4, #16]
 800a524:	6963      	ldr	r3, [r4, #20]
 800a526:	45d9      	cmp	r9, fp
 800a528:	464a      	mov	r2, r9
 800a52a:	bf28      	it	cs
 800a52c:	465a      	movcs	r2, fp
 800a52e:	4288      	cmp	r0, r1
 800a530:	f240 80f5 	bls.w	800a71e <__sfvwrite_r+0x25a>
 800a534:	68a5      	ldr	r5, [r4, #8]
 800a536:	441d      	add	r5, r3
 800a538:	42aa      	cmp	r2, r5
 800a53a:	f340 80f0 	ble.w	800a71e <__sfvwrite_r+0x25a>
 800a53e:	4651      	mov	r1, sl
 800a540:	462a      	mov	r2, r5
 800a542:	f000 f943 	bl	800a7cc <memmove>
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	442b      	add	r3, r5
 800a54a:	6023      	str	r3, [r4, #0]
 800a54c:	4621      	mov	r1, r4
 800a54e:	4630      	mov	r0, r6
 800a550:	f7fe f8a0 	bl	8008694 <_fflush_r>
 800a554:	2800      	cmp	r0, #0
 800a556:	d167      	bne.n	800a628 <__sfvwrite_r+0x164>
 800a558:	ebb9 0905 	subs.w	r9, r9, r5
 800a55c:	f040 80f7 	bne.w	800a74e <__sfvwrite_r+0x28a>
 800a560:	4621      	mov	r1, r4
 800a562:	4630      	mov	r0, r6
 800a564:	f7fe f896 	bl	8008694 <_fflush_r>
 800a568:	2800      	cmp	r0, #0
 800a56a:	d15d      	bne.n	800a628 <__sfvwrite_r+0x164>
 800a56c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800a570:	44aa      	add	sl, r5
 800a572:	ebab 0b05 	sub.w	fp, fp, r5
 800a576:	1b55      	subs	r5, r2, r5
 800a578:	f8c8 5008 	str.w	r5, [r8, #8]
 800a57c:	2d00      	cmp	r5, #0
 800a57e:	d1bf      	bne.n	800a500 <__sfvwrite_r+0x3c>
 800a580:	e7a7      	b.n	800a4d2 <__sfvwrite_r+0xe>
 800a582:	4621      	mov	r1, r4
 800a584:	4630      	mov	r0, r6
 800a586:	f7fd f92d 	bl	80077e4 <__swsetup_r>
 800a58a:	2800      	cmp	r0, #0
 800a58c:	d0ab      	beq.n	800a4e6 <__sfvwrite_r+0x22>
 800a58e:	f04f 30ff 	mov.w	r0, #4294967295
 800a592:	e79f      	b.n	800a4d4 <__sfvwrite_r+0x10>
 800a594:	e9d7 b900 	ldrd	fp, r9, [r7]
 800a598:	3708      	adds	r7, #8
 800a59a:	f1b9 0f00 	cmp.w	r9, #0
 800a59e:	d0f9      	beq.n	800a594 <__sfvwrite_r+0xd0>
 800a5a0:	45d1      	cmp	r9, sl
 800a5a2:	464b      	mov	r3, r9
 800a5a4:	69e1      	ldr	r1, [r4, #28]
 800a5a6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a5a8:	bf28      	it	cs
 800a5aa:	4653      	movcs	r3, sl
 800a5ac:	465a      	mov	r2, fp
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	47a8      	blx	r5
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	dd38      	ble.n	800a628 <__sfvwrite_r+0x164>
 800a5b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5ba:	4483      	add	fp, r0
 800a5bc:	eba9 0900 	sub.w	r9, r9, r0
 800a5c0:	1a18      	subs	r0, r3, r0
 800a5c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	d1e7      	bne.n	800a59a <__sfvwrite_r+0xd6>
 800a5ca:	e782      	b.n	800a4d2 <__sfvwrite_r+0xe>
 800a5cc:	f04f 0b00 	mov.w	fp, #0
 800a5d0:	f8df a180 	ldr.w	sl, [pc, #384]	; 800a754 <__sfvwrite_r+0x290>
 800a5d4:	46d9      	mov	r9, fp
 800a5d6:	e7e0      	b.n	800a59a <__sfvwrite_r+0xd6>
 800a5d8:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800a5dc:	3708      	adds	r7, #8
 800a5de:	f1ba 0f00 	cmp.w	sl, #0
 800a5e2:	d0f9      	beq.n	800a5d8 <__sfvwrite_r+0x114>
 800a5e4:	89a3      	ldrh	r3, [r4, #12]
 800a5e6:	68a2      	ldr	r2, [r4, #8]
 800a5e8:	6820      	ldr	r0, [r4, #0]
 800a5ea:	0599      	lsls	r1, r3, #22
 800a5ec:	d563      	bpl.n	800a6b6 <__sfvwrite_r+0x1f2>
 800a5ee:	4552      	cmp	r2, sl
 800a5f0:	d836      	bhi.n	800a660 <__sfvwrite_r+0x19c>
 800a5f2:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800a5f6:	d033      	beq.n	800a660 <__sfvwrite_r+0x19c>
 800a5f8:	6921      	ldr	r1, [r4, #16]
 800a5fa:	6965      	ldr	r5, [r4, #20]
 800a5fc:	eba0 0b01 	sub.w	fp, r0, r1
 800a600:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a604:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a608:	f10b 0201 	add.w	r2, fp, #1
 800a60c:	106d      	asrs	r5, r5, #1
 800a60e:	4452      	add	r2, sl
 800a610:	4295      	cmp	r5, r2
 800a612:	bf38      	it	cc
 800a614:	4615      	movcc	r5, r2
 800a616:	055b      	lsls	r3, r3, #21
 800a618:	d53d      	bpl.n	800a696 <__sfvwrite_r+0x1d2>
 800a61a:	4629      	mov	r1, r5
 800a61c:	4630      	mov	r0, r6
 800a61e:	f7fe fa89 	bl	8008b34 <_malloc_r>
 800a622:	b948      	cbnz	r0, 800a638 <__sfvwrite_r+0x174>
 800a624:	230c      	movs	r3, #12
 800a626:	6033      	str	r3, [r6, #0]
 800a628:	89a3      	ldrh	r3, [r4, #12]
 800a62a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a62e:	81a3      	strh	r3, [r4, #12]
 800a630:	e7ad      	b.n	800a58e <__sfvwrite_r+0xca>
 800a632:	4699      	mov	r9, r3
 800a634:	469a      	mov	sl, r3
 800a636:	e7d2      	b.n	800a5de <__sfvwrite_r+0x11a>
 800a638:	465a      	mov	r2, fp
 800a63a:	6921      	ldr	r1, [r4, #16]
 800a63c:	9001      	str	r0, [sp, #4]
 800a63e:	f7fe fcbb 	bl	8008fb8 <memcpy>
 800a642:	89a2      	ldrh	r2, [r4, #12]
 800a644:	9b01      	ldr	r3, [sp, #4]
 800a646:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a64a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a64e:	81a2      	strh	r2, [r4, #12]
 800a650:	6123      	str	r3, [r4, #16]
 800a652:	6165      	str	r5, [r4, #20]
 800a654:	445b      	add	r3, fp
 800a656:	eba5 050b 	sub.w	r5, r5, fp
 800a65a:	6023      	str	r3, [r4, #0]
 800a65c:	4652      	mov	r2, sl
 800a65e:	60a5      	str	r5, [r4, #8]
 800a660:	4552      	cmp	r2, sl
 800a662:	bf28      	it	cs
 800a664:	4652      	movcs	r2, sl
 800a666:	6820      	ldr	r0, [r4, #0]
 800a668:	9201      	str	r2, [sp, #4]
 800a66a:	4649      	mov	r1, r9
 800a66c:	f000 f8ae 	bl	800a7cc <memmove>
 800a670:	68a3      	ldr	r3, [r4, #8]
 800a672:	9a01      	ldr	r2, [sp, #4]
 800a674:	1a9b      	subs	r3, r3, r2
 800a676:	60a3      	str	r3, [r4, #8]
 800a678:	6823      	ldr	r3, [r4, #0]
 800a67a:	441a      	add	r2, r3
 800a67c:	4655      	mov	r5, sl
 800a67e:	6022      	str	r2, [r4, #0]
 800a680:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800a684:	44a9      	add	r9, r5
 800a686:	ebaa 0a05 	sub.w	sl, sl, r5
 800a68a:	1b45      	subs	r5, r0, r5
 800a68c:	f8c8 5008 	str.w	r5, [r8, #8]
 800a690:	2d00      	cmp	r5, #0
 800a692:	d1a4      	bne.n	800a5de <__sfvwrite_r+0x11a>
 800a694:	e71d      	b.n	800a4d2 <__sfvwrite_r+0xe>
 800a696:	462a      	mov	r2, r5
 800a698:	4630      	mov	r0, r6
 800a69a:	f000 f8c3 	bl	800a824 <_realloc_r>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d1d5      	bne.n	800a650 <__sfvwrite_r+0x18c>
 800a6a4:	6921      	ldr	r1, [r4, #16]
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	f7fe f8f0 	bl	800888c <_free_r>
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6b2:	81a3      	strh	r3, [r4, #12]
 800a6b4:	e7b6      	b.n	800a624 <__sfvwrite_r+0x160>
 800a6b6:	6923      	ldr	r3, [r4, #16]
 800a6b8:	4283      	cmp	r3, r0
 800a6ba:	d302      	bcc.n	800a6c2 <__sfvwrite_r+0x1fe>
 800a6bc:	6961      	ldr	r1, [r4, #20]
 800a6be:	4551      	cmp	r1, sl
 800a6c0:	d915      	bls.n	800a6ee <__sfvwrite_r+0x22a>
 800a6c2:	4552      	cmp	r2, sl
 800a6c4:	bf28      	it	cs
 800a6c6:	4652      	movcs	r2, sl
 800a6c8:	4649      	mov	r1, r9
 800a6ca:	4615      	mov	r5, r2
 800a6cc:	f000 f87e 	bl	800a7cc <memmove>
 800a6d0:	68a3      	ldr	r3, [r4, #8]
 800a6d2:	6822      	ldr	r2, [r4, #0]
 800a6d4:	1b5b      	subs	r3, r3, r5
 800a6d6:	442a      	add	r2, r5
 800a6d8:	60a3      	str	r3, [r4, #8]
 800a6da:	6022      	str	r2, [r4, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d1cf      	bne.n	800a680 <__sfvwrite_r+0x1bc>
 800a6e0:	4621      	mov	r1, r4
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	f7fd ffd6 	bl	8008694 <_fflush_r>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	d0c9      	beq.n	800a680 <__sfvwrite_r+0x1bc>
 800a6ec:	e79c      	b.n	800a628 <__sfvwrite_r+0x164>
 800a6ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a6f2:	459a      	cmp	sl, r3
 800a6f4:	bf38      	it	cc
 800a6f6:	4653      	movcc	r3, sl
 800a6f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a6fa:	fb93 f3f1 	sdiv	r3, r3, r1
 800a6fe:	464a      	mov	r2, r9
 800a700:	434b      	muls	r3, r1
 800a702:	4630      	mov	r0, r6
 800a704:	69e1      	ldr	r1, [r4, #28]
 800a706:	47a8      	blx	r5
 800a708:	1e05      	subs	r5, r0, #0
 800a70a:	dcb9      	bgt.n	800a680 <__sfvwrite_r+0x1bc>
 800a70c:	e78c      	b.n	800a628 <__sfvwrite_r+0x164>
 800a70e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a712:	2000      	movs	r0, #0
 800a714:	3708      	adds	r7, #8
 800a716:	e6f3      	b.n	800a500 <__sfvwrite_r+0x3c>
 800a718:	f10b 0901 	add.w	r9, fp, #1
 800a71c:	e700      	b.n	800a520 <__sfvwrite_r+0x5c>
 800a71e:	4293      	cmp	r3, r2
 800a720:	dc08      	bgt.n	800a734 <__sfvwrite_r+0x270>
 800a722:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a724:	69e1      	ldr	r1, [r4, #28]
 800a726:	4652      	mov	r2, sl
 800a728:	4630      	mov	r0, r6
 800a72a:	47a8      	blx	r5
 800a72c:	1e05      	subs	r5, r0, #0
 800a72e:	f73f af13 	bgt.w	800a558 <__sfvwrite_r+0x94>
 800a732:	e779      	b.n	800a628 <__sfvwrite_r+0x164>
 800a734:	4651      	mov	r1, sl
 800a736:	9201      	str	r2, [sp, #4]
 800a738:	f000 f848 	bl	800a7cc <memmove>
 800a73c:	9a01      	ldr	r2, [sp, #4]
 800a73e:	68a3      	ldr	r3, [r4, #8]
 800a740:	1a9b      	subs	r3, r3, r2
 800a742:	60a3      	str	r3, [r4, #8]
 800a744:	6823      	ldr	r3, [r4, #0]
 800a746:	4413      	add	r3, r2
 800a748:	6023      	str	r3, [r4, #0]
 800a74a:	4615      	mov	r5, r2
 800a74c:	e704      	b.n	800a558 <__sfvwrite_r+0x94>
 800a74e:	2001      	movs	r0, #1
 800a750:	e70c      	b.n	800a56c <__sfvwrite_r+0xa8>
 800a752:	bf00      	nop
 800a754:	7ffffc00 	.word	0x7ffffc00

0800a758 <_isatty_r>:
 800a758:	b538      	push	{r3, r4, r5, lr}
 800a75a:	4d06      	ldr	r5, [pc, #24]	; (800a774 <_isatty_r+0x1c>)
 800a75c:	2300      	movs	r3, #0
 800a75e:	4604      	mov	r4, r0
 800a760:	4608      	mov	r0, r1
 800a762:	602b      	str	r3, [r5, #0]
 800a764:	f7f7 f96c 	bl	8001a40 <_isatty>
 800a768:	1c43      	adds	r3, r0, #1
 800a76a:	d102      	bne.n	800a772 <_isatty_r+0x1a>
 800a76c:	682b      	ldr	r3, [r5, #0]
 800a76e:	b103      	cbz	r3, 800a772 <_isatty_r+0x1a>
 800a770:	6023      	str	r3, [r4, #0]
 800a772:	bd38      	pop	{r3, r4, r5, pc}
 800a774:	20000bc0 	.word	0x20000bc0

0800a778 <__locale_mb_cur_max>:
 800a778:	4b01      	ldr	r3, [pc, #4]	; (800a780 <__locale_mb_cur_max+0x8>)
 800a77a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800a77e:	4770      	bx	lr
 800a780:	2000085c 	.word	0x2000085c

0800a784 <_lseek_r>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	4d07      	ldr	r5, [pc, #28]	; (800a7a4 <_lseek_r+0x20>)
 800a788:	4604      	mov	r4, r0
 800a78a:	4608      	mov	r0, r1
 800a78c:	4611      	mov	r1, r2
 800a78e:	2200      	movs	r2, #0
 800a790:	602a      	str	r2, [r5, #0]
 800a792:	461a      	mov	r2, r3
 800a794:	f7f7 f95f 	bl	8001a56 <_lseek>
 800a798:	1c43      	adds	r3, r0, #1
 800a79a:	d102      	bne.n	800a7a2 <_lseek_r+0x1e>
 800a79c:	682b      	ldr	r3, [r5, #0]
 800a79e:	b103      	cbz	r3, 800a7a2 <_lseek_r+0x1e>
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	20000bc0 	.word	0x20000bc0

0800a7a8 <__ascii_mbtowc>:
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	b901      	cbnz	r1, 800a7ae <__ascii_mbtowc+0x6>
 800a7ac:	a901      	add	r1, sp, #4
 800a7ae:	b142      	cbz	r2, 800a7c2 <__ascii_mbtowc+0x1a>
 800a7b0:	b14b      	cbz	r3, 800a7c6 <__ascii_mbtowc+0x1e>
 800a7b2:	7813      	ldrb	r3, [r2, #0]
 800a7b4:	600b      	str	r3, [r1, #0]
 800a7b6:	7812      	ldrb	r2, [r2, #0]
 800a7b8:	1e10      	subs	r0, r2, #0
 800a7ba:	bf18      	it	ne
 800a7bc:	2001      	movne	r0, #1
 800a7be:	b002      	add	sp, #8
 800a7c0:	4770      	bx	lr
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	e7fb      	b.n	800a7be <__ascii_mbtowc+0x16>
 800a7c6:	f06f 0001 	mvn.w	r0, #1
 800a7ca:	e7f8      	b.n	800a7be <__ascii_mbtowc+0x16>

0800a7cc <memmove>:
 800a7cc:	4288      	cmp	r0, r1
 800a7ce:	b510      	push	{r4, lr}
 800a7d0:	eb01 0402 	add.w	r4, r1, r2
 800a7d4:	d902      	bls.n	800a7dc <memmove+0x10>
 800a7d6:	4284      	cmp	r4, r0
 800a7d8:	4623      	mov	r3, r4
 800a7da:	d807      	bhi.n	800a7ec <memmove+0x20>
 800a7dc:	1e43      	subs	r3, r0, #1
 800a7de:	42a1      	cmp	r1, r4
 800a7e0:	d008      	beq.n	800a7f4 <memmove+0x28>
 800a7e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7ea:	e7f8      	b.n	800a7de <memmove+0x12>
 800a7ec:	4402      	add	r2, r0
 800a7ee:	4601      	mov	r1, r0
 800a7f0:	428a      	cmp	r2, r1
 800a7f2:	d100      	bne.n	800a7f6 <memmove+0x2a>
 800a7f4:	bd10      	pop	{r4, pc}
 800a7f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7fe:	e7f7      	b.n	800a7f0 <memmove+0x24>

0800a800 <_read_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	4d07      	ldr	r5, [pc, #28]	; (800a820 <_read_r+0x20>)
 800a804:	4604      	mov	r4, r0
 800a806:	4608      	mov	r0, r1
 800a808:	4611      	mov	r1, r2
 800a80a:	2200      	movs	r2, #0
 800a80c:	602a      	str	r2, [r5, #0]
 800a80e:	461a      	mov	r2, r3
 800a810:	f7f7 f8ba 	bl	8001988 <_read>
 800a814:	1c43      	adds	r3, r0, #1
 800a816:	d102      	bne.n	800a81e <_read_r+0x1e>
 800a818:	682b      	ldr	r3, [r5, #0]
 800a81a:	b103      	cbz	r3, 800a81e <_read_r+0x1e>
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	bd38      	pop	{r3, r4, r5, pc}
 800a820:	20000bc0 	.word	0x20000bc0

0800a824 <_realloc_r>:
 800a824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a828:	4681      	mov	r9, r0
 800a82a:	460c      	mov	r4, r1
 800a82c:	b929      	cbnz	r1, 800a83a <_realloc_r+0x16>
 800a82e:	4611      	mov	r1, r2
 800a830:	b003      	add	sp, #12
 800a832:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a836:	f7fe b97d 	b.w	8008b34 <_malloc_r>
 800a83a:	9201      	str	r2, [sp, #4]
 800a83c:	f7fe fbca 	bl	8008fd4 <__malloc_lock>
 800a840:	9a01      	ldr	r2, [sp, #4]
 800a842:	f102 080b 	add.w	r8, r2, #11
 800a846:	f1b8 0f16 	cmp.w	r8, #22
 800a84a:	d90b      	bls.n	800a864 <_realloc_r+0x40>
 800a84c:	f038 0807 	bics.w	r8, r8, #7
 800a850:	d50a      	bpl.n	800a868 <_realloc_r+0x44>
 800a852:	230c      	movs	r3, #12
 800a854:	f8c9 3000 	str.w	r3, [r9]
 800a858:	f04f 0b00 	mov.w	fp, #0
 800a85c:	4658      	mov	r0, fp
 800a85e:	b003      	add	sp, #12
 800a860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a864:	f04f 0810 	mov.w	r8, #16
 800a868:	4590      	cmp	r8, r2
 800a86a:	d3f2      	bcc.n	800a852 <_realloc_r+0x2e>
 800a86c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800a870:	f025 0603 	bic.w	r6, r5, #3
 800a874:	45b0      	cmp	r8, r6
 800a876:	f1a4 0a08 	sub.w	sl, r4, #8
 800a87a:	f340 8170 	ble.w	800ab5e <_realloc_r+0x33a>
 800a87e:	48a9      	ldr	r0, [pc, #676]	; (800ab24 <_realloc_r+0x300>)
 800a880:	9001      	str	r0, [sp, #4]
 800a882:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800a886:	eb0a 0306 	add.w	r3, sl, r6
 800a88a:	459c      	cmp	ip, r3
 800a88c:	6859      	ldr	r1, [r3, #4]
 800a88e:	d005      	beq.n	800a89c <_realloc_r+0x78>
 800a890:	f021 0001 	bic.w	r0, r1, #1
 800a894:	4418      	add	r0, r3
 800a896:	6840      	ldr	r0, [r0, #4]
 800a898:	07c7      	lsls	r7, r0, #31
 800a89a:	d427      	bmi.n	800a8ec <_realloc_r+0xc8>
 800a89c:	f021 0103 	bic.w	r1, r1, #3
 800a8a0:	459c      	cmp	ip, r3
 800a8a2:	eb06 0701 	add.w	r7, r6, r1
 800a8a6:	d119      	bne.n	800a8dc <_realloc_r+0xb8>
 800a8a8:	f108 0010 	add.w	r0, r8, #16
 800a8ac:	42b8      	cmp	r0, r7
 800a8ae:	dc1f      	bgt.n	800a8f0 <_realloc_r+0xcc>
 800a8b0:	eb0a 0308 	add.w	r3, sl, r8
 800a8b4:	9a01      	ldr	r2, [sp, #4]
 800a8b6:	eba7 0708 	sub.w	r7, r7, r8
 800a8ba:	f047 0701 	orr.w	r7, r7, #1
 800a8be:	6093      	str	r3, [r2, #8]
 800a8c0:	605f      	str	r7, [r3, #4]
 800a8c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a8c6:	f003 0301 	and.w	r3, r3, #1
 800a8ca:	ea43 0308 	orr.w	r3, r3, r8
 800a8ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8d2:	4648      	mov	r0, r9
 800a8d4:	f7fe fb84 	bl	8008fe0 <__malloc_unlock>
 800a8d8:	46a3      	mov	fp, r4
 800a8da:	e7bf      	b.n	800a85c <_realloc_r+0x38>
 800a8dc:	45b8      	cmp	r8, r7
 800a8de:	dc07      	bgt.n	800a8f0 <_realloc_r+0xcc>
 800a8e0:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a8e4:	60da      	str	r2, [r3, #12]
 800a8e6:	6093      	str	r3, [r2, #8]
 800a8e8:	4655      	mov	r5, sl
 800a8ea:	e07f      	b.n	800a9ec <_realloc_r+0x1c8>
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	07e8      	lsls	r0, r5, #31
 800a8f2:	f100 80e5 	bmi.w	800aac0 <_realloc_r+0x29c>
 800a8f6:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800a8fa:	ebaa 0505 	sub.w	r5, sl, r5
 800a8fe:	6868      	ldr	r0, [r5, #4]
 800a900:	f020 0003 	bic.w	r0, r0, #3
 800a904:	eb00 0b06 	add.w	fp, r0, r6
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f000 80a5 	beq.w	800aa58 <_realloc_r+0x234>
 800a90e:	459c      	cmp	ip, r3
 800a910:	eb01 070b 	add.w	r7, r1, fp
 800a914:	d14a      	bne.n	800a9ac <_realloc_r+0x188>
 800a916:	f108 0310 	add.w	r3, r8, #16
 800a91a:	42bb      	cmp	r3, r7
 800a91c:	f300 809c 	bgt.w	800aa58 <_realloc_r+0x234>
 800a920:	46ab      	mov	fp, r5
 800a922:	68eb      	ldr	r3, [r5, #12]
 800a924:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800a928:	60d3      	str	r3, [r2, #12]
 800a92a:	609a      	str	r2, [r3, #8]
 800a92c:	1f32      	subs	r2, r6, #4
 800a92e:	2a24      	cmp	r2, #36	; 0x24
 800a930:	d837      	bhi.n	800a9a2 <_realloc_r+0x17e>
 800a932:	2a13      	cmp	r2, #19
 800a934:	d933      	bls.n	800a99e <_realloc_r+0x17a>
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	60ab      	str	r3, [r5, #8]
 800a93a:	6863      	ldr	r3, [r4, #4]
 800a93c:	60eb      	str	r3, [r5, #12]
 800a93e:	2a1b      	cmp	r2, #27
 800a940:	d81b      	bhi.n	800a97a <_realloc_r+0x156>
 800a942:	3408      	adds	r4, #8
 800a944:	f105 0310 	add.w	r3, r5, #16
 800a948:	6822      	ldr	r2, [r4, #0]
 800a94a:	601a      	str	r2, [r3, #0]
 800a94c:	6862      	ldr	r2, [r4, #4]
 800a94e:	605a      	str	r2, [r3, #4]
 800a950:	68a2      	ldr	r2, [r4, #8]
 800a952:	609a      	str	r2, [r3, #8]
 800a954:	eb05 0308 	add.w	r3, r5, r8
 800a958:	9a01      	ldr	r2, [sp, #4]
 800a95a:	eba7 0708 	sub.w	r7, r7, r8
 800a95e:	f047 0701 	orr.w	r7, r7, #1
 800a962:	6093      	str	r3, [r2, #8]
 800a964:	605f      	str	r7, [r3, #4]
 800a966:	686b      	ldr	r3, [r5, #4]
 800a968:	f003 0301 	and.w	r3, r3, #1
 800a96c:	ea43 0308 	orr.w	r3, r3, r8
 800a970:	606b      	str	r3, [r5, #4]
 800a972:	4648      	mov	r0, r9
 800a974:	f7fe fb34 	bl	8008fe0 <__malloc_unlock>
 800a978:	e770      	b.n	800a85c <_realloc_r+0x38>
 800a97a:	68a3      	ldr	r3, [r4, #8]
 800a97c:	612b      	str	r3, [r5, #16]
 800a97e:	68e3      	ldr	r3, [r4, #12]
 800a980:	616b      	str	r3, [r5, #20]
 800a982:	2a24      	cmp	r2, #36	; 0x24
 800a984:	bf01      	itttt	eq
 800a986:	6923      	ldreq	r3, [r4, #16]
 800a988:	61ab      	streq	r3, [r5, #24]
 800a98a:	6962      	ldreq	r2, [r4, #20]
 800a98c:	61ea      	streq	r2, [r5, #28]
 800a98e:	bf19      	ittee	ne
 800a990:	3410      	addne	r4, #16
 800a992:	f105 0318 	addne.w	r3, r5, #24
 800a996:	f105 0320 	addeq.w	r3, r5, #32
 800a99a:	3418      	addeq	r4, #24
 800a99c:	e7d4      	b.n	800a948 <_realloc_r+0x124>
 800a99e:	465b      	mov	r3, fp
 800a9a0:	e7d2      	b.n	800a948 <_realloc_r+0x124>
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	4658      	mov	r0, fp
 800a9a6:	f7ff ff11 	bl	800a7cc <memmove>
 800a9aa:	e7d3      	b.n	800a954 <_realloc_r+0x130>
 800a9ac:	45b8      	cmp	r8, r7
 800a9ae:	dc53      	bgt.n	800aa58 <_realloc_r+0x234>
 800a9b0:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	60da      	str	r2, [r3, #12]
 800a9b8:	6093      	str	r3, [r2, #8]
 800a9ba:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a9be:	68eb      	ldr	r3, [r5, #12]
 800a9c0:	60d3      	str	r3, [r2, #12]
 800a9c2:	609a      	str	r2, [r3, #8]
 800a9c4:	1f32      	subs	r2, r6, #4
 800a9c6:	2a24      	cmp	r2, #36	; 0x24
 800a9c8:	d842      	bhi.n	800aa50 <_realloc_r+0x22c>
 800a9ca:	2a13      	cmp	r2, #19
 800a9cc:	d908      	bls.n	800a9e0 <_realloc_r+0x1bc>
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	60ab      	str	r3, [r5, #8]
 800a9d2:	6863      	ldr	r3, [r4, #4]
 800a9d4:	60eb      	str	r3, [r5, #12]
 800a9d6:	2a1b      	cmp	r2, #27
 800a9d8:	d828      	bhi.n	800aa2c <_realloc_r+0x208>
 800a9da:	3408      	adds	r4, #8
 800a9dc:	f105 0010 	add.w	r0, r5, #16
 800a9e0:	6823      	ldr	r3, [r4, #0]
 800a9e2:	6003      	str	r3, [r0, #0]
 800a9e4:	6863      	ldr	r3, [r4, #4]
 800a9e6:	6043      	str	r3, [r0, #4]
 800a9e8:	68a3      	ldr	r3, [r4, #8]
 800a9ea:	6083      	str	r3, [r0, #8]
 800a9ec:	686a      	ldr	r2, [r5, #4]
 800a9ee:	eba7 0008 	sub.w	r0, r7, r8
 800a9f2:	280f      	cmp	r0, #15
 800a9f4:	f002 0201 	and.w	r2, r2, #1
 800a9f8:	eb05 0307 	add.w	r3, r5, r7
 800a9fc:	f240 80b1 	bls.w	800ab62 <_realloc_r+0x33e>
 800aa00:	eb05 0108 	add.w	r1, r5, r8
 800aa04:	ea48 0202 	orr.w	r2, r8, r2
 800aa08:	f040 0001 	orr.w	r0, r0, #1
 800aa0c:	606a      	str	r2, [r5, #4]
 800aa0e:	6048      	str	r0, [r1, #4]
 800aa10:	685a      	ldr	r2, [r3, #4]
 800aa12:	f042 0201 	orr.w	r2, r2, #1
 800aa16:	605a      	str	r2, [r3, #4]
 800aa18:	3108      	adds	r1, #8
 800aa1a:	4648      	mov	r0, r9
 800aa1c:	f7fd ff36 	bl	800888c <_free_r>
 800aa20:	4648      	mov	r0, r9
 800aa22:	f7fe fadd 	bl	8008fe0 <__malloc_unlock>
 800aa26:	f105 0b08 	add.w	fp, r5, #8
 800aa2a:	e717      	b.n	800a85c <_realloc_r+0x38>
 800aa2c:	68a3      	ldr	r3, [r4, #8]
 800aa2e:	612b      	str	r3, [r5, #16]
 800aa30:	68e3      	ldr	r3, [r4, #12]
 800aa32:	616b      	str	r3, [r5, #20]
 800aa34:	2a24      	cmp	r2, #36	; 0x24
 800aa36:	bf01      	itttt	eq
 800aa38:	6923      	ldreq	r3, [r4, #16]
 800aa3a:	61ab      	streq	r3, [r5, #24]
 800aa3c:	6963      	ldreq	r3, [r4, #20]
 800aa3e:	61eb      	streq	r3, [r5, #28]
 800aa40:	bf19      	ittee	ne
 800aa42:	3410      	addne	r4, #16
 800aa44:	f105 0018 	addne.w	r0, r5, #24
 800aa48:	f105 0020 	addeq.w	r0, r5, #32
 800aa4c:	3418      	addeq	r4, #24
 800aa4e:	e7c7      	b.n	800a9e0 <_realloc_r+0x1bc>
 800aa50:	4621      	mov	r1, r4
 800aa52:	f7ff febb 	bl	800a7cc <memmove>
 800aa56:	e7c9      	b.n	800a9ec <_realloc_r+0x1c8>
 800aa58:	45d8      	cmp	r8, fp
 800aa5a:	dc31      	bgt.n	800aac0 <_realloc_r+0x29c>
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	68eb      	ldr	r3, [r5, #12]
 800aa60:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800aa64:	60d3      	str	r3, [r2, #12]
 800aa66:	609a      	str	r2, [r3, #8]
 800aa68:	1f32      	subs	r2, r6, #4
 800aa6a:	2a24      	cmp	r2, #36	; 0x24
 800aa6c:	d824      	bhi.n	800aab8 <_realloc_r+0x294>
 800aa6e:	2a13      	cmp	r2, #19
 800aa70:	d908      	bls.n	800aa84 <_realloc_r+0x260>
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	60ab      	str	r3, [r5, #8]
 800aa76:	6863      	ldr	r3, [r4, #4]
 800aa78:	60eb      	str	r3, [r5, #12]
 800aa7a:	2a1b      	cmp	r2, #27
 800aa7c:	d80a      	bhi.n	800aa94 <_realloc_r+0x270>
 800aa7e:	3408      	adds	r4, #8
 800aa80:	f105 0010 	add.w	r0, r5, #16
 800aa84:	6823      	ldr	r3, [r4, #0]
 800aa86:	6003      	str	r3, [r0, #0]
 800aa88:	6863      	ldr	r3, [r4, #4]
 800aa8a:	6043      	str	r3, [r0, #4]
 800aa8c:	68a3      	ldr	r3, [r4, #8]
 800aa8e:	6083      	str	r3, [r0, #8]
 800aa90:	465f      	mov	r7, fp
 800aa92:	e7ab      	b.n	800a9ec <_realloc_r+0x1c8>
 800aa94:	68a3      	ldr	r3, [r4, #8]
 800aa96:	612b      	str	r3, [r5, #16]
 800aa98:	68e3      	ldr	r3, [r4, #12]
 800aa9a:	616b      	str	r3, [r5, #20]
 800aa9c:	2a24      	cmp	r2, #36	; 0x24
 800aa9e:	bf01      	itttt	eq
 800aaa0:	6923      	ldreq	r3, [r4, #16]
 800aaa2:	61ab      	streq	r3, [r5, #24]
 800aaa4:	6963      	ldreq	r3, [r4, #20]
 800aaa6:	61eb      	streq	r3, [r5, #28]
 800aaa8:	bf19      	ittee	ne
 800aaaa:	3410      	addne	r4, #16
 800aaac:	f105 0018 	addne.w	r0, r5, #24
 800aab0:	f105 0020 	addeq.w	r0, r5, #32
 800aab4:	3418      	addeq	r4, #24
 800aab6:	e7e5      	b.n	800aa84 <_realloc_r+0x260>
 800aab8:	4621      	mov	r1, r4
 800aaba:	f7ff fe87 	bl	800a7cc <memmove>
 800aabe:	e7e7      	b.n	800aa90 <_realloc_r+0x26c>
 800aac0:	4611      	mov	r1, r2
 800aac2:	4648      	mov	r0, r9
 800aac4:	f7fe f836 	bl	8008b34 <_malloc_r>
 800aac8:	4683      	mov	fp, r0
 800aaca:	2800      	cmp	r0, #0
 800aacc:	f43f af51 	beq.w	800a972 <_realloc_r+0x14e>
 800aad0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800aad4:	f023 0301 	bic.w	r3, r3, #1
 800aad8:	4453      	add	r3, sl
 800aada:	f1a0 0208 	sub.w	r2, r0, #8
 800aade:	4293      	cmp	r3, r2
 800aae0:	d105      	bne.n	800aaee <_realloc_r+0x2ca>
 800aae2:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800aae6:	f027 0703 	bic.w	r7, r7, #3
 800aaea:	4437      	add	r7, r6
 800aaec:	e6fc      	b.n	800a8e8 <_realloc_r+0xc4>
 800aaee:	1f32      	subs	r2, r6, #4
 800aaf0:	2a24      	cmp	r2, #36	; 0x24
 800aaf2:	d830      	bhi.n	800ab56 <_realloc_r+0x332>
 800aaf4:	2a13      	cmp	r2, #19
 800aaf6:	d92b      	bls.n	800ab50 <_realloc_r+0x32c>
 800aaf8:	6823      	ldr	r3, [r4, #0]
 800aafa:	6003      	str	r3, [r0, #0]
 800aafc:	6863      	ldr	r3, [r4, #4]
 800aafe:	6043      	str	r3, [r0, #4]
 800ab00:	2a1b      	cmp	r2, #27
 800ab02:	d811      	bhi.n	800ab28 <_realloc_r+0x304>
 800ab04:	f104 0208 	add.w	r2, r4, #8
 800ab08:	f100 0308 	add.w	r3, r0, #8
 800ab0c:	6811      	ldr	r1, [r2, #0]
 800ab0e:	6019      	str	r1, [r3, #0]
 800ab10:	6851      	ldr	r1, [r2, #4]
 800ab12:	6059      	str	r1, [r3, #4]
 800ab14:	6892      	ldr	r2, [r2, #8]
 800ab16:	609a      	str	r2, [r3, #8]
 800ab18:	4621      	mov	r1, r4
 800ab1a:	4648      	mov	r0, r9
 800ab1c:	f7fd feb6 	bl	800888c <_free_r>
 800ab20:	e727      	b.n	800a972 <_realloc_r+0x14e>
 800ab22:	bf00      	nop
 800ab24:	2000044c 	.word	0x2000044c
 800ab28:	68a3      	ldr	r3, [r4, #8]
 800ab2a:	6083      	str	r3, [r0, #8]
 800ab2c:	68e3      	ldr	r3, [r4, #12]
 800ab2e:	60c3      	str	r3, [r0, #12]
 800ab30:	2a24      	cmp	r2, #36	; 0x24
 800ab32:	bf01      	itttt	eq
 800ab34:	6923      	ldreq	r3, [r4, #16]
 800ab36:	6103      	streq	r3, [r0, #16]
 800ab38:	6961      	ldreq	r1, [r4, #20]
 800ab3a:	6141      	streq	r1, [r0, #20]
 800ab3c:	bf19      	ittee	ne
 800ab3e:	f104 0210 	addne.w	r2, r4, #16
 800ab42:	f100 0310 	addne.w	r3, r0, #16
 800ab46:	f104 0218 	addeq.w	r2, r4, #24
 800ab4a:	f100 0318 	addeq.w	r3, r0, #24
 800ab4e:	e7dd      	b.n	800ab0c <_realloc_r+0x2e8>
 800ab50:	4603      	mov	r3, r0
 800ab52:	4622      	mov	r2, r4
 800ab54:	e7da      	b.n	800ab0c <_realloc_r+0x2e8>
 800ab56:	4621      	mov	r1, r4
 800ab58:	f7ff fe38 	bl	800a7cc <memmove>
 800ab5c:	e7dc      	b.n	800ab18 <_realloc_r+0x2f4>
 800ab5e:	4637      	mov	r7, r6
 800ab60:	e6c2      	b.n	800a8e8 <_realloc_r+0xc4>
 800ab62:	4317      	orrs	r7, r2
 800ab64:	606f      	str	r7, [r5, #4]
 800ab66:	685a      	ldr	r2, [r3, #4]
 800ab68:	f042 0201 	orr.w	r2, r2, #1
 800ab6c:	605a      	str	r2, [r3, #4]
 800ab6e:	e757      	b.n	800aa20 <_realloc_r+0x1fc>

0800ab70 <__swbuf_r>:
 800ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab72:	460e      	mov	r6, r1
 800ab74:	4614      	mov	r4, r2
 800ab76:	4605      	mov	r5, r0
 800ab78:	b118      	cbz	r0, 800ab82 <__swbuf_r+0x12>
 800ab7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ab7c:	b90b      	cbnz	r3, 800ab82 <__swbuf_r+0x12>
 800ab7e:	f7fd fdf5 	bl	800876c <__sinit>
 800ab82:	69a3      	ldr	r3, [r4, #24]
 800ab84:	60a3      	str	r3, [r4, #8]
 800ab86:	89a3      	ldrh	r3, [r4, #12]
 800ab88:	0719      	lsls	r1, r3, #28
 800ab8a:	d529      	bpl.n	800abe0 <__swbuf_r+0x70>
 800ab8c:	6923      	ldr	r3, [r4, #16]
 800ab8e:	b33b      	cbz	r3, 800abe0 <__swbuf_r+0x70>
 800ab90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab94:	b2f6      	uxtb	r6, r6
 800ab96:	049a      	lsls	r2, r3, #18
 800ab98:	4637      	mov	r7, r6
 800ab9a:	d52a      	bpl.n	800abf2 <__swbuf_r+0x82>
 800ab9c:	6823      	ldr	r3, [r4, #0]
 800ab9e:	6920      	ldr	r0, [r4, #16]
 800aba0:	1a18      	subs	r0, r3, r0
 800aba2:	6963      	ldr	r3, [r4, #20]
 800aba4:	4283      	cmp	r3, r0
 800aba6:	dc04      	bgt.n	800abb2 <__swbuf_r+0x42>
 800aba8:	4621      	mov	r1, r4
 800abaa:	4628      	mov	r0, r5
 800abac:	f7fd fd72 	bl	8008694 <_fflush_r>
 800abb0:	b9e0      	cbnz	r0, 800abec <__swbuf_r+0x7c>
 800abb2:	68a3      	ldr	r3, [r4, #8]
 800abb4:	3b01      	subs	r3, #1
 800abb6:	60a3      	str	r3, [r4, #8]
 800abb8:	6823      	ldr	r3, [r4, #0]
 800abba:	1c5a      	adds	r2, r3, #1
 800abbc:	6022      	str	r2, [r4, #0]
 800abbe:	701e      	strb	r6, [r3, #0]
 800abc0:	6962      	ldr	r2, [r4, #20]
 800abc2:	1c43      	adds	r3, r0, #1
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d004      	beq.n	800abd2 <__swbuf_r+0x62>
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	07db      	lsls	r3, r3, #31
 800abcc:	d506      	bpl.n	800abdc <__swbuf_r+0x6c>
 800abce:	2e0a      	cmp	r6, #10
 800abd0:	d104      	bne.n	800abdc <__swbuf_r+0x6c>
 800abd2:	4621      	mov	r1, r4
 800abd4:	4628      	mov	r0, r5
 800abd6:	f7fd fd5d 	bl	8008694 <_fflush_r>
 800abda:	b938      	cbnz	r0, 800abec <__swbuf_r+0x7c>
 800abdc:	4638      	mov	r0, r7
 800abde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abe0:	4621      	mov	r1, r4
 800abe2:	4628      	mov	r0, r5
 800abe4:	f7fc fdfe 	bl	80077e4 <__swsetup_r>
 800abe8:	2800      	cmp	r0, #0
 800abea:	d0d1      	beq.n	800ab90 <__swbuf_r+0x20>
 800abec:	f04f 37ff 	mov.w	r7, #4294967295
 800abf0:	e7f4      	b.n	800abdc <__swbuf_r+0x6c>
 800abf2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800abf6:	81a3      	strh	r3, [r4, #12]
 800abf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abfe:	6663      	str	r3, [r4, #100]	; 0x64
 800ac00:	e7cc      	b.n	800ab9c <__swbuf_r+0x2c>
	...

0800ac04 <_wcrtomb_r>:
 800ac04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac06:	4c09      	ldr	r4, [pc, #36]	; (800ac2c <_wcrtomb_r+0x28>)
 800ac08:	b085      	sub	sp, #20
 800ac0a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800ac0e:	4605      	mov	r5, r0
 800ac10:	461e      	mov	r6, r3
 800ac12:	b909      	cbnz	r1, 800ac18 <_wcrtomb_r+0x14>
 800ac14:	460a      	mov	r2, r1
 800ac16:	a901      	add	r1, sp, #4
 800ac18:	47b8      	blx	r7
 800ac1a:	1c43      	adds	r3, r0, #1
 800ac1c:	bf01      	itttt	eq
 800ac1e:	2300      	moveq	r3, #0
 800ac20:	6033      	streq	r3, [r6, #0]
 800ac22:	238a      	moveq	r3, #138	; 0x8a
 800ac24:	602b      	streq	r3, [r5, #0]
 800ac26:	b005      	add	sp, #20
 800ac28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	2000085c 	.word	0x2000085c

0800ac30 <__ascii_wctomb>:
 800ac30:	b149      	cbz	r1, 800ac46 <__ascii_wctomb+0x16>
 800ac32:	2aff      	cmp	r2, #255	; 0xff
 800ac34:	bf85      	ittet	hi
 800ac36:	238a      	movhi	r3, #138	; 0x8a
 800ac38:	6003      	strhi	r3, [r0, #0]
 800ac3a:	700a      	strbls	r2, [r1, #0]
 800ac3c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac40:	bf98      	it	ls
 800ac42:	2001      	movls	r0, #1
 800ac44:	4770      	bx	lr
 800ac46:	4608      	mov	r0, r1
 800ac48:	4770      	bx	lr

0800ac4a <abort>:
 800ac4a:	b508      	push	{r3, lr}
 800ac4c:	2006      	movs	r0, #6
 800ac4e:	f000 f82d 	bl	800acac <raise>
 800ac52:	2001      	movs	r0, #1
 800ac54:	f7f6 fe8e 	bl	8001974 <_exit>

0800ac58 <_raise_r>:
 800ac58:	291f      	cmp	r1, #31
 800ac5a:	b538      	push	{r3, r4, r5, lr}
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	460d      	mov	r5, r1
 800ac60:	d904      	bls.n	800ac6c <_raise_r+0x14>
 800ac62:	2316      	movs	r3, #22
 800ac64:	6003      	str	r3, [r0, #0]
 800ac66:	f04f 30ff 	mov.w	r0, #4294967295
 800ac6a:	bd38      	pop	{r3, r4, r5, pc}
 800ac6c:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800ac70:	b112      	cbz	r2, 800ac78 <_raise_r+0x20>
 800ac72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac76:	b94b      	cbnz	r3, 800ac8c <_raise_r+0x34>
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f000 f831 	bl	800ace0 <_getpid_r>
 800ac7e:	462a      	mov	r2, r5
 800ac80:	4601      	mov	r1, r0
 800ac82:	4620      	mov	r0, r4
 800ac84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac88:	f000 b818 	b.w	800acbc <_kill_r>
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d00a      	beq.n	800aca6 <_raise_r+0x4e>
 800ac90:	1c59      	adds	r1, r3, #1
 800ac92:	d103      	bne.n	800ac9c <_raise_r+0x44>
 800ac94:	2316      	movs	r3, #22
 800ac96:	6003      	str	r3, [r0, #0]
 800ac98:	2001      	movs	r0, #1
 800ac9a:	e7e6      	b.n	800ac6a <_raise_r+0x12>
 800ac9c:	2400      	movs	r4, #0
 800ac9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aca2:	4628      	mov	r0, r5
 800aca4:	4798      	blx	r3
 800aca6:	2000      	movs	r0, #0
 800aca8:	e7df      	b.n	800ac6a <_raise_r+0x12>
	...

0800acac <raise>:
 800acac:	4b02      	ldr	r3, [pc, #8]	; (800acb8 <raise+0xc>)
 800acae:	4601      	mov	r1, r0
 800acb0:	6818      	ldr	r0, [r3, #0]
 800acb2:	f7ff bfd1 	b.w	800ac58 <_raise_r>
 800acb6:	bf00      	nop
 800acb8:	2000001c 	.word	0x2000001c

0800acbc <_kill_r>:
 800acbc:	b538      	push	{r3, r4, r5, lr}
 800acbe:	4d07      	ldr	r5, [pc, #28]	; (800acdc <_kill_r+0x20>)
 800acc0:	2300      	movs	r3, #0
 800acc2:	4604      	mov	r4, r0
 800acc4:	4608      	mov	r0, r1
 800acc6:	4611      	mov	r1, r2
 800acc8:	602b      	str	r3, [r5, #0]
 800acca:	f7f6 fe43 	bl	8001954 <_kill>
 800acce:	1c43      	adds	r3, r0, #1
 800acd0:	d102      	bne.n	800acd8 <_kill_r+0x1c>
 800acd2:	682b      	ldr	r3, [r5, #0]
 800acd4:	b103      	cbz	r3, 800acd8 <_kill_r+0x1c>
 800acd6:	6023      	str	r3, [r4, #0]
 800acd8:	bd38      	pop	{r3, r4, r5, pc}
 800acda:	bf00      	nop
 800acdc:	20000bc0 	.word	0x20000bc0

0800ace0 <_getpid_r>:
 800ace0:	f7f6 be30 	b.w	8001944 <_getpid>

0800ace4 <_init>:
 800ace4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace6:	bf00      	nop
 800ace8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acea:	bc08      	pop	{r3}
 800acec:	469e      	mov	lr, r3
 800acee:	4770      	bx	lr

0800acf0 <_fini>:
 800acf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf2:	bf00      	nop
 800acf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acf6:	bc08      	pop	{r3}
 800acf8:	469e      	mov	lr, r3
 800acfa:	4770      	bx	lr
